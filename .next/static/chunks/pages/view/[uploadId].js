/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/view/[uploadId]"],{

/***/ "./node_modules/buffer-crc32/index.js":
/*!********************************************!*\
  !*** ./node_modules/buffer-crc32/index.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Buffer = (__webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\").Buffer);\n\nvar CRC_TABLE = [\n  0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,\n  0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,\n  0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,\n  0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,\n  0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,\n  0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n  0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,\n  0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n  0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,\n  0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,\n  0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,\n  0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n  0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,\n  0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,\n  0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,\n  0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n  0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,\n  0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n  0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,\n  0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,\n  0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,\n  0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,\n  0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,\n  0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n  0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,\n  0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,\n  0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,\n  0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,\n  0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,\n  0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n  0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,\n  0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n  0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,\n  0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,\n  0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,\n  0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n  0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,\n  0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,\n  0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,\n  0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n  0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,\n  0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,\n  0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,\n  0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,\n  0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,\n  0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,\n  0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,\n  0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n  0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,\n  0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,\n  0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,\n  0x2d02ef8d\n];\n\nif (typeof Int32Array !== 'undefined') {\n  CRC_TABLE = new Int32Array(CRC_TABLE);\n}\n\nfunction ensureBuffer(input) {\n  if (Buffer.isBuffer(input)) {\n    return input;\n  }\n\n  var hasNewBufferAPI =\n      typeof Buffer.alloc === \"function\" &&\n      typeof Buffer.from === \"function\";\n\n  if (typeof input === \"number\") {\n    return hasNewBufferAPI ? Buffer.alloc(input) : new Buffer(input);\n  }\n  else if (typeof input === \"string\") {\n    return hasNewBufferAPI ? Buffer.from(input) : new Buffer(input);\n  }\n  else {\n    throw new Error(\"input must be buffer, number, or string, received \" +\n                    typeof input);\n  }\n}\n\nfunction bufferizeInt(num) {\n  var tmp = ensureBuffer(4);\n  tmp.writeInt32BE(num, 0);\n  return tmp;\n}\n\nfunction _crc32(buf, previous) {\n  buf = ensureBuffer(buf);\n  if (Buffer.isBuffer(previous)) {\n    previous = previous.readUInt32BE(0);\n  }\n  var crc = ~~previous ^ -1;\n  for (var n = 0; n < buf.length; n++) {\n    crc = CRC_TABLE[(crc ^ buf[n]) & 0xff] ^ (crc >>> 8);\n  }\n  return (crc ^ -1);\n}\n\nfunction crc32() {\n  return bufferizeInt(_crc32.apply(null, arguments));\n}\ncrc32.signed = function () {\n  return _crc32.apply(null, arguments);\n};\ncrc32.unsigned = function () {\n  return _crc32.apply(null, arguments) >>> 0;\n};\n\nmodule.exports = crc32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYnVmZmVyLWNyYzMyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsK0ZBQXdCOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci1jcmMzMi9pbmRleC5qcz84YTNmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbnZhciBDUkNfVEFCTEUgPSBbXG4gIDB4MDAwMDAwMDAsIDB4NzcwNzMwOTYsIDB4ZWUwZTYxMmMsIDB4OTkwOTUxYmEsIDB4MDc2ZGM0MTksXG4gIDB4NzA2YWY0OGYsIDB4ZTk2M2E1MzUsIDB4OWU2NDk1YTMsIDB4MGVkYjg4MzIsIDB4NzlkY2I4YTQsXG4gIDB4ZTBkNWU5MWUsIDB4OTdkMmQ5ODgsIDB4MDliNjRjMmIsIDB4N2ViMTdjYmQsIDB4ZTdiODJkMDcsXG4gIDB4OTBiZjFkOTEsIDB4MWRiNzEwNjQsIDB4NmFiMDIwZjIsIDB4ZjNiOTcxNDgsIDB4ODRiZTQxZGUsXG4gIDB4MWFkYWQ0N2QsIDB4NmRkZGU0ZWIsIDB4ZjRkNGI1NTEsIDB4ODNkMzg1YzcsIDB4MTM2Yzk4NTYsXG4gIDB4NjQ2YmE4YzAsIDB4ZmQ2MmY5N2EsIDB4OGE2NWM5ZWMsIDB4MTQwMTVjNGYsIDB4NjMwNjZjZDksXG4gIDB4ZmEwZjNkNjMsIDB4OGQwODBkZjUsIDB4M2I2ZTIwYzgsIDB4NGM2OTEwNWUsIDB4ZDU2MDQxZTQsXG4gIDB4YTI2NzcxNzIsIDB4M2MwM2U0ZDEsIDB4NGIwNGQ0NDcsIDB4ZDIwZDg1ZmQsIDB4YTUwYWI1NmIsXG4gIDB4MzViNWE4ZmEsIDB4NDJiMjk4NmMsIDB4ZGJiYmM5ZDYsIDB4YWNiY2Y5NDAsIDB4MzJkODZjZTMsXG4gIDB4NDVkZjVjNzUsIDB4ZGNkNjBkY2YsIDB4YWJkMTNkNTksIDB4MjZkOTMwYWMsIDB4NTFkZTAwM2EsXG4gIDB4YzhkNzUxODAsIDB4YmZkMDYxMTYsIDB4MjFiNGY0YjUsIDB4NTZiM2M0MjMsIDB4Y2ZiYTk1OTksXG4gIDB4YjhiZGE1MGYsIDB4MjgwMmI4OWUsIDB4NWYwNTg4MDgsIDB4YzYwY2Q5YjIsIDB4YjEwYmU5MjQsXG4gIDB4MmY2ZjdjODcsIDB4NTg2ODRjMTEsIDB4YzE2MTFkYWIsIDB4YjY2NjJkM2QsIDB4NzZkYzQxOTAsXG4gIDB4MDFkYjcxMDYsIDB4OThkMjIwYmMsIDB4ZWZkNTEwMmEsIDB4NzFiMTg1ODksIDB4MDZiNmI1MWYsXG4gIDB4OWZiZmU0YTUsIDB4ZThiOGQ0MzMsIDB4NzgwN2M5YTIsIDB4MGYwMGY5MzQsIDB4OTYwOWE4OGUsXG4gIDB4ZTEwZTk4MTgsIDB4N2Y2YTBkYmIsIDB4MDg2ZDNkMmQsIDB4OTE2NDZjOTcsIDB4ZTY2MzVjMDEsXG4gIDB4NmI2YjUxZjQsIDB4MWM2YzYxNjIsIDB4ODU2NTMwZDgsIDB4ZjI2MjAwNGUsIDB4NmMwNjk1ZWQsXG4gIDB4MWIwMWE1N2IsIDB4ODIwOGY0YzEsIDB4ZjUwZmM0NTcsIDB4NjViMGQ5YzYsIDB4MTJiN2U5NTAsXG4gIDB4OGJiZWI4ZWEsIDB4ZmNiOTg4N2MsIDB4NjJkZDFkZGYsIDB4MTVkYTJkNDksIDB4OGNkMzdjZjMsXG4gIDB4ZmJkNDRjNjUsIDB4NGRiMjYxNTgsIDB4M2FiNTUxY2UsIDB4YTNiYzAwNzQsIDB4ZDRiYjMwZTIsXG4gIDB4NGFkZmE1NDEsIDB4M2RkODk1ZDcsIDB4YTRkMWM0NmQsIDB4ZDNkNmY0ZmIsIDB4NDM2OWU5NmEsXG4gIDB4MzQ2ZWQ5ZmMsIDB4YWQ2Nzg4NDYsIDB4ZGE2MGI4ZDAsIDB4NDQwNDJkNzMsIDB4MzMwMzFkZTUsXG4gIDB4YWEwYTRjNWYsIDB4ZGQwZDdjYzksIDB4NTAwNTcxM2MsIDB4MjcwMjQxYWEsIDB4YmUwYjEwMTAsXG4gIDB4YzkwYzIwODYsIDB4NTc2OGI1MjUsIDB4MjA2Zjg1YjMsIDB4Yjk2NmQ0MDksIDB4Y2U2MWU0OWYsXG4gIDB4NWVkZWY5MGUsIDB4MjlkOWM5OTgsIDB4YjBkMDk4MjIsIDB4YzdkN2E4YjQsIDB4NTliMzNkMTcsXG4gIDB4MmViNDBkODEsIDB4YjdiZDVjM2IsIDB4YzBiYTZjYWQsIDB4ZWRiODgzMjAsIDB4OWFiZmIzYjYsXG4gIDB4MDNiNmUyMGMsIDB4NzRiMWQyOWEsIDB4ZWFkNTQ3MzksIDB4OWRkMjc3YWYsIDB4MDRkYjI2MTUsXG4gIDB4NzNkYzE2ODMsIDB4ZTM2MzBiMTIsIDB4OTQ2NDNiODQsIDB4MGQ2ZDZhM2UsIDB4N2E2YTVhYTgsXG4gIDB4ZTQwZWNmMGIsIDB4OTMwOWZmOWQsIDB4MGEwMGFlMjcsIDB4N2QwNzllYjEsIDB4ZjAwZjkzNDQsXG4gIDB4ODcwOGEzZDIsIDB4MWUwMWYyNjgsIDB4NjkwNmMyZmUsIDB4Zjc2MjU3NWQsIDB4ODA2NTY3Y2IsXG4gIDB4MTk2YzM2NzEsIDB4NmU2YjA2ZTcsIDB4ZmVkNDFiNzYsIDB4ODlkMzJiZTAsIDB4MTBkYTdhNWEsXG4gIDB4NjdkZDRhY2MsIDB4ZjliOWRmNmYsIDB4OGViZWVmZjksIDB4MTdiN2JlNDMsIDB4NjBiMDhlZDUsXG4gIDB4ZDZkNmEzZTgsIDB4YTFkMTkzN2UsIDB4MzhkOGMyYzQsIDB4NGZkZmYyNTIsIDB4ZDFiYjY3ZjEsXG4gIDB4YTZiYzU3NjcsIDB4M2ZiNTA2ZGQsIDB4NDhiMjM2NGIsIDB4ZDgwZDJiZGEsIDB4YWYwYTFiNGMsXG4gIDB4MzYwMzRhZjYsIDB4NDEwNDdhNjAsIDB4ZGY2MGVmYzMsIDB4YTg2N2RmNTUsIDB4MzE2ZThlZWYsXG4gIDB4NDY2OWJlNzksIDB4Y2I2MWIzOGMsIDB4YmM2NjgzMWEsIDB4MjU2ZmQyYTAsIDB4NTI2OGUyMzYsXG4gIDB4Y2MwYzc3OTUsIDB4YmIwYjQ3MDMsIDB4MjIwMjE2YjksIDB4NTUwNTI2MmYsIDB4YzViYTNiYmUsXG4gIDB4YjJiZDBiMjgsIDB4MmJiNDVhOTIsIDB4NWNiMzZhMDQsIDB4YzJkN2ZmYTcsIDB4YjVkMGNmMzEsXG4gIDB4MmNkOTllOGIsIDB4NWJkZWFlMWQsIDB4OWI2NGMyYjAsIDB4ZWM2M2YyMjYsIDB4NzU2YWEzOWMsXG4gIDB4MDI2ZDkzMGEsIDB4OWMwOTA2YTksIDB4ZWIwZTM2M2YsIDB4NzIwNzY3ODUsIDB4MDUwMDU3MTMsXG4gIDB4OTViZjRhODIsIDB4ZTJiODdhMTQsIDB4N2JiMTJiYWUsIDB4MGNiNjFiMzgsIDB4OTJkMjhlOWIsXG4gIDB4ZTVkNWJlMGQsIDB4N2NkY2VmYjcsIDB4MGJkYmRmMjEsIDB4ODZkM2QyZDQsIDB4ZjFkNGUyNDIsXG4gIDB4NjhkZGIzZjgsIDB4MWZkYTgzNmUsIDB4ODFiZTE2Y2QsIDB4ZjZiOTI2NWIsIDB4NmZiMDc3ZTEsXG4gIDB4MThiNzQ3NzcsIDB4ODgwODVhZTYsIDB4ZmYwZjZhNzAsIDB4NjYwNjNiY2EsIDB4MTEwMTBiNWMsXG4gIDB4OGY2NTllZmYsIDB4Zjg2MmFlNjksIDB4NjE2YmZmZDMsIDB4MTY2Y2NmNDUsIDB4YTAwYWUyNzgsXG4gIDB4ZDcwZGQyZWUsIDB4NGUwNDgzNTQsIDB4MzkwM2IzYzIsIDB4YTc2NzI2NjEsIDB4ZDA2MDE2ZjcsXG4gIDB4NDk2OTQ3NGQsIDB4M2U2ZTc3ZGIsIDB4YWVkMTZhNGEsIDB4ZDlkNjVhZGMsIDB4NDBkZjBiNjYsXG4gIDB4MzdkODNiZjAsIDB4YTliY2FlNTMsIDB4ZGViYjllYzUsIDB4NDdiMmNmN2YsIDB4MzBiNWZmZTksXG4gIDB4YmRiZGYyMWMsIDB4Y2FiYWMyOGEsIDB4NTNiMzkzMzAsIDB4MjRiNGEzYTYsIDB4YmFkMDM2MDUsXG4gIDB4Y2RkNzA2OTMsIDB4NTRkZTU3MjksIDB4MjNkOTY3YmYsIDB4YjM2NjdhMmUsIDB4YzQ2MTRhYjgsXG4gIDB4NWQ2ODFiMDIsIDB4MmE2ZjJiOTQsIDB4YjQwYmJlMzcsIDB4YzMwYzhlYTEsIDB4NWEwNWRmMWIsXG4gIDB4MmQwMmVmOGRcbl07XG5cbmlmICh0eXBlb2YgSW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgQ1JDX1RBQkxFID0gbmV3IEludDMyQXJyYXkoQ1JDX1RBQkxFKTtcbn1cblxuZnVuY3Rpb24gZW5zdXJlQnVmZmVyKGlucHV0KSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoaW5wdXQpKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG5cbiAgdmFyIGhhc05ld0J1ZmZlckFQSSA9XG4gICAgICB0eXBlb2YgQnVmZmVyLmFsbG9jID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgIHR5cGVvZiBCdWZmZXIuZnJvbSA9PT0gXCJmdW5jdGlvblwiO1xuXG4gIGlmICh0eXBlb2YgaW5wdXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gaGFzTmV3QnVmZmVyQVBJID8gQnVmZmVyLmFsbG9jKGlucHV0KSA6IG5ldyBCdWZmZXIoaW5wdXQpO1xuICB9XG4gIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBoYXNOZXdCdWZmZXJBUEkgPyBCdWZmZXIuZnJvbShpbnB1dCkgOiBuZXcgQnVmZmVyKGlucHV0KTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnB1dCBtdXN0IGJlIGJ1ZmZlciwgbnVtYmVyLCBvciBzdHJpbmcsIHJlY2VpdmVkIFwiICtcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGlucHV0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBidWZmZXJpemVJbnQobnVtKSB7XG4gIHZhciB0bXAgPSBlbnN1cmVCdWZmZXIoNCk7XG4gIHRtcC53cml0ZUludDMyQkUobnVtLCAwKTtcbiAgcmV0dXJuIHRtcDtcbn1cblxuZnVuY3Rpb24gX2NyYzMyKGJ1ZiwgcHJldmlvdXMpIHtcbiAgYnVmID0gZW5zdXJlQnVmZmVyKGJ1Zik7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIocHJldmlvdXMpKSB7XG4gICAgcHJldmlvdXMgPSBwcmV2aW91cy5yZWFkVUludDMyQkUoMCk7XG4gIH1cbiAgdmFyIGNyYyA9IH5+cHJldmlvdXMgXiAtMTtcbiAgZm9yICh2YXIgbiA9IDA7IG4gPCBidWYubGVuZ3RoOyBuKyspIHtcbiAgICBjcmMgPSBDUkNfVEFCTEVbKGNyYyBeIGJ1ZltuXSkgJiAweGZmXSBeIChjcmMgPj4+IDgpO1xuICB9XG4gIHJldHVybiAoY3JjIF4gLTEpO1xufVxuXG5mdW5jdGlvbiBjcmMzMigpIHtcbiAgcmV0dXJuIGJ1ZmZlcml6ZUludChfY3JjMzIuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG59XG5jcmMzMi5zaWduZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JjMzIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn07XG5jcmMzMi51bnNpZ25lZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmMzMi5hcHBseShudWxsLCBhcmd1bWVudHMpID4+PiAwO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmMzMjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/buffer-crc32/index.js\n"));

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/fxp.js":
/*!*************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/fxp.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nconst validator = __webpack_require__(/*! ./validator */ \"./node_modules/fast-xml-parser/src/validator.js\");\nconst XMLParser = __webpack_require__(/*! ./xmlparser/XMLParser */ \"./node_modules/fast-xml-parser/src/xmlparser/XMLParser.js\");\nconst XMLBuilder = __webpack_require__(/*! ./xmlbuilder/json2xml */ \"./node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js\");\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy9meHAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCLG1CQUFPLENBQUMsb0VBQWE7QUFDdkMsa0JBQWtCLG1CQUFPLENBQUMsd0ZBQXVCO0FBQ2pELG1CQUFtQixtQkFBTyxDQUFDLHdGQUF1Qjs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy9meHAuanM/YzNlOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHZhbGlkYXRvciA9IHJlcXVpcmUoJy4vdmFsaWRhdG9yJyk7XG5jb25zdCBYTUxQYXJzZXIgPSByZXF1aXJlKCcuL3htbHBhcnNlci9YTUxQYXJzZXInKTtcbmNvbnN0IFhNTEJ1aWxkZXIgPSByZXF1aXJlKCcuL3htbGJ1aWxkZXIvanNvbjJ4bWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFhNTFBhcnNlcjogWE1MUGFyc2VyLFxuICBYTUxWYWxpZGF0b3I6IHZhbGlkYXRvcixcbiAgWE1MQnVpbGRlcjogWE1MQnVpbGRlclxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/fast-xml-parser/src/fxp.js\n"));

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/ignoreAttributes.js":
/*!**************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/ignoreAttributes.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("function getIgnoreAttributesFn(ignoreAttributes) {\n    if (typeof ignoreAttributes === 'function') {\n        return ignoreAttributes\n    }\n    if (Array.isArray(ignoreAttributes)) {\n        return (attrName) => {\n            for (const pattern of ignoreAttributes) {\n                if (typeof pattern === 'string' && attrName === pattern) {\n                    return true\n                }\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\n                    return true\n                }\n            }\n        }\n    }\n    return () => false\n}\n\nmodule.exports = getIgnoreAttributesFn//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy9pZ25vcmVBdHRyaWJ1dGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy9pZ25vcmVBdHRyaWJ1dGVzLmpzP2U4ZGEiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0SWdub3JlQXR0cmlidXRlc0ZuKGlnbm9yZUF0dHJpYnV0ZXMpIHtcbiAgICBpZiAodHlwZW9mIGlnbm9yZUF0dHJpYnV0ZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGlnbm9yZUF0dHJpYnV0ZXNcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaWdub3JlQXR0cmlidXRlcykpIHtcbiAgICAgICAgcmV0dXJuIChhdHRyTmFtZSkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIGlnbm9yZUF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnICYmIGF0dHJOYW1lID09PSBwYXR0ZXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwICYmIHBhdHRlcm4udGVzdChhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICgpID0+IGZhbHNlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SWdub3JlQXR0cmlidXRlc0ZuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/fast-xml-parser/src/ignoreAttributes.js\n"));

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/util.js":
/*!**************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/util.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGFBQWE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZTtBQUNmO0FBQ0E7O0FBRUEscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsR0FBRztBQUNkO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsaUNBQWlDO0FBQ2pDLDZCQUE2QjtBQUM3QixvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsaUNBQWlDO0FBQ2pDOztBQUVBLGNBQWM7QUFDZCxxQkFBcUI7QUFDckIsa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3V0aWwuanM/OWNlMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5hbWVTdGFydENoYXIgPSAnOkEtWmEtel9cXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRCc7XG5jb25zdCBuYW1lQ2hhciA9IG5hbWVTdGFydENoYXIgKyAnXFxcXC0uXFxcXGRcXFxcdTAwQjdcXFxcdTAzMDAtXFxcXHUwMzZGXFxcXHUyMDNGLVxcXFx1MjA0MCc7XG5jb25zdCBuYW1lUmVnZXhwID0gJ1snICsgbmFtZVN0YXJ0Q2hhciArICddWycgKyBuYW1lQ2hhciArICddKidcbmNvbnN0IHJlZ2V4TmFtZSA9IG5ldyBSZWdFeHAoJ14nICsgbmFtZVJlZ2V4cCArICckJyk7XG5cbmNvbnN0IGdldEFsbE1hdGNoZXMgPSBmdW5jdGlvbihzdHJpbmcsIHJlZ2V4KSB7XG4gIGNvbnN0IG1hdGNoZXMgPSBbXTtcbiAgbGV0IG1hdGNoID0gcmVnZXguZXhlYyhzdHJpbmcpO1xuICB3aGlsZSAobWF0Y2gpIHtcbiAgICBjb25zdCBhbGxtYXRjaGVzID0gW107XG4gICAgYWxsbWF0Y2hlcy5zdGFydEluZGV4ID0gcmVnZXgubGFzdEluZGV4IC0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgIGNvbnN0IGxlbiA9IG1hdGNoLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVuOyBpbmRleCsrKSB7XG4gICAgICBhbGxtYXRjaGVzLnB1c2gobWF0Y2hbaW5kZXhdKTtcbiAgICB9XG4gICAgbWF0Y2hlcy5wdXNoKGFsbG1hdGNoZXMpO1xuICAgIG1hdGNoID0gcmVnZXguZXhlYyhzdHJpbmcpO1xuICB9XG4gIHJldHVybiBtYXRjaGVzO1xufTtcblxuY29uc3QgaXNOYW1lID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gIGNvbnN0IG1hdGNoID0gcmVnZXhOYW1lLmV4ZWMoc3RyaW5nKTtcbiAgcmV0dXJuICEobWF0Y2ggPT09IG51bGwgfHwgdHlwZW9mIG1hdGNoID09PSAndW5kZWZpbmVkJyk7XG59O1xuXG5leHBvcnRzLmlzRXhpc3QgPSBmdW5jdGlvbih2KSB7XG4gIHJldHVybiB0eXBlb2YgdiAhPT0gJ3VuZGVmaW5lZCc7XG59O1xuXG5leHBvcnRzLmlzRW1wdHlPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufTtcblxuLyoqXG4gKiBDb3B5IGFsbCB0aGUgcHJvcGVydGllcyBvZiBhIGludG8gYi5cbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0XG4gKiBAcGFyYW0geyp9IGFcbiAqL1xuZXhwb3J0cy5tZXJnZSA9IGZ1bmN0aW9uKHRhcmdldCwgYSwgYXJyYXlNb2RlKSB7XG4gIGlmIChhKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGEpOyAvLyB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBvd24gcHJvcGVydGllc1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoOyAvL2Rvbid0IG1ha2UgaXQgaW5saW5lXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKGFycmF5TW9kZSA9PT0gJ3N0cmljdCcpIHtcbiAgICAgICAgdGFyZ2V0W2tleXNbaV1dID0gWyBhW2tleXNbaV1dIF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRba2V5c1tpXV0gPSBhW2tleXNbaV1dO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbi8qIGV4cG9ydHMubWVyZ2UgPWZ1bmN0aW9uIChiLGEpe1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihiLGEpO1xufSAqL1xuXG5leHBvcnRzLmdldFZhbHVlID0gZnVuY3Rpb24odikge1xuICBpZiAoZXhwb3J0cy5pc0V4aXN0KHYpKSB7XG4gICAgcmV0dXJuIHY7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG4vLyBjb25zdCBmYWtlQ2FsbCA9IGZ1bmN0aW9uKGEpIHtyZXR1cm4gYTt9O1xuLy8gY29uc3QgZmFrZUNhbGxOb1JldHVybiA9IGZ1bmN0aW9uKCkge307XG5cbmV4cG9ydHMuaXNOYW1lID0gaXNOYW1lO1xuZXhwb3J0cy5nZXRBbGxNYXRjaGVzID0gZ2V0QWxsTWF0Y2hlcztcbmV4cG9ydHMubmFtZVJlZ2V4cCA9IG5hbWVSZWdleHA7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/fast-xml-parser/src/util.js\n"));

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/validator.js":
/*!*******************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/validator.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nconst util = __webpack_require__(/*! ./util */ \"./node_modules/fast-xml-parser/src/util.js\");\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fast-xml-parser/src/validator.js\n"));

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js":
/*!*****************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = __webpack_require__(/*! ./orderedJs2Xml */ \"./node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js\");\nconst getIgnoreAttributesFn = __webpack_require__(/*! ../ignoreAttributes */ \"./node_modules/fast-xml-parser/src/ignoreAttributes.js\")\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0, []).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level, ajPath) {\n  let attrStr = '';\n  let val = '';\n  const jPath = ajPath.join('.')\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key === this.options.cdataPropName) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr && !this.ignoreAttributesFn(attr, jPath)) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      } else if (!attr) {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup){\n            const result = this.j2x(item, level + 1, ajPath.concat(key));\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr\n            }\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level, ajPath)\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, '', level);\n          }\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level, ajPath)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level, ajPath) {\n  const result = this.j2x(object, level + 1, ajPath.concat(key));\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js\n"));

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js":
/*!**********************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js ***!
  \**********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js\n"));

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js":
/*!*********************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js ***!
  \*********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("const util = __webpack_require__(/*! ../util */ \"./node_modules/fast-xml-parser/src/util.js\");\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    let entityName, val;\n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js\n"));

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvT3B0aW9uc0J1aWxkZXIuanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCOztBQUVBLG9CQUFvQjtBQUNwQixzQkFBc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMveG1scGFyc2VyL09wdGlvbnNCdWlsZGVyLmpzP2JiNzgiXSwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBwcmVzZXJ2ZU9yZGVyOiBmYWxzZSxcbiAgICBhdHRyaWJ1dGVOYW1lUHJlZml4OiAnQF8nLFxuICAgIGF0dHJpYnV0ZXNHcm91cE5hbWU6IGZhbHNlLFxuICAgIHRleHROb2RlTmFtZTogJyN0ZXh0JyxcbiAgICBpZ25vcmVBdHRyaWJ1dGVzOiB0cnVlLFxuICAgIHJlbW92ZU5TUHJlZml4OiBmYWxzZSwgLy8gcmVtb3ZlIE5TIGZyb20gdGFnIG5hbWUgb3IgYXR0cmlidXRlIG5hbWUgaWYgdHJ1ZVxuICAgIGFsbG93Qm9vbGVhbkF0dHJpYnV0ZXM6IGZhbHNlLCAvL2EgdGFnIGNhbiBoYXZlIGF0dHJpYnV0ZXMgd2l0aG91dCBhbnkgdmFsdWVcbiAgICAvL2lnbm9yZVJvb3RFbGVtZW50IDogZmFsc2UsXG4gICAgcGFyc2VUYWdWYWx1ZTogdHJ1ZSxcbiAgICBwYXJzZUF0dHJpYnV0ZVZhbHVlOiBmYWxzZSxcbiAgICB0cmltVmFsdWVzOiB0cnVlLCAvL1RyaW0gc3RyaW5nIHZhbHVlcyBvZiB0YWcgYW5kIGF0dHJpYnV0ZXNcbiAgICBjZGF0YVByb3BOYW1lOiBmYWxzZSxcbiAgICBudW1iZXJQYXJzZU9wdGlvbnM6IHtcbiAgICAgIGhleDogdHJ1ZSxcbiAgICAgIGxlYWRpbmdaZXJvczogdHJ1ZSxcbiAgICAgIGVOb3RhdGlvbjogdHJ1ZVxuICAgIH0sXG4gICAgdGFnVmFsdWVQcm9jZXNzb3I6IGZ1bmN0aW9uKHRhZ05hbWUsIHZhbCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9LFxuICAgIGF0dHJpYnV0ZVZhbHVlUHJvY2Vzc29yOiBmdW5jdGlvbihhdHRyTmFtZSwgdmFsKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH0sXG4gICAgc3RvcE5vZGVzOiBbXSwgLy9uZXN0ZWQgdGFncyB3aWxsIG5vdCBiZSBwYXJzZWQgZXZlbiBmb3IgZXJyb3JzXG4gICAgYWx3YXlzQ3JlYXRlVGV4dE5vZGU6IGZhbHNlLFxuICAgIGlzQXJyYXk6ICgpID0+IGZhbHNlLFxuICAgIGNvbW1lbnRQcm9wTmFtZTogZmFsc2UsXG4gICAgdW5wYWlyZWRUYWdzOiBbXSxcbiAgICBwcm9jZXNzRW50aXRpZXM6IHRydWUsXG4gICAgaHRtbEVudGl0aWVzOiBmYWxzZSxcbiAgICBpZ25vcmVEZWNsYXJhdGlvbjogZmFsc2UsXG4gICAgaWdub3JlUGlUYWdzOiBmYWxzZSxcbiAgICB0cmFuc2Zvcm1UYWdOYW1lOiBmYWxzZSxcbiAgICB0cmFuc2Zvcm1BdHRyaWJ1dGVOYW1lOiBmYWxzZSxcbiAgICB1cGRhdGVUYWc6IGZ1bmN0aW9uKHRhZ05hbWUsIGpQYXRoLCBhdHRycyl7XG4gICAgICByZXR1cm4gdGFnTmFtZVxuICAgIH0sXG4gICAgLy8gc2tpcEVtcHR5TGlzdEl0ZW06IGZhbHNlXG59O1xuICAgXG5jb25zdCBidWlsZE9wdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbn07XG5cbmV4cG9ydHMuYnVpbGRPcHRpb25zID0gYnVpbGRPcHRpb25zO1xuZXhwb3J0cy5kZWZhdWx0T3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js\n"));

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js":
/*!************************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js ***!
  \************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n///@ts-check\n\nconst util = __webpack_require__(/*! ../util */ \"./node_modules/fast-xml-parser/src/util.js\");\nconst xmlNode = __webpack_require__(/*! ./xmlNode */ \"./node_modules/fast-xml-parser/src/xmlparser/xmlNode.js\");\nconst readDocType = __webpack_require__(/*! ./DocTypeReader */ \"./node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js\");\nconst toNumber = __webpack_require__(/*! strnum */ \"./node_modules/strnum/strnum.js\");\nconst getIgnoreAttributesFn = __webpack_require__(/*! ../ignoreAttributes */ \"./node_modules/fast-xml-parser/src/ignoreAttributes.js\")\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = currentNode.child.length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js\n"));

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/XMLParser.js":
/*!*****************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/XMLParser.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("const { buildOptions} = __webpack_require__(/*! ./OptionsBuilder */ \"./node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js\");\nconst OrderedObjParser = __webpack_require__(/*! ./OrderedObjParser */ \"./node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js\");\nconst { prettify} = __webpack_require__(/*! ./node2json */ \"./node_modules/fast-xml-parser/src/xmlparser/node2json.js\");\nconst validator = __webpack_require__(/*! ../validator */ \"./node_modules/fast-xml-parser/src/validator.js\");\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvWE1MUGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBLFFBQVEsY0FBYyxFQUFFLG1CQUFPLENBQUMsd0ZBQWtCO0FBQ2xELHlCQUF5QixtQkFBTyxDQUFDLDRGQUFvQjtBQUNyRCxRQUFRLFVBQVUsRUFBRSxtQkFBTyxDQUFDLDhFQUFhO0FBQ3pDLGtCQUFrQixtQkFBTyxDQUFDLHFFQUFjOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGVBQWU7QUFDOUIsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsZUFBZSxHQUFHLGdCQUFnQixHQUFHLGVBQWU7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsaURBQWlEO0FBQzFELHFFQUFxRSwyQkFBMkI7QUFDaEcsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9YTUxQYXJzZXIuanM/MzU2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGJ1aWxkT3B0aW9uc30gPSByZXF1aXJlKFwiLi9PcHRpb25zQnVpbGRlclwiKTtcbmNvbnN0IE9yZGVyZWRPYmpQYXJzZXIgPSByZXF1aXJlKFwiLi9PcmRlcmVkT2JqUGFyc2VyXCIpO1xuY29uc3QgeyBwcmV0dGlmeX0gPSByZXF1aXJlKFwiLi9ub2RlMmpzb25cIik7XG5jb25zdCB2YWxpZGF0b3IgPSByZXF1aXJlKCcuLi92YWxpZGF0b3InKTtcblxuY2xhc3MgWE1MUGFyc2Vye1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpe1xuICAgICAgICB0aGlzLmV4dGVybmFsRW50aXRpZXMgPSB7fTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gYnVpbGRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2UgWE1MIGRhdHMgdG8gSlMgb2JqZWN0IFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcn0geG1sRGF0YSBcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0fSB2YWxpZGF0aW9uT3B0aW9uIFxuICAgICAqL1xuICAgIHBhcnNlKHhtbERhdGEsdmFsaWRhdGlvbk9wdGlvbil7XG4gICAgICAgIGlmKHR5cGVvZiB4bWxEYXRhID09PSBcInN0cmluZ1wiKXtcbiAgICAgICAgfWVsc2UgaWYoIHhtbERhdGEudG9TdHJpbmcpe1xuICAgICAgICAgICAgeG1sRGF0YSA9IHhtbERhdGEudG9TdHJpbmcoKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJYTUwgZGF0YSBpcyBhY2NlcHRlZCBpbiBTdHJpbmcgb3IgQnl0ZXNbXSBmb3JtLlwiKVxuICAgICAgICB9XG4gICAgICAgIGlmKCB2YWxpZGF0aW9uT3B0aW9uKXtcbiAgICAgICAgICAgIGlmKHZhbGlkYXRpb25PcHRpb24gPT09IHRydWUpIHZhbGlkYXRpb25PcHRpb24gPSB7fTsgLy92YWxpZGF0ZSB3aXRoIGRlZmF1bHQgb3B0aW9uc1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0b3IudmFsaWRhdGUoeG1sRGF0YSwgdmFsaWRhdGlvbk9wdGlvbik7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKCBgJHtyZXN1bHQuZXJyLm1zZ306JHtyZXN1bHQuZXJyLmxpbmV9OiR7cmVzdWx0LmVyci5jb2x9YCApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBjb25zdCBvcmRlcmVkT2JqUGFyc2VyID0gbmV3IE9yZGVyZWRPYmpQYXJzZXIodGhpcy5vcHRpb25zKTtcbiAgICAgICAgb3JkZXJlZE9ialBhcnNlci5hZGRFeHRlcm5hbEVudGl0aWVzKHRoaXMuZXh0ZXJuYWxFbnRpdGllcyk7XG4gICAgICAgIGNvbnN0IG9yZGVyZWRSZXN1bHQgPSBvcmRlcmVkT2JqUGFyc2VyLnBhcnNlWG1sKHhtbERhdGEpO1xuICAgICAgICBpZih0aGlzLm9wdGlvbnMucHJlc2VydmVPcmRlciB8fCBvcmRlcmVkUmVzdWx0ID09PSB1bmRlZmluZWQpIHJldHVybiBvcmRlcmVkUmVzdWx0O1xuICAgICAgICBlbHNlIHJldHVybiBwcmV0dGlmeShvcmRlcmVkUmVzdWx0LCB0aGlzLm9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBFbnRpdHkgd2hpY2ggaXMgbm90IGJ5IGRlZmF1bHQgc3VwcG9ydGVkIGJ5IHRoaXMgbGlicmFyeVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFxuICAgICAqL1xuICAgIGFkZEVudGl0eShrZXksIHZhbHVlKXtcbiAgICAgICAgaWYodmFsdWUuaW5kZXhPZihcIiZcIikgIT09IC0xKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVudGl0eSB2YWx1ZSBjYW4ndCBoYXZlICcmJ1wiKVxuICAgICAgICB9ZWxzZSBpZihrZXkuaW5kZXhPZihcIiZcIikgIT09IC0xIHx8IGtleS5pbmRleE9mKFwiO1wiKSAhPT0gLTEpe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQW4gZW50aXR5IG11c3QgYmUgc2V0IHdpdGhvdXQgJyYnIGFuZCAnOycuIEVnLiB1c2UgJyN4RCcgZm9yICcmI3hEOydcIilcbiAgICAgICAgfWVsc2UgaWYodmFsdWUgPT09IFwiJlwiKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFuIGVudGl0eSB3aXRoIHZhbHVlICcmJyBpcyBub3QgcGVybWl0dGVkXCIpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRoaXMuZXh0ZXJuYWxFbnRpdGllc1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gWE1MUGFyc2VyOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/fast-xml-parser/src/xmlparser/XMLParser.js\n"));

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/node2json.js":
/*!*****************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/node2json.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvbm9kZTJqc29uLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxLQUFLO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QixvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVUsZUFBZTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9ub2RlMmpzb24uanM/ZGZjZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogXG4gKiBAcGFyYW0ge2FycmF5fSBub2RlIFxuICogQHBhcmFtIHthbnl9IG9wdGlvbnMgXG4gKiBAcmV0dXJucyBcbiAqL1xuZnVuY3Rpb24gcHJldHRpZnkobm9kZSwgb3B0aW9ucyl7XG4gIHJldHVybiBjb21wcmVzcyggbm9kZSwgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogXG4gKiBAcGFyYW0ge2FycmF5fSBhcnIgXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBcbiAqIEBwYXJhbSB7c3RyaW5nfSBqUGF0aCBcbiAqIEByZXR1cm5zIG9iamVjdFxuICovXG5mdW5jdGlvbiBjb21wcmVzcyhhcnIsIG9wdGlvbnMsIGpQYXRoKXtcbiAgbGV0IHRleHQ7XG4gIGNvbnN0IGNvbXByZXNzZWRPYmogPSB7fTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB0YWdPYmogPSBhcnJbaV07XG4gICAgY29uc3QgcHJvcGVydHkgPSBwcm9wTmFtZSh0YWdPYmopO1xuICAgIGxldCBuZXdKcGF0aCA9IFwiXCI7XG4gICAgaWYoalBhdGggPT09IHVuZGVmaW5lZCkgbmV3SnBhdGggPSBwcm9wZXJ0eTtcbiAgICBlbHNlIG5ld0pwYXRoID0galBhdGggKyBcIi5cIiArIHByb3BlcnR5O1xuXG4gICAgaWYocHJvcGVydHkgPT09IG9wdGlvbnMudGV4dE5vZGVOYW1lKXtcbiAgICAgIGlmKHRleHQgPT09IHVuZGVmaW5lZCkgdGV4dCA9IHRhZ09ialtwcm9wZXJ0eV07XG4gICAgICBlbHNlIHRleHQgKz0gXCJcIiArIHRhZ09ialtwcm9wZXJ0eV07XG4gICAgfWVsc2UgaWYocHJvcGVydHkgPT09IHVuZGVmaW5lZCl7XG4gICAgICBjb250aW51ZTtcbiAgICB9ZWxzZSBpZih0YWdPYmpbcHJvcGVydHldKXtcbiAgICAgIFxuICAgICAgbGV0IHZhbCA9IGNvbXByZXNzKHRhZ09ialtwcm9wZXJ0eV0sIG9wdGlvbnMsIG5ld0pwYXRoKTtcbiAgICAgIGNvbnN0IGlzTGVhZiA9IGlzTGVhZlRhZyh2YWwsIG9wdGlvbnMpO1xuXG4gICAgICBpZih0YWdPYmpbXCI6QFwiXSl7XG4gICAgICAgIGFzc2lnbkF0dHJpYnV0ZXMoIHZhbCwgdGFnT2JqW1wiOkBcIl0sIG5ld0pwYXRoLCBvcHRpb25zKTtcbiAgICAgIH1lbHNlIGlmKE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoID09PSAxICYmIHZhbFtvcHRpb25zLnRleHROb2RlTmFtZV0gIT09IHVuZGVmaW5lZCAmJiAhb3B0aW9ucy5hbHdheXNDcmVhdGVUZXh0Tm9kZSl7XG4gICAgICAgIHZhbCA9IHZhbFtvcHRpb25zLnRleHROb2RlTmFtZV07XG4gICAgICB9ZWxzZSBpZihPYmplY3Qua2V5cyh2YWwpLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIGlmKG9wdGlvbnMuYWx3YXlzQ3JlYXRlVGV4dE5vZGUpIHZhbFtvcHRpb25zLnRleHROb2RlTmFtZV0gPSBcIlwiO1xuICAgICAgICBlbHNlIHZhbCA9IFwiXCI7XG4gICAgICB9XG5cbiAgICAgIGlmKGNvbXByZXNzZWRPYmpbcHJvcGVydHldICE9PSB1bmRlZmluZWQgJiYgY29tcHJlc3NlZE9iai5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgaWYoIUFycmF5LmlzQXJyYXkoY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0pKSB7XG4gICAgICAgICAgICBjb21wcmVzc2VkT2JqW3Byb3BlcnR5XSA9IFsgY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gXTtcbiAgICAgICAgfVxuICAgICAgICBjb21wcmVzc2VkT2JqW3Byb3BlcnR5XS5wdXNoKHZhbCk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgLy9UT0RPOiBpZiBhIG5vZGUgaXMgbm90IGFuIGFycmF5LCB0aGVuIGNoZWNrIGlmIGl0IHNob3VsZCBiZSBhbiBhcnJheVxuICAgICAgICAvL2Fsc28gZGV0ZXJtaW5lIGlmIGl0IGlzIGEgbGVhZiBub2RlXG4gICAgICAgIGlmIChvcHRpb25zLmlzQXJyYXkocHJvcGVydHksIG5ld0pwYXRoLCBpc0xlYWYgKSkge1xuICAgICAgICAgIGNvbXByZXNzZWRPYmpbcHJvcGVydHldID0gW3ZhbF07XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIGNvbXByZXNzZWRPYmpbcHJvcGVydHldID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFxuICB9XG4gIC8vIGlmKHRleHQgJiYgdGV4dC5sZW5ndGggPiAwKSBjb21wcmVzc2VkT2JqW29wdGlvbnMudGV4dE5vZGVOYW1lXSA9IHRleHQ7XG4gIGlmKHR5cGVvZiB0ZXh0ID09PSBcInN0cmluZ1wiKXtcbiAgICBpZih0ZXh0Lmxlbmd0aCA+IDApIGNvbXByZXNzZWRPYmpbb3B0aW9ucy50ZXh0Tm9kZU5hbWVdID0gdGV4dDtcbiAgfWVsc2UgaWYodGV4dCAhPT0gdW5kZWZpbmVkKSBjb21wcmVzc2VkT2JqW29wdGlvbnMudGV4dE5vZGVOYW1lXSA9IHRleHQ7XG4gIHJldHVybiBjb21wcmVzc2VkT2JqO1xufVxuXG5mdW5jdGlvbiBwcm9wTmFtZShvYmope1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICBpZihrZXkgIT09IFwiOkBcIikgcmV0dXJuIGtleTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NpZ25BdHRyaWJ1dGVzKG9iaiwgYXR0ck1hcCwganBhdGgsIG9wdGlvbnMpe1xuICBpZiAoYXR0ck1hcCkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhdHRyTWFwKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDsgLy9kb24ndCBtYWtlIGl0IGlubGluZVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGF0cnJOYW1lID0ga2V5c1tpXTtcbiAgICAgIGlmIChvcHRpb25zLmlzQXJyYXkoYXRyck5hbWUsIGpwYXRoICsgXCIuXCIgKyBhdHJyTmFtZSwgdHJ1ZSwgdHJ1ZSkpIHtcbiAgICAgICAgb2JqW2F0cnJOYW1lXSA9IFsgYXR0ck1hcFthdHJyTmFtZV0gXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialthdHJyTmFtZV0gPSBhdHRyTWFwW2F0cnJOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNMZWFmVGFnKG9iaiwgb3B0aW9ucyl7XG4gIGNvbnN0IHsgdGV4dE5vZGVOYW1lIH0gPSBvcHRpb25zO1xuICBjb25zdCBwcm9wQ291bnQgPSBPYmplY3Qua2V5cyhvYmopLmxlbmd0aDtcbiAgXG4gIGlmIChwcm9wQ291bnQgPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChcbiAgICBwcm9wQ291bnQgPT09IDEgJiZcbiAgICAob2JqW3RleHROb2RlTmFtZV0gfHwgdHlwZW9mIG9ialt0ZXh0Tm9kZU5hbWVdID09PSBcImJvb2xlYW5cIiB8fCBvYmpbdGV4dE5vZGVOYW1lXSA9PT0gMClcbiAgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLnByZXR0aWZ5ID0gcHJldHRpZnk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/fast-xml-parser/src/xmlparser/node2json.js\n"));

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/xmlNode.js":
/*!***************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/xmlNode.js ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIveG1sTm9kZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSx5QkFBeUIsd0NBQXdDO0FBQ2pFO0FBQ0Esc0JBQXNCLFlBQVk7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsZ0RBQWdEO0FBQ3pFLEtBQUs7QUFDTCx5QkFBeUIsNEJBQTRCO0FBQ3JEO0FBQ0E7QUFDQTs7O0FBR0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMveG1scGFyc2VyL3htbE5vZGUuanM/YjU5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNsYXNzIFhtbE5vZGV7XG4gIGNvbnN0cnVjdG9yKHRhZ25hbWUpIHtcbiAgICB0aGlzLnRhZ25hbWUgPSB0YWduYW1lO1xuICAgIHRoaXMuY2hpbGQgPSBbXTsgLy9uZXN0ZWQgdGFncywgdGV4dCwgY2RhdGEsIGNvbW1lbnRzIGluIG9yZGVyXG4gICAgdGhpc1tcIjpAXCJdID0ge307IC8vYXR0cmlidXRlcyBtYXBcbiAgfVxuICBhZGQoa2V5LHZhbCl7XG4gICAgLy8gdGhpcy5jaGlsZC5wdXNoKCB7bmFtZSA6IGtleSwgdmFsOiB2YWwsIGlzQ2RhdGE6IGlzQ2RhdGEgfSk7XG4gICAgaWYoa2V5ID09PSBcIl9fcHJvdG9fX1wiKSBrZXkgPSBcIiNfX3Byb3RvX19cIjtcbiAgICB0aGlzLmNoaWxkLnB1c2goIHtba2V5XTogdmFsIH0pO1xuICB9XG4gIGFkZENoaWxkKG5vZGUpIHtcbiAgICBpZihub2RlLnRhZ25hbWUgPT09IFwiX19wcm90b19fXCIpIG5vZGUudGFnbmFtZSA9IFwiI19fcHJvdG9fX1wiO1xuICAgIGlmKG5vZGVbXCI6QFwiXSAmJiBPYmplY3Qua2V5cyhub2RlW1wiOkBcIl0pLmxlbmd0aCA+IDApe1xuICAgICAgdGhpcy5jaGlsZC5wdXNoKCB7IFtub2RlLnRhZ25hbWVdOiBub2RlLmNoaWxkLCBbXCI6QFwiXTogbm9kZVtcIjpAXCJdIH0pO1xuICAgIH1lbHNle1xuICAgICAgdGhpcy5jaGlsZC5wdXNoKCB7IFtub2RlLnRhZ25hbWVdOiBub2RlLmNoaWxkIH0pO1xuICAgIH1cbiAgfTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBYbWxOb2RlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/fast-xml-parser/src/xmlparser/xmlNode.js\n"));

/***/ }),

/***/ "./node_modules/fd-slicer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/fd-slicer/index.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\nvar fs = __webpack_require__(/*! fs */ \"?3147\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/next/dist/compiled/util/util.js\");\nvar stream = __webpack_require__(/*! stream */ \"./node_modules/next/dist/compiled/stream-browserify/index.js\");\nvar Readable = stream.Readable;\nvar Writable = stream.Writable;\nvar PassThrough = stream.PassThrough;\nvar Pend = __webpack_require__(/*! pend */ \"./node_modules/pend/index.js\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"./node_modules/next/dist/compiled/events/events.js\").EventEmitter);\n\nexports.createFromBuffer = createFromBuffer;\nexports.createFromFd = createFromFd;\nexports.BufferSlicer = BufferSlicer;\nexports.FdSlicer = FdSlicer;\n\nutil.inherits(FdSlicer, EventEmitter);\nfunction FdSlicer(fd, options) {\n  options = options || {};\n  EventEmitter.call(this);\n\n  this.fd = fd;\n  this.pend = new Pend();\n  this.pend.max = 1;\n  this.refCount = 0;\n  this.autoClose = !!options.autoClose;\n}\n\nFdSlicer.prototype.read = function(buffer, offset, length, position, callback) {\n  var self = this;\n  self.pend.go(function(cb) {\n    fs.read(self.fd, buffer, offset, length, position, function(err, bytesRead, buffer) {\n      cb();\n      callback(err, bytesRead, buffer);\n    });\n  });\n};\n\nFdSlicer.prototype.write = function(buffer, offset, length, position, callback) {\n  var self = this;\n  self.pend.go(function(cb) {\n    fs.write(self.fd, buffer, offset, length, position, function(err, written, buffer) {\n      cb();\n      callback(err, written, buffer);\n    });\n  });\n};\n\nFdSlicer.prototype.createReadStream = function(options) {\n  return new ReadStream(this, options);\n};\n\nFdSlicer.prototype.createWriteStream = function(options) {\n  return new WriteStream(this, options);\n};\n\nFdSlicer.prototype.ref = function() {\n  this.refCount += 1;\n};\n\nFdSlicer.prototype.unref = function() {\n  var self = this;\n  self.refCount -= 1;\n\n  if (self.refCount > 0) return;\n  if (self.refCount < 0) throw new Error(\"invalid unref\");\n\n  if (self.autoClose) {\n    fs.close(self.fd, onCloseDone);\n  }\n\n  function onCloseDone(err) {\n    if (err) {\n      self.emit('error', err);\n    } else {\n      self.emit('close');\n    }\n  }\n};\n\nutil.inherits(ReadStream, Readable);\nfunction ReadStream(context, options) {\n  options = options || {};\n  Readable.call(this, options);\n\n  this.context = context;\n  this.context.ref();\n\n  this.start = options.start || 0;\n  this.endOffset = options.end;\n  this.pos = this.start;\n  this.destroyed = false;\n}\n\nReadStream.prototype._read = function(n) {\n  var self = this;\n  if (self.destroyed) return;\n\n  var toRead = Math.min(self._readableState.highWaterMark, n);\n  if (self.endOffset != null) {\n    toRead = Math.min(toRead, self.endOffset - self.pos);\n  }\n  if (toRead <= 0) {\n    self.destroyed = true;\n    self.push(null);\n    self.context.unref();\n    return;\n  }\n  self.context.pend.go(function(cb) {\n    if (self.destroyed) return cb();\n    var buffer = new Buffer(toRead);\n    fs.read(self.context.fd, buffer, 0, toRead, self.pos, function(err, bytesRead) {\n      if (err) {\n        self.destroy(err);\n      } else if (bytesRead === 0) {\n        self.destroyed = true;\n        self.push(null);\n        self.context.unref();\n      } else {\n        self.pos += bytesRead;\n        self.push(buffer.slice(0, bytesRead));\n      }\n      cb();\n    });\n  });\n};\n\nReadStream.prototype.destroy = function(err) {\n  if (this.destroyed) return;\n  err = err || new Error(\"stream destroyed\");\n  this.destroyed = true;\n  this.emit('error', err);\n  this.context.unref();\n};\n\nutil.inherits(WriteStream, Writable);\nfunction WriteStream(context, options) {\n  options = options || {};\n  Writable.call(this, options);\n\n  this.context = context;\n  this.context.ref();\n\n  this.start = options.start || 0;\n  this.endOffset = (options.end == null) ? Infinity : +options.end;\n  this.bytesWritten = 0;\n  this.pos = this.start;\n  this.destroyed = false;\n\n  this.on('finish', this.destroy.bind(this));\n}\n\nWriteStream.prototype._write = function(buffer, encoding, callback) {\n  var self = this;\n  if (self.destroyed) return;\n\n  if (self.pos + buffer.length > self.endOffset) {\n    var err = new Error(\"maximum file length exceeded\");\n    err.code = 'ETOOBIG';\n    self.destroy();\n    callback(err);\n    return;\n  }\n  self.context.pend.go(function(cb) {\n    if (self.destroyed) return cb();\n    fs.write(self.context.fd, buffer, 0, buffer.length, self.pos, function(err, bytes) {\n      if (err) {\n        self.destroy();\n        cb();\n        callback(err);\n      } else {\n        self.bytesWritten += bytes;\n        self.pos += bytes;\n        self.emit('progress');\n        cb();\n        callback();\n      }\n    });\n  });\n};\n\nWriteStream.prototype.destroy = function() {\n  if (this.destroyed) return;\n  this.destroyed = true;\n  this.context.unref();\n};\n\nutil.inherits(BufferSlicer, EventEmitter);\nfunction BufferSlicer(buffer, options) {\n  EventEmitter.call(this);\n\n  options = options || {};\n  this.refCount = 0;\n  this.buffer = buffer;\n  this.maxChunkSize = options.maxChunkSize || Number.MAX_SAFE_INTEGER;\n}\n\nBufferSlicer.prototype.read = function(buffer, offset, length, position, callback) {\n  var end = position + length;\n  var delta = end - this.buffer.length;\n  var written = (delta > 0) ? delta : length;\n  this.buffer.copy(buffer, offset, position, end);\n  setImmediate(function() {\n    callback(null, written);\n  });\n};\n\nBufferSlicer.prototype.write = function(buffer, offset, length, position, callback) {\n  buffer.copy(this.buffer, position, offset, offset + length);\n  setImmediate(function() {\n    callback(null, length, buffer);\n  });\n};\n\nBufferSlicer.prototype.createReadStream = function(options) {\n  options = options || {};\n  var readStream = new PassThrough(options);\n  readStream.destroyed = false;\n  readStream.start = options.start || 0;\n  readStream.endOffset = options.end;\n  // by the time this function returns, we'll be done.\n  readStream.pos = readStream.endOffset || this.buffer.length;\n\n  // respect the maxChunkSize option to slice up the chunk into smaller pieces.\n  var entireSlice = this.buffer.slice(readStream.start, readStream.pos);\n  var offset = 0;\n  while (true) {\n    var nextOffset = offset + this.maxChunkSize;\n    if (nextOffset >= entireSlice.length) {\n      // last chunk\n      if (offset < entireSlice.length) {\n        readStream.write(entireSlice.slice(offset, entireSlice.length));\n      }\n      break;\n    }\n    readStream.write(entireSlice.slice(offset, nextOffset));\n    offset = nextOffset;\n  }\n\n  readStream.end();\n  readStream.destroy = function() {\n    readStream.destroyed = true;\n  };\n  return readStream;\n};\n\nBufferSlicer.prototype.createWriteStream = function(options) {\n  var bufferSlicer = this;\n  options = options || {};\n  var writeStream = new Writable(options);\n  writeStream.start = options.start || 0;\n  writeStream.endOffset = (options.end == null) ? this.buffer.length : +options.end;\n  writeStream.bytesWritten = 0;\n  writeStream.pos = writeStream.start;\n  writeStream.destroyed = false;\n  writeStream._write = function(buffer, encoding, callback) {\n    if (writeStream.destroyed) return;\n\n    var end = writeStream.pos + buffer.length;\n    if (end > writeStream.endOffset) {\n      var err = new Error(\"maximum file length exceeded\");\n      err.code = 'ETOOBIG';\n      writeStream.destroyed = true;\n      callback(err);\n      return;\n    }\n    buffer.copy(bufferSlicer.buffer, writeStream.pos, 0, buffer.length);\n\n    writeStream.bytesWritten += buffer.length;\n    writeStream.pos = end;\n    writeStream.emit('progress');\n    callback();\n  };\n  writeStream.destroy = function() {\n    writeStream.destroyed = true;\n  };\n  return writeStream;\n};\n\nBufferSlicer.prototype.ref = function() {\n  this.refCount += 1;\n};\n\nBufferSlicer.prototype.unref = function() {\n  this.refCount -= 1;\n\n  if (this.refCount < 0) {\n    throw new Error(\"invalid unref\");\n  }\n};\n\nfunction createFromBuffer(buffer, options) {\n  return new BufferSlicer(buffer, options);\n}\n\nfunction createFromFd(fd, options) {\n  return new FdSlicer(fd, options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fd-slicer/index.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/polyfills/process.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/process.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = __webpack_require__.g.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = __webpack_require__.g.process) == null ? void 0 : _global_process1.env) === \"object\" ? __webpack_require__.g.process : __webpack_require__(/*! next/dist/compiled/process */ \"./node_modules/next/dist/compiled/process/browser.js\");\n\n//# sourceMappingURL=process.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9wcm9jZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSxxQ0FBcUMscUJBQU0saUZBQWlGLHFCQUFNLGtFQUFrRSxxQkFBTSxXQUFXLG1CQUFPLENBQUMsd0ZBQTRCOztBQUV6UCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9wcm9jZXNzLmpzP2NhNjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX2dsb2JhbF9wcm9jZXNzLCBfZ2xvYmFsX3Byb2Nlc3MxO1xubW9kdWxlLmV4cG9ydHMgPSAoKF9nbG9iYWxfcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzKSA9PSBudWxsID8gdm9pZCAwIDogX2dsb2JhbF9wcm9jZXNzLmVudikgJiYgdHlwZW9mICgoX2dsb2JhbF9wcm9jZXNzMSA9IGdsb2JhbC5wcm9jZXNzKSA9PSBudWxsID8gdm9pZCAwIDogX2dsb2JhbF9wcm9jZXNzMS5lbnYpID09PSBcIm9iamVjdFwiID8gZ2xvYmFsLnByb2Nlc3MgOiByZXF1aXJlKFwibmV4dC9kaXN0L2NvbXBpbGVkL3Byb2Nlc3NcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2Nlc3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/polyfills/process.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CMuhmmad%20Umer%20Farooq%5CDesktop%5CIDML%5Cidml-parser%5Cpages%5Cview%5C%5BuploadId%5D.js&page=%2Fview%2F%5BuploadId%5D!":
/*!*******************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CMuhmmad%20Umer%20Farooq%5CDesktop%5CIDML%5Cidml-parser%5Cpages%5Cview%5C%5BuploadId%5D.js&page=%2Fview%2F%5BuploadId%5D! ***!
  \*******************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/view/[uploadId]\",\n      function () {\n        return __webpack_require__(/*! ./pages/view/[uploadId].js */ \"./pages/view/[uploadId].js\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/view/[uploadId]\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1DJTNBJTVDVXNlcnMlNUNNdWhtbWFkJTIwVW1lciUyMEZhcm9vcSU1Q0Rlc2t0b3AlNUNJRE1MJTVDaWRtbC1wYXJzZXIlNUNwYWdlcyU1Q3ZpZXclNUMlNUJ1cGxvYWRJZCU1RC5qcyZwYWdlPSUyRnZpZXclMkYlNUJ1cGxvYWRJZCU1RCEiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyw4REFBNEI7QUFDbkQ7QUFDQTtBQUNBLE9BQU8sSUFBVTtBQUNqQixNQUFNLFVBQVU7QUFDaEI7QUFDQSxPQUFPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvPzJhOGQiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXG4gICAgICBcIi92aWV3L1t1cGxvYWRJZF1cIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCIuL3BhZ2VzL3ZpZXcvW3VwbG9hZElkXS5qc1wiKTtcbiAgICAgIH1cbiAgICBdKTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cuX19ORVhUX1AucHVzaChbXCIvdmlldy9bdXBsb2FkSWRdXCJdKVxuICAgICAgfSk7XG4gICAgfVxuICAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CMuhmmad%20Umer%20Farooq%5CDesktop%5CIDML%5Cidml-parser%5Cpages%5Cview%5C%5BuploadId%5D.js&page=%2Fview%2F%5BuploadId%5D!\n"));

/***/ }),

/***/ "./lib/IDMLProcessor.js":
/*!******************************!*\
  !*** ./lib/IDMLProcessor.js ***!
  \******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// Core modules\n\nconst IDMLXMLParser = __webpack_require__(/*! ./parsers/XMLParser */ \"./lib/parsers/XMLParser.js\");\nconst FileExtractor = __webpack_require__(/*! ./extractors/FileExtractor */ \"./lib/extractors/FileExtractor.js\");\nconst StyleParser = __webpack_require__(/*! ./parsers/StyleParser */ \"./lib/parsers/StyleParser.js\");\nconst StoryParser = __webpack_require__(/*! ./parsers/StoryParser */ \"./lib/parsers/StoryParser.js\");\nconst ElementParser = __webpack_require__(/*! ./parsers/ElementParser */ \"./lib/parsers/ElementParser.js\");\nconst DocumentParser = __webpack_require__(/*! ./parsers/DocumentParser */ \"./lib/parsers/DocumentParser.js\");\nconst ImageProcessor = __webpack_require__(/*! ./processors/ImageProcessor */ \"./lib/processors/ImageProcessor.js\");\nconst DebugAnalyzer = __webpack_require__(/*! ./debug/DebugAnalyzer */ \"./lib/debug/DebugAnalyzer.js\");\nconst IDMLUtils = __webpack_require__(/*! ./utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nconst UnitConverter = __webpack_require__(/*! ./utils/UnitConverter */ \"./lib/utils/UnitConverter.js\"); // ADDED: Unit conversion support\nconst NextFontMapper = __webpack_require__(/*! ./utils/NextFontMapper */ \"./lib/utils/NextFontMapper.js\"); // ADDED: Next.js font mapping\nconst path = __webpack_require__(/*! path */ \"./node_modules/next/dist/compiled/path-browserify/index.js\");\nclass IDMLProcessor {\n    async processIDML(filePath) {\n        console.log(\"Processing IDML file:\", filePath);\n        try {\n            var _this_document, _this_document1, _this_pageInfo_dimensions, _this_pageInfo_dimensions1, _this_documentInfo_preferences_viewPreferences, _this_documentInfo_preferences;\n            // Extract ZIP contents\n            const extractedData = await this.fileExtractor.extractIDMLContents(filePath);\n            console.log(\"Extracted \".concat(Object.keys(extractedData).length, \" files from IDML\"));\n            // Parse main structure\n            await this.parseDocumentStructure(extractedData);\n            // Extract detailed information\n            await this.extractDetailedInformation();\n            // Return the correct structure\n            const documentData = {\n                document: {\n                    version: ((_this_document = this.document) === null || _this_document === void 0 ? void 0 : _this_document[\"@_DOMVersion\"]) || \"Unknown\",\n                    pageCount: Math.max(1, this.elements.length > 0 ? 1 : 0),\n                    name: ((_this_document1 = this.document) === null || _this_document1 === void 0 ? void 0 : _this_document1[\"@_Name\"]) || \"Untitled\",\n                    dimensions: this.pageInfo.dimensions\n                },\n                // ADDED: Unit conversion information\n                unitConversion: {\n                    enabled: this.config.convertToPixels,\n                    dpi: this.config.dpi,\n                    originalUnits: ((_this_pageInfo_dimensions = this.pageInfo.dimensions) === null || _this_pageInfo_dimensions === void 0 ? void 0 : _this_pageInfo_dimensions.units) || \"Unknown\",\n                    convertedToPixels: !!((_this_pageInfo_dimensions1 = this.pageInfo.dimensions) === null || _this_pageInfo_dimensions1 === void 0 ? void 0 : _this_pageInfo_dimensions1.pixelDimensions),\n                    conversionAppliedTo: [\n                        \"document dimensions\",\n                        \"element geometric bounds\",\n                        \"element positions\",\n                        \"font sizes\",\n                        \"spacing measurements\",\n                        \"page margins\",\n                        \"transform coordinates\",\n                        \"stroke weights\",\n                        \"text frame insets\"\n                    ].filter(Boolean)\n                },\n                // === ADD GLOBAL STYLE INFO ===\n                paragraphStyles: this.styleParser.getParagraphStyles(),\n                characterStyles: this.styleParser.getCharacterStyles(),\n                fontDefinitions: this.styleParser.getFontDefinitions(),\n                // === END GLOBAL STYLE INFO ===\n                pageInfo: {\n                    dimensions: this.pageInfo.dimensions,\n                    margins: this.pageInfo.margins\n                },\n                elements: this.elements.map((element)=>{\n                    if (!element.pixelPosition) {\n                        console.warn(\"⚠️ Element \".concat(element.self, \" is missing pixelPosition! This may cause rendering issues.\"));\n                    }\n                    return {\n                        id: element.self,\n                        type: element.type,\n                        name: element.name,\n                        // ENFORCED: Only output pixelPosition (in pixels)\n                        pixelPosition: element.pixelPosition,\n                        fill: element.fillColor,\n                        stroke: element.strokeColor,\n                        strokeWeight: element.strokeWeight,\n                        parentStory: element.parentStory,\n                        linkedImage: element.linkedImage,\n                        visible: element.visible,\n                        locked: element.locked,\n                        // Content frame specific properties\n                        isContentFrame: element.isContentFrame || false,\n                        hasPlacedContent: element.hasPlacedContent || false,\n                        contentType: element.contentType || null,\n                        // Image positioning within frame\n                        imagePosition: element.imagePosition || null,\n                        placedContent: element.placedContent || null\n                    };\n                }),\n                stories: Object.keys(this.stories).reduce((acc, storyId)=>{\n                    var _story_content;\n                    const story = this.stories[storyId];\n                    if (story === null || story === void 0 ? void 0 : (_story_content = story.content) === null || _story_content === void 0 ? void 0 : _story_content.plainText) {\n                        var _story_content_lineBreakInfo, _story_content_lineBreakInfo1;\n                        acc[storyId] = {\n                            text: story.content.plainText,\n                            wordCount: story.content.wordCount,\n                            characterCount: story.content.characterCount,\n                            textColor: story.content.textColor,\n                            hasLineBreaks: ((_story_content_lineBreakInfo = story.content.lineBreakInfo) === null || _story_content_lineBreakInfo === void 0 ? void 0 : _story_content_lineBreakInfo.hasLineBreaks) || false,\n                            lineBreakCount: ((_story_content_lineBreakInfo1 = story.content.lineBreakInfo) === null || _story_content_lineBreakInfo1 === void 0 ? void 0 : _story_content_lineBreakInfo1.lineBreakCount) || 0,\n                            // Include resolved styling information\n                            styling: this.styleParser.getStoryStyleSummary(story),\n                            // Include formatted content with resolved formatting\n                            formattedContent: story.content.formattedContent || []\n                        };\n                    }\n                    return acc;\n                }, {}),\n                debug22: {\n                    measurementUnits: (_this_documentInfo_preferences = this.documentInfo.preferences) === null || _this_documentInfo_preferences === void 0 ? void 0 : (_this_documentInfo_preferences_viewPreferences = _this_documentInfo_preferences.viewPreferences) === null || _this_documentInfo_preferences_viewPreferences === void 0 ? void 0 : _this_documentInfo_preferences_viewPreferences.horizontalMeasurementUnits,\n                    coordinateOffset: this.calculateCoordinateOffset(),\n                    contentFramesCount: this.elements.filter((el)=>el.isContentFrame).length,\n                    imagesLinkedCount: this.elements.filter((el)=>el.linkedImage && !el.linkedImage.isEmbedded).length,\n                    embeddedImagesCount: this.elements.filter((el)=>el.linkedImage && el.linkedImage.isEmbedded).length\n                }\n            };\n            // ADDED: Process Next.js fonts if enabled\n            if (this.config.enableNextFonts) {\n                console.log(\"\\uD83D\\uDD24 Processing Next.js fonts...\");\n                documentData.nextFonts = this.processNextFonts(documentData);\n                console.log(\"✅ Font processing completed. Mapped \".concat(documentData.nextFonts.usedFonts.length, \" unique fonts\"));\n            }\n            await this.addComprehensiveTextFormattingDebug();\n            console.log(\"✅ IDML processing completed. Elements:\", documentData.elements.length);\n            return documentData;\n        } catch (error) {\n            console.error(\"Error processing IDML:\", error);\n            throw error;\n        }\n    }\n    async parseDocumentStructure(extractedData) {\n        console.log(\"Parsing document structure...\");\n        // Parse Resources\n        console.log(\"\\n\\uD83D\\uDCCB === PARSING RESOURCES ===\");\n        for (const [fileName, content] of Object.entries(extractedData)){\n            if (fileName.startsWith(\"Resources/\")) {\n                console.log(\"\\uD83D\\uDD0D Processing resource:\", fileName);\n                await this.styleParser.parseResourceFile(fileName, content, this.xmlParser);\n            }\n        }\n        // Parse document structure (spreads, master spreads)\n        await this.documentParser.parseDocumentStructure(extractedData, this.xmlParser);\n        // Parse Stories\n        console.log(\"\\n\\uD83D\\uDCDD === PARSING STORIES ===\");\n        let storyCount = 0;\n        for (const [fileName, content] of Object.entries(extractedData)){\n            if (fileName.startsWith(\"Stories/\")) {\n                console.log(\"\\uD83D\\uDD0D Found story file:\", fileName);\n                console.log(\"   Content length:\", content.length);\n                console.log(\"   Content preview:\", content.substring(0, 200));\n                storyCount++;\n                await this.storyParser.parseStoryFile(fileName, content, this.xmlParser);\n            }\n        }\n        console.log(\"\\uD83D\\uDCDD Total stories processed: \".concat(storyCount));\n        // Sync data from modules to maintain backward compatibility\n        this.syncModuleData();\n    }\n    syncModuleData() {\n        // Sync document data\n        this.document = this.documentParser.getDocument();\n        this.spreads = this.documentParser.getSpreads();\n        this.masterSpreads = this.documentParser.getMasterSpreads();\n        this.documentInfo = this.documentParser.getDocumentInfo();\n        this.layers = this.documentParser.getLayers();\n        // Sync style data\n        this.styles = this.styleParser.getStyles();\n        this.resources = this.styleParser.getResources();\n        // Sync story data\n        this.stories = this.storyParser.getStories();\n        // Sync element data\n        this.elements = this.elementParser.getElements();\n    }\n    async extractDetailedInformation() {\n        var _this_pageInfo_dimensions, _this_pageInfo;\n        console.log(\"Extracting detailed information with enhanced processing...\");\n        await this.documentParser.extractDetailedInformation();\n        this.pageInfo = this.documentParser.getPageInfo();\n        // ADDED: Set document units on StoryParser after pageInfo is available\n        if ((_this_pageInfo = this.pageInfo) === null || _this_pageInfo === void 0 ? void 0 : (_this_pageInfo_dimensions = _this_pageInfo.dimensions) === null || _this_pageInfo_dimensions === void 0 ? void 0 : _this_pageInfo_dimensions.units) {\n            const documentUnits = this.pageInfo.dimensions.units;\n            console.log(\"\\uD83D\\uDCD0 IDMLProcessor: Setting document units to\", documentUnits, \"on StoryParser\");\n            if (this.storyParser.setDocumentUnits) {\n                this.storyParser.setDocumentUnits(documentUnits);\n            }\n        }\n        console.log(\"✅ Enhanced detailed information extracted\");\n    }\n    calculateCoordinateOffset() {\n        return this.documentParser.calculateCoordinateOffset();\n    }\n    async addComprehensiveTextFormattingDebug() {\n        return await this.debugAnalyzer.addComprehensiveTextFormattingDebug(this);\n    }\n    // Package processing methods\n    async processIDMLPackage(idmlFilePath, packageStructure) {\n        let extractedImages = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n        console.log(\"Processing IDML package:\", idmlFilePath);\n        try {\n            var _packageStructure_resourceMap, _packageStructure_resourceMap1;\n            // Process the IDML file first\n            const documentData = await this.processIDML(idmlFilePath);\n            // Process linked images and update elements\n            await this.imageProcessor.processLinkedResources(documentData, packageStructure, extractedImages);\n            // Add package info\n            documentData.packageInfo = {\n                hasLinks: ((_packageStructure_resourceMap = packageStructure.resourceMap) === null || _packageStructure_resourceMap === void 0 ? void 0 : _packageStructure_resourceMap.size) > 1,\n                hasFonts: false,\n                linksCount: Array.from(((_packageStructure_resourceMap1 = packageStructure.resourceMap) === null || _packageStructure_resourceMap1 === void 0 ? void 0 : _packageStructure_resourceMap1.keys()) || []).filter((name)=>IDMLUtils.isImageFile(name)).length,\n                fontsCount: 0,\n                extractedImagesCount: extractedImages.length\n            };\n            return documentData;\n        } catch (error) {\n            console.error(\"Error processing IDML package:\", error);\n            throw error;\n        }\n    }\n    // Image processing methods\n    async extractAndSaveEmbeddedImages(idmlPath, uploadDir) {\n        return await this.fileExtractor.extractAndSaveEmbeddedImages(idmlPath, uploadDir);\n    }\n    async extractEmbeddedImageFromSpread(idmlPath, uploadDir) {\n        return await this.imageProcessor.extractEmbeddedImageFromSpread(idmlPath, uploadDir, this.xmlParser);\n    }\n    // Debug methods\n    async debugIDMLContents(idmlPath) {\n        return await this.fileExtractor.debugIDMLContents(idmlPath);\n    }\n    async debugIDMLContentsDetailed(idmlPath) {\n        return await this.fileExtractor.debugIDMLContentsDetailed(idmlPath);\n    }\n    async analyzeSpreadForImageReferences(idmlPath) {\n        return await this.imageProcessor.analyzeSpreadForImageReferences(idmlPath, this.xmlParser);\n    }\n    // Utility methods for backward compatibility\n    getPageContent(pageId) {\n        return this.documentParser.getPageContent(pageId);\n    }\n    // Getter methods for accessing module data\n    getStyles() {\n        return this.styleParser.getStyles();\n    }\n    getResources() {\n        return this.styleParser.getResources();\n    }\n    getStories() {\n        return this.storyParser.getStories();\n    }\n    getElements() {\n        return this.elementParser.getElements();\n    }\n    getSpreads() {\n        return this.documentParser.getSpreads();\n    }\n    getMasterSpreads() {\n        return this.documentParser.getMasterSpreads();\n    }\n    getDocumentInfo() {\n        return this.documentParser.getDocumentInfo();\n    }\n    getPageInfo() {\n        return this.documentParser.getPageInfo();\n    }\n    getLayers() {\n        return this.documentParser.getLayers();\n    }\n    // Module access for advanced usage\n    getXMLParser() {\n        return this.xmlParser;\n    }\n    getFileExtractor() {\n        return this.fileExtractor;\n    }\n    getStyleParser() {\n        return this.styleParser;\n    }\n    getStoryParser() {\n        return this.storyParser;\n    }\n    getElementParser() {\n        return this.elementParser;\n    }\n    getDocumentParser() {\n        return this.documentParser;\n    }\n    getImageProcessor() {\n        return this.imageProcessor;\n    }\n    getDebugAnalyzer() {\n        return this.debugAnalyzer;\n    }\n    /**\r\n   * Process Next.js fonts for the document\r\n   * @param {Object} documentData - Processed IDML document data\r\n   * @returns {Object} Next.js font configuration\r\n   */ processNextFonts(documentData) {\n        console.log(\"\\uD83D\\uDD24 Starting Next.js font processing...\");\n        // Clear previous cache\n        this.fontMapper.clearCache();\n        // Extract and map all unique fonts from the document\n        const mappedFonts = this.fontMapper.extractDocumentFonts(documentData);\n        // Process stories to add Next.js font info to formatted content\n        if (documentData.stories) {\n            Object.values(documentData.stories).forEach((story)=>{\n                if (story.formattedContent) {\n                    story.formattedContent.forEach((segment)=>{\n                        if (segment.formatting && segment.formatting.fontFamily) {\n                            const nextFontConfig = this.fontMapper.mapToNextFont(segment.formatting.fontFamily, segment.formatting.fontStyle, segment.formatting.fontSize);\n                            // Add Next.js font information to the segment\n                            segment.formatting.nextFont = nextFontConfig;\n                        }\n                    });\n                }\n            });\n        }\n        // Generate Next.js code snippets\n        const fontImports = this.fontMapper.generateNextFontImports();\n        const fontVariables = this.fontMapper.generateFontVariables();\n        const usedFontNames = Array.from(this.fontMapper.nextFontImports);\n        // Create CSS variables for all fonts\n        const cssVariables = mappedFonts.map((font)=>\"\".concat(font.nextFontVariable, \": \").concat(font.fontFamilyFallback, \";\")).join(\"\\n  \");\n        const nextFontConfig = {\n            // Mapped fonts\n            usedFonts: mappedFonts,\n            totalFonts: mappedFonts.length,\n            // Next.js code generation\n            imports: fontImports,\n            variables: fontVariables,\n            cssVariables: cssVariables,\n            usedFontNames: usedFontNames,\n            // Usage examples\n            examples: {\n                className: mappedFonts.length > 0 ? \"${\".concat(mappedFonts[0].nextFont.toLowerCase(), \".className}\") : \"\",\n                variable: mappedFonts.length > 0 ? mappedFonts[0].nextFontVariable : \"\",\n                fontFamily: mappedFonts.length > 0 ? mappedFonts[0].fontFamily : \"\"\n            },\n            // Implementation guide\n            implementation: {\n                step1: \"Add the imports to your page or component\",\n                step2: \"Initialize the fonts with the provided variables\",\n                step3: \"Use the className or CSS variables in your components\",\n                step4: \"All fonts are loaded from Next.js, not user's machine\"\n            }\n        };\n        console.log(\"\\uD83C\\uDFAF Next.js font processing summary:\");\n        console.log(\"   \\uD83D\\uDCCA Total fonts mapped: \".concat(mappedFonts.length));\n        console.log(\"   \\uD83D\\uDCE6 Google Fonts: \".concat(mappedFonts.filter((f)=>f.isGoogleFont).length));\n        console.log(\"   \\uD83D\\uDDA5️  System Fonts: \".concat(mappedFonts.filter((f)=>f.isSystemFont).length));\n        console.log(\"   \\uD83D\\uDD17 Unique Next.js fonts: \".concat(usedFontNames.length));\n        return nextFontConfig;\n    }\n    constructor(options = {}){\n        // Configuration options\n        this.config = {\n            dpi: options.dpi || 96,\n            convertToPixels: options.convertToPixels !== false,\n            preserveOriginalUnits: options.preserveOriginalUnits !== false,\n            enableNextFonts: options.enableNextFonts !== false,\n            ...options\n        };\n        // ADDED: Initialize unit converter with configured DPI first\n        this.unitConverter = new UnitConverter(this.config.dpi);\n        // ADDED: Initialize Next.js font mapper\n        this.fontMapper = new NextFontMapper();\n        // Initialize all modules\n        this.xmlParser = new IDMLXMLParser();\n        this.fileExtractor = new FileExtractor();\n        this.styleParser = new StyleParser(this.unitConverter); // ADDED: Pass UnitConverter\n        this.elementParser = new ElementParser(this.unitConverter); // ADDED: Pass UnitConverter\n        this.storyParser = new StoryParser(this.styleParser, this.unitConverter); // ADDED: Pass UnitConverter\n        this.documentParser = new DocumentParser(this.elementParser, this.styleParser, this.unitConverter); // FIXED: Pass StyleParser and UnitConverter\n        this.imageProcessor = new ImageProcessor(this.fileExtractor);\n        this.debugAnalyzer = new DebugAnalyzer();\n        // Maintain backward compatibility properties\n        this.document = null;\n        this.resources = {};\n        this.spreads = {};\n        this.stories = {};\n        this.masterSpreads = {};\n        this.documentInfo = {};\n        this.pageInfo = {};\n        this.elements = [];\n        this.layers = [];\n        this.styles = {\n            paragraph: {},\n            character: {},\n            object: {},\n            table: {},\n            cell: {}\n        };\n    }\n}\nmodule.exports = IDMLProcessor;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/IDMLProcessor.js\n"));

/***/ }),

/***/ "./lib/debug/DebugAnalyzer.js":
/*!************************************!*\
  !*** ./lib/debug/DebugAnalyzer.js ***!
  \************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass DebugAnalyzer {\n    async addComprehensiveTextFormattingDebug(processor) {\n        console.log(\"\\n\\uD83D\\uDD0D ======= COMPREHENSIVE TEXT FORMATTING DEBUG =======\");\n        const debugInfo = {\n            timestamp: new Date().toISOString(),\n            totalStories: Object.keys(processor.stories || {}).length,\n            totalElements: processor.elements ? processor.elements.length : 0,\n            styleDefinitions: processor.styleParser ? processor.styleParser.getStyles() : {},\n            detailedStoryAnalysis: {},\n            spreadElementAnalysis: {},\n            resourcesAnalysis: {},\n            xmlStructureAnalysis: {},\n            formattingAttributeMapping: {},\n            missingFormattingReasons: []\n        };\n        // 1. ANALYZE STORY CONTENT IN EXTREME DETAIL\n        console.log(\"\\n\\uD83D\\uDCDD === DETAILED STORY CONTENT ANALYSIS ===\");\n        if (processor.storyParser && processor.storyParser.getStories) {\n            const stories = processor.storyParser.getStories();\n            for (const [storyId, story] of Object.entries(stories)){\n                console.log(\"\\n--- STORY \".concat(storyId, \" DEEP DIVE ---\"));\n                debugInfo.detailedStoryAnalysis[storyId] = {\n                    storyStructure: this.analyzeStoryStructure(story),\n                    formattingExtraction: this.analyzeFormattingExtraction(story),\n                    xmlAttributes: this.extractAllXMLAttributes(story),\n                    nestedElements: this.findNestedFormattingElements(story),\n                    characterStyleRanges: this.extractCharacterStyleRanges(story),\n                    paragraphStyleRanges: this.extractParagraphStyleRanges(story),\n                    directFormattingAttributes: this.extractDirectFormattingAttributes(story),\n                    styleReferences: this.extractStyleReferences(story)\n                };\n            }\n        }\n        // 2. ANALYZE SPREAD ELEMENTS FOR TEXT FRAMES\n        if (processor.spreads) {\n            for (const [spreadId, spread] of Object.entries(processor.spreads)){\n                var _spread_pageItems;\n                debugInfo.spreadElementAnalysis[spreadId] = {\n                    textFrames: ((_spread_pageItems = spread.pageItems) === null || _spread_pageItems === void 0 ? void 0 : _spread_pageItems.filter((item)=>item.type === \"TextFrame\")) || [],\n                    textFrameDetails: this.analyzeTextFrameFormatting(spread.pageItems || [])\n                };\n            }\n        }\n        // 3. ANALYZE RESOURCES AND STYLE DEFINITIONS\n        if (processor.styleParser) {\n            debugInfo.resourcesAnalysis = {\n                paragraphStyles: this.analyzeParagraphStyles(processor.styleParser),\n                characterStyles: this.analyzeCharacterStyles(processor.styleParser),\n                styleHierarchy: this.analyzeStyleHierarchy(processor.styleParser),\n                fontDefinitions: this.analyzeFontDefinitions(processor.styleParser)\n            };\n        }\n        // 4. ANALYZE XML STRUCTURE FOR FORMATTING ATTRIBUTES\n        debugInfo.xmlStructureAnalysis = this.performXMLStructureAnalysis(processor);\n        // 5. CREATE FORMATTING ATTRIBUTE MAPPING\n        debugInfo.formattingAttributeMapping = this.createFormattingAttributeMapping();\n        // 6. IDENTIFY MISSING FORMATTING REASONS\n        debugInfo.missingFormattingReasons = this.identifyMissingFormattingReasons(processor);\n        // 7. SAVE DEBUG INFO TO FILE\n        const debugFileName = \"idml-text-formatting-debug-\".concat(Date.now(), \".json\");\n        IDMLUtils.saveDebugInfo(debugInfo, debugFileName);\n        console.log(\"\\n✅ Comprehensive debug completed. Check file: \".concat(debugFileName));\n        this.debugData = debugInfo;\n        return debugInfo;\n    }\n    // NEW: Output a debug file with ONLY style definitions (paragraph, character, font)\n    async addStyleOnlyDebug(processor) {\n        console.log(\"\\n\\uD83D\\uDD0D ======= STYLE-ONLY DEBUG =======\");\n        const styleDebug = {\n            timestamp: new Date().toISOString(),\n            paragraphStyles: processor.styleParser ? processor.styleParser.getParagraphStyles && processor.styleParser.getParagraphStyles() : {},\n            characterStyles: processor.styleParser ? processor.styleParser.getCharacterStyles && processor.styleParser.getCharacterStyles() : {},\n            fontDefinitions: processor.styleParser ? processor.styleParser.getFontDefinitions && processor.styleParser.getFontDefinitions() : {}\n        };\n        const debugFileName = \"idml-style-debug-\".concat(Date.now(), \".json\");\n        IDMLUtils.saveDebugInfo(styleDebug, debugFileName);\n        console.log(\"\\n✅ Style-only debug completed. Check file: \".concat(debugFileName));\n        this.debugData = styleDebug;\n        return styleDebug;\n    }\n    // NEW: Output a debug file with all extracted story text for whitespace debugging\n    async addExtractedTextDebug(processor) {\n        console.log(\"\\n\\uD83D\\uDD0D ======= EXTRACTED TEXT DEBUG =======\");\n        const stories = processor.storyParser && processor.storyParser.getStories ? processor.storyParser.getStories() : {};\n        const textDebug = {\n            timestamp: new Date().toISOString(),\n            stories: Object.fromEntries(Object.entries(stories).map((param)=>{\n                let [storyId, story] = param;\n                var _story_content, _story_content1, _story_content2;\n                return [\n                    storyId,\n                    {\n                        plainText: ((_story_content = story.content) === null || _story_content === void 0 ? void 0 : _story_content.plainText) || \"\",\n                        preview: (((_story_content1 = story.content) === null || _story_content1 === void 0 ? void 0 : _story_content1.plainText) || \"\").substring(0, 100),\n                        whitespaceSample: (((_story_content2 = story.content) === null || _story_content2 === void 0 ? void 0 : _story_content2.plainText) || \"\").replace(/[^\\s]/g, \"_\").substring(0, 100)\n                    }\n                ];\n            }))\n        };\n        const debugFileName = \"idml-extracted-text-debug-\".concat(Date.now(), \".json\");\n        IDMLUtils.saveDebugInfo(textDebug, debugFileName);\n        console.log(\"\\n✅ Extracted text debug completed. Check file: \".concat(debugFileName));\n        this.debugData = textDebug;\n        return textDebug;\n    }\n    analyzeStoryStructure(story) {\n        var _story_content_formattedContent, _story_content;\n        const structure = {\n            rawStoryKeys: Object.keys(story),\n            contentKeys: story.content ? Object.keys(story.content) : [],\n            textFormattingKeys: story.textFormatting ? Object.keys(story.textFormatting) : [],\n            hasFormattedContent: !!(story.content && story.content.formattedContent),\n            formattedContentLength: ((_story_content = story.content) === null || _story_content === void 0 ? void 0 : (_story_content_formattedContent = _story_content.formattedContent) === null || _story_content_formattedContent === void 0 ? void 0 : _story_content_formattedContent.length) || 0,\n            rawStoryData: JSON.stringify(story, null, 2).substring(0, 1000) + \"...\"\n        };\n        return structure;\n    }\n    analyzeFormattingExtraction(story) {\n        var _story_content, _story_content1;\n        const formatting = {\n            extractedFormatting: ((_story_content = story.content) === null || _story_content === void 0 ? void 0 : _story_content.formattedContent) || [],\n            formattingTypes: {},\n            attributesFound: new Set(),\n            formattingSample: []\n        };\n        if ((_story_content1 = story.content) === null || _story_content1 === void 0 ? void 0 : _story_content1.formattedContent) {\n            story.content.formattedContent.forEach((item, index)=>{\n                if (item.formatting) {\n                    Object.keys(item.formatting).forEach((key)=>{\n                        formatting.attributesFound.add(key);\n                        if (!formatting.formattingTypes[key]) {\n                            formatting.formattingTypes[key] = [];\n                        }\n                        formatting.formattingTypes[key].push(item.formatting[key]);\n                    });\n                    if (index < 3) {\n                        var _item_text;\n                        formatting.formattingSample.push({\n                            text: (_item_text = item.text) === null || _item_text === void 0 ? void 0 : _item_text.substring(0, 50),\n                            formatting: item.formatting\n                        });\n                    }\n                }\n            });\n        }\n        formatting.attributesFound = Array.from(formatting.attributesFound);\n        return formatting;\n    }\n    extractAllXMLAttributes(story) {\n        console.log(\"Extracting all XML attributes...\");\n        const attributes = {\n            storyLevelAttributes: {},\n            contentLevelAttributes: {},\n            allAttributeNames: new Set()\n        };\n        // Extract attributes from story object recursively\n        const extractAttributes = function(obj) {\n            let path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n            if (typeof obj === \"object\" && obj !== null) {\n                Object.keys(obj).forEach((key)=>{\n                    if (key.startsWith(\"@_\")) {\n                        attributes.allAttributeNames.add(key);\n                        const fullPath = path ? \"\".concat(path, \".\").concat(key) : key;\n                        if (!attributes.storyLevelAttributes[fullPath]) {\n                            attributes.storyLevelAttributes[fullPath] = obj[key];\n                        }\n                    } else if (typeof obj[key] === \"object\") {\n                        extractAttributes(obj[key], path ? \"\".concat(path, \".\").concat(key) : key);\n                    }\n                });\n            }\n        };\n        extractAttributes(story);\n        attributes.allAttributeNames = Array.from(attributes.allAttributeNames);\n        console.log(\"XML attributes found:\", attributes.allAttributeNames);\n        return attributes;\n    }\n    findNestedFormattingElements(story) {\n        console.log(\"Finding nested formatting elements...\");\n        const nested = {\n            characterStyleRanges: [],\n            paragraphStyleRanges: [],\n            directFormatting: [],\n            fontReferences: [],\n            colorReferences: []\n        };\n        const findNested = function(obj) {\n            let path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n            if (typeof obj === \"object\" && obj !== null) {\n                Object.keys(obj).forEach((key)=>{\n                    const value = obj[key];\n                    const currentPath = path ? \"\".concat(path, \".\").concat(key) : key;\n                    if (key === \"CharacterStyleRange\") {\n                        nested.characterStyleRanges.push({\n                            path: currentPath,\n                            data: value\n                        });\n                    } else if (key === \"ParagraphStyleRange\") {\n                        nested.paragraphStyleRanges.push({\n                            path: currentPath,\n                            data: value\n                        });\n                    } else if (key.includes(\"Font\") || key.includes(\"font\")) {\n                        nested.fontReferences.push({\n                            path: currentPath,\n                            value: value\n                        });\n                    } else if (key.includes(\"Color\") || key.includes(\"color\")) {\n                        nested.colorReferences.push({\n                            path: currentPath,\n                            value: value\n                        });\n                    } else if (key.startsWith(\"@_\") && IDMLUtils.isFormattingAttribute(key)) {\n                        nested.directFormatting.push({\n                            path: currentPath,\n                            attribute: key,\n                            value: value\n                        });\n                    } else if (typeof value === \"object\") {\n                        findNested(value, currentPath);\n                    }\n                });\n            }\n        };\n        findNested(story);\n        console.log(\"Nested formatting elements:\", {\n            characterStyleRanges: nested.characterStyleRanges.length,\n            paragraphStyleRanges: nested.paragraphStyleRanges.length,\n            directFormatting: nested.directFormatting.length,\n            fontReferences: nested.fontReferences.length,\n            colorReferences: nested.colorReferences.length\n        });\n        return nested;\n    }\n    extractCharacterStyleRanges(story) {\n        console.log(\"Extracting character style ranges...\");\n        const ranges = [];\n        const extractRanges = (obj)=>{\n            if (typeof obj === \"object\" && obj !== null) {\n                if (obj.CharacterStyleRange) {\n                    const charRanges = Array.isArray(obj.CharacterStyleRange) ? obj.CharacterStyleRange : [\n                        obj.CharacterStyleRange\n                    ];\n                    charRanges.forEach((range)=>{\n                        ranges.push({\n                            appliedCharacterStyle: range[\"@_AppliedCharacterStyle\"],\n                            pointSize: range[\"@_PointSize\"],\n                            appliedFont: range[\"@_AppliedFont\"],\n                            fontStyle: range[\"@_FontStyle\"],\n                            fillColor: range[\"@_FillColor\"],\n                            strokeColor: range[\"@_StrokeColor\"],\n                            tracking: range[\"@_Tracking\"],\n                            leading: range[\"@_Leading\"],\n                            allAttributes: Object.keys(range).filter((k)=>k.startsWith(\"@_\")),\n                            contentLength: range.Content ? Array.isArray(range.Content) ? range.Content.join(\"\").length : String(range.Content).length : 0,\n                            rawRange: range\n                        });\n                    });\n                }\n                Object.values(obj).forEach((value)=>{\n                    if (typeof value === \"object\") {\n                        extractRanges(value);\n                    }\n                });\n            }\n        };\n        extractRanges(story);\n        console.log(\"Found \".concat(ranges.length, \" character style ranges\"));\n        ranges.forEach((range, index)=>{\n            console.log(\"  Range \".concat(index + 1, \":\"), {\n                style: range.appliedCharacterStyle,\n                fontSize: range.pointSize,\n                font: range.appliedFont,\n                color: range.fillColor,\n                contentLength: range.contentLength\n            });\n        });\n        return ranges;\n    }\n    extractParagraphStyleRanges(story) {\n        console.log(\"Extracting paragraph style ranges...\");\n        const ranges = [];\n        const extractRanges = (obj)=>{\n            if (typeof obj === \"object\" && obj !== null) {\n                if (obj.ParagraphStyleRange) {\n                    const paraRanges = Array.isArray(obj.ParagraphStyleRange) ? obj.ParagraphStyleRange : [\n                        obj.ParagraphStyleRange\n                    ];\n                    paraRanges.forEach((range)=>{\n                        ranges.push({\n                            appliedParagraphStyle: range[\"@_AppliedParagraphStyle\"],\n                            justification: range[\"@_Justification\"],\n                            leftIndent: range[\"@_LeftIndent\"],\n                            rightIndent: range[\"@_RightIndent\"],\n                            firstLineIndent: range[\"@_FirstLineIndent\"],\n                            spaceBefore: range[\"@_SpaceBefore\"],\n                            spaceAfter: range[\"@_SpaceAfter\"],\n                            allAttributes: Object.keys(range).filter((k)=>k.startsWith(\"@_\")),\n                            hasCharacterStyleRanges: !!range.CharacterStyleRange,\n                            characterStyleRangeCount: range.CharacterStyleRange ? Array.isArray(range.CharacterStyleRange) ? range.CharacterStyleRange.length : 1 : 0,\n                            rawRange: range\n                        });\n                    });\n                }\n                Object.values(obj).forEach((value)=>{\n                    if (typeof value === \"object\") {\n                        extractRanges(value);\n                    }\n                });\n            }\n        };\n        extractRanges(story);\n        console.log(\"Found \".concat(ranges.length, \" paragraph style ranges\"));\n        ranges.forEach((range, index)=>{\n            console.log(\"  Range \".concat(index + 1, \":\"), {\n                style: range.appliedParagraphStyle,\n                justification: range.justification,\n                characterRanges: range.characterStyleRangeCount\n            });\n        });\n        return ranges;\n    }\n    extractDirectFormattingAttributes(story) {\n        console.log(\"Extracting direct formatting attributes...\");\n        const directFormatting = [];\n        const extractDirect = function(obj) {\n            let path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n            if (typeof obj === \"object\" && obj !== null) {\n                Object.keys(obj).forEach((key)=>{\n                    if (key.startsWith(\"@_\") && IDMLUtils.isFormattingAttribute(key)) {\n                        directFormatting.push({\n                            path: path,\n                            attribute: key,\n                            value: obj[key]\n                        });\n                    } else if (typeof obj[key] === \"object\") {\n                        extractDirect(obj[key], path ? \"\".concat(path, \".\").concat(key) : key);\n                    }\n                });\n            }\n        };\n        extractDirect(story);\n        console.log(\"Found \".concat(directFormatting.length, \" direct formatting attributes\"));\n        return directFormatting;\n    }\n    extractStyleReferences(story) {\n        console.log(\"Extracting style references...\");\n        const references = {\n            paragraphStyleReferences: new Set(),\n            characterStyleReferences: new Set(),\n            fontReferences: new Set(),\n            colorReferences: new Set()\n        };\n        const extractRefs = (obj)=>{\n            if (typeof obj === \"object\" && obj !== null) {\n                Object.keys(obj).forEach((key)=>{\n                    const value = obj[key];\n                    if (key === \"@_AppliedParagraphStyle\" && value) {\n                        references.paragraphStyleReferences.add(value);\n                    } else if (key === \"@_AppliedCharacterStyle\" && value) {\n                        references.characterStyleReferences.add(value);\n                    } else if (key === \"@_AppliedFont\" && value) {\n                        references.fontReferences.add(value);\n                    } else if ((key === \"@_FillColor\" || key === \"@_StrokeColor\") && value) {\n                        references.colorReferences.add(value);\n                    } else if (typeof value === \"object\") {\n                        extractRefs(value);\n                    }\n                });\n            }\n        };\n        extractRefs(story);\n        // Convert sets to arrays\n        Object.keys(references).forEach((key)=>{\n            references[key] = Array.from(references[key]);\n        });\n        console.log(\"Style references found:\", references);\n        return references;\n    }\n    analyzeTextFrameFormatting(pageItems) {\n        console.log(\"Analyzing text frame formatting...\");\n        const textFrames = pageItems.filter((item)=>item.type === \"TextFrame\");\n        const analysis = textFrames.map((frame)=>({\n                id: frame.self,\n                parentStory: frame.parentStory,\n                hasParentStory: !!frame.parentStory,\n                textFramePreferences: frame.textFramePreferences,\n                fillColor: frame.fillColor,\n                strokeColor: frame.strokeColor,\n                rawFrame: frame\n            }));\n        console.log(\"Analyzed \".concat(textFrames.length, \" text frames\"));\n        return analysis;\n    }\n    analyzeParagraphStyles(styleParser) {\n        console.log(\"Analyzing paragraph styles...\");\n        const styles = styleParser.getStyles();\n        const analysis = {\n            totalStyles: Object.keys(styles.paragraph).length,\n            styleDetails: {},\n            attributeCoverage: {}\n        };\n        Object.entries(styles.paragraph).forEach((param)=>{\n            let [styleId, style] = param;\n            analysis.styleDetails[styleId] = {\n                name: style.name,\n                pointSize: style.pointSize,\n                appliedFont: style.appliedFont,\n                alignment: style.alignment,\n                fillColor: style.fillColor,\n                allProperties: Object.keys(style)\n            };\n            // Track which attributes are available\n            Object.keys(style).forEach((attr)=>{\n                if (!analysis.attributeCoverage[attr]) {\n                    analysis.attributeCoverage[attr] = 0;\n                }\n                analysis.attributeCoverage[attr]++;\n            });\n        });\n        console.log(\"Paragraph styles analysis:\", analysis);\n        return analysis;\n    }\n    analyzeCharacterStyles(styleParser) {\n        console.log(\"Analyzing character styles...\");\n        const styles = styleParser.getStyles();\n        const analysis = {\n            totalStyles: Object.keys(styles.character).length,\n            styleDetails: {},\n            attributeCoverage: {}\n        };\n        Object.entries(styles.character).forEach((param)=>{\n            let [styleId, style] = param;\n            analysis.styleDetails[styleId] = {\n                name: style.name,\n                pointSize: style.pointSize,\n                appliedFont: style.appliedFont,\n                fontStyle: style.fontStyle,\n                fillColor: style.fillColor,\n                allProperties: Object.keys(style)\n            };\n            // Track which attributes are available\n            Object.keys(style).forEach((attr)=>{\n                if (!analysis.attributeCoverage[attr]) {\n                    analysis.attributeCoverage[attr] = 0;\n                }\n                analysis.attributeCoverage[attr]++;\n            });\n        });\n        console.log(\"Character styles analysis:\", analysis);\n        return analysis;\n    }\n    analyzeStyleHierarchy(styleParser) {\n        console.log(\"Analyzing style hierarchy...\");\n        return {\n            paragraphStyleHierarchy: this.extractStyleHierarchy(styleParser.getStyles().paragraph),\n            characterStyleHierarchy: this.extractStyleHierarchy(styleParser.getStyles().character),\n            styleInheritance: this.analyzeStyleInheritance()\n        };\n    }\n    extractStyleHierarchy(styles) {\n        const hierarchy = {};\n        Object.entries(styles).forEach((param)=>{\n            let [styleId, style] = param;\n            hierarchy[styleId] = {\n                basedOn: style.basedOn || null,\n                children: [],\n                level: 0\n            };\n        });\n        // Build parent-child relationships\n        Object.entries(hierarchy).forEach((param)=>{\n            let [styleId, info] = param;\n            if (info.basedOn && hierarchy[info.basedOn]) {\n                hierarchy[info.basedOn].children.push(styleId);\n                info.level = hierarchy[info.basedOn].level + 1;\n            }\n        });\n        return hierarchy;\n    }\n    analyzeStyleInheritance() {\n        return {\n            inheritanceChains: this.findInheritanceChains(),\n            overrides: this.findStyleOverrides()\n        };\n    }\n    findInheritanceChains() {\n        // Implementation for finding inheritance chains\n        return {};\n    }\n    findStyleOverrides() {\n        // Implementation for finding style overrides\n        return {};\n    }\n    analyzeFontDefinitions(styleParser) {\n        console.log(\"Analyzing font definitions...\");\n        const resources = styleParser.getResources();\n        return {\n            availableFonts: resources.fonts || {},\n            fontUsage: this.analyzeFontUsage(styleParser),\n            missingFonts: this.findMissingFonts(styleParser)\n        };\n    }\n    analyzeFontUsage(styleParser) {\n        const usage = {};\n        const styles = styleParser.getStyles();\n        // Analyze font usage in paragraph styles\n        Object.values(styles.paragraph).forEach((style)=>{\n            if (style.appliedFont) {\n                if (!usage[style.appliedFont]) {\n                    usage[style.appliedFont] = {\n                        paragraphStyles: 0,\n                        characterStyles: 0\n                    };\n                }\n                usage[style.appliedFont].paragraphStyles++;\n            }\n        });\n        // Analyze font usage in character styles\n        Object.values(styles.character).forEach((style)=>{\n            if (style.appliedFont) {\n                if (!usage[style.appliedFont]) {\n                    usage[style.appliedFont] = {\n                        paragraphStyles: 0,\n                        characterStyles: 0\n                    };\n                }\n                usage[style.appliedFont].characterStyles++;\n            }\n        });\n        return usage;\n    }\n    findMissingFonts(styleParser) {\n        const usedFonts = new Set();\n        const resources = styleParser.getResources();\n        const availableFonts = new Set(Object.keys(resources.fonts || {}));\n        const styles = styleParser.getStyles();\n        // Collect used fonts\n        Object.values(styles.paragraph).forEach((style)=>{\n            if (style.appliedFont) usedFonts.add(style.appliedFont);\n        });\n        Object.values(styles.character).forEach((style)=>{\n            if (style.appliedFont) usedFonts.add(style.appliedFont);\n        });\n        // Find missing fonts\n        const missing = Array.from(usedFonts).filter((font)=>!availableFonts.has(font));\n        return {\n            usedFonts: Array.from(usedFonts),\n            availableFonts: Array.from(availableFonts),\n            missingFonts: missing\n        };\n    }\n    performXMLStructureAnalysis(processor) {\n        console.log(\"Performing XML structure analysis...\");\n        const analysis = {\n            storyXMLStructure: {},\n            spreadXMLStructure: {},\n            resourceXMLStructure: {}\n        };\n        if (processor.storyParser) {\n            const stories = processor.storyParser.getStories();\n            Object.entries(stories).forEach((param)=>{\n                let [storyId, story] = param;\n                analysis.storyXMLStructure[storyId] = IDMLUtils.getXMLStructure(story);\n            });\n        }\n        if (processor.spreads) {\n            Object.entries(processor.spreads).forEach((param)=>{\n                let [spreadId, spread] = param;\n                analysis.spreadXMLStructure[spreadId] = IDMLUtils.getXMLStructure(spread);\n            });\n        }\n        if (processor.styleParser) {\n            const styles = processor.styleParser.getStyles();\n            const resources = processor.styleParser.getResources();\n            analysis.resourceXMLStructure = {\n                styles: IDMLUtils.getXMLStructure(styles),\n                fonts: IDMLUtils.getXMLStructure(resources.fonts),\n                colors: IDMLUtils.getXMLStructure(resources.colors)\n            };\n        }\n        return analysis;\n    }\n    createFormattingAttributeMapping() {\n        console.log(\"Creating formatting attribute mapping...\");\n        return {\n            inDesignToCSS: {\n                \"@_PointSize\": \"font-size\",\n                \"@_AppliedFont\": \"font-family\",\n                \"@_FontStyle\": \"font-weight\",\n                \"@_FillColor\": \"color\",\n                \"@_Justification\": \"text-align\",\n                \"@_Leading\": \"line-height\",\n                \"@_Tracking\": \"letter-spacing\",\n                \"@_LeftIndent\": \"margin-left\",\n                \"@_RightIndent\": \"margin-right\",\n                \"@_FirstLineIndent\": \"text-indent\",\n                \"@_SpaceBefore\": \"margin-top\",\n                \"@_SpaceAfter\": \"margin-bottom\"\n            },\n            attributeLocations: {\n                fontSize: [\n                    \"CharacterStyleRange@_PointSize\",\n                    \"ParagraphStyle.pointSize\",\n                    \"CharacterStyle.pointSize\"\n                ],\n                fontFamily: [\n                    \"CharacterStyleRange@_AppliedFont\",\n                    \"ParagraphStyle.appliedFont\",\n                    \"CharacterStyle.appliedFont\"\n                ],\n                alignment: [\n                    \"ParagraphStyleRange@_Justification\",\n                    \"ParagraphStyle.alignment\"\n                ],\n                color: [\n                    \"CharacterStyleRange@_FillColor\",\n                    \"ParagraphStyle.fillColor\",\n                    \"CharacterStyle.fillColor\"\n                ]\n            }\n        };\n    }\n    identifyMissingFormattingReasons(processor) {\n        console.log(\"Identifying missing formatting reasons...\");\n        const reasons = [];\n        // Check if styles are being extracted properly\n        if (processor.styleParser) {\n            const styles = processor.styleParser.getStyles();\n            if (Object.keys(styles.paragraph).length === 0) {\n                reasons.push(\"No paragraph styles extracted - check Resources/Styles.xml parsing\");\n            }\n            if (Object.keys(styles.character).length === 0) {\n                reasons.push(\"No character styles extracted - check Resources/Styles.xml parsing\");\n            }\n        } else {\n            reasons.push(\"StyleParser not available - check initialization\");\n        }\n        // Check if story content has formatting\n        if (processor.storyParser) {\n            const stories = processor.storyParser.getStories();\n            const storiesWithFormatting = Object.values(stories).filter((story)=>{\n                var _story_content_formattedContent, _story_content;\n                return (_story_content = story.content) === null || _story_content === void 0 ? void 0 : (_story_content_formattedContent = _story_content.formattedContent) === null || _story_content_formattedContent === void 0 ? void 0 : _story_content_formattedContent.some((item)=>item.formatting && Object.keys(item.formatting).length > 1);\n            });\n            if (storiesWithFormatting.length === 0) {\n                reasons.push(\"No stories have detailed formatting - check CharacterStyleRange extraction\");\n            }\n        }\n        // Check if text frames are linked to stories\n        if (processor.elements) {\n            const textFrames = processor.elements.filter((el)=>el.type === \"TextFrame\");\n            const linkedFrames = textFrames.filter((frame)=>{\n                if (processor.storyParser) {\n                    const stories = processor.storyParser.getStories();\n                    return frame.parentStory && stories[frame.parentStory];\n                }\n                return false;\n            });\n            if (textFrames.length > 0 && linkedFrames.length === 0) {\n                reasons.push(\"Text frames not properly linked to stories - check parentStory references\");\n            }\n        }\n        return reasons;\n    }\n    getDebugData() {\n        return this.debugData;\n    }\n    clearDebugData() {\n        this.debugData = {};\n    }\n    constructor(){\n        this.debugData = {};\n    }\n}\nmodule.exports = DebugAnalyzer;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/debug/DebugAnalyzer.js\n"));

/***/ }),

/***/ "./lib/extractors/FileExtractor.js":
/*!*****************************************!*\
  !*** ./lib/extractors/FileExtractor.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n\nconst yauzl = __webpack_require__(/*! yauzl */ \"./node_modules/yauzl/index.js\");\nconst path = __webpack_require__(/*! path */ \"./node_modules/next/dist/compiled/path-browserify/index.js\");\nconst fs = __webpack_require__(/*! fs */ \"?7ea0\");\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass FileExtractor {\n    async extractIDMLContents(filePath) {\n        return new Promise((resolve, reject)=>{\n            const extractedData = {};\n            yauzl.open(filePath, {\n                lazyEntries: true\n            }, (err, zipfile)=>{\n                if (err) return reject(err);\n                const allEntries = [];\n                zipfile.on(\"entry\", (entry)=>{\n                    allEntries.push(entry);\n                    if (entry.fileName.endsWith(\"/\")) {\n                        zipfile.readEntry();\n                        return;\n                    }\n                    zipfile.openReadStream(entry, (err, readStream)=>{\n                        if (err) {\n                            console.error(\"Error reading \".concat(entry.fileName, \":\"), err);\n                            zipfile.readEntry();\n                            return;\n                        }\n                        let content = \"\";\n                        readStream.on(\"data\", (chunk)=>{\n                            content += chunk.toString();\n                        });\n                        readStream.on(\"end\", ()=>{\n                            extractedData[entry.fileName] = content;\n                            console.log(\"✅ Extracted: \".concat(entry.fileName, \" (\").concat(content.length, \" chars)\"));\n                            // Always continue reading entries\n                            zipfile.readEntry();\n                        });\n                    });\n                });\n                zipfile.on(\"end\", ()=>{\n                    console.log(\"ZIP reading completed. Extracted \".concat(Object.keys(extractedData).length, \" files\"));\n                    // ADD THIS DEBUG:\n                    console.log(\"\\n\\uD83D\\uDD0D === FILES IN IDML ===\");\n                    Object.keys(extractedData).forEach((fileName)=>{\n                        console.log(\"  \\uD83D\\uDCC1 \".concat(fileName));\n                    });\n                    // CHECK FOR STORIES SPECIFICALLY:\n                    const storyFiles = Object.keys(extractedData).filter((name)=>name.startsWith(\"Stories/\"));\n                    console.log(\"\\n\\uD83D\\uDCDD Found \".concat(storyFiles.length, \" story files:\"), storyFiles);\n                    resolve(extractedData);\n                });\n                zipfile.readEntry();\n            });\n        });\n    }\n    async debugIDMLContents(idmlPath) {\n        console.log(\"\\n\\uD83D\\uDD0D === DEBUGGING IDML CONTENTS ===\");\n        return new Promise((resolve, reject)=>{\n            yauzl.open(idmlPath, {\n                lazyEntries: true\n            }, (err, zipfile)=>{\n                if (err) return reject(err);\n                const contents = [];\n                zipfile.on(\"entry\", (entry)=>{\n                    console.log(\"\\uD83D\\uDCC1 Found: \".concat(entry.fileName));\n                    if (entry.fileName.startsWith(\"Links/\") && IDMLUtils.isImageFile(entry.fileName)) {\n                        console.log(\"\\uD83D\\uDCF7 EMBEDDED IMAGE FOUND: \".concat(entry.fileName));\n                    }\n                    contents.push(entry.fileName);\n                    zipfile.readEntry();\n                });\n                zipfile.on(\"end\", ()=>{\n                    console.log(\"\\n\\uD83D\\uDCCA Total files in IDML: \".concat(contents.length));\n                    console.log(\"\\uD83D\\uDCC1 Folders found:\", [\n                        ...new Set(contents.map((f)=>f.split(\"/\")[0]))\n                    ]);\n                    const imageFiles = contents.filter((f)=>IDMLUtils.isImageFile(f));\n                    console.log(\"\\uD83D\\uDCF7 Image files in IDML: \".concat(imageFiles.length));\n                    imageFiles.forEach((img)=>console.log(\"  - \".concat(img)));\n                    resolve(contents);\n                });\n                zipfile.readEntry();\n            });\n        });\n    }\n    async debugIDMLContentsDetailed(idmlPath) {\n        console.log(\"\\n\\uD83D\\uDD0D === DETAILED IDML ANALYSIS ===\");\n        return new Promise((resolve, reject)=>{\n            yauzl.open(idmlPath, {\n                lazyEntries: true\n            }, (err, zipfile)=>{\n                if (err) return reject(err);\n                const detailedAnalysis = {\n                    totalFiles: 0,\n                    filesByType: {},\n                    allFiles: [],\n                    binaryFiles: [],\n                    xmlFiles: [],\n                    imageFiles: [],\n                    unknownFiles: [],\n                    fileDetails: {},\n                    suspiciousFiles: [],\n                    largeBinaryFiles: []\n                };\n                zipfile.on(\"entry\", (entry)=>{\n                    detailedAnalysis.totalFiles++;\n                    detailedAnalysis.allFiles.push(entry.fileName);\n                    // Analyze file type and size\n                    const ext = path.extname(entry.fileName).toLowerCase();\n                    const size = entry.uncompressedSize || 0;\n                    const isDirectory = entry.fileName.endsWith(\"/\");\n                    if (!detailedAnalysis.filesByType[ext]) {\n                        detailedAnalysis.filesByType[ext] = [];\n                    }\n                    detailedAnalysis.filesByType[ext].push(entry.fileName);\n                    // Store detailed file info\n                    detailedAnalysis.fileDetails[entry.fileName] = {\n                        compressedSize: entry.compressedSize,\n                        uncompressedSize: entry.uncompressedSize,\n                        compressionMethod: entry.compressionMethod,\n                        isDirectory: isDirectory,\n                        extension: ext\n                    };\n                    if (!isDirectory) {\n                        // Check for images by extension\n                        if (IDMLUtils.isImageFile(entry.fileName)) {\n                            detailedAnalysis.imageFiles.push({\n                                fileName: entry.fileName,\n                                size: size,\n                                compressed: entry.compressedSize,\n                                ratio: entry.compressedSize / size\n                            });\n                            console.log(\"\\uD83D\\uDCF7 IMAGE FILE FOUND: \".concat(entry.fileName, \" (\").concat(size, \" bytes)\"));\n                        } else if (ext === \".xml\") {\n                            detailedAnalysis.xmlFiles.push(entry.fileName);\n                        } else if (ext === \"\" && size > 1000) {\n                            detailedAnalysis.suspiciousFiles.push({\n                                fileName: entry.fileName,\n                                size: size,\n                                reason: \"No extension but large size\"\n                            });\n                            console.log(\"❓ SUSPICIOUS FILE: \".concat(entry.fileName, \" (\").concat(size, \" bytes, no extension)\"));\n                        } else if (size > 10000 && ext !== \".xml\") {\n                            detailedAnalysis.largeBinaryFiles.push({\n                                fileName: entry.fileName,\n                                size: size,\n                                extension: ext\n                            });\n                            console.log(\"\\uD83D\\uDCE6 LARGE BINARY: \".concat(entry.fileName, \" (\").concat(size, \" bytes, \").concat(ext, \")\"));\n                        } else if (entry.fileName.includes(\"Link\") || entry.fileName.includes(\"Image\") || entry.fileName.includes(\"Graphic\") || size > 50000) {\n                            detailedAnalysis.suspiciousFiles.push({\n                                fileName: entry.fileName,\n                                size: size,\n                                reason: \"Contains image-related keywords or very large\"\n                            });\n                            console.log(\"\\uD83D\\uDD0D POTENTIAL IMAGE: \".concat(entry.fileName, \" (\").concat(size, \" bytes)\"));\n                        }\n                    }\n                    zipfile.readEntry();\n                });\n                zipfile.on(\"end\", ()=>{\n                    console.log(\"\\n\\uD83D\\uDCCA DETAILED ANALYSIS COMPLETE:\");\n                    console.log(\"Total files: \".concat(detailedAnalysis.totalFiles));\n                    console.log(\"Image files found: \".concat(detailedAnalysis.imageFiles.length));\n                    console.log(\"Suspicious files: \".concat(detailedAnalysis.suspiciousFiles.length));\n                    console.log(\"Large binary files: \".concat(detailedAnalysis.largeBinaryFiles.length));\n                    console.log(\"File types: \".concat(Object.keys(detailedAnalysis.filesByType).join(\", \")));\n                    resolve(detailedAnalysis);\n                });\n                zipfile.readEntry();\n            });\n        });\n    }\n    async extractSampleContent(idmlPath, fileName) {\n        let maxBytes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1000;\n        console.log(\"\\uD83D\\uDCD6 Extracting sample from: \".concat(fileName));\n        return new Promise((resolve, reject)=>{\n            yauzl.open(idmlPath, {\n                lazyEntries: true\n            }, (err, zipfile)=>{\n                if (err) return reject(err);\n                zipfile.on(\"entry\", (entry)=>{\n                    if (entry.fileName === fileName) {\n                        zipfile.openReadStream(entry, (err, readStream)=>{\n                            if (err) return reject(err);\n                            let content = \"\";\n                            let bytesRead = 0;\n                            readStream.on(\"data\", (chunk)=>{\n                                if (bytesRead < maxBytes) {\n                                    const remainingBytes = maxBytes - bytesRead;\n                                    const chunkToAdd = chunk.slice(0, remainingBytes);\n                                    content += chunkToAdd.toString(\"hex\"); // Get hex representation\n                                    bytesRead += chunkToAdd.length;\n                                }\n                            });\n                            readStream.on(\"end\", ()=>{\n                                resolve({\n                                    fileName: fileName,\n                                    sampleHex: content,\n                                    sampleText: Buffer.from(content, \"hex\").toString(\"utf8\", 0, Math.min(500, content.length / 2)),\n                                    bytesRead: bytesRead\n                                });\n                            });\n                            readStream.on(\"error\", reject);\n                        });\n                    } else {\n                        zipfile.readEntry();\n                    }\n                });\n                zipfile.readEntry();\n            });\n        });\n    }\n    async extractFileContent(idmlPath, fileName) {\n        return new Promise((resolve, reject)=>{\n            yauzl.open(idmlPath, {\n                lazyEntries: true\n            }, (err, zipfile)=>{\n                if (err) return reject(err);\n                zipfile.on(\"entry\", (entry)=>{\n                    if (entry.fileName === fileName) {\n                        zipfile.openReadStream(entry, (err, readStream)=>{\n                            if (err) return reject(err);\n                            let content = \"\";\n                            readStream.on(\"data\", (chunk)=>{\n                                content += chunk.toString();\n                            });\n                            readStream.on(\"end\", ()=>{\n                                resolve(content);\n                            });\n                            readStream.on(\"error\", reject);\n                        });\n                    } else {\n                        zipfile.readEntry();\n                    }\n                });\n                zipfile.readEntry();\n            });\n        });\n    }\n    async extractAndSaveEmbeddedImages(idmlPath, uploadDir) {\n        console.log(\"\\uD83D\\uDDBC️ Extracting and saving embedded images...\");\n        const embeddedImages = [];\n        return new Promise((resolve, reject)=>{\n            yauzl.open(idmlPath, {\n                lazyEntries: true\n            }, (err, zipfile)=>{\n                if (err) return reject(err);\n                const imagesToExtract = [];\n                zipfile.on(\"entry\", (entry)=>{\n                    if (entry.fileName.startsWith(\"Links/\") && IDMLUtils.isImageFile(entry.fileName)) {\n                        console.log(\"\\uD83D\\uDCF7 Found embedded image: \".concat(entry.fileName));\n                        imagesToExtract.push(entry);\n                    }\n                    zipfile.readEntry();\n                });\n                zipfile.on(\"end\", async ()=>{\n                    console.log(\"Found \".concat(imagesToExtract.length, \" embedded images to extract\"));\n                    // Create Links folder in upload directory\n                    const linksDir = path.join(uploadDir, \"ExtractedLinks\");\n                    if (!fs.existsSync(linksDir)) {\n                        fs.mkdirSync(linksDir, {\n                            recursive: true\n                        });\n                    }\n                    // Extract each image\n                    for (const imageEntry of imagesToExtract){\n                        try {\n                            await this.extractSingleImage(idmlPath, imageEntry, linksDir);\n                            const fileName = path.basename(imageEntry.fileName);\n                            const extractedPath = path.join(linksDir, fileName);\n                            embeddedImages.push({\n                                originalPath: imageEntry.fileName,\n                                extractedPath: extractedPath,\n                                fileName: fileName,\n                                size: imageEntry.uncompressedSize,\n                                isExtracted: fs.existsSync(extractedPath)\n                            });\n                        } catch (error) {\n                            console.error(\"❌ Failed to extract \".concat(imageEntry.fileName, \":\"), error);\n                        }\n                    }\n                    console.log(\"✅ Extracted \".concat(embeddedImages.length, \" embedded images\"));\n                    resolve(embeddedImages);\n                });\n                zipfile.readEntry();\n            });\n        });\n    }\n    async extractSingleImage(idmlPath, imageEntry, outputDir) {\n        return new Promise((resolve, reject)=>{\n            yauzl.open(idmlPath, {\n                lazyEntries: true\n            }, (err, zipfile)=>{\n                if (err) return reject(err);\n                zipfile.on(\"entry\", (entry)=>{\n                    if (entry.fileName === imageEntry.fileName) {\n                        zipfile.openReadStream(entry, (err, readStream)=>{\n                            if (err) return reject(err);\n                            const fileName = path.basename(entry.fileName);\n                            const outputPath = path.join(outputDir, fileName);\n                            const writeStream = fs.createWriteStream(outputPath);\n                            readStream.pipe(writeStream);\n                            writeStream.on(\"finish\", ()=>{\n                                console.log(\"✅ Extracted: \".concat(fileName));\n                                resolve(outputPath);\n                            });\n                            writeStream.on(\"error\", reject);\n                        });\n                    } else {\n                        zipfile.readEntry();\n                    }\n                });\n                zipfile.readEntry();\n            });\n        });\n    }\n    async buildImageMap(packageStructure) {\n        const imageMap = new Map();\n        console.log(\"Building image map...\");\n        // Check all files in resourceMap first\n        if (packageStructure.resourceMap) {\n            packageStructure.resourceMap.forEach((filePath, fileName)=>{\n                if (IDMLUtils.isImageFile(fileName)) {\n                    imageMap.set(fileName, filePath);\n                    // Also add without extension for matching\n                    const nameWithoutExt = path.parse(fileName).name;\n                    imageMap.set(nameWithoutExt, filePath);\n                    console.log(\"Added to image map:\", fileName, \"->\", filePath);\n                }\n            });\n        }\n        // Check Links folder if it exists\n        if (fs.existsSync(packageStructure.linksFolder)) {\n            const files = fs.readdirSync(packageStructure.linksFolder);\n            console.log(\"Links folder contents:\", files);\n            for (const fileName of files){\n                if (IDMLUtils.isImageFile(fileName)) {\n                    const fullPath = path.join(packageStructure.linksFolder, fileName);\n                    imageMap.set(fileName, fullPath);\n                    const nameWithoutExt = path.parse(fileName).name;\n                    imageMap.set(nameWithoutExt, fullPath);\n                    console.log(\"Added from Links folder:\", fileName, \"->\", fullPath);\n                }\n            }\n        }\n        console.log(\"\\uD83D\\uDCF8 Image map built with \".concat(imageMap.size / 2, \" unique images\"));\n        Array.from(imageMap.keys()).forEach((key)=>{\n            console.log(\"  - Image key:\", key);\n        });\n        return imageMap;\n    }\n    async extractEmbeddedImages(packageStructure) {\n        const embeddedImages = new Map();\n        console.log(\"\\uD83D\\uDD0D Extracting embedded images from package...\");\n        // FIX: Use extractedPath instead of undefined property\n        const extractedPath = packageStructure.extractedPath || packageStructure.uploadDir;\n        // Check if there's a Links folder in the package\n        const linksPath = path.join(extractedPath, \"Links\");\n        if (fs.existsSync(linksPath)) {\n            const linkFiles = fs.readdirSync(linksPath);\n            console.log(\"Found link files:\", linkFiles);\n            for (const fileName of linkFiles){\n                if (IDMLUtils.isImageFile(fileName)) {\n                    const fullPath = path.join(linksPath, fileName);\n                    const stats = fs.statSync(fullPath);\n                    embeddedImages.set(fileName, {\n                        path: fullPath,\n                        size: stats.size,\n                        isEmbedded: true,\n                        originalName: fileName\n                    });\n                    console.log(\"\\uD83D\\uDCCE Found embedded image: \".concat(fileName, \" (\").concat(stats.size, \" bytes)\"));\n                }\n            }\n        }\n        // ALSO check the main package resourceMap for embedded images\n        if (packageStructure.resourceMap) {\n            packageStructure.resourceMap.forEach((filePath, fileName)=>{\n                if (IDMLUtils.isImageFile(fileName) && !embeddedImages.has(fileName)) {\n                    const stats = fs.existsSync(filePath) ? fs.statSync(filePath) : null;\n                    embeddedImages.set(fileName, {\n                        path: filePath,\n                        size: stats ? stats.size : 0,\n                        isEmbedded: packageStructure.isPackageUpload || false,\n                        originalName: fileName\n                    });\n                    console.log(\"\\uD83D\\uDCCE Found package image: \".concat(fileName));\n                }\n            });\n        }\n        console.log(\"✅ Extracted \".concat(embeddedImages.size, \" embedded/linked images\"));\n        return embeddedImages;\n    }\n    getExtractedFiles() {\n        return this.extractedFiles;\n    }\n    clearExtractedFiles() {\n        this.extractedFiles.clear();\n    }\n    constructor(){\n        this.extractedFiles = new Map();\n    }\n}\nmodule.exports = FileExtractor;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/extractors/FileExtractor.js\n"));

/***/ }),

/***/ "./lib/index.js":
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// Main processor\n\nconst IDMLProcessor = __webpack_require__(/*! ./IDMLProcessor */ \"./lib/IDMLProcessor.js\");\n// Individual modules for advanced usage\nconst IDMLXMLParser = __webpack_require__(/*! ./parsers/XMLParser */ \"./lib/parsers/XMLParser.js\");\nconst FileExtractor = __webpack_require__(/*! ./extractors/FileExtractor */ \"./lib/extractors/FileExtractor.js\");\nconst StyleParser = __webpack_require__(/*! ./parsers/StyleParser */ \"./lib/parsers/StyleParser.js\");\nconst StoryParser = __webpack_require__(/*! ./parsers/StoryParser */ \"./lib/parsers/StoryParser.js\");\nconst ElementParser = __webpack_require__(/*! ./parsers/ElementParser */ \"./lib/parsers/ElementParser.js\");\nconst DocumentParser = __webpack_require__(/*! ./parsers/DocumentParser */ \"./lib/parsers/DocumentParser.js\");\nconst ImageProcessor = __webpack_require__(/*! ./processors/ImageProcessor */ \"./lib/processors/ImageProcessor.js\");\nconst DebugAnalyzer = __webpack_require__(/*! ./debug/DebugAnalyzer */ \"./lib/debug/DebugAnalyzer.js\");\nconst IDMLUtils = __webpack_require__(/*! ./utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nconst ColorUtils = __webpack_require__(/*! ./utils/ColorUtils */ \"./lib/utils/ColorUtils.js\");\nconst InDesignTextMetrics = __webpack_require__(/*! ./utils/InDesignTextMetrics */ \"./lib/utils/InDesignTextMetrics.js\");\nmodule.exports = {\n    // Main class (default export)\n    IDMLProcessor,\n    // Individual modules\n    IDMLXMLParser,\n    FileExtractor,\n    StyleParser,\n    StoryParser,\n    ElementParser,\n    DocumentParser,\n    ImageProcessor,\n    DebugAnalyzer,\n    IDMLUtils,\n    ColorUtils,\n    InDesignTextMetrics,\n    // Convenience exports\n    parsers: {\n        XMLParser: IDMLXMLParser,\n        StyleParser,\n        StoryParser,\n        ElementParser,\n        DocumentParser\n    },\n    extractors: {\n        FileExtractor\n    },\n    processors: {\n        ImageProcessor\n    },\n    debug: {\n        DebugAnalyzer\n    },\n    utils: {\n        IDMLUtils,\n        ColorUtils\n    }\n};\n// Default export for backward compatibility\nmodule.exports[\"default\"] = IDMLProcessor;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCOztBQUNqQixNQUFNQSxnQkFBZ0JDLG1CQUFPQSxDQUFDO0FBRTlCLHdDQUF3QztBQUN4QyxNQUFNQyxnQkFBZ0JELG1CQUFPQSxDQUFDO0FBQzlCLE1BQU1FLGdCQUFnQkYsbUJBQU9BLENBQUM7QUFDOUIsTUFBTUcsY0FBY0gsbUJBQU9BLENBQUM7QUFDNUIsTUFBTUksY0FBY0osbUJBQU9BLENBQUM7QUFDNUIsTUFBTUssZ0JBQWdCTCxtQkFBT0EsQ0FBQztBQUM5QixNQUFNTSxpQkFBaUJOLG1CQUFPQSxDQUFDO0FBQy9CLE1BQU1PLGlCQUFpQlAsbUJBQU9BLENBQUM7QUFDL0IsTUFBTVEsZ0JBQWdCUixtQkFBT0EsQ0FBQztBQUM5QixNQUFNUyxZQUFZVCxtQkFBT0EsQ0FBQztBQUMxQixNQUFNVSxhQUFhVixtQkFBT0EsQ0FBQztBQUMzQixNQUFNVyxzQkFBc0JYLG1CQUFPQSxDQUFDO0FBRXBDWSxPQUFPQyxPQUFPLEdBQUc7SUFDZiw4QkFBOEI7SUFDOUJkO0lBRUEscUJBQXFCO0lBQ3JCRTtJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUVBLHNCQUFzQjtJQUN0QkcsU0FBUztRQUNQQyxXQUFXZDtRQUNYRTtRQUNBQztRQUNBQztRQUNBQztJQUNGO0lBRUFVLFlBQVk7UUFDVmQ7SUFDRjtJQUVBZSxZQUFZO1FBQ1ZWO0lBQ0Y7SUFFQVcsT0FBTztRQUNMVjtJQUNGO0lBRUFXLE9BQU87UUFDTFY7UUFDQUM7SUFDRjtBQUNGO0FBRUEsNENBQTRDO0FBQzVDRSx5QkFBc0IsR0FBR2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL2luZGV4LmpzP2E4ZDkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTWFpbiBwcm9jZXNzb3JcclxuY29uc3QgSURNTFByb2Nlc3NvciA9IHJlcXVpcmUoJy4vSURNTFByb2Nlc3NvcicpO1xyXG5cclxuLy8gSW5kaXZpZHVhbCBtb2R1bGVzIGZvciBhZHZhbmNlZCB1c2FnZVxyXG5jb25zdCBJRE1MWE1MUGFyc2VyID0gcmVxdWlyZSgnLi9wYXJzZXJzL1hNTFBhcnNlcicpO1xyXG5jb25zdCBGaWxlRXh0cmFjdG9yID0gcmVxdWlyZSgnLi9leHRyYWN0b3JzL0ZpbGVFeHRyYWN0b3InKTtcclxuY29uc3QgU3R5bGVQYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlcnMvU3R5bGVQYXJzZXInKTtcclxuY29uc3QgU3RvcnlQYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlcnMvU3RvcnlQYXJzZXInKTtcclxuY29uc3QgRWxlbWVudFBhcnNlciA9IHJlcXVpcmUoJy4vcGFyc2Vycy9FbGVtZW50UGFyc2VyJyk7XHJcbmNvbnN0IERvY3VtZW50UGFyc2VyID0gcmVxdWlyZSgnLi9wYXJzZXJzL0RvY3VtZW50UGFyc2VyJyk7XHJcbmNvbnN0IEltYWdlUHJvY2Vzc29yID0gcmVxdWlyZSgnLi9wcm9jZXNzb3JzL0ltYWdlUHJvY2Vzc29yJyk7XHJcbmNvbnN0IERlYnVnQW5hbHl6ZXIgPSByZXF1aXJlKCcuL2RlYnVnL0RlYnVnQW5hbHl6ZXInKTtcclxuY29uc3QgSURNTFV0aWxzID0gcmVxdWlyZSgnLi91dGlscy9JRE1MVXRpbHMnKTtcclxuY29uc3QgQ29sb3JVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvQ29sb3JVdGlscycpO1xyXG5jb25zdCBJbkRlc2lnblRleHRNZXRyaWNzID0gcmVxdWlyZSgnLi91dGlscy9JbkRlc2lnblRleHRNZXRyaWNzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAvLyBNYWluIGNsYXNzIChkZWZhdWx0IGV4cG9ydClcclxuICBJRE1MUHJvY2Vzc29yLFxyXG4gIFxyXG4gIC8vIEluZGl2aWR1YWwgbW9kdWxlc1xyXG4gIElETUxYTUxQYXJzZXIsXHJcbiAgRmlsZUV4dHJhY3RvcixcclxuICBTdHlsZVBhcnNlcixcclxuICBTdG9yeVBhcnNlcixcclxuICBFbGVtZW50UGFyc2VyLFxyXG4gIERvY3VtZW50UGFyc2VyLFxyXG4gIEltYWdlUHJvY2Vzc29yLFxyXG4gIERlYnVnQW5hbHl6ZXIsXHJcbiAgSURNTFV0aWxzLFxyXG4gIENvbG9yVXRpbHMsXHJcbiAgSW5EZXNpZ25UZXh0TWV0cmljcyxcclxuICBcclxuICAvLyBDb252ZW5pZW5jZSBleHBvcnRzXHJcbiAgcGFyc2Vyczoge1xyXG4gICAgWE1MUGFyc2VyOiBJRE1MWE1MUGFyc2VyLFxyXG4gICAgU3R5bGVQYXJzZXIsXHJcbiAgICBTdG9yeVBhcnNlcixcclxuICAgIEVsZW1lbnRQYXJzZXIsXHJcbiAgICBEb2N1bWVudFBhcnNlclxyXG4gIH0sXHJcbiAgXHJcbiAgZXh0cmFjdG9yczoge1xyXG4gICAgRmlsZUV4dHJhY3RvclxyXG4gIH0sXHJcbiAgXHJcbiAgcHJvY2Vzc29yczoge1xyXG4gICAgSW1hZ2VQcm9jZXNzb3JcclxuICB9LFxyXG4gIFxyXG4gIGRlYnVnOiB7XHJcbiAgICBEZWJ1Z0FuYWx5emVyXHJcbiAgfSxcclxuICBcclxuICB1dGlsczoge1xyXG4gICAgSURNTFV0aWxzLFxyXG4gICAgQ29sb3JVdGlsc1xyXG4gIH1cclxufTtcclxuXHJcbi8vIERlZmF1bHQgZXhwb3J0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XHJcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBJRE1MUHJvY2Vzc29yOyAiXSwibmFtZXMiOlsiSURNTFByb2Nlc3NvciIsInJlcXVpcmUiLCJJRE1MWE1MUGFyc2VyIiwiRmlsZUV4dHJhY3RvciIsIlN0eWxlUGFyc2VyIiwiU3RvcnlQYXJzZXIiLCJFbGVtZW50UGFyc2VyIiwiRG9jdW1lbnRQYXJzZXIiLCJJbWFnZVByb2Nlc3NvciIsIkRlYnVnQW5hbHl6ZXIiLCJJRE1MVXRpbHMiLCJDb2xvclV0aWxzIiwiSW5EZXNpZ25UZXh0TWV0cmljcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXJzZXJzIiwiWE1MUGFyc2VyIiwiZXh0cmFjdG9ycyIsInByb2Nlc3NvcnMiLCJkZWJ1ZyIsInV0aWxzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./lib/index.js\n"));

/***/ }),

/***/ "./lib/parsers/DocumentParser.js":
/*!***************************************!*\
  !*** ./lib/parsers/DocumentParser.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nconst path = __webpack_require__(/*! path */ \"./node_modules/next/dist/compiled/path-browserify/index.js\");\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass DocumentParser {\n    async parseDocumentStructure(extractedData, xmlParser) {\n        console.log(\"Parsing document structure...\");\n        console.log(\"\\uD83D\\uDD0D Total files to process:\", Object.keys(extractedData).length);\n        // Parse designmap.xml first (main document structure)\n        if (extractedData[\"designmap.xml\"]) {\n            console.log(\"Parsing designmap.xml...\");\n            try {\n                const designMapData = xmlParser.parse(extractedData[\"designmap.xml\"]);\n                this.document = designMapData.Document || designMapData;\n                await this.extractDocumentInfo(this.document);\n                console.log(\"✅ DesignMap parsed successfully\");\n            } catch (error) {\n                console.error(\"Error parsing designmap.xml:\", error);\n            }\n        }\n        // Parse Spreads\n        console.log(\"\\n\\uD83D\\uDCC4 === PARSING SPREADS ===\");\n        for (const [fileName, content] of Object.entries(extractedData)){\n            if (fileName.startsWith(\"Spreads/\")) {\n                console.log(\"\\uD83D\\uDD0D Processing spread:\", fileName);\n                await this.parseSpreadFile(fileName, content, xmlParser);\n            }\n        }\n        // Parse Master Spreads\n        console.log(\"\\n\\uD83C\\uDFA8 === PARSING MASTER SPREADS ===\");\n        for (const [fileName, content] of Object.entries(extractedData)){\n            if (fileName.startsWith(\"MasterSpreads/\")) {\n                console.log(\"\\uD83D\\uDD0D Processing master spread:\", fileName);\n                await this.parseMasterSpreadFile(fileName, content, xmlParser);\n            }\n        }\n    }\n    async extractDocumentInfo(document) {\n        console.log(\"Extracting document information...\");\n        if (!document) return;\n        // Extract document preferences and page setup\n        this.documentInfo = {\n            version: document[\"@_DOMVersion\"] || \"Unknown\",\n            self: document[\"@_Self\"] || \"Unknown\",\n            activeLayer: document[\"@_ActiveLayer\"] || null,\n            unusedSwatches: document[\"@_UnusedSwatches\"] || [],\n            // Document preferences\n            documentPreferences: this.extractDocumentPreferences(document),\n            // Page setup\n            pageSetup: this.extractPageSetup(document),\n            // Layers\n            layers: this.extractLayers(document),\n            // Pages\n            pages: this.extractPages(document)\n        };\n        console.log(\"✅ Document info extracted\");\n    }\n    extractDocumentPreferences(document) {\n        console.log(\"\\uD83D\\uDCCB Extracting document preferences...\");\n        console.log(\"Document keys:\", Object.keys(document));\n        const prefs = {};\n        // Try multiple possible locations for document preferences\n        let docPref = null;\n        if (document.DocumentPreference) {\n            docPref = document.DocumentPreference;\n            console.log(\"Found DocumentPreference\");\n        } else if (document.documentPreference) {\n            docPref = document.documentPreference;\n            console.log(\"Found documentPreference (lowercase)\");\n        } else if (document.Properties && document.Properties.DocumentPreference) {\n            docPref = document.Properties.DocumentPreference;\n            console.log(\"Found DocumentPreference in Properties\");\n        }\n        if (docPref) {\n            console.log(\"DocumentPreference keys:\", Object.keys(docPref));\n            prefs.pageWidth = parseFloat(docPref[\"@_PageWidth\"]) || 0;\n            prefs.pageHeight = parseFloat(docPref[\"@_PageHeight\"]) || 0;\n            prefs.left = parseFloat(docPref[\"@_Left\"]) || 0;\n            prefs.top = parseFloat(docPref[\"@_Top\"]) || 0;\n            prefs.right = parseFloat(docPref[\"@_Right\"]) || 0;\n            prefs.bottom = parseFloat(docPref[\"@_Bottom\"]) || 0;\n            prefs.columnCount = parseInt(docPref[\"@_ColumnCount\"]) || 1;\n            prefs.columnGutter = parseFloat(docPref[\"@_ColumnGutter\"]) || 0;\n            prefs.facingPages = docPref[\"@_FacingPages\"] === \"true\" || docPref[\"@_FacingPages\"] === true;\n            console.log(\"\\uD83D\\uDCCB Extracted document preferences:\", prefs);\n        } else {\n            console.log(\"⚠️ No DocumentPreference found in document\");\n        }\n        // Also try to extract margin preferences\n        let marginPref = null;\n        if (document.MarginPreference) {\n            marginPref = document.MarginPreference;\n            console.log(\"Found MarginPreference\");\n        } else if (document.marginPreference) {\n            marginPref = document.marginPreference;\n            console.log(\"Found marginPreference (lowercase)\");\n        } else if (document.Properties && document.Properties.MarginPreference) {\n            marginPref = document.Properties.MarginPreference;\n            console.log(\"Found MarginPreference in Properties\");\n        }\n        if (marginPref) {\n            console.log(\"MarginPreference keys:\", Object.keys(marginPref));\n            prefs.marginTop = parseFloat(marginPref[\"@_Top\"]) || 0;\n            prefs.marginBottom = parseFloat(marginPref[\"@_Bottom\"]) || 0;\n            prefs.marginLeft = parseFloat(marginPref[\"@_Left\"]) || 0;\n            prefs.marginRight = parseFloat(marginPref[\"@_Right\"]) || 0;\n            prefs.marginColumnCount = parseInt(marginPref[\"@_ColumnCount\"]) || 1;\n            prefs.marginColumnGutter = parseFloat(marginPref[\"@_ColumnGutter\"]) || 0;\n            console.log(\"\\uD83D\\uDCCF Extracted margin preferences:\", {\n                top: prefs.marginTop,\n                bottom: prefs.marginBottom,\n                left: prefs.marginLeft,\n                right: prefs.marginRight,\n                columnCount: prefs.marginColumnCount,\n                columnGutter: prefs.marginColumnGutter\n            });\n        }\n        return prefs;\n    }\n    extractPageSetup(document) {\n        const pageSetup = {\n            pages: [],\n            masterPages: [],\n            spreads: []\n        };\n        // Extract page information from document\n        if (document.Page) {\n            const pages = Array.isArray(document.Page) ? document.Page : [\n                document.Page\n            ];\n            pages.forEach((page)=>{\n                pageSetup.pages.push({\n                    self: page[\"@_Self\"],\n                    name: page[\"@_Name\"] || \"\",\n                    appliedMaster: page[\"@_AppliedMaster\"] || \"\",\n                    geometricBounds: IDMLUtils.parseGeometricBounds(page[\"@_GeometricBounds\"]),\n                    itemTransform: IDMLUtils.parseTransform(page[\"@_ItemTransform\"]),\n                    overrideList: page[\"@_OverrideList\"] || []\n                });\n            });\n        }\n        return pageSetup;\n    }\n    extractLayers(document) {\n        const layers = [];\n        if (document.Layer) {\n            const layerData = Array.isArray(document.Layer) ? document.Layer : [\n                document.Layer\n            ];\n            layerData.forEach((layer)=>{\n                layers.push({\n                    self: layer[\"@_Self\"],\n                    name: layer[\"@_Name\"] || \"\",\n                    visible: layer[\"@_Visible\"] !== false,\n                    locked: layer[\"@_Locked\"] === true,\n                    ignoreWrap: layer[\"@_IgnoreWrap\"] === true,\n                    showGuides: layer[\"@_ShowGuides\"] !== false,\n                    lockGuides: layer[\"@_LockGuides\"] === true,\n                    ui: layer[\"@_UI\"] || \"\",\n                    layerColor: layer[\"@_LayerColor\"] || \"LightBlue\"\n                });\n            });\n        }\n        this.layers = layers;\n        return layers;\n    }\n    extractPages(document) {\n        const pages = [];\n        if (document.Spread) {\n            const spreads = Array.isArray(document.Spread) ? document.Spread : [\n                document.Spread\n            ];\n            spreads.forEach((spread)=>{\n                if (spread.Page) {\n                    const spreadPages = Array.isArray(spread.Page) ? spread.Page : [\n                        spread.Page\n                    ];\n                    spreadPages.forEach((page)=>{\n                        pages.push({\n                            self: page[\"@_Self\"],\n                            name: page[\"@_Name\"] || \"\",\n                            appliedMaster: page[\"@_AppliedMaster\"] || \"\",\n                            geometricBounds: IDMLUtils.parseGeometricBounds(page[\"@_GeometricBounds\"]),\n                            itemTransform: IDMLUtils.parseTransform(page[\"@_ItemTransform\"]),\n                            spreadParent: spread[\"@_Self\"]\n                        });\n                    });\n                }\n            });\n        }\n        return pages;\n    }\n    async parseSpreadFile(fileName, content, xmlParser) {\n        console.log(\"\\uD83D\\uDCC4 Parsing spread: \".concat(fileName));\n        try {\n            var _parsed_Spread;\n            const parsed = xmlParser.parse(content);\n            const spreadId = path.basename(fileName, \".xml\");\n            const spreadData = ((_parsed_Spread = parsed.Spread) === null || _parsed_Spread === void 0 ? void 0 : _parsed_Spread.Spread) || parsed.Spread || parsed;\n            if (parsed.Spread) {\n                console.log(\"Spread wrapper keys:\", Object.keys(parsed.Spread));\n                if (parsed.Spread.Spread) {\n                    console.log(\"Actual spread keys:\", Object.keys(parsed.Spread.Spread));\n                }\n            }\n            if (spreadData.Page) {\n                const pages = Array.isArray(spreadData.Page) ? spreadData.Page : [\n                    spreadData.Page\n                ];\n                console.log(\"Found \".concat(pages.length, \" pages in spread\"));\n                pages.forEach((page, index)=>{\n                    console.log(\"Page \".concat(index, \" keys:\"), Object.keys(page));\n                    // Look for elements in the page\n                    Object.keys(page).forEach((key)=>{\n                        if (key !== \"@_Self\" && key !== \"@_Name\" && key !== \"@_GeometricBounds\" && key !== \"@_ItemTransform\" && key !== \"@_AppliedMaster\") {\n                            const value = page[key];\n                            if (Array.isArray(value)) {\n                                console.log(\"  Found array \".concat(key, \" with \").concat(value.length, \" items\"));\n                            } else if (typeof value === \"object\") {\n                                console.log(\"  Found object \".concat(key, \":\"), Object.keys(value));\n                            }\n                        }\n                    });\n                });\n            } else {\n                console.log(\"No Page property found in spread\");\n            }\n            // Check for direct elements in spread\n            Object.keys(spreadData).forEach((key)=>{\n                if (key.includes(\"Frame\") || key.includes(\"Rectangle\") || key.includes(\"Text\") || key.includes(\"Group\") || key.includes(\"Oval\")) {\n                    console.log(\"Found potential elements directly in spread: \".concat(key), Array.isArray(spreadData[key]) ? spreadData[key].length : \"single\");\n                }\n            });\n            // Extract detailed spread information\n            const detailedSpread = {\n                self: spreadData[\"@_Self\"],\n                flattenerOverride: spreadData[\"@_FlattenerOverride\"] || \"\",\n                bindingLocation: parseFloat(spreadData[\"@_BindingLocation\"]) || 0,\n                allowPageShuffle: spreadData[\"@_AllowPageShuffle\"] !== false,\n                // Extract page elements\n                pages: this.elementParser.extractSpreadPages(spreadData),\n                // Extract all page items (text frames, rectangles, etc.)\n                pageItems: this.elementParser.extractPageItems(spreadData)\n            };\n            this.spreads[spreadId] = detailedSpread;\n            console.log(\"✅ Spread \".concat(spreadId, \" parsed with \").concat(detailedSpread.pageItems.length, \" items\"));\n        } catch (error) {\n            console.error(\"❌ Error parsing spread \".concat(fileName, \":\"), error.message);\n        }\n    }\n    async parseMasterSpreadFile(fileName, content, xmlParser) {\n        console.log(\"\\uD83C\\uDFA8 Parsing master spread: \".concat(fileName));\n        try {\n            var _parsed_MasterSpread;\n            const parsed = xmlParser.parse(content);\n            const masterId = path.basename(fileName, \".xml\");\n            const masterData = ((_parsed_MasterSpread = parsed.MasterSpread) === null || _parsed_MasterSpread === void 0 ? void 0 : _parsed_MasterSpread.MasterSpread) || parsed.MasterSpread || parsed;\n            console.log(\"Parsed master spread keys:\", Object.keys(parsed));\n            if (parsed.MasterSpread) {\n                console.log(\"MasterSpread wrapper keys:\", Object.keys(parsed.MasterSpread));\n                if (parsed.MasterSpread.MasterSpread) {\n                    console.log(\"Actual master spread keys:\", Object.keys(parsed.MasterSpread.MasterSpread));\n                }\n            }\n            // Extract detailed master spread information\n            const detailedMaster = {\n                self: masterData[\"@_Self\"],\n                name: masterData[\"@_Name\"] || \"\",\n                namePrefix: masterData[\"@_NamePrefix\"] || \"\",\n                basedOn: masterData[\"@_BasedOn\"] || \"\",\n                itemTransform: IDMLUtils.parseTransform(masterData[\"@_ItemTransform\"]),\n                // Extract master pages\n                pages: this.elementParser.extractMasterPages(masterData),\n                // Extract master page items\n                pageItems: this.elementParser.extractPageItems(masterData)\n            };\n            this.masterSpreads[masterId] = detailedMaster;\n            console.log(\"✅ Master spread \".concat(masterId, \" parsed with \").concat(detailedMaster.pageItems.length, \" items\"));\n        } catch (error) {\n            console.error(\"❌ Error parsing master spread \".concat(fileName, \":\"), error.message);\n        }\n    }\n    async extractDetailedInformation() {\n        console.log(\"Extracting detailed information with enhanced processing...\");\n        this.pageInfo = {\n            dimensions: this.calculatePageDimensions(),\n            margins: this.calculateMargins(),\n            bleeds: this.calculateBleeds(),\n            guides: this.extractGuides(),\n            grids: this.extractGrids()\n        };\n        this.elementParser.createElementPositionMapFixed(); // Use the fixed version\n        console.log(\"✅ Enhanced detailed information extracted\");\n    }\n    calculatePageDimensions() {\n        var _this_documentInfo_preferences, _this_documentInfo_preferences_viewPreferences, _this_documentInfo_preferences1, _this_documentInfo;\n        // Try to get dimensions from spreads first (most reliable)\n        if (this.spreads && Object.keys(this.spreads).length > 0) {\n            const firstSpread = Object.values(this.spreads)[0];\n            if (firstSpread.pages && firstSpread.pages.length > 0) {\n                const firstPage = firstSpread.pages[0];\n                if (firstPage.geometricBounds) {\n                    var _this_documentInfo_preferences_viewPreferences1, _this_documentInfo_preferences2, _this_documentInfo1;\n                    const bounds = firstPage.geometricBounds;\n                    // FIXED: Get units from ViewPreferences instead of hardcoding 'Points'\n                    let units = \"Points\"; // fallback\n                    // Try to get units from StyleParser's documentInfo first\n                    if (this.styleParser && this.styleParser.getDocumentInfo) {\n                        var _styleParserInfo_preferences_viewPreferences, _styleParserInfo_preferences;\n                        const styleParserInfo = this.styleParser.getDocumentInfo();\n                        if (styleParserInfo === null || styleParserInfo === void 0 ? void 0 : (_styleParserInfo_preferences = styleParserInfo.preferences) === null || _styleParserInfo_preferences === void 0 ? void 0 : (_styleParserInfo_preferences_viewPreferences = _styleParserInfo_preferences.viewPreferences) === null || _styleParserInfo_preferences_viewPreferences === void 0 ? void 0 : _styleParserInfo_preferences_viewPreferences.horizontalMeasurementUnits) {\n                            units = styleParserInfo.preferences.viewPreferences.horizontalMeasurementUnits;\n                            console.log(\"\\uD83D\\uDCCF Using measurement units from StyleParser:\", units);\n                        }\n                    }\n                    // Fallback to local documentInfo\n                    if (units === \"Points\" && ((_this_documentInfo1 = this.documentInfo) === null || _this_documentInfo1 === void 0 ? void 0 : (_this_documentInfo_preferences2 = _this_documentInfo1.preferences) === null || _this_documentInfo_preferences2 === void 0 ? void 0 : (_this_documentInfo_preferences_viewPreferences1 = _this_documentInfo_preferences2.viewPreferences) === null || _this_documentInfo_preferences_viewPreferences1 === void 0 ? void 0 : _this_documentInfo_preferences_viewPreferences1.horizontalMeasurementUnits)) {\n                        units = this.documentInfo.preferences.viewPreferences.horizontalMeasurementUnits;\n                        console.log(\"\\uD83D\\uDCCF Using measurement units from local DocumentInfo:\", units);\n                    }\n                    const width = bounds.width || bounds.right - bounds.left || 0;\n                    const height = bounds.height || bounds.bottom - bounds.top || 0;\n                    const facingPages = Object.values(this.spreads).some((spread)=>spread.pages && spread.pages.length > 1);\n                    const dimensions = {\n                        width: width,\n                        height: height,\n                        facingPages: facingPages,\n                        units: units\n                    };\n                    // ADDED: Set document units on all parsers for consistent conversions\n                    if (this.elementParser && this.elementParser.setDocumentUnits) {\n                        this.elementParser.setDocumentUnits(units);\n                    }\n                    if (this.storyParser && this.storyParser.setDocumentUnits) {\n                        this.storyParser.setDocumentUnits(units);\n                    }\n                    if (this.styleParser && this.styleParser.setDocumentUnits) {\n                        this.styleParser.setDocumentUnits(units);\n                    }\n                    // ADDED: Convert to pixels if UnitConverter is available and conversion is enabled\n                    if (this.unitConverter && this.unitConverter.isSupportedUnit(units)) {\n                        return this.unitConverter.convertDimensions(dimensions);\n                    }\n                    return dimensions;\n                }\n            }\n        }\n        // Fallback to document preferences\n        const docPrefs = ((_this_documentInfo_preferences = this.documentInfo.preferences) === null || _this_documentInfo_preferences === void 0 ? void 0 : _this_documentInfo_preferences.documentPreferences) || {};\n        // FIXED: Better units detection for fallback case\n        let units = \"Points\"; // default fallback\n        // Try StyleParser first\n        if (this.styleParser && this.styleParser.getDocumentInfo) {\n            var _styleParserInfo_preferences_viewPreferences1, _styleParserInfo_preferences1;\n            const styleParserInfo = this.styleParser.getDocumentInfo();\n            if (styleParserInfo === null || styleParserInfo === void 0 ? void 0 : (_styleParserInfo_preferences1 = styleParserInfo.preferences) === null || _styleParserInfo_preferences1 === void 0 ? void 0 : (_styleParserInfo_preferences_viewPreferences1 = _styleParserInfo_preferences1.viewPreferences) === null || _styleParserInfo_preferences_viewPreferences1 === void 0 ? void 0 : _styleParserInfo_preferences_viewPreferences1.horizontalMeasurementUnits) {\n                units = styleParserInfo.preferences.viewPreferences.horizontalMeasurementUnits;\n            }\n        }\n        // Then try local documentInfo\n        if (units === \"Points\" && ((_this_documentInfo = this.documentInfo) === null || _this_documentInfo === void 0 ? void 0 : (_this_documentInfo_preferences1 = _this_documentInfo.preferences) === null || _this_documentInfo_preferences1 === void 0 ? void 0 : (_this_documentInfo_preferences_viewPreferences = _this_documentInfo_preferences1.viewPreferences) === null || _this_documentInfo_preferences_viewPreferences === void 0 ? void 0 : _this_documentInfo_preferences_viewPreferences.horizontalMeasurementUnits)) {\n            units = this.documentInfo.preferences.viewPreferences.horizontalMeasurementUnits;\n        }\n        console.log(\"\\uD83D\\uDCCF Final measurement units decision:\", units);\n        const dimensions = {\n            width: docPrefs.pageWidth || 0,\n            height: docPrefs.pageHeight || 0,\n            facingPages: docPrefs.facingPages || false,\n            units: units\n        };\n        // ADDED: Set document units on ElementParser, StoryParser, and StyleParser for consistent conversions\n        if (this.elementParser && this.elementParser.setDocumentUnits) {\n            this.elementParser.setDocumentUnits(units);\n        }\n        if (this.storyParser && this.storyParser.setDocumentUnits) {\n            this.storyParser.setDocumentUnits(units);\n        }\n        if (this.styleParser && this.styleParser.setDocumentUnits) {\n            this.styleParser.setDocumentUnits(units);\n        }\n        // ADDED: Convert to pixels if UnitConverter is available and conversion is enabled\n        if (this.unitConverter && this.unitConverter.isSupportedUnit(units)) {\n            return this.unitConverter.convertDimensions(dimensions);\n        }\n        return dimensions;\n    }\n    calculateMargins() {\n        var _this_documentInfo_preferences, _this_elementParser;\n        console.log(\"\\uD83D\\uDCCF Calculating margins from multiple sources...\");\n        // Try to get margins from master pages first (most reliable)\n        if (this.masterSpreads && Object.keys(this.masterSpreads).length > 0) {\n            const firstMaster = Object.values(this.masterSpreads)[0];\n            if (firstMaster.pages && firstMaster.pages.length > 0) {\n                const firstMasterPage = firstMaster.pages[0];\n                // Look for margin preferences in master page\n                // This will be populated by the improved master spread parsing\n                if (firstMasterPage.marginPreference) {\n                    var _this_elementParser1;\n                    const masterMargins = {\n                        top: firstMasterPage.marginPreference.top || 0,\n                        bottom: firstMasterPage.marginPreference.bottom || 0,\n                        left: firstMasterPage.marginPreference.left || 0,\n                        right: firstMasterPage.marginPreference.right || 0,\n                        columnCount: firstMasterPage.marginPreference.columnCount || 1,\n                        columnGutter: firstMasterPage.marginPreference.columnGutter || 0\n                    };\n                    console.log(\"\\uD83D\\uDCCF Found margins from master page:\", masterMargins);\n                    // ADDED: Convert margins to pixels if UnitConverter is available\n                    if (this.unitConverter && ((_this_elementParser1 = this.elementParser) === null || _this_elementParser1 === void 0 ? void 0 : _this_elementParser1.documentUnits)) {\n                        const pixelMargins = this.unitConverter.convertObjectToPixels(masterMargins, this.elementParser.documentUnits);\n                        return {\n                            ...masterMargins,\n                            pixelMargins: pixelMargins\n                        };\n                    }\n                    return masterMargins;\n                }\n            }\n        }\n        // Fallback to document preferences\n        const docPrefs = this.documentInfo.documentPreferences || {};\n        const marginPrefs = ((_this_documentInfo_preferences = this.documentInfo.preferences) === null || _this_documentInfo_preferences === void 0 ? void 0 : _this_documentInfo_preferences.marginPreferences) || {};\n        // Check for margin data in document preferences (fallback)\n        const margins = {\n            top: marginPrefs.top || docPrefs.marginTop || docPrefs.top || 0,\n            bottom: marginPrefs.bottom || docPrefs.marginBottom || docPrefs.bottom || 0,\n            left: marginPrefs.left || docPrefs.marginLeft || docPrefs.left || 0,\n            right: marginPrefs.right || docPrefs.marginRight || docPrefs.right || 0,\n            columnCount: marginPrefs.columnCount || docPrefs.marginColumnCount || docPrefs.columnCount || 1,\n            columnGutter: marginPrefs.columnGutter || docPrefs.marginColumnGutter || docPrefs.columnGutter || 0\n        };\n        console.log(\"\\uD83D\\uDCCF Calculated margins (fallback):\", margins);\n        // ADDED: Convert margins to pixels if UnitConverter is available\n        if (this.unitConverter && ((_this_elementParser = this.elementParser) === null || _this_elementParser === void 0 ? void 0 : _this_elementParser.documentUnits)) {\n            const pixelMargins = this.unitConverter.convertObjectToPixels(margins, this.elementParser.documentUnits);\n            return {\n                ...margins,\n                pixelMargins: pixelMargins\n            };\n        }\n        return margins;\n    }\n    calculateBleeds() {\n        var _this_documentInfo_preferences;\n        const docPrefs = ((_this_documentInfo_preferences = this.documentInfo.preferences) === null || _this_documentInfo_preferences === void 0 ? void 0 : _this_documentInfo_preferences.documentPreferences) || {};\n        return {\n            top: docPrefs.documentBleedTopOffset || 0,\n            bottom: docPrefs.documentBleedBottomOffset || 0,\n            inside: docPrefs.documentBleedInsideOrLeftOffset || 0,\n            outside: docPrefs.documentBleedOutsideOrRightOffset || 0\n        };\n    }\n    extractGuides() {\n        const guides = [];\n        // Extract guides from spreads\n        Object.values(this.spreads).forEach((spread)=>{\n            if (spread.pageItems) {\n                spread.pageItems.forEach((item)=>{\n                    if (item.type === \"Guide\") {\n                        guides.push({\n                            orientation: item.orientation || \"Horizontal\",\n                            location: item.location || 0,\n                            fitToPage: item.fitToPage || false,\n                            viewThreshold: item.viewThreshold || 0\n                        });\n                    }\n                });\n            }\n        });\n        return guides;\n    }\n    extractGrids() {\n        var _this_documentInfo_preferences;\n        const gridPrefs = ((_this_documentInfo_preferences = this.documentInfo.preferences) === null || _this_documentInfo_preferences === void 0 ? void 0 : _this_documentInfo_preferences.gridPreferences) || {};\n        return {\n            baseline: {\n                start: gridPrefs.baselineStart || 0,\n                division: gridPrefs.baselineDivision || 12,\n                shown: gridPrefs.baselineShown || false,\n                snapTo: gridPrefs.baselineSnapto || false\n            },\n            document: {\n                shown: gridPrefs.documentGridShown || false,\n                snapTo: gridPrefs.documentGridSnapto || false\n            }\n        };\n    }\n    // Utility method to get page content\n    getPageContent(pageId) {\n        return this.elementParser.getPageContent(pageId);\n    }\n    getDocument() {\n        return this.document;\n    }\n    getSpreads() {\n        return this.spreads;\n    }\n    getMasterSpreads() {\n        return this.masterSpreads;\n    }\n    getDocumentInfo() {\n        return this.documentInfo;\n    }\n    getPageInfo() {\n        return this.pageInfo;\n    }\n    getLayers() {\n        return this.layers;\n    }\n    calculateCoordinateOffset() {\n        return IDMLUtils.calculateCoordinateOffset(this.elementParser.getElements());\n    }\n    constructor(elementParser, styleParser = null, unitConverter = null){\n        this.elementParser = elementParser;\n        this.styleParser = styleParser; // ADDED: Reference to StyleParser for accessing ViewPreferences\n        this.unitConverter = unitConverter; // ADDED: Reference to UnitConverter for unit conversions\n        this.documentInfo = {};\n        this.spreads = {};\n        this.masterSpreads = {};\n        this.layers = [];\n    }\n}\nmodule.exports = DocumentParser;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TUFBTTtJQUNwQjtJQUVBNEosNEJBQTRCO1FBQzFCLE9BQU8zTCxVQUFVMkwseUJBQXlCLENBQ3hDLElBQUksQ0FBQ3RGLGFBQWEsQ0FBQ3VGLFdBQVc7SUFFbEM7SUFuckJBQyxZQUFZeEYsYUFBYSxFQUFFK0IsY0FBYyxJQUFJLEVBQUVXLGdCQUFnQixJQUFJLENBQUU7UUFDbkUsSUFBSSxDQUFDMUMsYUFBYSxHQUFHQTtRQUNyQixJQUFJLENBQUMrQixXQUFXLEdBQUdBLGFBQWEsZ0VBQWdFO1FBQ2hHLElBQUksQ0FBQ1csYUFBYSxHQUFHQSxlQUFlLHlEQUF5RDtRQUM3RixJQUFJLENBQUN6SCxZQUFZLEdBQUcsQ0FBQztRQUNyQixJQUFJLENBQUN1QyxPQUFPLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUNvRCxhQUFhLEdBQUcsQ0FBQztRQUN0QixJQUFJLENBQUNsRixNQUFNLEdBQUcsRUFBRTtJQUNsQjtBQTRxQkY7QUFFQStKLE9BQU9DLE9BQU8sR0FBRzlMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2xpYi9wYXJzZXJzL0RvY3VtZW50UGFyc2VyLmpzPzk0MWEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG5jb25zdCBJRE1MVXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHMvSURNTFV0aWxzXCIpO1xyXG5cclxuY2xhc3MgRG9jdW1lbnRQYXJzZXIge1xyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRQYXJzZXIsIHN0eWxlUGFyc2VyID0gbnVsbCwgdW5pdENvbnZlcnRlciA9IG51bGwpIHtcclxuICAgIHRoaXMuZWxlbWVudFBhcnNlciA9IGVsZW1lbnRQYXJzZXI7XHJcbiAgICB0aGlzLnN0eWxlUGFyc2VyID0gc3R5bGVQYXJzZXI7IC8vIEFEREVEOiBSZWZlcmVuY2UgdG8gU3R5bGVQYXJzZXIgZm9yIGFjY2Vzc2luZyBWaWV3UHJlZmVyZW5jZXNcclxuICAgIHRoaXMudW5pdENvbnZlcnRlciA9IHVuaXRDb252ZXJ0ZXI7IC8vIEFEREVEOiBSZWZlcmVuY2UgdG8gVW5pdENvbnZlcnRlciBmb3IgdW5pdCBjb252ZXJzaW9uc1xyXG4gICAgdGhpcy5kb2N1bWVudEluZm8gPSB7fTtcclxuICAgIHRoaXMuc3ByZWFkcyA9IHt9O1xyXG4gICAgdGhpcy5tYXN0ZXJTcHJlYWRzID0ge307XHJcbiAgICB0aGlzLmxheWVycyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgcGFyc2VEb2N1bWVudFN0cnVjdHVyZShleHRyYWN0ZWREYXRhLCB4bWxQYXJzZXIpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiUGFyc2luZyBkb2N1bWVudCBzdHJ1Y3R1cmUuLi5cIik7XHJcbiAgICBjb25zb2xlLmxvZyhcclxuICAgICAgXCLwn5SNIFRvdGFsIGZpbGVzIHRvIHByb2Nlc3M6XCIsXHJcbiAgICAgIE9iamVjdC5rZXlzKGV4dHJhY3RlZERhdGEpLmxlbmd0aFxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBQYXJzZSBkZXNpZ25tYXAueG1sIGZpcnN0IChtYWluIGRvY3VtZW50IHN0cnVjdHVyZSlcclxuICAgIGlmIChleHRyYWN0ZWREYXRhW1wiZGVzaWdubWFwLnhtbFwiXSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIlBhcnNpbmcgZGVzaWdubWFwLnhtbC4uLlwiKTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBkZXNpZ25NYXBEYXRhID0geG1sUGFyc2VyLnBhcnNlKGV4dHJhY3RlZERhdGFbXCJkZXNpZ25tYXAueG1sXCJdKTtcclxuICAgICAgICB0aGlzLmRvY3VtZW50ID0gZGVzaWduTWFwRGF0YS5Eb2N1bWVudCB8fCBkZXNpZ25NYXBEYXRhO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuZXh0cmFjdERvY3VtZW50SW5mbyh0aGlzLmRvY3VtZW50KTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIuKchSBEZXNpZ25NYXAgcGFyc2VkIHN1Y2Nlc3NmdWxseVwiKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgcGFyc2luZyBkZXNpZ25tYXAueG1sOlwiLCBlcnJvcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBQYXJzZSBTcHJlYWRzXHJcbiAgICBjb25zb2xlLmxvZyhcIlxcbvCfk4QgPT09IFBBUlNJTkcgU1BSRUFEUyA9PT1cIik7XHJcbiAgICBmb3IgKGNvbnN0IFtmaWxlTmFtZSwgY29udGVudF0gb2YgT2JqZWN0LmVudHJpZXMoZXh0cmFjdGVkRGF0YSkpIHtcclxuICAgICAgaWYgKGZpbGVOYW1lLnN0YXJ0c1dpdGgoXCJTcHJlYWRzL1wiKSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi8J+UjSBQcm9jZXNzaW5nIHNwcmVhZDpcIiwgZmlsZU5hbWUpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucGFyc2VTcHJlYWRGaWxlKGZpbGVOYW1lLCBjb250ZW50LCB4bWxQYXJzZXIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUGFyc2UgTWFzdGVyIFNwcmVhZHNcclxuICAgIGNvbnNvbGUubG9nKFwiXFxu8J+OqCA9PT0gUEFSU0lORyBNQVNURVIgU1BSRUFEUyA9PT1cIik7XHJcbiAgICBmb3IgKGNvbnN0IFtmaWxlTmFtZSwgY29udGVudF0gb2YgT2JqZWN0LmVudHJpZXMoZXh0cmFjdGVkRGF0YSkpIHtcclxuICAgICAgaWYgKGZpbGVOYW1lLnN0YXJ0c1dpdGgoXCJNYXN0ZXJTcHJlYWRzL1wiKSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi8J+UjSBQcm9jZXNzaW5nIG1hc3RlciBzcHJlYWQ6XCIsIGZpbGVOYW1lKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnBhcnNlTWFzdGVyU3ByZWFkRmlsZShmaWxlTmFtZSwgY29udGVudCwgeG1sUGFyc2VyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgZXh0cmFjdERvY3VtZW50SW5mbyhkb2N1bWVudCkge1xyXG4gICAgY29uc29sZS5sb2coXCJFeHRyYWN0aW5nIGRvY3VtZW50IGluZm9ybWF0aW9uLi4uXCIpO1xyXG5cclxuICAgIGlmICghZG9jdW1lbnQpIHJldHVybjtcclxuXHJcbiAgICAvLyBFeHRyYWN0IGRvY3VtZW50IHByZWZlcmVuY2VzIGFuZCBwYWdlIHNldHVwXHJcbiAgICB0aGlzLmRvY3VtZW50SW5mbyA9IHtcclxuICAgICAgdmVyc2lvbjogZG9jdW1lbnRbXCJAX0RPTVZlcnNpb25cIl0gfHwgXCJVbmtub3duXCIsXHJcbiAgICAgIHNlbGY6IGRvY3VtZW50W1wiQF9TZWxmXCJdIHx8IFwiVW5rbm93blwiLFxyXG4gICAgICBhY3RpdmVMYXllcjogZG9jdW1lbnRbXCJAX0FjdGl2ZUxheWVyXCJdIHx8IG51bGwsXHJcbiAgICAgIHVudXNlZFN3YXRjaGVzOiBkb2N1bWVudFtcIkBfVW51c2VkU3dhdGNoZXNcIl0gfHwgW10sXHJcblxyXG4gICAgICAvLyBEb2N1bWVudCBwcmVmZXJlbmNlc1xyXG4gICAgICBkb2N1bWVudFByZWZlcmVuY2VzOiB0aGlzLmV4dHJhY3REb2N1bWVudFByZWZlcmVuY2VzKGRvY3VtZW50KSxcclxuXHJcbiAgICAgIC8vIFBhZ2Ugc2V0dXBcclxuICAgICAgcGFnZVNldHVwOiB0aGlzLmV4dHJhY3RQYWdlU2V0dXAoZG9jdW1lbnQpLFxyXG5cclxuICAgICAgLy8gTGF5ZXJzXHJcbiAgICAgIGxheWVyczogdGhpcy5leHRyYWN0TGF5ZXJzKGRvY3VtZW50KSxcclxuXHJcbiAgICAgIC8vIFBhZ2VzXHJcbiAgICAgIHBhZ2VzOiB0aGlzLmV4dHJhY3RQYWdlcyhkb2N1bWVudCksXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnNvbGUubG9nKFwi4pyFIERvY3VtZW50IGluZm8gZXh0cmFjdGVkXCIpO1xyXG4gIH1cclxuXHJcbiAgZXh0cmFjdERvY3VtZW50UHJlZmVyZW5jZXMoZG9jdW1lbnQpIHtcclxuICAgIGNvbnNvbGUubG9nKFwi8J+TiyBFeHRyYWN0aW5nIGRvY3VtZW50IHByZWZlcmVuY2VzLi4uXCIpO1xyXG4gICAgY29uc29sZS5sb2coXCJEb2N1bWVudCBrZXlzOlwiLCBPYmplY3Qua2V5cyhkb2N1bWVudCkpO1xyXG5cclxuICAgIGNvbnN0IHByZWZzID0ge307XHJcblxyXG4gICAgLy8gVHJ5IG11bHRpcGxlIHBvc3NpYmxlIGxvY2F0aW9ucyBmb3IgZG9jdW1lbnQgcHJlZmVyZW5jZXNcclxuICAgIGxldCBkb2NQcmVmID0gbnVsbDtcclxuXHJcbiAgICBpZiAoZG9jdW1lbnQuRG9jdW1lbnRQcmVmZXJlbmNlKSB7XHJcbiAgICAgIGRvY1ByZWYgPSBkb2N1bWVudC5Eb2N1bWVudFByZWZlcmVuY2U7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiRm91bmQgRG9jdW1lbnRQcmVmZXJlbmNlXCIpO1xyXG4gICAgfSBlbHNlIGlmIChkb2N1bWVudC5kb2N1bWVudFByZWZlcmVuY2UpIHtcclxuICAgICAgZG9jUHJlZiA9IGRvY3VtZW50LmRvY3VtZW50UHJlZmVyZW5jZTtcclxuICAgICAgY29uc29sZS5sb2coXCJGb3VuZCBkb2N1bWVudFByZWZlcmVuY2UgKGxvd2VyY2FzZSlcIik7XHJcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LlByb3BlcnRpZXMgJiYgZG9jdW1lbnQuUHJvcGVydGllcy5Eb2N1bWVudFByZWZlcmVuY2UpIHtcclxuICAgICAgZG9jUHJlZiA9IGRvY3VtZW50LlByb3BlcnRpZXMuRG9jdW1lbnRQcmVmZXJlbmNlO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkZvdW5kIERvY3VtZW50UHJlZmVyZW5jZSBpbiBQcm9wZXJ0aWVzXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkb2NQcmVmKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiRG9jdW1lbnRQcmVmZXJlbmNlIGtleXM6XCIsIE9iamVjdC5rZXlzKGRvY1ByZWYpKTtcclxuICAgICAgcHJlZnMucGFnZVdpZHRoID0gcGFyc2VGbG9hdChkb2NQcmVmW1wiQF9QYWdlV2lkdGhcIl0pIHx8IDA7XHJcbiAgICAgIHByZWZzLnBhZ2VIZWlnaHQgPSBwYXJzZUZsb2F0KGRvY1ByZWZbXCJAX1BhZ2VIZWlnaHRcIl0pIHx8IDA7XHJcbiAgICAgIHByZWZzLmxlZnQgPSBwYXJzZUZsb2F0KGRvY1ByZWZbXCJAX0xlZnRcIl0pIHx8IDA7XHJcbiAgICAgIHByZWZzLnRvcCA9IHBhcnNlRmxvYXQoZG9jUHJlZltcIkBfVG9wXCJdKSB8fCAwO1xyXG4gICAgICBwcmVmcy5yaWdodCA9IHBhcnNlRmxvYXQoZG9jUHJlZltcIkBfUmlnaHRcIl0pIHx8IDA7XHJcbiAgICAgIHByZWZzLmJvdHRvbSA9IHBhcnNlRmxvYXQoZG9jUHJlZltcIkBfQm90dG9tXCJdKSB8fCAwO1xyXG4gICAgICBwcmVmcy5jb2x1bW5Db3VudCA9IHBhcnNlSW50KGRvY1ByZWZbXCJAX0NvbHVtbkNvdW50XCJdKSB8fCAxO1xyXG4gICAgICBwcmVmcy5jb2x1bW5HdXR0ZXIgPSBwYXJzZUZsb2F0KGRvY1ByZWZbXCJAX0NvbHVtbkd1dHRlclwiXSkgfHwgMDtcclxuICAgICAgcHJlZnMuZmFjaW5nUGFnZXMgPVxyXG4gICAgICAgIGRvY1ByZWZbXCJAX0ZhY2luZ1BhZ2VzXCJdID09PSBcInRydWVcIiB8fFxyXG4gICAgICAgIGRvY1ByZWZbXCJAX0ZhY2luZ1BhZ2VzXCJdID09PSB0cnVlO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coXCLwn5OLIEV4dHJhY3RlZCBkb2N1bWVudCBwcmVmZXJlbmNlczpcIiwgcHJlZnMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coXCLimqDvuI8gTm8gRG9jdW1lbnRQcmVmZXJlbmNlIGZvdW5kIGluIGRvY3VtZW50XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFsc28gdHJ5IHRvIGV4dHJhY3QgbWFyZ2luIHByZWZlcmVuY2VzXHJcbiAgICBsZXQgbWFyZ2luUHJlZiA9IG51bGw7XHJcbiAgICBpZiAoZG9jdW1lbnQuTWFyZ2luUHJlZmVyZW5jZSkge1xyXG4gICAgICBtYXJnaW5QcmVmID0gZG9jdW1lbnQuTWFyZ2luUHJlZmVyZW5jZTtcclxuICAgICAgY29uc29sZS5sb2coXCJGb3VuZCBNYXJnaW5QcmVmZXJlbmNlXCIpO1xyXG4gICAgfSBlbHNlIGlmIChkb2N1bWVudC5tYXJnaW5QcmVmZXJlbmNlKSB7XHJcbiAgICAgIG1hcmdpblByZWYgPSBkb2N1bWVudC5tYXJnaW5QcmVmZXJlbmNlO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkZvdW5kIG1hcmdpblByZWZlcmVuY2UgKGxvd2VyY2FzZSlcIik7XHJcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LlByb3BlcnRpZXMgJiYgZG9jdW1lbnQuUHJvcGVydGllcy5NYXJnaW5QcmVmZXJlbmNlKSB7XHJcbiAgICAgIG1hcmdpblByZWYgPSBkb2N1bWVudC5Qcm9wZXJ0aWVzLk1hcmdpblByZWZlcmVuY2U7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiRm91bmQgTWFyZ2luUHJlZmVyZW5jZSBpbiBQcm9wZXJ0aWVzXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChtYXJnaW5QcmVmKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiTWFyZ2luUHJlZmVyZW5jZSBrZXlzOlwiLCBPYmplY3Qua2V5cyhtYXJnaW5QcmVmKSk7XHJcbiAgICAgIHByZWZzLm1hcmdpblRvcCA9IHBhcnNlRmxvYXQobWFyZ2luUHJlZltcIkBfVG9wXCJdKSB8fCAwO1xyXG4gICAgICBwcmVmcy5tYXJnaW5Cb3R0b20gPSBwYXJzZUZsb2F0KG1hcmdpblByZWZbXCJAX0JvdHRvbVwiXSkgfHwgMDtcclxuICAgICAgcHJlZnMubWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQobWFyZ2luUHJlZltcIkBfTGVmdFwiXSkgfHwgMDtcclxuICAgICAgcHJlZnMubWFyZ2luUmlnaHQgPSBwYXJzZUZsb2F0KG1hcmdpblByZWZbXCJAX1JpZ2h0XCJdKSB8fCAwO1xyXG4gICAgICBwcmVmcy5tYXJnaW5Db2x1bW5Db3VudCA9IHBhcnNlSW50KG1hcmdpblByZWZbXCJAX0NvbHVtbkNvdW50XCJdKSB8fCAxO1xyXG4gICAgICBwcmVmcy5tYXJnaW5Db2x1bW5HdXR0ZXIgPSBwYXJzZUZsb2F0KG1hcmdpblByZWZbXCJAX0NvbHVtbkd1dHRlclwiXSkgfHwgMDtcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKFwi8J+TjyBFeHRyYWN0ZWQgbWFyZ2luIHByZWZlcmVuY2VzOlwiLCB7XHJcbiAgICAgICAgdG9wOiBwcmVmcy5tYXJnaW5Ub3AsXHJcbiAgICAgICAgYm90dG9tOiBwcmVmcy5tYXJnaW5Cb3R0b20sXHJcbiAgICAgICAgbGVmdDogcHJlZnMubWFyZ2luTGVmdCxcclxuICAgICAgICByaWdodDogcHJlZnMubWFyZ2luUmlnaHQsXHJcbiAgICAgICAgY29sdW1uQ291bnQ6IHByZWZzLm1hcmdpbkNvbHVtbkNvdW50LFxyXG4gICAgICAgIGNvbHVtbkd1dHRlcjogcHJlZnMubWFyZ2luQ29sdW1uR3V0dGVyLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcHJlZnM7XHJcbiAgfVxyXG5cclxuICBleHRyYWN0UGFnZVNldHVwKGRvY3VtZW50KSB7XHJcbiAgICBjb25zdCBwYWdlU2V0dXAgPSB7XHJcbiAgICAgIHBhZ2VzOiBbXSxcclxuICAgICAgbWFzdGVyUGFnZXM6IFtdLFxyXG4gICAgICBzcHJlYWRzOiBbXSxcclxuICAgIH07XHJcblxyXG4gICAgLy8gRXh0cmFjdCBwYWdlIGluZm9ybWF0aW9uIGZyb20gZG9jdW1lbnRcclxuICAgIGlmIChkb2N1bWVudC5QYWdlKSB7XHJcbiAgICAgIGNvbnN0IHBhZ2VzID0gQXJyYXkuaXNBcnJheShkb2N1bWVudC5QYWdlKVxyXG4gICAgICAgID8gZG9jdW1lbnQuUGFnZVxyXG4gICAgICAgIDogW2RvY3VtZW50LlBhZ2VdO1xyXG5cclxuICAgICAgcGFnZXMuZm9yRWFjaCgocGFnZSkgPT4ge1xyXG4gICAgICAgIHBhZ2VTZXR1cC5wYWdlcy5wdXNoKHtcclxuICAgICAgICAgIHNlbGY6IHBhZ2VbXCJAX1NlbGZcIl0sXHJcbiAgICAgICAgICBuYW1lOiBwYWdlW1wiQF9OYW1lXCJdIHx8IFwiXCIsXHJcbiAgICAgICAgICBhcHBsaWVkTWFzdGVyOiBwYWdlW1wiQF9BcHBsaWVkTWFzdGVyXCJdIHx8IFwiXCIsXHJcbiAgICAgICAgICBnZW9tZXRyaWNCb3VuZHM6IElETUxVdGlscy5wYXJzZUdlb21ldHJpY0JvdW5kcyhcclxuICAgICAgICAgICAgcGFnZVtcIkBfR2VvbWV0cmljQm91bmRzXCJdXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgICAgaXRlbVRyYW5zZm9ybTogSURNTFV0aWxzLnBhcnNlVHJhbnNmb3JtKHBhZ2VbXCJAX0l0ZW1UcmFuc2Zvcm1cIl0pLFxyXG4gICAgICAgICAgb3ZlcnJpZGVMaXN0OiBwYWdlW1wiQF9PdmVycmlkZUxpc3RcIl0gfHwgW10sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwYWdlU2V0dXA7XHJcbiAgfVxyXG5cclxuICBleHRyYWN0TGF5ZXJzKGRvY3VtZW50KSB7XHJcbiAgICBjb25zdCBsYXllcnMgPSBbXTtcclxuXHJcbiAgICBpZiAoZG9jdW1lbnQuTGF5ZXIpIHtcclxuICAgICAgY29uc3QgbGF5ZXJEYXRhID0gQXJyYXkuaXNBcnJheShkb2N1bWVudC5MYXllcilcclxuICAgICAgICA/IGRvY3VtZW50LkxheWVyXHJcbiAgICAgICAgOiBbZG9jdW1lbnQuTGF5ZXJdO1xyXG5cclxuICAgICAgbGF5ZXJEYXRhLmZvckVhY2goKGxheWVyKSA9PiB7XHJcbiAgICAgICAgbGF5ZXJzLnB1c2goe1xyXG4gICAgICAgICAgc2VsZjogbGF5ZXJbXCJAX1NlbGZcIl0sXHJcbiAgICAgICAgICBuYW1lOiBsYXllcltcIkBfTmFtZVwiXSB8fCBcIlwiLFxyXG4gICAgICAgICAgdmlzaWJsZTogbGF5ZXJbXCJAX1Zpc2libGVcIl0gIT09IGZhbHNlLFxyXG4gICAgICAgICAgbG9ja2VkOiBsYXllcltcIkBfTG9ja2VkXCJdID09PSB0cnVlLFxyXG4gICAgICAgICAgaWdub3JlV3JhcDogbGF5ZXJbXCJAX0lnbm9yZVdyYXBcIl0gPT09IHRydWUsXHJcbiAgICAgICAgICBzaG93R3VpZGVzOiBsYXllcltcIkBfU2hvd0d1aWRlc1wiXSAhPT0gZmFsc2UsXHJcbiAgICAgICAgICBsb2NrR3VpZGVzOiBsYXllcltcIkBfTG9ja0d1aWRlc1wiXSA9PT0gdHJ1ZSxcclxuICAgICAgICAgIHVpOiBsYXllcltcIkBfVUlcIl0gfHwgXCJcIixcclxuICAgICAgICAgIGxheWVyQ29sb3I6IGxheWVyW1wiQF9MYXllckNvbG9yXCJdIHx8IFwiTGlnaHRCbHVlXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubGF5ZXJzID0gbGF5ZXJzO1xyXG4gICAgcmV0dXJuIGxheWVycztcclxuICB9XHJcblxyXG4gIGV4dHJhY3RQYWdlcyhkb2N1bWVudCkge1xyXG4gICAgY29uc3QgcGFnZXMgPSBbXTtcclxuXHJcbiAgICBpZiAoZG9jdW1lbnQuU3ByZWFkKSB7XHJcbiAgICAgIGNvbnN0IHNwcmVhZHMgPSBBcnJheS5pc0FycmF5KGRvY3VtZW50LlNwcmVhZClcclxuICAgICAgICA/IGRvY3VtZW50LlNwcmVhZFxyXG4gICAgICAgIDogW2RvY3VtZW50LlNwcmVhZF07XHJcblxyXG4gICAgICBzcHJlYWRzLmZvckVhY2goKHNwcmVhZCkgPT4ge1xyXG4gICAgICAgIGlmIChzcHJlYWQuUGFnZSkge1xyXG4gICAgICAgICAgY29uc3Qgc3ByZWFkUGFnZXMgPSBBcnJheS5pc0FycmF5KHNwcmVhZC5QYWdlKVxyXG4gICAgICAgICAgICA/IHNwcmVhZC5QYWdlXHJcbiAgICAgICAgICAgIDogW3NwcmVhZC5QYWdlXTtcclxuICAgICAgICAgIHNwcmVhZFBhZ2VzLmZvckVhY2goKHBhZ2UpID0+IHtcclxuICAgICAgICAgICAgcGFnZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgc2VsZjogcGFnZVtcIkBfU2VsZlwiXSxcclxuICAgICAgICAgICAgICBuYW1lOiBwYWdlW1wiQF9OYW1lXCJdIHx8IFwiXCIsXHJcbiAgICAgICAgICAgICAgYXBwbGllZE1hc3RlcjogcGFnZVtcIkBfQXBwbGllZE1hc3RlclwiXSB8fCBcIlwiLFxyXG4gICAgICAgICAgICAgIGdlb21ldHJpY0JvdW5kczogSURNTFV0aWxzLnBhcnNlR2VvbWV0cmljQm91bmRzKFxyXG4gICAgICAgICAgICAgICAgcGFnZVtcIkBfR2VvbWV0cmljQm91bmRzXCJdXHJcbiAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICBpdGVtVHJhbnNmb3JtOiBJRE1MVXRpbHMucGFyc2VUcmFuc2Zvcm0ocGFnZVtcIkBfSXRlbVRyYW5zZm9ybVwiXSksXHJcbiAgICAgICAgICAgICAgc3ByZWFkUGFyZW50OiBzcHJlYWRbXCJAX1NlbGZcIl0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcGFnZXM7XHJcbiAgfVxyXG5cclxuICBhc3luYyBwYXJzZVNwcmVhZEZpbGUoZmlsZU5hbWUsIGNvbnRlbnQsIHhtbFBhcnNlcikge1xyXG4gICAgY29uc29sZS5sb2coYPCfk4QgUGFyc2luZyBzcHJlYWQ6ICR7ZmlsZU5hbWV9YCk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcGFyc2VkID0geG1sUGFyc2VyLnBhcnNlKGNvbnRlbnQpO1xyXG4gICAgICBjb25zdCBzcHJlYWRJZCA9IHBhdGguYmFzZW5hbWUoZmlsZU5hbWUsIFwiLnhtbFwiKTtcclxuXHJcbiAgICAgIGNvbnN0IHNwcmVhZERhdGEgPSBwYXJzZWQuU3ByZWFkPy5TcHJlYWQgfHwgcGFyc2VkLlNwcmVhZCB8fCBwYXJzZWQ7XHJcblxyXG4gICAgICBpZiAocGFyc2VkLlNwcmVhZCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiU3ByZWFkIHdyYXBwZXIga2V5czpcIiwgT2JqZWN0LmtleXMocGFyc2VkLlNwcmVhZCkpO1xyXG4gICAgICAgIGlmIChwYXJzZWQuU3ByZWFkLlNwcmVhZCkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJBY3R1YWwgc3ByZWFkIGtleXM6XCIsIE9iamVjdC5rZXlzKHBhcnNlZC5TcHJlYWQuU3ByZWFkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc3ByZWFkRGF0YS5QYWdlKSB7XHJcbiAgICAgICAgY29uc3QgcGFnZXMgPSBBcnJheS5pc0FycmF5KHNwcmVhZERhdGEuUGFnZSlcclxuICAgICAgICAgID8gc3ByZWFkRGF0YS5QYWdlXHJcbiAgICAgICAgICA6IFtzcHJlYWREYXRhLlBhZ2VdO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBGb3VuZCAke3BhZ2VzLmxlbmd0aH0gcGFnZXMgaW4gc3ByZWFkYCk7XHJcbiAgICAgICAgcGFnZXMuZm9yRWFjaCgocGFnZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGBQYWdlICR7aW5kZXh9IGtleXM6YCwgT2JqZWN0LmtleXMocGFnZSkpO1xyXG5cclxuICAgICAgICAgIC8vIExvb2sgZm9yIGVsZW1lbnRzIGluIHRoZSBwYWdlXHJcbiAgICAgICAgICBPYmplY3Qua2V5cyhwYWdlKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgIGtleSAhPT0gXCJAX1NlbGZcIiAmJlxyXG4gICAgICAgICAgICAgIGtleSAhPT0gXCJAX05hbWVcIiAmJlxyXG4gICAgICAgICAgICAgIGtleSAhPT0gXCJAX0dlb21ldHJpY0JvdW5kc1wiICYmXHJcbiAgICAgICAgICAgICAga2V5ICE9PSBcIkBfSXRlbVRyYW5zZm9ybVwiICYmXHJcbiAgICAgICAgICAgICAga2V5ICE9PSBcIkBfQXBwbGllZE1hc3RlclwiXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcGFnZVtrZXldO1xyXG4gICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCAgRm91bmQgYXJyYXkgJHtrZXl9IHdpdGggJHt2YWx1ZS5sZW5ndGh9IGl0ZW1zYCk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAgIEZvdW5kIG9iamVjdCAke2tleX06YCwgT2JqZWN0LmtleXModmFsdWUpKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiTm8gUGFnZSBwcm9wZXJ0eSBmb3VuZCBpbiBzcHJlYWRcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENoZWNrIGZvciBkaXJlY3QgZWxlbWVudHMgaW4gc3ByZWFkXHJcbiAgICAgIE9iamVjdC5rZXlzKHNwcmVhZERhdGEpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGtleS5pbmNsdWRlcyhcIkZyYW1lXCIpIHx8XHJcbiAgICAgICAgICBrZXkuaW5jbHVkZXMoXCJSZWN0YW5nbGVcIikgfHxcclxuICAgICAgICAgIGtleS5pbmNsdWRlcyhcIlRleHRcIikgfHxcclxuICAgICAgICAgIGtleS5pbmNsdWRlcyhcIkdyb3VwXCIpIHx8XHJcbiAgICAgICAgICBrZXkuaW5jbHVkZXMoXCJPdmFsXCIpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgYEZvdW5kIHBvdGVudGlhbCBlbGVtZW50cyBkaXJlY3RseSBpbiBzcHJlYWQ6ICR7a2V5fWAsXHJcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoc3ByZWFkRGF0YVtrZXldKSA/IHNwcmVhZERhdGFba2V5XS5sZW5ndGggOiBcInNpbmdsZVwiXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBFeHRyYWN0IGRldGFpbGVkIHNwcmVhZCBpbmZvcm1hdGlvblxyXG4gICAgICBjb25zdCBkZXRhaWxlZFNwcmVhZCA9IHtcclxuICAgICAgICBzZWxmOiBzcHJlYWREYXRhW1wiQF9TZWxmXCJdLFxyXG4gICAgICAgIGZsYXR0ZW5lck92ZXJyaWRlOiBzcHJlYWREYXRhW1wiQF9GbGF0dGVuZXJPdmVycmlkZVwiXSB8fCBcIlwiLFxyXG4gICAgICAgIGJpbmRpbmdMb2NhdGlvbjogcGFyc2VGbG9hdChzcHJlYWREYXRhW1wiQF9CaW5kaW5nTG9jYXRpb25cIl0pIHx8IDAsXHJcbiAgICAgICAgYWxsb3dQYWdlU2h1ZmZsZTogc3ByZWFkRGF0YVtcIkBfQWxsb3dQYWdlU2h1ZmZsZVwiXSAhPT0gZmFsc2UsXHJcblxyXG4gICAgICAgIC8vIEV4dHJhY3QgcGFnZSBlbGVtZW50c1xyXG4gICAgICAgIHBhZ2VzOiB0aGlzLmVsZW1lbnRQYXJzZXIuZXh0cmFjdFNwcmVhZFBhZ2VzKHNwcmVhZERhdGEpLFxyXG5cclxuICAgICAgICAvLyBFeHRyYWN0IGFsbCBwYWdlIGl0ZW1zICh0ZXh0IGZyYW1lcywgcmVjdGFuZ2xlcywgZXRjLilcclxuICAgICAgICBwYWdlSXRlbXM6IHRoaXMuZWxlbWVudFBhcnNlci5leHRyYWN0UGFnZUl0ZW1zKHNwcmVhZERhdGEpLFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy5zcHJlYWRzW3NwcmVhZElkXSA9IGRldGFpbGVkU3ByZWFkO1xyXG4gICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICBg4pyFIFNwcmVhZCAke3NwcmVhZElkfSBwYXJzZWQgd2l0aCAke2RldGFpbGVkU3ByZWFkLnBhZ2VJdGVtcy5sZW5ndGh9IGl0ZW1zYFxyXG4gICAgICApO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihg4p2MIEVycm9yIHBhcnNpbmcgc3ByZWFkICR7ZmlsZU5hbWV9OmAsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgcGFyc2VNYXN0ZXJTcHJlYWRGaWxlKGZpbGVOYW1lLCBjb250ZW50LCB4bWxQYXJzZXIpIHtcclxuICAgIGNvbnNvbGUubG9nKGDwn46oIFBhcnNpbmcgbWFzdGVyIHNwcmVhZDogJHtmaWxlTmFtZX1gKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBwYXJzZWQgPSB4bWxQYXJzZXIucGFyc2UoY29udGVudCk7XHJcbiAgICAgIGNvbnN0IG1hc3RlcklkID0gcGF0aC5iYXNlbmFtZShmaWxlTmFtZSwgXCIueG1sXCIpO1xyXG5cclxuICAgICAgY29uc3QgbWFzdGVyRGF0YSA9XHJcbiAgICAgICAgcGFyc2VkLk1hc3RlclNwcmVhZD8uTWFzdGVyU3ByZWFkIHx8IHBhcnNlZC5NYXN0ZXJTcHJlYWQgfHwgcGFyc2VkO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coXCJQYXJzZWQgbWFzdGVyIHNwcmVhZCBrZXlzOlwiLCBPYmplY3Qua2V5cyhwYXJzZWQpKTtcclxuICAgICAgaWYgKHBhcnNlZC5NYXN0ZXJTcHJlYWQpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgIFwiTWFzdGVyU3ByZWFkIHdyYXBwZXIga2V5czpcIixcclxuICAgICAgICAgIE9iamVjdC5rZXlzKHBhcnNlZC5NYXN0ZXJTcHJlYWQpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAocGFyc2VkLk1hc3RlclNwcmVhZC5NYXN0ZXJTcHJlYWQpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICBcIkFjdHVhbCBtYXN0ZXIgc3ByZWFkIGtleXM6XCIsXHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHBhcnNlZC5NYXN0ZXJTcHJlYWQuTWFzdGVyU3ByZWFkKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEV4dHJhY3QgZGV0YWlsZWQgbWFzdGVyIHNwcmVhZCBpbmZvcm1hdGlvblxyXG4gICAgICBjb25zdCBkZXRhaWxlZE1hc3RlciA9IHtcclxuICAgICAgICBzZWxmOiBtYXN0ZXJEYXRhW1wiQF9TZWxmXCJdLFxyXG4gICAgICAgIG5hbWU6IG1hc3RlckRhdGFbXCJAX05hbWVcIl0gfHwgXCJcIixcclxuICAgICAgICBuYW1lUHJlZml4OiBtYXN0ZXJEYXRhW1wiQF9OYW1lUHJlZml4XCJdIHx8IFwiXCIsXHJcbiAgICAgICAgYmFzZWRPbjogbWFzdGVyRGF0YVtcIkBfQmFzZWRPblwiXSB8fCBcIlwiLFxyXG4gICAgICAgIGl0ZW1UcmFuc2Zvcm06IElETUxVdGlscy5wYXJzZVRyYW5zZm9ybShtYXN0ZXJEYXRhW1wiQF9JdGVtVHJhbnNmb3JtXCJdKSxcclxuXHJcbiAgICAgICAgLy8gRXh0cmFjdCBtYXN0ZXIgcGFnZXNcclxuICAgICAgICBwYWdlczogdGhpcy5lbGVtZW50UGFyc2VyLmV4dHJhY3RNYXN0ZXJQYWdlcyhtYXN0ZXJEYXRhKSxcclxuXHJcbiAgICAgICAgLy8gRXh0cmFjdCBtYXN0ZXIgcGFnZSBpdGVtc1xyXG4gICAgICAgIHBhZ2VJdGVtczogdGhpcy5lbGVtZW50UGFyc2VyLmV4dHJhY3RQYWdlSXRlbXMobWFzdGVyRGF0YSksXHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLm1hc3RlclNwcmVhZHNbbWFzdGVySWRdID0gZGV0YWlsZWRNYXN0ZXI7XHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIGDinIUgTWFzdGVyIHNwcmVhZCAke21hc3RlcklkfSBwYXJzZWQgd2l0aCAke2RldGFpbGVkTWFzdGVyLnBhZ2VJdGVtcy5sZW5ndGh9IGl0ZW1zYFxyXG4gICAgICApO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICBg4p2MIEVycm9yIHBhcnNpbmcgbWFzdGVyIHNwcmVhZCAke2ZpbGVOYW1lfTpgLFxyXG4gICAgICAgIGVycm9yLm1lc3NhZ2VcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGV4dHJhY3REZXRhaWxlZEluZm9ybWF0aW9uKCkge1xyXG4gICAgY29uc29sZS5sb2coXCJFeHRyYWN0aW5nIGRldGFpbGVkIGluZm9ybWF0aW9uIHdpdGggZW5oYW5jZWQgcHJvY2Vzc2luZy4uLlwiKTtcclxuXHJcbiAgICB0aGlzLnBhZ2VJbmZvID0ge1xyXG4gICAgICBkaW1lbnNpb25zOiB0aGlzLmNhbGN1bGF0ZVBhZ2VEaW1lbnNpb25zKCksXHJcbiAgICAgIG1hcmdpbnM6IHRoaXMuY2FsY3VsYXRlTWFyZ2lucygpLFxyXG4gICAgICBibGVlZHM6IHRoaXMuY2FsY3VsYXRlQmxlZWRzKCksXHJcbiAgICAgIGd1aWRlczogdGhpcy5leHRyYWN0R3VpZGVzKCksXHJcbiAgICAgIGdyaWRzOiB0aGlzLmV4dHJhY3RHcmlkcygpLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnRQYXJzZXIuY3JlYXRlRWxlbWVudFBvc2l0aW9uTWFwRml4ZWQoKTsgLy8gVXNlIHRoZSBmaXhlZCB2ZXJzaW9uXHJcblxyXG4gICAgY29uc29sZS5sb2coXCLinIUgRW5oYW5jZWQgZGV0YWlsZWQgaW5mb3JtYXRpb24gZXh0cmFjdGVkXCIpO1xyXG4gIH1cclxuXHJcbiAgY2FsY3VsYXRlUGFnZURpbWVuc2lvbnMoKSB7XHJcbiAgICAvLyBUcnkgdG8gZ2V0IGRpbWVuc2lvbnMgZnJvbSBzcHJlYWRzIGZpcnN0IChtb3N0IHJlbGlhYmxlKVxyXG4gICAgaWYgKHRoaXMuc3ByZWFkcyAmJiBPYmplY3Qua2V5cyh0aGlzLnNwcmVhZHMpLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgZmlyc3RTcHJlYWQgPSBPYmplY3QudmFsdWVzKHRoaXMuc3ByZWFkcylbMF07XHJcbiAgICAgIGlmIChmaXJzdFNwcmVhZC5wYWdlcyAmJiBmaXJzdFNwcmVhZC5wYWdlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc3QgZmlyc3RQYWdlID0gZmlyc3RTcHJlYWQucGFnZXNbMF07XHJcbiAgICAgICAgaWYgKGZpcnN0UGFnZS5nZW9tZXRyaWNCb3VuZHMpIHtcclxuICAgICAgICAgIGNvbnN0IGJvdW5kcyA9IGZpcnN0UGFnZS5nZW9tZXRyaWNCb3VuZHM7XHJcblxyXG4gICAgICAgICAgLy8gRklYRUQ6IEdldCB1bml0cyBmcm9tIFZpZXdQcmVmZXJlbmNlcyBpbnN0ZWFkIG9mIGhhcmRjb2RpbmcgJ1BvaW50cydcclxuICAgICAgICAgIGxldCB1bml0cyA9IFwiUG9pbnRzXCI7IC8vIGZhbGxiYWNrXHJcblxyXG4gICAgICAgICAgLy8gVHJ5IHRvIGdldCB1bml0cyBmcm9tIFN0eWxlUGFyc2VyJ3MgZG9jdW1lbnRJbmZvIGZpcnN0XHJcbiAgICAgICAgICBpZiAodGhpcy5zdHlsZVBhcnNlciAmJiB0aGlzLnN0eWxlUGFyc2VyLmdldERvY3VtZW50SW5mbykge1xyXG4gICAgICAgICAgICBjb25zdCBzdHlsZVBhcnNlckluZm8gPSB0aGlzLnN0eWxlUGFyc2VyLmdldERvY3VtZW50SW5mbygpO1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgc3R5bGVQYXJzZXJJbmZvPy5wcmVmZXJlbmNlcz8udmlld1ByZWZlcmVuY2VzXHJcbiAgICAgICAgICAgICAgICA/Lmhvcml6b250YWxNZWFzdXJlbWVudFVuaXRzXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgIHVuaXRzID1cclxuICAgICAgICAgICAgICAgIHN0eWxlUGFyc2VySW5mby5wcmVmZXJlbmNlcy52aWV3UHJlZmVyZW5jZXNcclxuICAgICAgICAgICAgICAgICAgLmhvcml6b250YWxNZWFzdXJlbWVudFVuaXRzO1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICAgICAgXCLwn5OPIFVzaW5nIG1lYXN1cmVtZW50IHVuaXRzIGZyb20gU3R5bGVQYXJzZXI6XCIsXHJcbiAgICAgICAgICAgICAgICB1bml0c1xyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBGYWxsYmFjayB0byBsb2NhbCBkb2N1bWVudEluZm9cclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgdW5pdHMgPT09IFwiUG9pbnRzXCIgJiZcclxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudEluZm8/LnByZWZlcmVuY2VzPy52aWV3UHJlZmVyZW5jZXNcclxuICAgICAgICAgICAgICA/Lmhvcml6b250YWxNZWFzdXJlbWVudFVuaXRzXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgdW5pdHMgPVxyXG4gICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRJbmZvLnByZWZlcmVuY2VzLnZpZXdQcmVmZXJlbmNlc1xyXG4gICAgICAgICAgICAgICAgLmhvcml6b250YWxNZWFzdXJlbWVudFVuaXRzO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgICBcIvCfk48gVXNpbmcgbWVhc3VyZW1lbnQgdW5pdHMgZnJvbSBsb2NhbCBEb2N1bWVudEluZm86XCIsXHJcbiAgICAgICAgICAgICAgdW5pdHNcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBjb25zdCB3aWR0aCA9IGJvdW5kcy53aWR0aCB8fCBib3VuZHMucmlnaHQgLSBib3VuZHMubGVmdCB8fCAwO1xyXG4gICAgICAgICAgY29uc3QgaGVpZ2h0ID0gYm91bmRzLmhlaWdodCB8fCBib3VuZHMuYm90dG9tIC0gYm91bmRzLnRvcCB8fCAwO1xyXG4gICAgICAgICAgY29uc3QgZmFjaW5nUGFnZXMgPSBPYmplY3QudmFsdWVzKHRoaXMuc3ByZWFkcykuc29tZShcclxuICAgICAgICAgICAgKHNwcmVhZCkgPT4gc3ByZWFkLnBhZ2VzICYmIHNwcmVhZC5wYWdlcy5sZW5ndGggPiAxXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGRpbWVuc2lvbnMgPSB7XHJcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgICAgIGZhY2luZ1BhZ2VzOiBmYWNpbmdQYWdlcyxcclxuICAgICAgICAgICAgdW5pdHM6IHVuaXRzLFxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAvLyBBRERFRDogU2V0IGRvY3VtZW50IHVuaXRzIG9uIGFsbCBwYXJzZXJzIGZvciBjb25zaXN0ZW50IGNvbnZlcnNpb25zXHJcbiAgICAgICAgICBpZiAodGhpcy5lbGVtZW50UGFyc2VyICYmIHRoaXMuZWxlbWVudFBhcnNlci5zZXREb2N1bWVudFVuaXRzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFBhcnNlci5zZXREb2N1bWVudFVuaXRzKHVuaXRzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICh0aGlzLnN0b3J5UGFyc2VyICYmIHRoaXMuc3RvcnlQYXJzZXIuc2V0RG9jdW1lbnRVbml0cykge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3J5UGFyc2VyLnNldERvY3VtZW50VW5pdHModW5pdHMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKHRoaXMuc3R5bGVQYXJzZXIgJiYgdGhpcy5zdHlsZVBhcnNlci5zZXREb2N1bWVudFVuaXRzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3R5bGVQYXJzZXIuc2V0RG9jdW1lbnRVbml0cyh1bml0cyk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gQURERUQ6IENvbnZlcnQgdG8gcGl4ZWxzIGlmIFVuaXRDb252ZXJ0ZXIgaXMgYXZhaWxhYmxlIGFuZCBjb252ZXJzaW9uIGlzIGVuYWJsZWRcclxuICAgICAgICAgIGlmICh0aGlzLnVuaXRDb252ZXJ0ZXIgJiYgdGhpcy51bml0Q29udmVydGVyLmlzU3VwcG9ydGVkVW5pdCh1bml0cykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudW5pdENvbnZlcnRlci5jb252ZXJ0RGltZW5zaW9ucyhkaW1lbnNpb25zKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gZGltZW5zaW9ucztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBGYWxsYmFjayB0byBkb2N1bWVudCBwcmVmZXJlbmNlc1xyXG4gICAgY29uc3QgZG9jUHJlZnMgPSB0aGlzLmRvY3VtZW50SW5mby5wcmVmZXJlbmNlcz8uZG9jdW1lbnRQcmVmZXJlbmNlcyB8fCB7fTtcclxuXHJcbiAgICAvLyBGSVhFRDogQmV0dGVyIHVuaXRzIGRldGVjdGlvbiBmb3IgZmFsbGJhY2sgY2FzZVxyXG4gICAgbGV0IHVuaXRzID0gXCJQb2ludHNcIjsgLy8gZGVmYXVsdCBmYWxsYmFja1xyXG5cclxuICAgIC8vIFRyeSBTdHlsZVBhcnNlciBmaXJzdFxyXG4gICAgaWYgKHRoaXMuc3R5bGVQYXJzZXIgJiYgdGhpcy5zdHlsZVBhcnNlci5nZXREb2N1bWVudEluZm8pIHtcclxuICAgICAgY29uc3Qgc3R5bGVQYXJzZXJJbmZvID0gdGhpcy5zdHlsZVBhcnNlci5nZXREb2N1bWVudEluZm8oKTtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHN0eWxlUGFyc2VySW5mbz8ucHJlZmVyZW5jZXM/LnZpZXdQcmVmZXJlbmNlc1xyXG4gICAgICAgICAgPy5ob3Jpem9udGFsTWVhc3VyZW1lbnRVbml0c1xyXG4gICAgICApIHtcclxuICAgICAgICB1bml0cyA9XHJcbiAgICAgICAgICBzdHlsZVBhcnNlckluZm8ucHJlZmVyZW5jZXMudmlld1ByZWZlcmVuY2VzXHJcbiAgICAgICAgICAgIC5ob3Jpem9udGFsTWVhc3VyZW1lbnRVbml0cztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFRoZW4gdHJ5IGxvY2FsIGRvY3VtZW50SW5mb1xyXG4gICAgaWYgKFxyXG4gICAgICB1bml0cyA9PT0gXCJQb2ludHNcIiAmJlxyXG4gICAgICB0aGlzLmRvY3VtZW50SW5mbz8ucHJlZmVyZW5jZXM/LnZpZXdQcmVmZXJlbmNlc1xyXG4gICAgICAgID8uaG9yaXpvbnRhbE1lYXN1cmVtZW50VW5pdHNcclxuICAgICkge1xyXG4gICAgICB1bml0cyA9XHJcbiAgICAgICAgdGhpcy5kb2N1bWVudEluZm8ucHJlZmVyZW5jZXMudmlld1ByZWZlcmVuY2VzXHJcbiAgICAgICAgICAuaG9yaXpvbnRhbE1lYXN1cmVtZW50VW5pdHM7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coXCLwn5OPIEZpbmFsIG1lYXN1cmVtZW50IHVuaXRzIGRlY2lzaW9uOlwiLCB1bml0cyk7XHJcblxyXG4gICAgY29uc3QgZGltZW5zaW9ucyA9IHtcclxuICAgICAgd2lkdGg6IGRvY1ByZWZzLnBhZ2VXaWR0aCB8fCAwLFxyXG4gICAgICBoZWlnaHQ6IGRvY1ByZWZzLnBhZ2VIZWlnaHQgfHwgMCxcclxuICAgICAgZmFjaW5nUGFnZXM6IGRvY1ByZWZzLmZhY2luZ1BhZ2VzIHx8IGZhbHNlLFxyXG4gICAgICB1bml0czogdW5pdHMsXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEFEREVEOiBTZXQgZG9jdW1lbnQgdW5pdHMgb24gRWxlbWVudFBhcnNlciwgU3RvcnlQYXJzZXIsIGFuZCBTdHlsZVBhcnNlciBmb3IgY29uc2lzdGVudCBjb252ZXJzaW9uc1xyXG4gICAgaWYgKHRoaXMuZWxlbWVudFBhcnNlciAmJiB0aGlzLmVsZW1lbnRQYXJzZXIuc2V0RG9jdW1lbnRVbml0cykge1xyXG4gICAgICB0aGlzLmVsZW1lbnRQYXJzZXIuc2V0RG9jdW1lbnRVbml0cyh1bml0cyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5zdG9yeVBhcnNlciAmJiB0aGlzLnN0b3J5UGFyc2VyLnNldERvY3VtZW50VW5pdHMpIHtcclxuICAgICAgdGhpcy5zdG9yeVBhcnNlci5zZXREb2N1bWVudFVuaXRzKHVuaXRzKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnN0eWxlUGFyc2VyICYmIHRoaXMuc3R5bGVQYXJzZXIuc2V0RG9jdW1lbnRVbml0cykge1xyXG4gICAgICB0aGlzLnN0eWxlUGFyc2VyLnNldERvY3VtZW50VW5pdHModW5pdHMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFEREVEOiBDb252ZXJ0IHRvIHBpeGVscyBpZiBVbml0Q29udmVydGVyIGlzIGF2YWlsYWJsZSBhbmQgY29udmVyc2lvbiBpcyBlbmFibGVkXHJcbiAgICBpZiAodGhpcy51bml0Q29udmVydGVyICYmIHRoaXMudW5pdENvbnZlcnRlci5pc1N1cHBvcnRlZFVuaXQodW5pdHMpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnVuaXRDb252ZXJ0ZXIuY29udmVydERpbWVuc2lvbnMoZGltZW5zaW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRpbWVuc2lvbnM7XHJcbiAgfVxyXG5cclxuICBjYWxjdWxhdGVNYXJnaW5zKCkge1xyXG4gICAgY29uc29sZS5sb2coXCLwn5OPIENhbGN1bGF0aW5nIG1hcmdpbnMgZnJvbSBtdWx0aXBsZSBzb3VyY2VzLi4uXCIpO1xyXG5cclxuICAgIC8vIFRyeSB0byBnZXQgbWFyZ2lucyBmcm9tIG1hc3RlciBwYWdlcyBmaXJzdCAobW9zdCByZWxpYWJsZSlcclxuICAgIGlmICh0aGlzLm1hc3RlclNwcmVhZHMgJiYgT2JqZWN0LmtleXModGhpcy5tYXN0ZXJTcHJlYWRzKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IGZpcnN0TWFzdGVyID0gT2JqZWN0LnZhbHVlcyh0aGlzLm1hc3RlclNwcmVhZHMpWzBdO1xyXG4gICAgICBpZiAoZmlyc3RNYXN0ZXIucGFnZXMgJiYgZmlyc3RNYXN0ZXIucGFnZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvbnN0IGZpcnN0TWFzdGVyUGFnZSA9IGZpcnN0TWFzdGVyLnBhZ2VzWzBdO1xyXG5cclxuICAgICAgICAvLyBMb29rIGZvciBtYXJnaW4gcHJlZmVyZW5jZXMgaW4gbWFzdGVyIHBhZ2VcclxuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgcG9wdWxhdGVkIGJ5IHRoZSBpbXByb3ZlZCBtYXN0ZXIgc3ByZWFkIHBhcnNpbmdcclxuICAgICAgICBpZiAoZmlyc3RNYXN0ZXJQYWdlLm1hcmdpblByZWZlcmVuY2UpIHtcclxuICAgICAgICAgIGNvbnN0IG1hc3Rlck1hcmdpbnMgPSB7XHJcbiAgICAgICAgICAgIHRvcDogZmlyc3RNYXN0ZXJQYWdlLm1hcmdpblByZWZlcmVuY2UudG9wIHx8IDAsXHJcbiAgICAgICAgICAgIGJvdHRvbTogZmlyc3RNYXN0ZXJQYWdlLm1hcmdpblByZWZlcmVuY2UuYm90dG9tIHx8IDAsXHJcbiAgICAgICAgICAgIGxlZnQ6IGZpcnN0TWFzdGVyUGFnZS5tYXJnaW5QcmVmZXJlbmNlLmxlZnQgfHwgMCxcclxuICAgICAgICAgICAgcmlnaHQ6IGZpcnN0TWFzdGVyUGFnZS5tYXJnaW5QcmVmZXJlbmNlLnJpZ2h0IHx8IDAsXHJcbiAgICAgICAgICAgIGNvbHVtbkNvdW50OiBmaXJzdE1hc3RlclBhZ2UubWFyZ2luUHJlZmVyZW5jZS5jb2x1bW5Db3VudCB8fCAxLFxyXG4gICAgICAgICAgICBjb2x1bW5HdXR0ZXI6IGZpcnN0TWFzdGVyUGFnZS5tYXJnaW5QcmVmZXJlbmNlLmNvbHVtbkd1dHRlciB8fCAwLFxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIvCfk48gRm91bmQgbWFyZ2lucyBmcm9tIG1hc3RlciBwYWdlOlwiLCBtYXN0ZXJNYXJnaW5zKTtcclxuXHJcbiAgICAgICAgICAvLyBBRERFRDogQ29udmVydCBtYXJnaW5zIHRvIHBpeGVscyBpZiBVbml0Q29udmVydGVyIGlzIGF2YWlsYWJsZVxyXG4gICAgICAgICAgaWYgKHRoaXMudW5pdENvbnZlcnRlciAmJiB0aGlzLmVsZW1lbnRQYXJzZXI/LmRvY3VtZW50VW5pdHMpIHtcclxuICAgICAgICAgICAgY29uc3QgcGl4ZWxNYXJnaW5zID0gdGhpcy51bml0Q29udmVydGVyLmNvbnZlcnRPYmplY3RUb1BpeGVscyhcclxuICAgICAgICAgICAgICBtYXN0ZXJNYXJnaW5zLFxyXG4gICAgICAgICAgICAgIHRoaXMuZWxlbWVudFBhcnNlci5kb2N1bWVudFVuaXRzXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgLi4ubWFzdGVyTWFyZ2lucyxcclxuICAgICAgICAgICAgICBwaXhlbE1hcmdpbnM6IHBpeGVsTWFyZ2lucyxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gbWFzdGVyTWFyZ2lucztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBGYWxsYmFjayB0byBkb2N1bWVudCBwcmVmZXJlbmNlc1xyXG4gICAgY29uc3QgZG9jUHJlZnMgPSB0aGlzLmRvY3VtZW50SW5mby5kb2N1bWVudFByZWZlcmVuY2VzIHx8IHt9O1xyXG4gICAgY29uc3QgbWFyZ2luUHJlZnMgPSB0aGlzLmRvY3VtZW50SW5mby5wcmVmZXJlbmNlcz8ubWFyZ2luUHJlZmVyZW5jZXMgfHwge307XHJcblxyXG4gICAgLy8gQ2hlY2sgZm9yIG1hcmdpbiBkYXRhIGluIGRvY3VtZW50IHByZWZlcmVuY2VzIChmYWxsYmFjaylcclxuICAgIGNvbnN0IG1hcmdpbnMgPSB7XHJcbiAgICAgIHRvcDogbWFyZ2luUHJlZnMudG9wIHx8IGRvY1ByZWZzLm1hcmdpblRvcCB8fCBkb2NQcmVmcy50b3AgfHwgMCxcclxuICAgICAgYm90dG9tOlxyXG4gICAgICAgIG1hcmdpblByZWZzLmJvdHRvbSB8fCBkb2NQcmVmcy5tYXJnaW5Cb3R0b20gfHwgZG9jUHJlZnMuYm90dG9tIHx8IDAsXHJcbiAgICAgIGxlZnQ6IG1hcmdpblByZWZzLmxlZnQgfHwgZG9jUHJlZnMubWFyZ2luTGVmdCB8fCBkb2NQcmVmcy5sZWZ0IHx8IDAsXHJcbiAgICAgIHJpZ2h0OiBtYXJnaW5QcmVmcy5yaWdodCB8fCBkb2NQcmVmcy5tYXJnaW5SaWdodCB8fCBkb2NQcmVmcy5yaWdodCB8fCAwLFxyXG4gICAgICBjb2x1bW5Db3VudDpcclxuICAgICAgICBtYXJnaW5QcmVmcy5jb2x1bW5Db3VudCB8fFxyXG4gICAgICAgIGRvY1ByZWZzLm1hcmdpbkNvbHVtbkNvdW50IHx8XHJcbiAgICAgICAgZG9jUHJlZnMuY29sdW1uQ291bnQgfHxcclxuICAgICAgICAxLFxyXG4gICAgICBjb2x1bW5HdXR0ZXI6XHJcbiAgICAgICAgbWFyZ2luUHJlZnMuY29sdW1uR3V0dGVyIHx8XHJcbiAgICAgICAgZG9jUHJlZnMubWFyZ2luQ29sdW1uR3V0dGVyIHx8XHJcbiAgICAgICAgZG9jUHJlZnMuY29sdW1uR3V0dGVyIHx8XHJcbiAgICAgICAgMCxcclxuICAgIH07XHJcblxyXG4gICAgY29uc29sZS5sb2coXCLwn5OPIENhbGN1bGF0ZWQgbWFyZ2lucyAoZmFsbGJhY2spOlwiLCBtYXJnaW5zKTtcclxuXHJcbiAgICAvLyBBRERFRDogQ29udmVydCBtYXJnaW5zIHRvIHBpeGVscyBpZiBVbml0Q29udmVydGVyIGlzIGF2YWlsYWJsZVxyXG4gICAgaWYgKHRoaXMudW5pdENvbnZlcnRlciAmJiB0aGlzLmVsZW1lbnRQYXJzZXI/LmRvY3VtZW50VW5pdHMpIHtcclxuICAgICAgY29uc3QgcGl4ZWxNYXJnaW5zID0gdGhpcy51bml0Q29udmVydGVyLmNvbnZlcnRPYmplY3RUb1BpeGVscyhcclxuICAgICAgICBtYXJnaW5zLFxyXG4gICAgICAgIHRoaXMuZWxlbWVudFBhcnNlci5kb2N1bWVudFVuaXRzXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4ubWFyZ2lucyxcclxuICAgICAgICBwaXhlbE1hcmdpbnM6IHBpeGVsTWFyZ2lucyxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWFyZ2lucztcclxuICB9XHJcblxyXG4gIGNhbGN1bGF0ZUJsZWVkcygpIHtcclxuICAgIGNvbnN0IGRvY1ByZWZzID0gdGhpcy5kb2N1bWVudEluZm8ucHJlZmVyZW5jZXM/LmRvY3VtZW50UHJlZmVyZW5jZXMgfHwge307XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdG9wOiBkb2NQcmVmcy5kb2N1bWVudEJsZWVkVG9wT2Zmc2V0IHx8IDAsXHJcbiAgICAgIGJvdHRvbTogZG9jUHJlZnMuZG9jdW1lbnRCbGVlZEJvdHRvbU9mZnNldCB8fCAwLFxyXG4gICAgICBpbnNpZGU6IGRvY1ByZWZzLmRvY3VtZW50QmxlZWRJbnNpZGVPckxlZnRPZmZzZXQgfHwgMCxcclxuICAgICAgb3V0c2lkZTogZG9jUHJlZnMuZG9jdW1lbnRCbGVlZE91dHNpZGVPclJpZ2h0T2Zmc2V0IHx8IDAsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZXh0cmFjdEd1aWRlcygpIHtcclxuICAgIGNvbnN0IGd1aWRlcyA9IFtdO1xyXG5cclxuICAgIC8vIEV4dHJhY3QgZ3VpZGVzIGZyb20gc3ByZWFkc1xyXG4gICAgT2JqZWN0LnZhbHVlcyh0aGlzLnNwcmVhZHMpLmZvckVhY2goKHNwcmVhZCkgPT4ge1xyXG4gICAgICBpZiAoc3ByZWFkLnBhZ2VJdGVtcykge1xyXG4gICAgICAgIHNwcmVhZC5wYWdlSXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gXCJHdWlkZVwiKSB7XHJcbiAgICAgICAgICAgIGd1aWRlcy5wdXNoKHtcclxuICAgICAgICAgICAgICBvcmllbnRhdGlvbjogaXRlbS5vcmllbnRhdGlvbiB8fCBcIkhvcml6b250YWxcIixcclxuICAgICAgICAgICAgICBsb2NhdGlvbjogaXRlbS5sb2NhdGlvbiB8fCAwLFxyXG4gICAgICAgICAgICAgIGZpdFRvUGFnZTogaXRlbS5maXRUb1BhZ2UgfHwgZmFsc2UsXHJcbiAgICAgICAgICAgICAgdmlld1RocmVzaG9sZDogaXRlbS52aWV3VGhyZXNob2xkIHx8IDAsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gZ3VpZGVzO1xyXG4gIH1cclxuXHJcbiAgZXh0cmFjdEdyaWRzKCkge1xyXG4gICAgY29uc3QgZ3JpZFByZWZzID0gdGhpcy5kb2N1bWVudEluZm8ucHJlZmVyZW5jZXM/LmdyaWRQcmVmZXJlbmNlcyB8fCB7fTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBiYXNlbGluZToge1xyXG4gICAgICAgIHN0YXJ0OiBncmlkUHJlZnMuYmFzZWxpbmVTdGFydCB8fCAwLFxyXG4gICAgICAgIGRpdmlzaW9uOiBncmlkUHJlZnMuYmFzZWxpbmVEaXZpc2lvbiB8fCAxMixcclxuICAgICAgICBzaG93bjogZ3JpZFByZWZzLmJhc2VsaW5lU2hvd24gfHwgZmFsc2UsXHJcbiAgICAgICAgc25hcFRvOiBncmlkUHJlZnMuYmFzZWxpbmVTbmFwdG8gfHwgZmFsc2UsXHJcbiAgICAgIH0sXHJcbiAgICAgIGRvY3VtZW50OiB7XHJcbiAgICAgICAgc2hvd246IGdyaWRQcmVmcy5kb2N1bWVudEdyaWRTaG93biB8fCBmYWxzZSxcclxuICAgICAgICBzbmFwVG86IGdyaWRQcmVmcy5kb2N1bWVudEdyaWRTbmFwdG8gfHwgZmFsc2UsXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gVXRpbGl0eSBtZXRob2QgdG8gZ2V0IHBhZ2UgY29udGVudFxyXG4gIGdldFBhZ2VDb250ZW50KHBhZ2VJZCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFBhcnNlci5nZXRQYWdlQ29udGVudChwYWdlSWQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0RG9jdW1lbnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudDtcclxuICB9XHJcblxyXG4gIGdldFNwcmVhZHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zcHJlYWRzO1xyXG4gIH1cclxuXHJcbiAgZ2V0TWFzdGVyU3ByZWFkcygpIHtcclxuICAgIHJldHVybiB0aGlzLm1hc3RlclNwcmVhZHM7XHJcbiAgfVxyXG5cclxuICBnZXREb2N1bWVudEluZm8oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudEluZm87XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlSW5mbygpIHtcclxuICAgIHJldHVybiB0aGlzLnBhZ2VJbmZvO1xyXG4gIH1cclxuXHJcbiAgZ2V0TGF5ZXJzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubGF5ZXJzO1xyXG4gIH1cclxuXHJcbiAgY2FsY3VsYXRlQ29vcmRpbmF0ZU9mZnNldCgpIHtcclxuICAgIHJldHVybiBJRE1MVXRpbHMuY2FsY3VsYXRlQ29vcmRpbmF0ZU9mZnNldChcclxuICAgICAgdGhpcy5lbGVtZW50UGFyc2VyLmdldEVsZW1lbnRzKClcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IERvY3VtZW50UGFyc2VyO1xyXG4iXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJJRE1MVXRpbHMiLCJEb2N1bWVudFBhcnNlciIsInBhcnNlRG9jdW1lbnRTdHJ1Y3R1cmUiLCJleHRyYWN0ZWREYXRhIiwieG1sUGFyc2VyIiwiY29uc29sZSIsImxvZyIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJkZXNpZ25NYXBEYXRhIiwicGFyc2UiLCJkb2N1bWVudCIsIkRvY3VtZW50IiwiZXh0cmFjdERvY3VtZW50SW5mbyIsImVycm9yIiwiZmlsZU5hbWUiLCJjb250ZW50IiwiZW50cmllcyIsInN0YXJ0c1dpdGgiLCJwYXJzZVNwcmVhZEZpbGUiLCJwYXJzZU1hc3RlclNwcmVhZEZpbGUiLCJkb2N1bWVudEluZm8iLCJ2ZXJzaW9uIiwic2VsZiIsImFjdGl2ZUxheWVyIiwidW51c2VkU3dhdGNoZXMiLCJkb2N1bWVudFByZWZlcmVuY2VzIiwiZXh0cmFjdERvY3VtZW50UHJlZmVyZW5jZXMiLCJwYWdlU2V0dXAiLCJleHRyYWN0UGFnZVNldHVwIiwibGF5ZXJzIiwiZXh0cmFjdExheWVycyIsInBhZ2VzIiwiZXh0cmFjdFBhZ2VzIiwicHJlZnMiLCJkb2NQcmVmIiwiRG9jdW1lbnRQcmVmZXJlbmNlIiwiZG9jdW1lbnRQcmVmZXJlbmNlIiwiUHJvcGVydGllcyIsInBhZ2VXaWR0aCIsInBhcnNlRmxvYXQiLCJwYWdlSGVpZ2h0IiwibGVmdCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwiY29sdW1uQ291bnQiLCJwYXJzZUludCIsImNvbHVtbkd1dHRlciIsImZhY2luZ1BhZ2VzIiwibWFyZ2luUHJlZiIsIk1hcmdpblByZWZlcmVuY2UiLCJtYXJnaW5QcmVmZXJlbmNlIiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQ29sdW1uQ291bnQiLCJtYXJnaW5Db2x1bW5HdXR0ZXIiLCJtYXN0ZXJQYWdlcyIsInNwcmVhZHMiLCJQYWdlIiwiQXJyYXkiLCJpc0FycmF5IiwiZm9yRWFjaCIsInBhZ2UiLCJwdXNoIiwibmFtZSIsImFwcGxpZWRNYXN0ZXIiLCJnZW9tZXRyaWNCb3VuZHMiLCJwYXJzZUdlb21ldHJpY0JvdW5kcyIsIml0ZW1UcmFuc2Zvcm0iLCJwYXJzZVRyYW5zZm9ybSIsIm92ZXJyaWRlTGlzdCIsIkxheWVyIiwibGF5ZXJEYXRhIiwibGF5ZXIiLCJ2aXNpYmxlIiwibG9ja2VkIiwiaWdub3JlV3JhcCIsInNob3dHdWlkZXMiLCJsb2NrR3VpZGVzIiwidWkiLCJsYXllckNvbG9yIiwiU3ByZWFkIiwic3ByZWFkIiwic3ByZWFkUGFnZXMiLCJzcHJlYWRQYXJlbnQiLCJwYXJzZWQiLCJzcHJlYWRJZCIsImJhc2VuYW1lIiwic3ByZWFkRGF0YSIsImluZGV4Iiwia2V5IiwidmFsdWUiLCJpbmNsdWRlcyIsImRldGFpbGVkU3ByZWFkIiwiZmxhdHRlbmVyT3ZlcnJpZGUiLCJiaW5kaW5nTG9jYXRpb24iLCJhbGxvd1BhZ2VTaHVmZmxlIiwiZWxlbWVudFBhcnNlciIsImV4dHJhY3RTcHJlYWRQYWdlcyIsInBhZ2VJdGVtcyIsImV4dHJhY3RQYWdlSXRlbXMiLCJtZXNzYWdlIiwibWFzdGVySWQiLCJtYXN0ZXJEYXRhIiwiTWFzdGVyU3ByZWFkIiwiZGV0YWlsZWRNYXN0ZXIiLCJuYW1lUHJlZml4IiwiYmFzZWRPbiIsImV4dHJhY3RNYXN0ZXJQYWdlcyIsIm1hc3RlclNwcmVhZHMiLCJleHRyYWN0RGV0YWlsZWRJbmZvcm1hdGlvbiIsInBhZ2VJbmZvIiwiZGltZW5zaW9ucyIsImNhbGN1bGF0ZVBhZ2VEaW1lbnNpb25zIiwibWFyZ2lucyIsImNhbGN1bGF0ZU1hcmdpbnMiLCJibGVlZHMiLCJjYWxjdWxhdGVCbGVlZHMiLCJndWlkZXMiLCJleHRyYWN0R3VpZGVzIiwiZ3JpZHMiLCJleHRyYWN0R3JpZHMiLCJjcmVhdGVFbGVtZW50UG9zaXRpb25NYXBGaXhlZCIsImZpcnN0U3ByZWFkIiwidmFsdWVzIiwiZmlyc3RQYWdlIiwiYm91bmRzIiwidW5pdHMiLCJzdHlsZVBhcnNlciIsImdldERvY3VtZW50SW5mbyIsInN0eWxlUGFyc2VySW5mbyIsInByZWZlcmVuY2VzIiwidmlld1ByZWZlcmVuY2VzIiwiaG9yaXpvbnRhbE1lYXN1cmVtZW50VW5pdHMiLCJ3aWR0aCIsImhlaWdodCIsInNvbWUiLCJzZXREb2N1bWVudFVuaXRzIiwic3RvcnlQYXJzZXIiLCJ1bml0Q29udmVydGVyIiwiaXNTdXBwb3J0ZWRVbml0IiwiY29udmVydERpbWVuc2lvbnMiLCJkb2NQcmVmcyIsImZpcnN0TWFzdGVyIiwiZmlyc3RNYXN0ZXJQYWdlIiwibWFzdGVyTWFyZ2lucyIsImRvY3VtZW50VW5pdHMiLCJwaXhlbE1hcmdpbnMiLCJjb252ZXJ0T2JqZWN0VG9QaXhlbHMiLCJtYXJnaW5QcmVmcyIsIm1hcmdpblByZWZlcmVuY2VzIiwiZG9jdW1lbnRCbGVlZFRvcE9mZnNldCIsImRvY3VtZW50QmxlZWRCb3R0b21PZmZzZXQiLCJpbnNpZGUiLCJkb2N1bWVudEJsZWVkSW5zaWRlT3JMZWZ0T2Zmc2V0Iiwib3V0c2lkZSIsImRvY3VtZW50QmxlZWRPdXRzaWRlT3JSaWdodE9mZnNldCIsIml0ZW0iLCJ0eXBlIiwib3JpZW50YXRpb24iLCJsb2NhdGlvbiIsImZpdFRvUGFnZSIsInZpZXdUaHJlc2hvbGQiLCJncmlkUHJlZnMiLCJncmlkUHJlZmVyZW5jZXMiLCJiYXNlbGluZSIsInN0YXJ0IiwiYmFzZWxpbmVTdGFydCIsImRpdmlzaW9uIiwiYmFzZWxpbmVEaXZpc2lvbiIsInNob3duIiwiYmFzZWxpbmVTaG93biIsInNuYXBUbyIsImJhc2VsaW5lU25hcHRvIiwiZG9jdW1lbnRHcmlkU2hvd24iLCJkb2N1bWVudEdyaWRTbmFwdG8iLCJnZXRQYWdlQ29udGVudCIsInBhZ2VJZCIsImdldERvY3VtZW50IiwiZ2V0U3ByZWFkcyIsImdldE1hc3RlclNwcmVhZHMiLCJnZXRQYWdlSW5mbyIsImdldExheWVycyIsImNhbGN1bGF0ZUNvb3JkaW5hdGVPZmZzZXQiLCJnZXRFbGVtZW50cyIsImNvbnN0cnVjdG9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./lib/parsers/DocumentParser.js\n"));

/***/ }),

/***/ "./lib/parsers/ElementParser.js":
/*!**************************************!*\
  !*** ./lib/parsers/ElementParser.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nconst path = __webpack_require__(/*! path */ \"./node_modules/next/dist/compiled/path-browserify/index.js\");\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass ElementParser {\n    // ADDED: Method to set document units for element conversion\n    setDocumentUnits(units) {\n        this.documentUnits = units;\n        console.log(\"\\uD83D\\uDCD0 ElementParser: Set document units to\", units);\n    }\n    // ADDED: Method to convert geometric bounds if needed\n    convertBoundsToPixels(bounds) {\n        if (!bounds || !this.unitConverter || !this.documentUnits) {\n            return bounds;\n        }\n        // Only convert if we have a supported unit and it's not already pixels\n        if (this.unitConverter.isSupportedUnit(this.documentUnits)) {\n            const convertedBounds = this.unitConverter.convertObjectToPixels(bounds, this.documentUnits);\n            console.log(\"\\uD83D\\uDCD0 Converted bounds from \".concat(this.documentUnits, \" to pixels:\"), {\n                original: bounds,\n                converted: convertedBounds\n            });\n            return convertedBounds;\n        }\n        return bounds;\n    }\n    // ADDED: Method to convert transform coordinates (tx, ty) to pixels\n    convertTransformToPixels(transform) {\n        if (!transform || !this.unitConverter || !this.documentUnits) {\n            return transform;\n        }\n        // Only convert if we have a supported unit and it's not already pixels\n        if (this.unitConverter.isSupportedUnit(this.documentUnits)) {\n            // Convert only the translation values (tx, ty) to pixels\n            // Keep scale/rotation values (a, b, c, d) unchanged as they're ratios\n            const convertedTransform = {\n                ...transform,\n                tx: transform.tx ? this.unitConverter.toPixels(transform.tx, this.documentUnits) : 0,\n                ty: transform.ty ? this.unitConverter.toPixels(transform.ty, this.documentUnits) : 0\n            };\n            console.log(\"\\uD83D\\uDCD0 Converted transform from \".concat(this.documentUnits, \" to pixels:\"), {\n                original: {\n                    tx: transform.tx,\n                    ty: transform.ty\n                },\n                converted: {\n                    tx: convertedTransform.tx,\n                    ty: convertedTransform.ty\n                }\n            });\n            return convertedTransform;\n        }\n        return transform;\n    }\n    // ADDED: Method to convert single measurement values to pixels\n    convertMeasurementToPixels(value) {\n        if (typeof value !== \"number\" || isNaN(value) || !this.unitConverter || !this.documentUnits) {\n            return value;\n        }\n        // Only convert if we have a supported unit and it's not already pixels\n        if (this.unitConverter.isSupportedUnit(this.documentUnits)) {\n            const convertedValue = this.unitConverter.toPixels(value, this.documentUnits);\n            console.log(\"\\uD83D\\uDCD0 Converted measurement: \".concat(value, \" \").concat(this.documentUnits, \" → \").concat(convertedValue, \" px\"));\n            return convertedValue;\n        }\n        return value;\n    }\n    extractSpreadPages(spreadData) {\n        const pages = [];\n        if (spreadData.Page) {\n            const pageList = Array.isArray(spreadData.Page) ? spreadData.Page : [\n                spreadData.Page\n            ];\n            pageList.forEach((page, index)=>{\n                pages.push({\n                    self: page[\"@_Self\"],\n                    name: page[\"@_Name\"] || \"\",\n                    appliedMaster: page[\"@_AppliedMaster\"] || \"\",\n                    geometricBounds: IDMLUtils.parseGeometricBounds(page[\"@_GeometricBounds\"]),\n                    itemTransform: IDMLUtils.parseTransform(page[\"@_ItemTransform\"])\n                });\n            });\n        } else {\n            console.log(\"No pages found in spread data\");\n        }\n        console.log(\"Extracted \".concat(pages.length, \" pages\"));\n        return pages;\n    }\n    extractPageItems(spreadData) {\n        const pageItems = [];\n        // Extract different types of page items\n        const itemTypes = [\n            \"Rectangle\",\n            \"Oval\",\n            \"Polygon\",\n            \"GraphicLine\",\n            \"TextFrame\",\n            \"Group\",\n            \"Button\",\n            \"Table\",\n            \"Image\",\n            \"EPS\",\n            \"PDF\",\n            \"PlacedItem\",\n            \"ContentFrame\"\n        ];\n        itemTypes.forEach((itemType)=>{\n            if (spreadData[itemType]) {\n                const items = Array.isArray(spreadData[itemType]) ? spreadData[itemType] : [\n                    spreadData[itemType]\n                ];\n                items.forEach((item)=>{\n                    console.log(\"Processing \".concat(itemType, \":\"), item[\"@_Self\"]);\n                    const pageItem = this.parsePageItem(item, itemType);\n                    if (pageItem) {\n                        pageItems.push(pageItem);\n                        this.elements.push(pageItem);\n                    }\n                });\n            }\n        });\n        this.checkForNestedContent(spreadData, pageItems);\n        // ALSO CHECK FOR NESTED ITEMS IN PAGES\n        if (spreadData.Page) {\n            const pages = Array.isArray(spreadData.Page) ? spreadData.Page : [\n                spreadData.Page\n            ];\n            pages.forEach((page)=>{\n                itemTypes.forEach((itemType)=>{\n                    if (page[itemType]) {\n                        console.log(\"Found \".concat(itemType, \" in page:\"), Array.isArray(page[itemType]) ? page[itemType].length : 1);\n                        const items = Array.isArray(page[itemType]) ? page[itemType] : [\n                            page[itemType]\n                        ];\n                        items.forEach((item)=>{\n                            const pageItem = this.parsePageItem(item, itemType);\n                            if (pageItem) {\n                                pageItems.push(pageItem);\n                                this.elements.push(pageItem);\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        console.log(\"Total page items extracted: \".concat(pageItems.length));\n        return pageItems;\n    }\n    checkForNestedContent(spreadData, pageItems) {\n        console.log(\"\\uD83D\\uDD0D Checking for nested content in elements...\");\n        // Check rectangles for placed images\n        if (spreadData.Rectangle) {\n            const rectangles = Array.isArray(spreadData.Rectangle) ? spreadData.Rectangle : [\n                spreadData.Rectangle\n            ];\n            rectangles.forEach((rect)=>{\n                var _rect_Properties, _rect_Properties1, _rect_Properties2;\n                // Look for ANY content inside rectangle - be more aggressive\n                const possibleContent = rect.Image || rect.PlacedImage || rect.EPS || rect.PDF || ((_rect_Properties = rect.Properties) === null || _rect_Properties === void 0 ? void 0 : _rect_Properties.Image) || ((_rect_Properties1 = rect.Properties) === null || _rect_Properties1 === void 0 ? void 0 : _rect_Properties1.PlacedImage) || rect.Link || ((_rect_Properties2 = rect.Properties) === null || _rect_Properties2 === void 0 ? void 0 : _rect_Properties2.Link);\n                if (possibleContent) {\n                    console.log(\"\\uD83D\\uDCF7 Found placed content in rectangle \".concat(rect[\"@_Self\"], \":\"), possibleContent);\n                    // Update the rectangle to indicate it's a content frame\n                    const existingRect = pageItems.find((item)=>item.self === rect[\"@_Self\"]);\n                    if (existingRect) {\n                        existingRect.hasPlacedContent = true;\n                        existingRect.contentType = \"Image\";\n                        // Extract placed content details with better handling\n                        existingRect.placedContent = this.extractPlacedContent(possibleContent);\n                        // IMPORTANT: Calculate the image position within the frame\n                        existingRect.imagePosition = IDMLUtils.calculateImagePositionInFrame(existingRect.geometricBounds, existingRect.itemTransform, existingRect.placedContent);\n                    }\n                }\n            });\n        }\n    }\n    extractPlacedContent(content) {\n        if (!content) return null;\n        console.log(\"\\uD83D\\uDD0D Extracting placed content:\", content);\n        const contentItem = Array.isArray(content) ? content[0] : content;\n        console.log(\"Content item keys:\", Object.keys(contentItem));\n        // ENHANCED: Better href handling for embedded images\n        let href = contentItem[\"@_href\"] || contentItem[\"@_ActualPpi\"] || \"\";\n        let isEmbedded = false;\n        // Check if this is an embedded image reference\n        if (href && !href.startsWith(\"file://\") && !href.includes(\"/\")) {\n            // This looks like an embedded image reference\n            isEmbedded = true;\n            console.log(\"\\uD83D\\uDDBC️ Detected embedded image reference:\", href);\n        }\n        return {\n            type: contentItem[\"@_type\"] || \"Image\",\n            href: href,\n            isEmbedded: isEmbedded,\n            bounds: contentItem[\"@_GeometricBounds\"] ? IDMLUtils.parseGeometricBounds(contentItem[\"@_GeometricBounds\"]) : null,\n            transform: contentItem[\"@_ItemTransform\"] ? IDMLUtils.parseTransform(contentItem[\"@_ItemTransform\"]) : null,\n            actualPpi: contentItem[\"@_ActualPpi\"],\n            effectivePpi: contentItem[\"@_EffectivePpi\"],\n            imageTypeName: contentItem[\"@_ImageTypeName\"],\n            space: contentItem[\"@_Space\"]\n        };\n    }\n    parsePageItem(item, itemType) {\n        // ADD: Validation\n        if (!item || !item[\"@_Self\"]) {\n            console.warn(\"Invalid \".concat(itemType, \" item - missing self ID\"));\n            return null;\n        }\n        const baseItem = {\n            type: itemType,\n            self: item[\"@_Self\"],\n            name: item[\"@_Name\"] || \"\",\n            visible: item[\"@_Visible\"] !== false,\n            locked: item[\"@_Locked\"] === true,\n            // FIXED: Store original bounds and transforms without conversion\n            // Unit conversion will be handled later in createElementPositionMapFixed\n            geometricBounds: IDMLUtils.calculateBoundsFromPath(item),\n            itemTransform: IDMLUtils.parseTransform(item[\"@_ItemTransform\"]),\n            itemLayer: item[\"@_ItemLayer\"] || \"\",\n            fillColor: item[\"@_FillColor\"] || \"Color/None\",\n            strokeColor: item[\"@_StrokeColor\"] || \"Color/None\",\n            // FIXED: Only convert stroke weight, not positioning data\n            strokeWeight: this.convertMeasurementToPixels(parseFloat(item[\"@_StrokeWeight\"]) || 0),\n            parentStory: item[\"@_ParentStory\"] || null,\n            // ENHANCED: Better content frame detection\n            isContentFrame: false,\n            hasPlacedContent: false,\n            contentType: null\n        };\n        // ADD: Detect content frames more accurately\n        // ENHANCED: Better embedded image detection\n        if (itemType === \"Rectangle\") {\n            var _item_Properties, _item_Properties1;\n            // Check for embedded images more thoroughly\n            const embeddedInfo = this.detectEmbeddedImages(item);\n            if (embeddedInfo.hasEmbeddedContent || embeddedInfo.isPlaceholder) {\n                baseItem.isContentFrame = true;\n                baseItem.hasPlacedContent = embeddedInfo.hasEmbeddedContent;\n                baseItem.contentType = embeddedInfo.embeddedType || \"placeholder\";\n                baseItem.isEmbedded = embeddedInfo.hasEmbeddedContent;\n                baseItem.isPlaceholder = embeddedInfo.isPlaceholder;\n                console.log(\"\\uD83D\\uDCE6 Detected \".concat(embeddedInfo.hasEmbeddedContent ? \"embedded\" : \"placeholder\", \" content frame: \").concat(baseItem.self));\n            }\n            // Existing content frame detection logic...\n            const hasContent = !!(item.Image || item.PlacedImage || item.EPS || item.PDF || ((_item_Properties = item.Properties) === null || _item_Properties === void 0 ? void 0 : _item_Properties.Image) || ((_item_Properties1 = item.Properties) === null || _item_Properties1 === void 0 ? void 0 : _item_Properties1.PlacedImage));\n            if (hasContent && !baseItem.isContentFrame) {\n                baseItem.isContentFrame = true;\n                baseItem.hasPlacedContent = true;\n                baseItem.contentType = \"Image\";\n                // Extract placed content transform for positioning\n                const placedContent = item.Image || item.PlacedImage || item.EPS || item.PDF;\n                if (placedContent) {\n                    baseItem.placedContent = this.extractPlacedContent(placedContent);\n                }\n                console.log(\"\\uD83D\\uDCE6 Detected external content frame: \".concat(baseItem.self));\n            }\n        }\n        // Type-specific processing...\n        switch(itemType){\n            case \"TextFrame\":\n                baseItem.textFramePreferences = this.parseTextFramePreferences(item.TextFramePreference);\n                break;\n            case \"Rectangle\":\n                baseItem.cornerEffects = this.parseCornerEffects(item);\n                break;\n            case \"Group\":\n                baseItem.groupItems = this.extractGroupItems(item);\n                break;\n        }\n        return baseItem;\n    }\n    detectEmbeddedImages(element) {\n        const embeddedIndicators = {\n            hasEmbeddedContent: false,\n            embeddedType: null,\n            embeddedData: null,\n            embeddedFileName: null,\n            isPlaceholder: false\n        };\n        // Check if element name indicates placeholder\n        if (element.name && (element.name.includes(\"[YOUR IMAGE HERE]\") || element.name.includes(\"[IMAGE]\") || element.name.toLowerCase().includes(\"placeholder\"))) {\n            embeddedIndicators.isPlaceholder = true;\n            embeddedIndicators.embeddedType = \"placeholder\";\n        }\n        // ENHANCED: Check for actual embedded image data\n        if (element.placedContent) {\n            const content = element.placedContent;\n            // Check if href looks like an embedded reference\n            if (content.href && content.isEmbedded) {\n                embeddedIndicators.hasEmbeddedContent = true;\n                embeddedIndicators.embeddedType = content.imageTypeName || \"unknown\";\n                embeddedIndicators.embeddedData = content.href;\n                embeddedIndicators.embeddedFileName = \"\".concat(content.href, \".\").concat(IDMLUtils.getImageExtension(content.imageTypeName));\n            }\n        }\n        return embeddedIndicators;\n    }\n    parseTextFramePreferences(textFramePreference) {\n        var _textFramePreference__InsetSpacing, _textFramePreference__InsetSpacing1, _textFramePreference__InsetSpacing2, _textFramePreference__InsetSpacing3;\n        if (!textFramePreference) return null;\n        // FIXED: Convert all text frame measurements to pixels\n        const rawTextColumnGutter = parseFloat(textFramePreference[\"@_TextColumnGutter\"]) || 0;\n        const rawInsetTop = parseFloat((_textFramePreference__InsetSpacing = textFramePreference[\"@_InsetSpacing\"]) === null || _textFramePreference__InsetSpacing === void 0 ? void 0 : _textFramePreference__InsetSpacing.split(\" \")[0]) || parseFloat(textFramePreference[\"@_TextInsetTop\"]) || 0;\n        const rawInsetRight = parseFloat((_textFramePreference__InsetSpacing1 = textFramePreference[\"@_InsetSpacing\"]) === null || _textFramePreference__InsetSpacing1 === void 0 ? void 0 : _textFramePreference__InsetSpacing1.split(\" \")[1]) || parseFloat(textFramePreference[\"@_TextInsetRight\"]) || 0;\n        const rawInsetBottom = parseFloat((_textFramePreference__InsetSpacing2 = textFramePreference[\"@_InsetSpacing\"]) === null || _textFramePreference__InsetSpacing2 === void 0 ? void 0 : _textFramePreference__InsetSpacing2.split(\" \")[2]) || parseFloat(textFramePreference[\"@_TextInsetBottom\"]) || 0;\n        const rawInsetLeft = parseFloat((_textFramePreference__InsetSpacing3 = textFramePreference[\"@_InsetSpacing\"]) === null || _textFramePreference__InsetSpacing3 === void 0 ? void 0 : _textFramePreference__InsetSpacing3.split(\" \")[3]) || parseFloat(textFramePreference[\"@_TextInsetLeft\"]) || 0;\n        const rawMinimumFirstBaselineOffset = parseFloat(textFramePreference[\"@_MinimumFirstBaselineOffset\"]) || 0;\n        const preferences = {\n            textColumnCount: parseInt(textFramePreference[\"@_TextColumnCount\"]) || 1,\n            textColumnGutter: this.convertMeasurementToPixels(rawTextColumnGutter),\n            firstBaselineOffset: textFramePreference[\"@_FirstBaselineOffset\"] || \"AscentOffset\",\n            autoSizingReferencePoint: textFramePreference[\"@_AutoSizingReferencePoint\"] || \"CenterPoint\",\n            autoSizingType: textFramePreference[\"@_AutoSizingType\"] || \"Off\",\n            verticalJustification: textFramePreference[\"@_VerticalJustification\"] || \"TopAlign\",\n            // FIXED: Convert text frame insets to pixels\n            insetSpacing: {\n                top: this.convertMeasurementToPixels(rawInsetTop),\n                right: this.convertMeasurementToPixels(rawInsetRight),\n                bottom: this.convertMeasurementToPixels(rawInsetBottom),\n                left: this.convertMeasurementToPixels(rawInsetLeft)\n            },\n            // FIXED: Store original values for reference\n            originalInsetSpacing: {\n                top: rawInsetTop,\n                right: rawInsetRight,\n                bottom: rawInsetBottom,\n                left: rawInsetLeft\n            },\n            // FIXED: Convert additional measurements to pixels\n            useMinimumHeight: textFramePreference[\"@_UseMinimumHeight\"] === true,\n            minimumFirstBaselineOffset: this.convertMeasurementToPixels(rawMinimumFirstBaselineOffset),\n            originalMinimumFirstBaselineOffset: rawMinimumFirstBaselineOffset,\n            ignoreWrap: textFramePreference[\"@_IgnoreWrap\"] === true\n        };\n        console.log(\"\\uD83D\\uDCD0 Converted text frame preferences to pixels:\", {\n            textColumnGutter: \"\".concat(rawTextColumnGutter, \" → \").concat(preferences.textColumnGutter, \"px\"),\n            insets: \"\".concat(rawInsetTop, \",\").concat(rawInsetRight, \",\").concat(rawInsetBottom, \",\").concat(rawInsetLeft, \" → \").concat(preferences.insetSpacing.top, \",\").concat(preferences.insetSpacing.right, \",\").concat(preferences.insetSpacing.bottom, \",\").concat(preferences.insetSpacing.left, \"px\")\n        });\n        return preferences;\n    }\n    parseCornerEffects(item) {\n        // Parse corner effects for rectangles\n        return {\n            topLeftCornerRadius: parseFloat(item[\"@_TopLeftCornerRadius\"]) || 0,\n            topRightCornerRadius: parseFloat(item[\"@_TopRightCornerRadius\"]) || 0,\n            bottomLeftCornerRadius: parseFloat(item[\"@_BottomLeftCornerRadius\"]) || 0,\n            bottomRightCornerRadius: parseFloat(item[\"@_BottomRightCornerRadius\"]) || 0\n        };\n    }\n    extractGroupItems(groupItem) {\n        const groupItems = [];\n        // Groups can contain other page items\n        const itemTypes = [\n            \"Rectangle\",\n            \"Oval\",\n            \"Polygon\",\n            \"TextFrame\"\n        ];\n        itemTypes.forEach((itemType)=>{\n            if (groupItem[itemType]) {\n                const items = Array.isArray(groupItem[itemType]) ? groupItem[itemType] : [\n                    groupItem[itemType]\n                ];\n                items.forEach((item)=>{\n                    const parsedItem = this.parsePageItem(item, itemType);\n                    if (parsedItem) {\n                        groupItems.push(parsedItem);\n                    }\n                });\n            }\n        });\n        return groupItems;\n    }\n    parseTransparency(transparencySettings) {\n        if (!transparencySettings) return null;\n        return {\n            blendingSettings: transparencySettings.BlendingSetting ? {\n                blendMode: transparencySettings.BlendingSetting[\"@_BlendMode\"] || \"Normal\",\n                opacity: parseFloat(transparencySettings.BlendingSetting[\"@_Opacity\"]) || 100\n            } : null\n        };\n    }\n    createElementPositionMapFixed() {\n        console.log(\"Creating PIXEL-PERFECT element position map...\");\n        console.log(\"\\uD83D\\uDCD0 Unit conversion status: converter=\".concat(!!this.unitConverter, \", documentUnits=\").concat(this.documentUnits));\n        // ENHANCED: Use precise coordinate offset calculation for pixel-perfect positioning\n        const coordinateOffset = IDMLUtils.calculateCoordinateOffsetPrecise(this.elements);\n        console.log(\"\\uD83D\\uDCD0 Calculated PRECISE coordinate offset for pixel-perfect positioning:\", coordinateOffset);\n        this.elements.forEach((element, index)=>{\n            var _this_unitConverter;\n            console.log(\"\\uD83D\\uDCD0 ELEMENT \".concat(index + 1, \" [\").concat(element.type, \"]: Coordinate transformation\"));\n            console.log(\"   \\uD83D\\uDCCD Bounds: left=\".concat(element.geometricBounds.left, \", top=\").concat(element.geometricBounds.top, \", width=\").concat(element.geometricBounds.width, \", height=\").concat(element.geometricBounds.height));\n            console.log(\"   \\uD83D\\uDCCD Transform: tx=\".concat(element.itemTransform.tx, \", ty=\").concat(element.itemTransform.ty));\n            console.log(\"   \\uD83D\\uDCCD Coordinate offset: x=\".concat(coordinateOffset.x, \", y=\").concat(coordinateOffset.y));\n            // Apply coordinate system transformation to convert from InDesign to web coordinates\n            const webX = element.geometricBounds.left + element.itemTransform.tx + coordinateOffset.x;\n            const webY = element.geometricBounds.top + element.itemTransform.ty + coordinateOffset.y;\n            console.log(\"   \\uD83D\\uDCCD Web coordinates: (\".concat(webX, \", \").concat(webY, \") \").concat(element.geometricBounds.width, \"x\").concat(element.geometricBounds.height));\n            // Create position object in original units\n            element.position = {\n                x: webX,\n                y: webY,\n                width: element.geometricBounds.width,\n                height: element.geometricBounds.height,\n                rotation: element.itemTransform.rotation || 0,\n                _conversionInfo: {\n                    unitsConverted: false,\n                    originalUnits: this.documentUnits,\n                    pixelConversionApplied: false,\n                    dpi: ((_this_unitConverter = this.unitConverter) === null || _this_unitConverter === void 0 ? void 0 : _this_unitConverter.dpi) || 96,\n                    coordinateOffset: coordinateOffset\n                }\n            };\n            // Apply unit conversion to pixels if converter is available\n            if (this.unitConverter) {\n                console.log(\"   \\uD83D\\uDCD0 Applying unit conversion: Points → pixels\");\n                const pixelX = this.unitConverter.toPixels(webX, this.documentUnits);\n                const pixelY = this.unitConverter.toPixels(webY, this.documentUnits);\n                const pixelWidth = this.unitConverter.toPixels(element.geometricBounds.width, this.documentUnits);\n                const pixelHeight = this.unitConverter.toPixels(element.geometricBounds.height, this.documentUnits);\n                element.pixelPosition = {\n                    x: pixelX,\n                    y: pixelY,\n                    width: pixelWidth,\n                    height: pixelHeight,\n                    rotation: element.itemTransform.rotation || 0,\n                    _isConverted: true,\n                    _originalUnits: this.documentUnits,\n                    _dpi: this.unitConverter.dpi\n                };\n                console.log(\"   \\uD83D\\uDCD0 CONVERTED TO PIXELS: {\\n  x: \".concat(pixelX, \",\\n  y: \").concat(pixelY, \",\\n  width: \").concat(pixelWidth, \",\\n  height: \").concat(pixelHeight, \",\\n  rotation: \").concat(element.itemTransform.rotation || 0, \",\\n  _isConverted: true,\\n  _originalUnits: '\").concat(this.documentUnits, \"',\\n  _dpi: \").concat(this.unitConverter.dpi, \"\\n}\"));\n                // Update original position conversion info\n                element.position._conversionInfo.unitsConverted = true;\n                element.position._conversionInfo.pixelConversionApplied = true;\n            }\n            console.log(\"   ✅ FINAL POSITIONS (after coordinate system transformation):\");\n            console.log(\"      Original: \".concat(JSON.stringify(element.position, null, 2)));\n            if (element.pixelPosition) {\n                console.log(\"      Pixels: \".concat(JSON.stringify(element.pixelPosition, null, 2)));\n            }\n            // PIXEL-PERFECT VALIDATION\n            this.validatePixelPerfectPositioning(element, index + 1);\n        });\n        console.log(\"✅ PIXEL-PERFECT positioning map created successfully\");\n    }\n    /**\r\n   * Validate pixel-perfect positioning accuracy\r\n   * @param {Object} element - Element to validate\r\n   * @param {number} elementNumber - Element number for logging\r\n   */ validatePixelPerfectPositioning(element, elementNumber) {\n        console.log(\"\\uD83D\\uDD0D PIXEL-PERFECT VALIDATION - Element \".concat(elementNumber, \":\"));\n        const position = element.pixelPosition || element.position;\n        // Check for sub-pixel precision issues\n        const hasSubPixelX = position.x % 1 !== 0;\n        const hasSubPixelY = position.y % 1 !== 0;\n        if (hasSubPixelX || hasSubPixelY) {\n            console.log(\"   ⚠️ Sub-pixel positioning detected:\");\n            if (hasSubPixelX) console.log(\"      X: \".concat(position.x, \" (fractional: \").concat((position.x % 1).toFixed(3), \")\"));\n            if (hasSubPixelY) console.log(\"      Y: \".concat(position.y, \" (fractional: \").concat((position.y % 1).toFixed(3), \")\"));\n            console.log(\"   \\uD83D\\uDCDD Note: Sub-pixel positioning is normal for precise layouts\");\n        } else {\n            console.log(\"   ✅ Perfect pixel alignment: X=\".concat(position.x, \", Y=\").concat(position.y));\n        }\n        // Check for negative coordinates (should be resolved by offset)\n        if (position.x < 0 || position.y < 0) {\n            console.warn(\"   \\uD83D\\uDEA8 NEGATIVE COORDINATES DETECTED: X=\".concat(position.x, \", Y=\").concat(position.y));\n            console.warn(\"   \\uD83D\\uDEA8 This indicates coordinate offset calculation may need adjustment\");\n        }\n        // Check for reasonable positioning bounds\n        const isReasonable = position.x >= 0 && position.y >= 0 && position.x < 10000 && position.y < 10000;\n        if (!isReasonable) {\n            console.warn(\"   \\uD83D\\uDEA8 UNREASONABLE POSITIONING: X=\".concat(position.x, \", Y=\").concat(position.y));\n            console.warn(\"   \\uD83D\\uDEA8 Coordinates are outside expected range for web display\");\n        } else {\n            console.log(\"   ✅ Positioning within reasonable bounds\");\n        }\n        // Validate conversion consistency\n        if (element.pixelPosition && element.position._conversionInfo) {\n            const info = element.position._conversionInfo;\n            console.log(\"   \\uD83D\\uDCCA Conversion validation:\");\n            console.log(\"      Units converted: \".concat(info.unitsConverted));\n            console.log(\"      Original units: \".concat(info.originalUnits));\n            console.log(\"      DPI: \".concat(info.dpi));\n            console.log(\"      Coordinate offset applied: X=\".concat(info.coordinateOffset.x, \", Y=\").concat(info.coordinateOffset.y));\n        }\n    }\n    extractMasterPages(masterData) {\n        const pages = [];\n        if (masterData.Page) {\n            const pageList = Array.isArray(masterData.Page) ? masterData.Page : [\n                masterData.Page\n            ];\n            pageList.forEach((page)=>{\n                // Extract margin preferences from master page\n                let marginPreference = null;\n                if (page.MarginPreference) {\n                    marginPreference = {\n                        top: parseFloat(page.MarginPreference[\"@_Top\"]) || 0,\n                        bottom: parseFloat(page.MarginPreference[\"@_Bottom\"]) || 0,\n                        left: parseFloat(page.MarginPreference[\"@_Left\"]) || 0,\n                        right: parseFloat(page.MarginPreference[\"@_Right\"]) || 0,\n                        columnCount: parseInt(page.MarginPreference[\"@_ColumnCount\"]) || 1,\n                        columnGutter: parseFloat(page.MarginPreference[\"@_ColumnGutter\"]) || 0,\n                        columnDirection: page.MarginPreference[\"@_ColumnDirection\"] || \"Horizontal\",\n                        columnsPositions: page.MarginPreference[\"@_ColumnsPositions\"] || \"\"\n                    };\n                    console.log(\"\\uD83D\\uDCCF Extracted margin preference from master page:\", marginPreference);\n                }\n                pages.push({\n                    self: page[\"@_Self\"],\n                    name: page[\"@_Name\"] || \"\",\n                    geometricBounds: IDMLUtils.parseGeometricBounds(page[\"@_GeometricBounds\"]),\n                    itemTransform: IDMLUtils.parseTransform(page[\"@_ItemTransform\"]),\n                    appliedMaster: page[\"@_AppliedMaster\"] || \"\",\n                    masterPageTransform: IDMLUtils.parseTransform(page[\"@_MasterPageTransform\"]),\n                    marginPreference: marginPreference\n                });\n            });\n        }\n        return pages;\n    }\n    getElements() {\n        return this.elements;\n    }\n    clearElements() {\n        this.elements = [];\n    }\n    getElementIndex(element) {\n        return this.elements.findIndex((el)=>el.self === element.self);\n    }\n    getPageContent(pageId) {\n        const pageElements = this.elements.filter((element)=>{\n            // Check if element belongs to this page based on its bounds\n            return true; // TODO: Implement proper page boundary checking\n        });\n        return {\n            elements: pageElements\n        };\n    }\n    constructor(unitConverter = null){\n        this.elements = [];\n        this.unitConverter = unitConverter; // ADDED: Unit converter for geometric bounds\n        this.documentUnits = null; // Will be set by DocumentParser\n    }\n}\nmodule.exports = ElementParser;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/parsers/ElementParser.js\n"));

/***/ }),

/***/ "./lib/parsers/StoryParser.js":
/*!************************************!*\
  !*** ./lib/parsers/StoryParser.js ***!
  \************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nconst path = __webpack_require__(/*! path */ \"./node_modules/next/dist/compiled/path-browserify/index.js\");\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass StoryParser {\n    // ADDED: Method to set document units for font size conversion\n    setDocumentUnits(units) {\n        this.documentUnits = units;\n        console.log(\"\\uD83D\\uDCD0 StoryParser: Set document units to\", units);\n    }\n    // ADDED: Method to convert font size to pixels if needed\n    convertFontSizeToPixels(fontSize) {\n        if (!fontSize || !this.unitConverter || !this.documentUnits) {\n            return fontSize;\n        }\n        // Font sizes in IDML are typically in Points, but let's use document units as fallback\n        const fontUnits = this.documentUnits === \"Pixels\" ? \"Pixels\" : \"Points\"; // Font sizes are usually points\n        if (this.unitConverter.isSupportedUnit(fontUnits)) {\n            const pixelSize = this.unitConverter.toPixels(fontSize, fontUnits);\n            console.log(\"\\uD83D\\uDCD0 Converted font size: \".concat(fontSize, \" \").concat(fontUnits, \" → \").concat(pixelSize, \" px\"));\n            return pixelSize;\n        }\n        return fontSize;\n    }\n    async parseStoryFile(fileName, content, xmlParser) {\n        console.log(\"\\uD83D\\uDCDD Parsing story: \".concat(fileName));\n        try {\n            const parsed = xmlParser.parse(content);\n            const storyId = path.basename(fileName, \".xml\");\n            const storyData = parsed.Story || parsed;\n            // ADD DEBUGGING FOR BR ELEMENTS IN RAW XML\n            console.log(\"=== RAW XML CONTENT DEBUG ===\");\n            console.log(\"Raw XML content sample:\", content.substring(0, 1000));\n            // Count Br elements in raw XML\n            const brMatches = content.match(/<Br[^>]*>/g) || [];\n            console.log(\"Found \".concat(brMatches.length, \" <Br> elements in raw XML:\"), brMatches);\n            // Look for consecutive Br elements\n            const consecutiveBrPattern = /(<Br[^>]*>\\s*){2,}/g;\n            const consecutiveBrMatches = content.match(consecutiveBrPattern) || [];\n            console.log(\"Found \".concat(consecutiveBrMatches.length, \" groups of consecutive <Br> elements:\"), consecutiveBrMatches);\n            // CRITICAL FIX: Parse raw XML to preserve document order\n            this.parseRawXMLForDocumentOrder(content, fileName);\n            // ADD THESE SIMPLE LOGS FIRST:\n            console.log(\"=== SIMPLE DEBUG TEST ===\");\n            console.log(\"Story file name:\", fileName);\n            console.log(\"Parsed story keys:\", Object.keys(storyData));\n            console.log(\"Raw story data sample:\", JSON.stringify(storyData, null, 2).substring(0, 500));\n            // Extract detailed story information\n            const detailedStory = {\n                self: storyData[\"@_Self\"],\n                appliedTOCStyle: storyData[\"@_AppliedTOCStyle\"] || \"n\",\n                userText: storyData[\"@_UserText\"] !== false,\n                // Extract story content with formatting\n                content: this.extractDetailedStoryContent(storyData, fileName),\n                // Extract text formatting\n                textFormatting: this.extractTextFormatting(storyData)\n            };\n            // ADD DEBUGGING FOR PARSED BR STRUCTURE\n            console.log(\"=== PARSED XML STRUCTURE DEBUG ===\");\n            this.debugBrElementsInParsedStructure(storyData, \"root\");\n            const cleanStoryId = storyId.replace(\"Story_\", \"\");\n            this.stories[cleanStoryId] = detailedStory;\n            // Enhanced logging to show line breaks\n            const { plainText, lineBreakInfo } = detailedStory.content;\n            console.log(\"✅ Story \".concat(storyId, \" parsed:\"));\n            console.log(\"   - Characters: \".concat(plainText.length));\n            console.log(\"   - Words: \".concat(detailedStory.content.wordCount));\n            console.log(\"   - Line breaks: \".concat((lineBreakInfo === null || lineBreakInfo === void 0 ? void 0 : lineBreakInfo.lineBreakCount) || 0));\n            console.log('   - Text preview: \"'.concat(plainText.substring(0, 50).replace(/\\n/g, \"\\\\n\"), '...\"'));\n        } catch (error) {\n            console.error(\"❌ Error parsing story \".concat(fileName, \":\"), error.message);\n        }\n    }\n    // Replace the existing extractDetailedStoryContent method with this corrected version\n    extractDetailedStoryContent(storyData) {\n        let fileName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"unknown\";\n        var _this = this;\n        let content = \"\";\n        let formattedContent = [];\n        let textColor = null;\n        let debugInfo = [];\n        const extractTextRecursively = function(element) {\n            let depth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, context = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n            if (typeof element === \"string\") {\n                content += element;\n                return;\n            }\n            if (element && typeof element === \"object\") {\n                // ENHANCED: Special handling for CharacterStyleRange with sophisticated Br detection\n                if (element.CharacterStyleRange) {\n                    const ranges = Array.isArray(element.CharacterStyleRange) ? element.CharacterStyleRange : [\n                        element.CharacterStyleRange\n                    ];\n                    ranges.forEach((range, rangeIndex)=>{\n                        // Extract direct font references from the XML range\n                        const directFontRef = range[\"@_AppliedFont\"] || range[\"@_FontFamily\"] || range[\"@_Font\"] || \"\";\n                        const formatting = {\n                            paragraphStyle: element[\"@_AppliedParagraphStyle\"] || context.appliedStyle || null,\n                            characterStyle: range[\"@_AppliedCharacterStyle\"] || null,\n                            fontSize: range[\"@_PointSize\"] ? _this.convertFontSizeToPixels(parseFloat(range[\"@_PointSize\"])) // ADDED: Convert to pixels\n                             : null,\n                            originalFontSize: range[\"@_PointSize\"] ? parseFloat(range[\"@_PointSize\"]) : null,\n                            fontReference: directFontRef,\n                            fillColor: range[\"@_FillColor\"] || null,\n                            fontStyle: range[\"@_FontStyle\"] || null,\n                            // CRITICAL FIX: Inherit paragraph alignment from context if not explicitly set\n                            alignment: range[\"@_Justification\"] || range[\"@_Alignment\"] || context.paragraphAlignment || null\n                        };\n                        const resolvedFormatting = _this.styleParser.resolveStyleFormatting(formatting);\n                        // CRITICAL FIX: Process Content and Br elements in document order\n                        // This handles interleaved <Content> and <Br> elements correctly\n                        content = _this.processCharacterRangeInOrder(range, resolvedFormatting, rangeIndex, ranges.length, content, formattedContent, debugInfo, context, fileName);\n                        // CRITICAL FIX: Add space between character style ranges if needed\n                        if (rangeIndex < ranges.length - 1) {\n                            const nextRange = ranges[rangeIndex + 1];\n                            // More robust space detection\n                            const currentText = content.slice(-10); // Check last 10 characters\n                            const currentRangeEndsWithSpace = /\\s$/.test(currentText); // Any whitespace at end\n                            const nextContent = nextRange.Content ? String(Array.isArray(nextRange.Content) ? nextRange.Content[0] : nextRange.Content) : \"\";\n                            const nextRangeStartsWithSpace = /^\\s/.test(nextContent); // Any whitespace at start\n                            // AGGRESSIVE FIX: Add space between ALL ranges unless explicitly not needed\n                            const shouldSkipSpace = currentRangeEndsWithSpace || nextRangeStartsWithSpace || _this.shouldInsertImplicitLineBreak(range, nextRange, context) || !nextRange.Content || // Skip if next range has no content\n                            nextContent.trim() === \"\";\n                            if (!shouldSkipSpace) {\n                                const currentStyle = range[\"@_AppliedCharacterStyle\"] || \"none\";\n                                const nextStyle = nextRange[\"@_AppliedCharacterStyle\"] || \"none\";\n                                const spaceText = \" \";\n                                content += spaceText;\n                                formattedContent.push({\n                                    text: spaceText,\n                                    formatting: {\n                                        isSpace: true,\n                                        source: \"between character style ranges (aggressive)\",\n                                        currentStyle,\n                                        nextStyle\n                                    }\n                                });\n                                debugInfo.push({\n                                    type: \"Space inserted between character styles (aggressive)\",\n                                    location: \"Between ranges \".concat(rangeIndex, \" and \").concat(rangeIndex + 1),\n                                    currentStyle,\n                                    nextStyle,\n                                    reason: \"Default space insertion - words likely split across ranges\",\n                                    currentTextEnd: currentText.slice(-5),\n                                    nextTextStart: nextContent.slice(0, 5)\n                                });\n                            } else {\n                                debugInfo.push({\n                                    type: \"Space insertion skipped\",\n                                    location: \"Between ranges \".concat(rangeIndex, \" and \").concat(rangeIndex + 1),\n                                    reason: currentRangeEndsWithSpace ? \"Current range ends with space\" : nextRangeStartsWithSpace ? \"Next range starts with space\" : !nextRange.Content ? \"Next range has no content\" : nextContent.trim() === \"\" ? \"Next content is only whitespace\" : \"Line break would be inserted\",\n                                    currentTextEnd: currentText.slice(-5),\n                                    nextTextStart: nextContent.slice(0, 5)\n                                });\n                            }\n                            // Handle explicit line breaks between ranges (for cases where shouldInsertImplicitLineBreak is true)\n                            if (_this.shouldInsertImplicitLineBreak(range, nextRange, context)) {\n                                const implicitBreak = \"\\n\";\n                                content += implicitBreak;\n                                formattedContent.push({\n                                    text: implicitBreak,\n                                    formatting: {\n                                        isBreak: true,\n                                        breakType: \"implicit\",\n                                        source: \"between ranges\"\n                                    }\n                                });\n                                debugInfo.push({\n                                    type: \"Implicit line break\",\n                                    location: \"Between ranges \".concat(rangeIndex, \" and \").concat(rangeIndex + 1)\n                                });\n                            }\n                        }\n                    });\n                    return; // Don't continue processing to avoid duplication\n                }\n                // ENHANCED: Handle ParagraphStyleRange with context\n                if (element.ParagraphStyleRange) {\n                    const ranges = Array.isArray(element.ParagraphStyleRange) ? element.ParagraphStyleRange : [\n                        element.ParagraphStyleRange\n                    ];\n                    ranges.forEach((range, index)=>{\n                        const paragraphContext = {\n                            ...context,\n                            paragraphIndex: index,\n                            totalParagraphs: ranges.length,\n                            appliedStyle: range[\"@_AppliedParagraphStyle\"],\n                            // CRITICAL FIX: Pass down direct paragraph-level alignment\n                            paragraphAlignment: range[\"@_Justification\"] || range[\"@_Alignment\"]\n                        };\n                        // Track content length before\n                        const beforeLen = content.length;\n                        extractTextRecursively(range, depth + 1, paragraphContext);\n                        // Track content length after\n                        const afterLen = content.length;\n                        // If nothing was added, this is an empty paragraph: add a newline\n                        if (afterLen === beforeLen) {\n                            content += \"\\n\";\n                            formattedContent.push({\n                                text: \"\\n\",\n                                formatting: {\n                                    isBreak: true,\n                                    breakType: \"empty-paragraph\",\n                                    source: \"empty ParagraphStyleRange\"\n                                }\n                            });\n                            debugInfo.push({\n                                type: \"Empty paragraph detected\",\n                                location: \"ParagraphStyleRange[\".concat(index, \"]\")\n                            });\n                        }\n                        // Add paragraph break between paragraphs (but not after the last one)\n                        if (index < ranges.length - 1) {\n                            const paragraphBreak = \"\\n\\n\"; // Use double newline for paragraph breaks\n                            content += paragraphBreak;\n                            formattedContent.push({\n                                text: paragraphBreak,\n                                formatting: {\n                                    isBreak: true,\n                                    breakType: \"paragraph\",\n                                    source: \"between paragraphs\"\n                                }\n                            });\n                            debugInfo.push({\n                                type: \"Paragraph break\",\n                                location: \"between paragraphs \".concat(index, \" and \").concat(index + 1)\n                            });\n                        }\n                    });\n                    return;\n                }\n                // Handle direct Content elements (when not inside CharacterStyleRange)\n                if (element.Content && !element.CharacterStyleRange) {\n                    let text = Array.isArray(element.Content) ? element.Content.join(\"\") : String(element.Content);\n                    text = IDMLUtils.decodeXMLEntities(text);\n                    content += text;\n                    const formatting = {\n                        paragraphStyle: element[\"@_AppliedParagraphStyle\"] || context.appliedStyle || null,\n                        characterStyle: element[\"@_AppliedCharacterStyle\"] || null,\n                        fontSize: element[\"@_PointSize\"] || null,\n                        fontFamily: element[\"@_AppliedFont\"] || null,\n                        fillColor: element[\"@_FillColor\"] || null,\n                        // CRITICAL FIX: Inherit paragraph alignment from context if not explicitly set\n                        alignment: element[\"@_Justification\"] || element[\"@_Alignment\"] || context.paragraphAlignment || null\n                    };\n                    const resolvedFormatting = _this.styleParser.resolveStyleFormatting(formatting);\n                    formattedContent.push({\n                        text: text.replace(/\\u2028/g, \"\\n\").replace(/\\u2029/g, \"\\n\\n\"),\n                        formatting: resolvedFormatting\n                    });\n                }\n                // ENHANCED: Direct Br element handling (outside of ranges)\n                if (element.Br !== undefined) {\n                    const brElements = Array.isArray(element.Br) ? element.Br : [\n                        element.Br\n                    ];\n                    console.log(\"\\uD83D\\uDD27 Processing \".concat(brElements.length, \" direct Br elements:\"), brElements);\n                    brElements.forEach((br, index)=>{\n                        const lineBreakText = \"\\n\";\n                        console.log(\"\\uD83D\\uDD27 Direct Br element \".concat(index + 1, \"/\").concat(brElements.length, \" creates: \").concat(JSON.stringify(lineBreakText)));\n                        content += lineBreakText;\n                        formattedContent.push({\n                            text: lineBreakText,\n                            formatting: {\n                                isBreak: true,\n                                breakType: \"explicit\",\n                                source: \"direct Br element\"\n                            }\n                        });\n                        debugInfo.push({\n                            type: \"Direct Br element\",\n                            location: \"Direct element, index \".concat(index)\n                        });\n                    });\n                    console.log(\"\\uD83D\\uDD27 After processing \".concat(brElements.length, \" direct Br elements, content ends with:\"), JSON.stringify(content.slice(-10)));\n                }\n                // Continue with other nested elements\n                Object.entries(element).forEach((param)=>{\n                    let [key, value] = param;\n                    if (!key.startsWith(\"@_\") && key !== \"Content\" && key !== \"Br\" && key !== \"CharacterStyleRange\" && key !== \"ParagraphStyleRange\") {\n                        if (Array.isArray(value)) {\n                            value.forEach((item)=>extractTextRecursively(item, depth + 1, context));\n                        } else if (typeof value === \"object\" && depth < 10) {\n                            extractTextRecursively(value, depth + 1, context);\n                        }\n                    }\n                });\n            }\n        };\n        extractTextRecursively(storyData);\n        // DEBUG: Print the full raw content string with visible newlines before processing\n        console.log(\"\\uD83D\\uDCDD === COMPLETE CONTENT ANALYSIS ===\");\n        console.log(\"   - Raw content before processing:\", JSON.stringify(content));\n        console.log(\"   - Raw content newline count:\", (content.match(/\\n/g) || []).length);\n        console.log(\"   - Raw content character breakdown:\");\n        const chars = content.split(\"\").map((char, i)=>\"\".concat(i, \": \").concat(JSON.stringify(char)));\n        console.log(\"   - First 50 characters:\", chars.slice(0, 50));\n        if (content.length > 50) {\n            console.log(\"   - Last 20 characters:\", chars.slice(-20));\n        }\n        // ENHANCED: Process and clean up the content with sophisticated line break preservation\n        let processedContent = IDMLUtils.sophisticatedLineBreakProcessing(content);\n        // CRITICAL: Explicitly preserve all newlines as-is (no merging or stripping)\n        processedContent = processedContent.replace(/\\r\\n?/g, \"\\n\"); // Normalize CRLF/CR to LF\n        // Do NOT collapse multiple newlines into one; preserve as-is\n        console.log(\"\\uD83D\\uDCDD === PROCESSED CONTENT ANALYSIS ===\");\n        console.log(\"   - Processed content:\", JSON.stringify(processedContent));\n        console.log(\"   - Processed content newline count:\", (processedContent.match(/\\n/g) || []).length);\n        console.log(\"   - Content length change:\", content.length, \"→\", processedContent.length);\n        // Show differences if any\n        if (content !== processedContent) {\n            console.log(\"⚠️  CONTENT WAS MODIFIED DURING PROCESSING!\");\n            console.log(\"   - Original:\", JSON.stringify(content.slice(0, 100)));\n            console.log(\"   - Processed:\", JSON.stringify(processedContent.slice(0, 100)));\n        } else {\n            console.log(\"✅ Content preserved exactly during processing\");\n        }\n        // DEBUG: Log space preservation results\n        console.log(\"\\uD83D\\uDCDD Text extraction results:\");\n        console.log(\"   - Original content length:\", content.length);\n        console.log(\"   - Processed content length:\", processedContent.length);\n        console.log(\"   - Space preservation events:\", debugInfo.filter((info)=>info.type.includes(\"Space inserted\")).length);\n        // DEBUG: Show first 300 chars with visible newlines\n        console.log(\"   - Extracted text preview:\", JSON.stringify(processedContent.slice(0, 300)));\n        // SPECIFIC DEBUG: Check for the problematic \"pavoluptusda\" text (simplified)\n        if (processedContent.includes(\"pavoluptusda\") || processedContent.includes(\"pa\") && processedContent.includes(\"voluptusda\")) {\n            console.log(\"\\uD83D\\uDEA8 FOUND PROBLEMATIC TEXT:\");\n            console.log('   - Contains \"pavoluptusda\":', processedContent.includes(\"pavoluptusda\"));\n            console.log('   - Contains \"pa voluptusda\":', processedContent.includes(\"pa voluptusda\"));\n            console.log(\"   - FormattedContent breakdown:\", formattedContent.map((item)=>item.text).join(\"|\"));\n        }\n        const lineBreakInfo = {\n            hasLineBreaks: processedContent.includes(\"\\n\"),\n            lineBreakCount: (processedContent.match(/\\n/g) || []).length,\n            lineBreakTypes: this.analyzeLineBreakTypes(formattedContent),\n            debugInfo: debugInfo,\n            spacePreservationCount: debugInfo.filter((info)=>info.type.includes(\"Space inserted\")).length\n        };\n        return {\n            plainText: processedContent,\n            formattedContent: formattedContent.filter((item)=>item.text && item.text.length > 0),\n            wordCount: IDMLUtils.countWords(processedContent.replace(/\\n/g, \" \")),\n            characterCount: processedContent.length,\n            textColor: textColor,\n            lineBreakInfo: lineBreakInfo\n        };\n    }\n    // NEW: Process CharacterStyleRange content and breaks in document order - FULLY DYNAMIC\n    processCharacterRangeInOrder(range, resolvedFormatting, rangeIndex, totalRanges, content, formattedContent, debugInfo, context, fileName) {\n        console.log(\"\\uD83D\\uDD27 Processing CharacterStyleRange[\".concat(rangeIndex, \"] in document order:\"), {\n            hasContent: !!range.Content,\n            hasBr: range.Br !== undefined,\n            contentType: Array.isArray(range.Content) ? \"array\" : typeof range.Content,\n            brType: Array.isArray(range.Br) ? \"array\" : typeof range.Br\n        });\n        // COMPREHENSIVE EDGE CASE HANDLING\n        try {\n            // Case 1: Both Content and Br elements exist - most common case\n            if (range.Content && range.Br !== undefined) {\n                console.log(\"\\uD83D\\uDD27 Processing range with both content and breaks\");\n                return this.processInterleavedContentAndBr(range, resolvedFormatting, content, formattedContent, debugInfo, fileName);\n            } else if (range.Content && range.Br === undefined) {\n                console.log(\"\\uD83D\\uDD27 Processing range with only content\");\n                return this.processContentElements(range, resolvedFormatting, content, formattedContent, fileName);\n            } else if (!range.Content && range.Br !== undefined) {\n                console.log(\"\\uD83D\\uDD27 Processing range with only breaks\");\n                return this.processBrElements(range, content, formattedContent, debugInfo, rangeIndex, fileName);\n            } else {\n                console.log(\"⚠️ Empty range encountered - no content or breaks\");\n                return content;\n            }\n        } catch (error) {\n            // ULTIMATE FALLBACK: If anything goes wrong, try to salvage what we can\n            console.log(\"❌ Error processing CharacterStyleRange[\".concat(rangeIndex, \"]: \").concat(error.message));\n            console.log(\"\\uD83D\\uDD04 Attempting emergency content extraction...\");\n            return this.emergencyContentExtraction(range, resolvedFormatting, content, formattedContent, fileName);\n        }\n    }\n    // EMERGENCY FALLBACK: Extract content from malformed or unexpected XML structures\n    emergencyContentExtraction(range, resolvedFormatting, content, formattedContent, fileName) {\n        console.log(\"\\uD83D\\uDEA8 Emergency content extraction for unusual XML structure\");\n        try {\n            // Try to extract any text content using different approaches\n            const extractedTexts = [];\n            const extractedBreaks = [];\n            // Approach 1: Direct property access\n            if (range.Content) {\n                const contents = Array.isArray(range.Content) ? range.Content : [\n                    range.Content\n                ];\n                contents.forEach((c)=>{\n                    if (typeof c === \"string\" && c.trim()) {\n                        extractedTexts.push(c.trim());\n                    }\n                });\n            }\n            // Approach 2: Search for any text-like properties\n            Object.keys(range).forEach((key)=>{\n                if (typeof range[key] === \"string\" && range[key].trim() && key !== \"@_Self\" && !key.startsWith(\"@_\")) {\n                    extractedTexts.push(range[key].trim());\n                }\n            });\n            // Approach 3: Count any break-like properties\n            if (range.Br !== undefined) {\n                const breaks = Array.isArray(range.Br) ? range.Br : [\n                    range.Br\n                ];\n                extractedBreaks.push(...breaks);\n            }\n            // Add extracted content\n            extractedTexts.forEach((text, index)=>{\n                const cleanText = IDMLUtils.decodeXMLEntities(text);\n                content += cleanText;\n                formattedContent.push({\n                    text: cleanText.replace(/\\u2028/g, \"\\n\").replace(/\\u2029/g, \"\\n\\n\"),\n                    formatting: resolvedFormatting\n                });\n                console.log(\"\\uD83D\\uDEA8 Emergency extracted content[\".concat(index, \"]: \").concat(JSON.stringify(cleanText)));\n                // Add breaks between content items (simple 1:1 ratio)\n                if (index < extractedBreaks.length) {\n                    const lineBreakText = \"\\n\";\n                    content += lineBreakText;\n                    formattedContent.push({\n                        text: lineBreakText.replace(/\\u2028/g, \"\\n\").replace(/\\u2029/g, \"\\n\\n\"),\n                        formatting: {\n                            isBreak: true,\n                            breakType: \"line\",\n                            source: \"emergency extraction\",\n                            emergencyIndex: index\n                        }\n                    });\n                    console.log(\"\\uD83D\\uDEA8 Emergency extracted break[\".concat(index, \"]: \").concat(JSON.stringify(lineBreakText)));\n                }\n            });\n            // Add any remaining breaks at the end\n            for(let i = extractedTexts.length; i < extractedBreaks.length; i++){\n                const lineBreakText = \"\\n\";\n                content += lineBreakText;\n                formattedContent.push({\n                    text: lineBreakText.replace(/\\u2028/g, \"\\n\").replace(/\\u2029/g, \"\\n\\n\"),\n                    formatting: {\n                        isBreak: true,\n                        breakType: \"line\",\n                        source: \"emergency trailing break\",\n                        emergencyIndex: i\n                    }\n                });\n                console.log(\"\\uD83D\\uDEA8 Emergency extracted trailing break[\".concat(i, \"]: \").concat(JSON.stringify(lineBreakText)));\n            }\n            console.log(\"✅ Emergency extraction successful: \".concat(extractedTexts.length, \" texts, \").concat(extractedBreaks.length, \" breaks\"));\n        } catch (emergencyError) {\n            console.log(\"\\uD83D\\uDC80 Emergency extraction failed: \".concat(emergencyError.message));\n            // Last resort: just add a warning comment\n            const warningText = \"<!-- XML parsing error -->\";\n            content += warningText;\n            formattedContent.push({\n                text: warningText.replace(/\\u2028/g, \"\\n\").replace(/\\u2029/g, \"\\n\\n\"),\n                formatting: resolvedFormatting\n            });\n        }\n        return content;\n    }\n    // Process interleaved Content and Br elements - FULLY DYNAMIC\n    processInterleavedContentAndBr(range, resolvedFormatting, content, formattedContent, debugInfo, fileName) {\n        const contents = Array.isArray(range.Content) ? range.Content : [\n            range.Content\n        ];\n        const brElements = Array.isArray(range.Br) ? range.Br : [\n            range.Br\n        ];\n        console.log(\"\\uD83D\\uDD27 Processing interleaved content: \".concat(contents.length, \" content items, \").concat(brElements.length, \" Br elements\"));\n        // EDGE CASE: No content or breaks\n        if (!range.Content && !range.Br) {\n            console.log(\"⚠️ No content or breaks to process in range\");\n            return content;\n        }\n        // EDGE CASE: Only content, no breaks\n        if (range.Content && !range.Br) {\n            console.log(\"\\uD83D\\uDCDD Only content, no breaks - processing content only\");\n            return this.processContentElements(range, resolvedFormatting, content, formattedContent, fileName);\n        }\n        // EDGE CASE: Only breaks, no content\n        if (!range.Content && range.Br) {\n            console.log(\"\\uD83D\\uDD17 Only breaks, no content - processing breaks only\");\n            return this.processBrElements(range, content, formattedContent, debugInfo, 0, fileName);\n        }\n        // DYNAMIC: Try to use cached document order if available\n        const cachedOrder = this.documentOrderCache && this.documentOrderCache[fileName];\n        if (cachedOrder && cachedOrder.breakPattern && cachedOrder.breakPattern.length > 0) {\n            console.log(\"✅ Using cached document order for precise break distribution\");\n            try {\n                return this.processContentWithCachedPattern(contents, resolvedFormatting, content, formattedContent, cachedOrder.breakPattern, fileName);\n            } catch (error) {\n                console.log(\"❌ Error using cached pattern: \".concat(error.message, \", falling back to dynamic distribution\"));\n            }\n        } else {\n            console.log(\"⚠️ No cached document order available, using dynamic fallback distribution\");\n        }\n        // DYNAMIC FALLBACK: Distribute breaks intelligently based on content structure\n        return this.processInterleavedContentDynamicFallback(contents, brElements, resolvedFormatting, content, formattedContent, fileName);\n    }\n    // DYNAMIC FALLBACK: Intelligent break distribution for any content structure\n    processInterleavedContentDynamicFallback(contents, brElements, resolvedFormatting, content, formattedContent, fileName) {\n        console.log(\"\\uD83D\\uDD04 Using dynamic fallback for \".concat(contents.length, \" content items and \").concat(brElements.length, \" breaks\"));\n        let brIndex = 0;\n        const contentLength = contents.length;\n        contents.forEach((contentItem, contentIndex)=>{\n            // Add the content\n            const text = IDMLUtils.decodeXMLEntities(String(contentItem));\n            content += text;\n            formattedContent.push({\n                text: text.replace(/\\u2028/g, \"\\n\").replace(/\\u2029/g, \"\\n\\n\"),\n                formatting: resolvedFormatting\n            });\n            console.log(\"\\uD83D\\uDD27 Added content[\".concat(contentIndex, \"]: \").concat(JSON.stringify(text)));\n            // DYNAMIC: Calculate how many breaks to add after this content\n            const breaksToAdd = this.calculateBreaksAfterContent(contentIndex, contentLength, brElements.length);\n            // Add the calculated number of breaks\n            for(let i = 0; i < breaksToAdd && brIndex < brElements.length; i++){\n                const lineBreakText = \"\\n\";\n                content += lineBreakText;\n                formattedContent.push({\n                    text: lineBreakText.replace(/\\u2028/g, \"\\n\").replace(/\\u2029/g, \"\\n\\n\"),\n                    formatting: {\n                        isBreak: true,\n                        breakType: \"line\",\n                        source: \"dynamic fallback distribution\",\n                        brIndex: brIndex,\n                        afterContent: contentIndex,\n                        calculatedBreaks: breaksToAdd\n                    }\n                });\n                console.log(\"\\uD83D\\uDD27 Added Br[\".concat(brIndex, \"] after content[\").concat(contentIndex, \"]: \").concat(JSON.stringify(lineBreakText)));\n                brIndex++;\n            }\n        });\n        // EDGE CASE: Handle any remaining breaks\n        if (brIndex < brElements.length) {\n            const remainingBreaks = brElements.length - brIndex;\n            console.log(\"\\uD83D\\uDD27 Adding \".concat(remainingBreaks, \" remaining breaks at the end\"));\n            while(brIndex < brElements.length){\n                const lineBreakText = \"\\n\";\n                content += lineBreakText;\n                formattedContent.push({\n                    text: lineBreakText.replace(/\\u2028/g, \"\\n\").replace(/\\u2029/g, \"\\n\\n\"),\n                    formatting: {\n                        isBreak: true,\n                        breakType: \"line\",\n                        source: \"trailing breaks (dynamic fallback)\",\n                        brIndex: brIndex\n                    }\n                });\n                console.log(\"\\uD83D\\uDD27 Added trailing Br[\".concat(brIndex, \"]: \").concat(JSON.stringify(lineBreakText)));\n                brIndex++;\n            }\n        }\n        // VALIDATION: Ensure all breaks were processed\n        if (brIndex !== brElements.length) {\n            console.log(\"⚠️ Warning: Expected to process \".concat(brElements.length, \" breaks but processed \").concat(brIndex));\n        }\n        return content;\n    }\n    // Process content using cached document order pattern - FULLY DYNAMIC\n    processContentWithCachedPattern(contents, resolvedFormatting, content, formattedContent, breakPattern, fileName) {\n        console.log(\"\\uD83C\\uDFAF Processing \".concat(contents.length, \" content items with cached pattern (\").concat(breakPattern.length, \" pattern entries)\"));\n        // DYNAMIC: Handle any number of content items and any break distribution\n        contents.forEach((contentItem, contentIndex)=>{\n            // Add the content\n            const text = IDMLUtils.decodeXMLEntities(String(contentItem));\n            content += text;\n            formattedContent.push({\n                text: text.replace(/\\u2028/g, \"\\n\").replace(/\\u2029/g, \"\\n\\n\"),\n                formatting: resolvedFormatting\n            });\n            console.log(\"\\uD83D\\uDD27 Added content[\".concat(contentIndex, \"]: \").concat(JSON.stringify(text)));\n            // DYNAMIC: Find the corresponding pattern entry\n            const patternEntry = breakPattern.find((p)=>p.contentIndex === contentIndex);\n            if (patternEntry) {\n                const breaksToAdd = patternEntry.breaksAfter;\n                console.log(\"\\uD83C\\uDFAF Pattern says content[\".concat(contentIndex, \"] should have \").concat(breaksToAdd, \" breaks after it\"));\n                // DYNAMIC: Add the exact number of breaks specified in the pattern\n                for(let i = 0; i < breaksToAdd; i++){\n                    const lineBreakText = \"\\n\";\n                    content += lineBreakText;\n                    formattedContent.push({\n                        text: lineBreakText.replace(/\\u2028/g, \"\\n\").replace(/\\u2029/g, \"\\n\\n\"),\n                        formatting: {\n                            isBreak: true,\n                            breakType: \"line\",\n                            source: \"precise document order\",\n                            contentIndex: contentIndex,\n                            breakIndex: i,\n                            totalBreaksAfterContent: breaksToAdd,\n                            patternEntry: patternEntry\n                        }\n                    });\n                    console.log(\"\\uD83C\\uDFAF Added precise Br[\".concat(i + 1, \"/\").concat(breaksToAdd, \"] after content[\").concat(contentIndex, \"]: \").concat(JSON.stringify(lineBreakText)));\n                }\n            } else {\n                console.log(\"⚠️ No pattern entry found for content[\".concat(contentIndex, \"] - this is unusual but not critical\"));\n            // DYNAMIC: If no pattern entry, don't add any breaks (the pattern should cover all content)\n            }\n        });\n        // VALIDATION: Check if we processed all expected content\n        const expectedContentCount = breakPattern.length;\n        if (contents.length !== expectedContentCount) {\n            console.log(\"⚠️ Warning: Expected \".concat(expectedContentCount, \" content items but processed \").concat(contents.length));\n        }\n        return content;\n    }\n    // DYNAMIC: Calculate breaks distribution as fallback - completely generic\n    calculateBreaksAfterContent(contentIndex, totalContent, totalBreaks) {\n        console.log(\"\\uD83D\\uDD27 FALLBACK: Calculating breaks for content[\".concat(contentIndex, \"] of \").concat(totalContent, \" total, \").concat(totalBreaks, \" total breaks\"));\n        // EDGE CASE: No breaks to distribute\n        if (totalBreaks === 0) {\n            console.log(\"\\uD83D\\uDD27 No breaks to distribute\");\n            return 0;\n        }\n        // EDGE CASE: Only one content item\n        if (totalContent === 1) {\n            console.log(\"\\uD83D\\uDD27 Single content item gets all \".concat(totalBreaks, \" breaks\"));\n            return contentIndex === 0 ? totalBreaks : 0;\n        }\n        // EDGE CASE: Last content item\n        if (contentIndex === totalContent - 1) {\n            console.log(\"\\uD83D\\uDD27 Last content item gets no breaks in standard distribution\");\n            return 0;\n        }\n        // DYNAMIC: Distribute breaks among non-last content items\n        const nonLastContentItems = totalContent - 1;\n        const baseBreaks = Math.floor(totalBreaks / nonLastContentItems);\n        const extraBreaks = totalBreaks % nonLastContentItems;\n        // DYNAMIC: Distribute extra breaks starting from the end to match common IDML patterns\n        // where later content tends to have more breaks\n        const breaksForThisContent = baseBreaks + (contentIndex >= nonLastContentItems - extraBreaks ? 1 : 0);\n        console.log(\"\\uD83D\\uDD27 Content[\".concat(contentIndex, \"] gets \").concat(breaksForThisContent, \" breaks (base: \").concat(baseBreaks, \", extra: \").concat(extraBreaks, \")\"));\n        return breaksForThisContent;\n    }\n    // Process only Content elements\n    processContentElements(range, resolvedFormatting, content, formattedContent, fileName) {\n        const contents = Array.isArray(range.Content) ? range.Content : [\n            range.Content\n        ];\n        contents.forEach((contentItem)=>{\n            const text = IDMLUtils.decodeXMLEntities(String(contentItem));\n            content += text;\n            formattedContent.push({\n                text: text.replace(/\\u2028/g, \"\\n\").replace(/\\u2029/g, \"\\n\\n\"),\n                formatting: resolvedFormatting\n            });\n        });\n        return content;\n    }\n    // Process only Br elements\n    processBrElements(range, content, formattedContent, debugInfo, rangeIndex, fileName) {\n        const brElements = Array.isArray(range.Br) ? range.Br : [\n            range.Br\n        ];\n        brElements.forEach((br, brIndex)=>{\n            const lineBreakText = \"\\n\";\n            content += lineBreakText;\n            formattedContent.push({\n                text: lineBreakText.replace(/\\u2028/g, \"\\n\").replace(/\\u2029/g, \"\\n\\n\"),\n                formatting: {\n                    isBreak: true,\n                    breakType: \"line\",\n                    source: \"standalone Br element\",\n                    rangeIndex: rangeIndex,\n                    brIndex: brIndex\n                }\n            });\n            debugInfo.push({\n                type: \"Standalone Br element\",\n                location: \"CharacterStyleRange[\".concat(rangeIndex, \"], Br[\").concat(brIndex, \"]\")\n            });\n        });\n        return content;\n    }\n    // Add this helper method to better handle mixed content and Br elements\n    analyzeContentStructure(range) {\n        const structure = {\n            hasContent: !!range.Content,\n            hasBr: range.Br !== undefined,\n            contentItems: range.Content ? Array.isArray(range.Content) ? range.Content : [\n                range.Content\n            ] : [],\n            brElements: range.Br ? Array.isArray(range.Br) ? range.Br : [\n                range.Br\n            ] : []\n        };\n        console.log(\"Content structure analysis:\", structure);\n        return structure;\n    }\n    // Enhanced helper for processing interleaved content and breaks\n    processInterleavedContent(range, resolvedFormatting) {\n        const results = [];\n        let content = \"\";\n        // This method would need access to the actual XML structure to determine\n        // the exact order of Content and Br elements. For now, we'll use the\n        // approach above which handles the most common case.\n        return results;\n    }\n    // SOPHISTICATED: Helper method to extract Br elements with context\n    extractBrElements(range) {\n        const brElements = [];\n        if (range.Br !== undefined) {\n            console.log(\"\\uD83D\\uDD27 Processing Br elements:\", {\n                isArray: Array.isArray(range.Br),\n                count: Array.isArray(range.Br) ? range.Br.length : 1,\n                rawBr: range.Br\n            });\n            if (Array.isArray(range.Br)) {\n                range.Br.forEach((br, index)=>{\n                    brElements.push({\n                        type: \"line\",\n                        position: index === 0 ? \"start\" : \"middle\",\n                        element: br\n                    });\n                });\n                console.log(\"\\uD83D\\uDD27 Created \".concat(brElements.length, \" line break elements from array - EACH SHOULD CREATE ONE \\\\n\"));\n            } else {\n                brElements.push({\n                    type: \"line\",\n                    position: \"end\",\n                    element: range.Br\n                });\n                console.log(\"\\uD83D\\uDD27 Created 1 line break element from single Br\");\n            }\n        }\n        return brElements;\n    }\n    // SOPHISTICATED: Determine the appropriate line break type\n    determineLineBreakType(brInfo, context) {\n        // Different line break characters based on context\n        switch(brInfo.type){\n            case \"paragraph\":\n                return \"\\n\\n\"; // Double line break for paragraph separation\n            case \"forced\":\n                return \"\\n\"; // Forced line break (Shift+Enter equivalent)\n            case \"line\":\n            default:\n                return \"\\n\"; // Standard line break\n        }\n    }\n    // SOPHISTICATED: Determine if an implicit line break should be inserted\n    shouldInsertImplicitLineBreak(currentRange, nextRange, context) {\n        // Don't insert implicit breaks if explicit Br elements are present\n        if (currentRange.Br !== undefined || nextRange.Br !== undefined) {\n            return false;\n        }\n        // Insert breaks between different character styles in different paragraphs\n        const currentCharStyle = currentRange[\"@_AppliedCharacterStyle\"];\n        const nextCharStyle = nextRange[\"@_AppliedCharacterStyle\"];\n        // If we're in a context where styles change significantly, add a break\n        if (currentCharStyle && nextCharStyle && currentCharStyle !== nextCharStyle) {\n            // Check if this might be a title/heading followed by body text\n            const styleIndicatesBreak = this.styleIndicatesLineBreak(currentCharStyle, nextCharStyle);\n            return styleIndicatesBreak;\n        }\n        return false;\n    }\n    // SOPHISTICATED: Analyze if style change indicates a line break\n    styleIndicatesLineBreak(currentStyle, nextStyle) {\n        const titleIndicators = [\n            \"title\",\n            \"heading\",\n            \"header\"\n        ];\n        const bodyIndicators = [\n            \"body\",\n            \"text\",\n            \"normal\"\n        ];\n        const currentIsTitle = titleIndicators.some((indicator)=>currentStyle.toLowerCase().includes(indicator));\n        const nextIsBody = bodyIndicators.some((indicator)=>nextStyle.toLowerCase().includes(indicator));\n        return currentIsTitle && nextIsBody;\n    }\n    // SOPHISTICATED: Analyze line break types in formatted content\n    analyzeLineBreakTypes(formattedContent) {\n        const types = {\n            explicit: 0,\n            implicit: 0,\n            paragraph: 0,\n            direct: 0\n        };\n        formattedContent.forEach((item)=>{\n            var _item_formatting;\n            if ((_item_formatting = item.formatting) === null || _item_formatting === void 0 ? void 0 : _item_formatting.isBreak) {\n                const breakType = item.formatting.breakType || \"unknown\";\n                if (types.hasOwnProperty(breakType)) {\n                    types[breakType]++;\n                }\n            }\n        });\n        return types;\n    }\n    extractDetailedFormattingFromRange(range) {\n        const formatting = {};\n        // Extract all possible font attributes\n        const fontAttributes = [\n            \"@_AppliedFont\",\n            \"@_FontFamily\",\n            \"@_Font\",\n            \"@_PostScriptName\",\n            \"@_FontName\"\n        ];\n        fontAttributes.forEach((attr)=>{\n            if (range[attr]) {\n                formatting.fontReference = range[attr];\n            }\n        });\n        // Extract font and size attributes\n        const rawFontSize = IDMLUtils.parseNumeric(range[\"@_PointSize\"]);\n        formatting.fontSize = this.convertFontSizeToPixels(rawFontSize); // ADDED: Convert to pixels\n        formatting.originalFontSize = rawFontSize; // ADDED: Preserve original\n        // ENHANCED: Extract leading with proper processing\n        const rawLeading = range[\"@_Leading\"];\n        formatting.leading = this.processLeadingValue(rawLeading, formatting.fontSize);\n        formatting.leadingType = this.determineLeadingType(rawLeading);\n        // Extract color and style attributes\n        formatting.fillColor = range[\"@_FillColor\"];\n        formatting.strokeColor = range[\"@_StrokeColor\"];\n        formatting.fontStyle = range[\"@_FontStyle\"];\n        // Extract advanced typography attributes\n        formatting.tracking = IDMLUtils.parseNumeric(range[\"@_Tracking\"]);\n        formatting.baselineShift = IDMLUtils.parseNumeric(range[\"@_BaselineShift\"]);\n        formatting.kerning = IDMLUtils.parseNumeric(range[\"@_Kerning\"]);\n        formatting.horizontalScale = IDMLUtils.parseNumeric(range[\"@_HorizontalScale\"]) || 100;\n        formatting.verticalScale = IDMLUtils.parseNumeric(range[\"@_VerticalScale\"]) || 100;\n        // ENHANCED: Extract InDesign-specific text layout properties for precise rendering\n        formatting.baselineGridAlign = range[\"@_AlignToBaseline\"] || \"None\";\n        formatting.dropCapLines = IDMLUtils.parseNumeric(range[\"@_DropCapLines\"]) || 0;\n        formatting.dropCapCharacters = IDMLUtils.parseNumeric(range[\"@_DropCapCharacters\"]) || 0;\n        // Extract paragraph-level attributes if present\n        // CRITICAL FIX: Only set alignment if explicitly specified, allowing paragraph inheritance\n        const explicitAlignment = range[\"@_Justification\"] || range[\"@_Alignment\"];\n        if (explicitAlignment) {\n            formatting.alignment = explicitAlignment;\n        }\n        formatting.leftIndent = IDMLUtils.parseNumeric(range[\"@_LeftIndent\"]);\n        formatting.rightIndent = IDMLUtils.parseNumeric(range[\"@_RightIndent\"]);\n        formatting.firstLineIndent = IDMLUtils.parseNumeric(range[\"@_FirstLineIndent\"]);\n        formatting.spaceBefore = IDMLUtils.parseNumeric(range[\"@_SpaceBefore\"]);\n        formatting.spaceAfter = IDMLUtils.parseNumeric(range[\"@_SpaceAfter\"]);\n        // Calculate effective line height for CSS\n        formatting.effectiveLineHeight = this.calculateEffectiveLineHeight(formatting);\n        return formatting;\n    }\n    // FIXED: Process leading values with InDesign-specific logic and convert to pixels\n    processLeadingValue(rawLeading, fontSize) {\n        if (!rawLeading) return \"auto\";\n        // Handle \"auto\" leading\n        if (rawLeading === \"auto\" || rawLeading === \"Auto\") {\n            return fontSize ? fontSize * 1.2 : \"auto\"; // InDesign default auto leading is 120%\n        }\n        // Handle numeric leading (in points) - FIXED: Convert to pixels\n        const numericLeading = IDMLUtils.parseNumeric(rawLeading);\n        if (numericLeading) {\n            // FIXED: Convert numeric leading to pixels if unitConverter is available\n            if (this.unitConverter && this.documentUnits && this.unitConverter.isSupportedUnit(this.documentUnits)) {\n                const pixelLeading = this.unitConverter.toPixels(numericLeading, this.documentUnits);\n                console.log(\"\\uD83D\\uDCD0 Converted leading: \".concat(numericLeading, \" \").concat(this.documentUnits, \" → \").concat(pixelLeading, \" px\"));\n                return pixelLeading;\n            }\n            return numericLeading;\n        }\n        // Handle percentage-based leading\n        if (rawLeading.includes(\"%\")) {\n            const percentage = parseFloat(rawLeading.replace(\"%\", \"\"));\n            return fontSize ? fontSize * percentage / 100 : \"auto\";\n        }\n        return \"auto\";\n    }\n    // NEW: Determine the type of leading being used\n    determineLeadingType(rawLeading) {\n        if (!rawLeading || rawLeading === \"auto\" || rawLeading === \"Auto\") {\n            return \"auto\";\n        }\n        if (rawLeading.includes(\"%\")) {\n            return \"percentage\";\n        }\n        if (IDMLUtils.parseNumeric(rawLeading)) {\n            return \"absolute\";\n        }\n        return \"unknown\";\n    }\n    // NEW: Calculate effective line height for CSS rendering\n    calculateEffectiveLineHeight(formatting) {\n        const fontSize = formatting.fontSize || 12;\n        const leading = formatting.leading;\n        if (leading === \"auto\") {\n            return 1.2; // CSS line-height ratio for auto\n        }\n        if (typeof leading === \"number\") {\n            // Convert points to CSS line-height ratio\n            return leading / fontSize;\n        }\n        return 1.2; // Fallback\n    }\n    extractTextFormatting(storyData) {\n        const formatting = {\n            paragraphStyles: [],\n            characterStyles: [],\n            appliedStyles: []\n        };\n        // Extract applied paragraph styles\n        if (storyData.ParagraphStyleRange) {\n            const ranges = Array.isArray(storyData.ParagraphStyleRange) ? storyData.ParagraphStyleRange : [\n                storyData.ParagraphStyleRange\n            ];\n            ranges.forEach((range)=>{\n                const appliedStyle = range[\"@_AppliedParagraphStyle\"];\n                if (appliedStyle && !formatting.paragraphStyles.includes(appliedStyle)) {\n                    formatting.paragraphStyles.push(appliedStyle);\n                }\n                // Extract character styles within paragraph ranges\n                if (range.CharacterStyleRange) {\n                    const charRanges = Array.isArray(range.CharacterStyleRange) ? range.CharacterStyleRange : [\n                        range.CharacterStyleRange\n                    ];\n                    charRanges.forEach((charRange)=>{\n                        const charStyle = charRange[\"@_AppliedCharacterStyle\"];\n                        if (charStyle && !formatting.characterStyles.includes(charStyle)) {\n                            formatting.characterStyles.push(charStyle);\n                        }\n                    });\n                }\n            });\n        }\n        return formatting;\n    }\n    // Add this method to debug raw story content\n    debugRawStoryContent(storyData) {\n        console.log(\"\\n\\uD83D\\uDD0D RAW STORY CONTENT DEBUG:\");\n        console.log(\"Story keys:\", Object.keys(storyData));\n        const findCharacterRanges = function(obj) {\n            let path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n            if (typeof obj === \"object\" && obj !== null) {\n                Object.keys(obj).forEach((key)=>{\n                    if (key === \"CharacterStyleRange\") {\n                        console.log(\"\\n\\uD83D\\uDCDD Found CharacterStyleRange at \".concat(path, \":\"), obj[key]);\n                        const ranges = Array.isArray(obj[key]) ? obj[key] : [\n                            obj[key]\n                        ];\n                        ranges.forEach((range, index)=>{\n                            console.log(\"  Range \".concat(index + 1, \" attributes:\"), Object.keys(range).filter((k)=>k.startsWith(\"@_\")));\n                            console.log(\"  Range \".concat(index + 1, \" font info:\"), {\n                                AppliedFont: range[\"@_AppliedFont\"],\n                                FontStyle: range[\"@_FontStyle\"],\n                                PointSize: range[\"@_PointSize\"]\n                            });\n                        });\n                    } else if (typeof obj[key] === \"object\") {\n                        findCharacterRanges(obj[key], \"\".concat(path, \".\").concat(key));\n                    }\n                });\n            }\n        };\n        findCharacterRanges(storyData);\n    }\n    // ADD DEBUGGING FOR PARSED BR STRUCTURE\n    debugBrElementsInParsedStructure(parsedData) {\n        let path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n        if (typeof parsedData === \"object\" && parsedData !== null) {\n            Object.entries(parsedData).forEach((param)=>{\n                let [key, value] = param;\n                if (key === \"Br\") {\n                    console.log(\"\".concat(path, \" has Br element:\"), value);\n                } else if (typeof value === \"object\" && value !== null) {\n                    this.debugBrElementsInParsedStructure(value, \"\".concat(path, \".\").concat(key));\n                }\n            });\n        }\n    }\n    // CRITICAL FIX: Parse raw XML to preserve exact document order - FULLY DYNAMIC\n    parseRawXMLForDocumentOrder(rawXMLContent, fileName) {\n        console.log(\"\\uD83D\\uDD0D Parsing raw XML for document order: \".concat(fileName));\n        // DYNAMIC: Handle multiple CharacterStyleRange elements\n        const charRangePattern = RegExp(\"<CharacterStyleRange[^>]*>(.*?)<\\\\/CharacterStyleRange>\", \"gs\");\n        const charRangeMatches = [\n            ...rawXMLContent.matchAll(charRangePattern)\n        ];\n        if (charRangeMatches.length === 0) {\n            console.log(\"❌ No CharacterStyleRange found in XML\");\n            return null;\n        }\n        console.log(\"\\uD83D\\uDCC4 Found \".concat(charRangeMatches.length, \" CharacterStyleRange elements\"));\n        // DYNAMIC: Process all CharacterStyleRange elements\n        const allDocumentOrder = [];\n        charRangeMatches.forEach((match, rangeIndex)=>{\n            const charRangeContent = match[1];\n            console.log(\"\\uD83D\\uDCC4 Processing CharacterStyleRange[\".concat(rangeIndex, \"]:\"), charRangeContent.substring(0, 200) + \"...\");\n            // ENHANCED: More flexible pattern to handle different XML structures\n            // Matches: <Content>text</Content>, <Content/>, <Br/>, <Br></Br>, <Br />\n            const elementPattern = /<(Content|Br)(?:\\s+[^>]*)?>([^<]*)<\\/\\1>|<(Content|Br)(?:\\s+[^>]*)?\\/?>|<(Content|Br)(?:\\s+[^>]*)?>([^<]*)/g;\n            let elementMatch;\n            const rangeElements = [];\n            while((elementMatch = elementPattern.exec(charRangeContent)) !== null){\n                const elementType = elementMatch[1] || elementMatch[3] || elementMatch[4];\n                const elementContent = elementMatch[2] || elementMatch[5] || \"\";\n                if (elementType === \"Content\") {\n                    const contentText = elementContent.trim();\n                    if (contentText) {\n                        // Only add non-empty content\n                        rangeElements.push({\n                            type: \"Content\",\n                            text: contentText,\n                            rangeIndex: rangeIndex\n                        });\n                        console.log(\"\\uD83D\\uDCDD Found Content[\".concat(rangeIndex, ']: \"').concat(contentText, '\"'));\n                    }\n                } else if (elementType === \"Br\") {\n                    rangeElements.push({\n                        type: \"Br\",\n                        rangeIndex: rangeIndex\n                    });\n                    console.log(\"\\uD83D\\uDD17 Found Br[\".concat(rangeIndex, \"]\"));\n                }\n            }\n            // Add range elements to overall document order\n            allDocumentOrder.push(...rangeElements);\n        });\n        if (allDocumentOrder.length === 0) {\n            console.log(\"❌ No Content or Br elements found in any CharacterStyleRange\");\n            return null;\n        }\n        // DYNAMIC: Analyze the break pattern for any structure\n        const breakPattern = this.analyzeBreakPatternDynamic(allDocumentOrder);\n        console.log(\"\\uD83D\\uDCCA Dynamic break pattern analysis:\", breakPattern);\n        // Store this for later use in processing\n        this.documentOrderCache = this.documentOrderCache || {};\n        this.documentOrderCache[fileName] = {\n            documentOrder: allDocumentOrder,\n            breakPattern: breakPattern,\n            totalCharacterRanges: charRangeMatches.length\n        };\n        return {\n            documentOrder: allDocumentOrder,\n            breakPattern: breakPattern,\n            totalCharacterRanges: charRangeMatches.length\n        };\n    }\n    // DYNAMIC: Analyze break pattern for any document structure\n    analyzeBreakPatternDynamic(documentOrder) {\n        const pattern = [];\n        let contentIndex = 0;\n        for(let i = 0; i < documentOrder.length; i++){\n            const element = documentOrder[i];\n            if (element.type === \"Content\") {\n                // DYNAMIC: Count consecutive breaks after this content\n                let breaksAfter = 0;\n                let j = i + 1;\n                // Count all consecutive Br elements following this Content\n                while(j < documentOrder.length && documentOrder[j].type === \"Br\"){\n                    breaksAfter++;\n                    j++;\n                }\n                pattern.push({\n                    contentIndex: contentIndex,\n                    contentText: element.text,\n                    breaksAfter: breaksAfter,\n                    rangeIndex: element.rangeIndex,\n                    documentPosition: i\n                });\n                console.log(\"\\uD83D\\uDCCB Content[\".concat(contentIndex, '] \"').concat(element.text, '\" has ').concat(breaksAfter, \" breaks after it (doc pos: \").concat(i, \")\"));\n                contentIndex++;\n            }\n        }\n        // VALIDATION: Ensure pattern makes sense\n        const totalContent = pattern.length;\n        const totalBreaks = pattern.reduce((sum, p)=>sum + p.breaksAfter, 0);\n        console.log(\"\\uD83D\\uDD0D Pattern validation: \".concat(totalContent, \" content items, \").concat(totalBreaks, \" total breaks\"));\n        if (totalContent === 0) {\n            console.log(\"⚠️ Warning: No content items found in pattern\");\n        }\n        return pattern;\n    }\n    getStories() {\n        return this.stories;\n    }\n    getStory(storyId) {\n        return this.stories[storyId];\n    }\n    clearStories() {\n        this.stories = {};\n    }\n    constructor(styleParser, unitConverter = null){\n        this.styleParser = styleParser;\n        this.unitConverter = unitConverter; // ADDED: Unit converter for font sizes and spacing\n        this.documentUnits = null; // Will be set from document units\n        this.stories = {};\n    }\n}\nmodule.exports = StoryParser;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDbFAsT0FBTztJQUNyQjtJQUVBbVAsU0FBUzVRLE9BQU8sRUFBRTtRQUNoQixPQUFPLElBQUksQ0FBQ3lCLE9BQU8sQ0FBQ3pCLFFBQVE7SUFDOUI7SUFFQTZRLGVBQWU7UUFDYixJQUFJLENBQUNwUCxPQUFPLEdBQUcsQ0FBQztJQUNsQjtJQS9tREFxUCxZQUFZbk4sV0FBVyxFQUFFdEUsZ0JBQWdCLElBQUksQ0FBRTtRQUM3QyxJQUFJLENBQUNzRSxXQUFXLEdBQUdBO1FBQ25CLElBQUksQ0FBQ3RFLGFBQWEsR0FBR0EsZUFBZSxtREFBbUQ7UUFDdkYsSUFBSSxDQUFDTCxhQUFhLEdBQUcsTUFBTSxrQ0FBa0M7UUFDN0QsSUFBSSxDQUFDeUMsT0FBTyxHQUFHLENBQUM7SUFDbEI7QUEybURGO0FBRUFzUCxPQUFPQyxPQUFPLEdBQUduUyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvcGFyc2Vycy9TdG9yeVBhcnNlci5qcz82OGNmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcclxuY29uc3QgSURNTFV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzL0lETUxVdGlsc1wiKTtcclxuXHJcbmNsYXNzIFN0b3J5UGFyc2VyIHtcclxuICBjb25zdHJ1Y3RvcihzdHlsZVBhcnNlciwgdW5pdENvbnZlcnRlciA9IG51bGwpIHtcclxuICAgIHRoaXMuc3R5bGVQYXJzZXIgPSBzdHlsZVBhcnNlcjtcclxuICAgIHRoaXMudW5pdENvbnZlcnRlciA9IHVuaXRDb252ZXJ0ZXI7IC8vIEFEREVEOiBVbml0IGNvbnZlcnRlciBmb3IgZm9udCBzaXplcyBhbmQgc3BhY2luZ1xyXG4gICAgdGhpcy5kb2N1bWVudFVuaXRzID0gbnVsbDsgLy8gV2lsbCBiZSBzZXQgZnJvbSBkb2N1bWVudCB1bml0c1xyXG4gICAgdGhpcy5zdG9yaWVzID0ge307XHJcbiAgfVxyXG5cclxuICAvLyBBRERFRDogTWV0aG9kIHRvIHNldCBkb2N1bWVudCB1bml0cyBmb3IgZm9udCBzaXplIGNvbnZlcnNpb25cclxuICBzZXREb2N1bWVudFVuaXRzKHVuaXRzKSB7XHJcbiAgICB0aGlzLmRvY3VtZW50VW5pdHMgPSB1bml0cztcclxuICAgIGNvbnNvbGUubG9nKFwi8J+TkCBTdG9yeVBhcnNlcjogU2V0IGRvY3VtZW50IHVuaXRzIHRvXCIsIHVuaXRzKTtcclxuICB9XHJcblxyXG4gIC8vIEFEREVEOiBNZXRob2QgdG8gY29udmVydCBmb250IHNpemUgdG8gcGl4ZWxzIGlmIG5lZWRlZFxyXG4gIGNvbnZlcnRGb250U2l6ZVRvUGl4ZWxzKGZvbnRTaXplKSB7XHJcbiAgICBpZiAoIWZvbnRTaXplIHx8ICF0aGlzLnVuaXRDb252ZXJ0ZXIgfHwgIXRoaXMuZG9jdW1lbnRVbml0cykge1xyXG4gICAgICByZXR1cm4gZm9udFNpemU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRm9udCBzaXplcyBpbiBJRE1MIGFyZSB0eXBpY2FsbHkgaW4gUG9pbnRzLCBidXQgbGV0J3MgdXNlIGRvY3VtZW50IHVuaXRzIGFzIGZhbGxiYWNrXHJcbiAgICBjb25zdCBmb250VW5pdHMgPSB0aGlzLmRvY3VtZW50VW5pdHMgPT09IFwiUGl4ZWxzXCIgPyBcIlBpeGVsc1wiIDogXCJQb2ludHNcIjsgLy8gRm9udCBzaXplcyBhcmUgdXN1YWxseSBwb2ludHNcclxuXHJcbiAgICBpZiAodGhpcy51bml0Q29udmVydGVyLmlzU3VwcG9ydGVkVW5pdChmb250VW5pdHMpKSB7XHJcbiAgICAgIGNvbnN0IHBpeGVsU2l6ZSA9IHRoaXMudW5pdENvbnZlcnRlci50b1BpeGVscyhmb250U2l6ZSwgZm9udFVuaXRzKTtcclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgYPCfk5AgQ29udmVydGVkIGZvbnQgc2l6ZTogJHtmb250U2l6ZX0gJHtmb250VW5pdHN9IOKGkiAke3BpeGVsU2l6ZX0gcHhgXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiBwaXhlbFNpemU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZvbnRTaXplO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgcGFyc2VTdG9yeUZpbGUoZmlsZU5hbWUsIGNvbnRlbnQsIHhtbFBhcnNlcikge1xyXG4gICAgY29uc29sZS5sb2coYPCfk50gUGFyc2luZyBzdG9yeTogJHtmaWxlTmFtZX1gKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBwYXJzZWQgPSB4bWxQYXJzZXIucGFyc2UoY29udGVudCk7XHJcbiAgICAgIGNvbnN0IHN0b3J5SWQgPSBwYXRoLmJhc2VuYW1lKGZpbGVOYW1lLCBcIi54bWxcIik7XHJcblxyXG4gICAgICBjb25zdCBzdG9yeURhdGEgPSBwYXJzZWQuU3RvcnkgfHwgcGFyc2VkO1xyXG5cclxuICAgICAgLy8gQUREIERFQlVHR0lORyBGT1IgQlIgRUxFTUVOVFMgSU4gUkFXIFhNTFxyXG4gICAgICBjb25zb2xlLmxvZyhcIj09PSBSQVcgWE1MIENPTlRFTlQgREVCVUcgPT09XCIpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIlJhdyBYTUwgY29udGVudCBzYW1wbGU6XCIsIGNvbnRlbnQuc3Vic3RyaW5nKDAsIDEwMDApKTtcclxuXHJcbiAgICAgIC8vIENvdW50IEJyIGVsZW1lbnRzIGluIHJhdyBYTUxcclxuICAgICAgY29uc3QgYnJNYXRjaGVzID0gY29udGVudC5tYXRjaCgvPEJyW14+XSo+L2cpIHx8IFtdO1xyXG4gICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICBgRm91bmQgJHtick1hdGNoZXMubGVuZ3RofSA8QnI+IGVsZW1lbnRzIGluIHJhdyBYTUw6YCxcclxuICAgICAgICBick1hdGNoZXNcclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIExvb2sgZm9yIGNvbnNlY3V0aXZlIEJyIGVsZW1lbnRzXHJcbiAgICAgIGNvbnN0IGNvbnNlY3V0aXZlQnJQYXR0ZXJuID0gLyg8QnJbXj5dKj5cXHMqKXsyLH0vZztcclxuICAgICAgY29uc3QgY29uc2VjdXRpdmVCck1hdGNoZXMgPSBjb250ZW50Lm1hdGNoKGNvbnNlY3V0aXZlQnJQYXR0ZXJuKSB8fCBbXTtcclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgYEZvdW5kICR7Y29uc2VjdXRpdmVCck1hdGNoZXMubGVuZ3RofSBncm91cHMgb2YgY29uc2VjdXRpdmUgPEJyPiBlbGVtZW50czpgLFxyXG4gICAgICAgIGNvbnNlY3V0aXZlQnJNYXRjaGVzXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBDUklUSUNBTCBGSVg6IFBhcnNlIHJhdyBYTUwgdG8gcHJlc2VydmUgZG9jdW1lbnQgb3JkZXJcclxuICAgICAgdGhpcy5wYXJzZVJhd1hNTEZvckRvY3VtZW50T3JkZXIoY29udGVudCwgZmlsZU5hbWUpO1xyXG5cclxuICAgICAgLy8gQUREIFRIRVNFIFNJTVBMRSBMT0dTIEZJUlNUOlxyXG4gICAgICBjb25zb2xlLmxvZyhcIj09PSBTSU1QTEUgREVCVUcgVEVTVCA9PT1cIik7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiU3RvcnkgZmlsZSBuYW1lOlwiLCBmaWxlTmFtZSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiUGFyc2VkIHN0b3J5IGtleXM6XCIsIE9iamVjdC5rZXlzKHN0b3J5RGF0YSkpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICBcIlJhdyBzdG9yeSBkYXRhIHNhbXBsZTpcIixcclxuICAgICAgICBKU09OLnN0cmluZ2lmeShzdG9yeURhdGEsIG51bGwsIDIpLnN1YnN0cmluZygwLCA1MDApXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBFeHRyYWN0IGRldGFpbGVkIHN0b3J5IGluZm9ybWF0aW9uXHJcbiAgICAgIGNvbnN0IGRldGFpbGVkU3RvcnkgPSB7XHJcbiAgICAgICAgc2VsZjogc3RvcnlEYXRhW1wiQF9TZWxmXCJdLFxyXG4gICAgICAgIGFwcGxpZWRUT0NTdHlsZTogc3RvcnlEYXRhW1wiQF9BcHBsaWVkVE9DU3R5bGVcIl0gfHwgXCJuXCIsXHJcbiAgICAgICAgdXNlclRleHQ6IHN0b3J5RGF0YVtcIkBfVXNlclRleHRcIl0gIT09IGZhbHNlLFxyXG5cclxuICAgICAgICAvLyBFeHRyYWN0IHN0b3J5IGNvbnRlbnQgd2l0aCBmb3JtYXR0aW5nXHJcbiAgICAgICAgY29udGVudDogdGhpcy5leHRyYWN0RGV0YWlsZWRTdG9yeUNvbnRlbnQoc3RvcnlEYXRhLCBmaWxlTmFtZSksXHJcblxyXG4gICAgICAgIC8vIEV4dHJhY3QgdGV4dCBmb3JtYXR0aW5nXHJcbiAgICAgICAgdGV4dEZvcm1hdHRpbmc6IHRoaXMuZXh0cmFjdFRleHRGb3JtYXR0aW5nKHN0b3J5RGF0YSksXHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvLyBBREQgREVCVUdHSU5HIEZPUiBQQVJTRUQgQlIgU1RSVUNUVVJFXHJcbiAgICAgIGNvbnNvbGUubG9nKFwiPT09IFBBUlNFRCBYTUwgU1RSVUNUVVJFIERFQlVHID09PVwiKTtcclxuICAgICAgdGhpcy5kZWJ1Z0JyRWxlbWVudHNJblBhcnNlZFN0cnVjdHVyZShzdG9yeURhdGEsIFwicm9vdFwiKTtcclxuXHJcbiAgICAgIGNvbnN0IGNsZWFuU3RvcnlJZCA9IHN0b3J5SWQucmVwbGFjZShcIlN0b3J5X1wiLCBcIlwiKTtcclxuICAgICAgdGhpcy5zdG9yaWVzW2NsZWFuU3RvcnlJZF0gPSBkZXRhaWxlZFN0b3J5O1xyXG5cclxuICAgICAgLy8gRW5oYW5jZWQgbG9nZ2luZyB0byBzaG93IGxpbmUgYnJlYWtzXHJcbiAgICAgIGNvbnN0IHsgcGxhaW5UZXh0LCBsaW5lQnJlYWtJbmZvIH0gPSBkZXRhaWxlZFN0b3J5LmNvbnRlbnQ7XHJcbiAgICAgIGNvbnNvbGUubG9nKGDinIUgU3RvcnkgJHtzdG9yeUlkfSBwYXJzZWQ6YCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKGAgICAtIENoYXJhY3RlcnM6ICR7cGxhaW5UZXh0Lmxlbmd0aH1gKTtcclxuICAgICAgY29uc29sZS5sb2coYCAgIC0gV29yZHM6ICR7ZGV0YWlsZWRTdG9yeS5jb250ZW50LndvcmRDb3VudH1gKTtcclxuICAgICAgY29uc29sZS5sb2coYCAgIC0gTGluZSBicmVha3M6ICR7bGluZUJyZWFrSW5mbz8ubGluZUJyZWFrQ291bnQgfHwgMH1gKTtcclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgYCAgIC0gVGV4dCBwcmV2aWV3OiBcIiR7cGxhaW5UZXh0XHJcbiAgICAgICAgICAuc3Vic3RyaW5nKDAsIDUwKVxyXG4gICAgICAgICAgLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpfS4uLlwiYFxyXG4gICAgICApO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihg4p2MIEVycm9yIHBhcnNpbmcgc3RvcnkgJHtmaWxlTmFtZX06YCwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBSZXBsYWNlIHRoZSBleGlzdGluZyBleHRyYWN0RGV0YWlsZWRTdG9yeUNvbnRlbnQgbWV0aG9kIHdpdGggdGhpcyBjb3JyZWN0ZWQgdmVyc2lvblxyXG4gIGV4dHJhY3REZXRhaWxlZFN0b3J5Q29udGVudChzdG9yeURhdGEsIGZpbGVOYW1lID0gXCJ1bmtub3duXCIpIHtcclxuICAgIGxldCBjb250ZW50ID0gXCJcIjtcclxuICAgIGxldCBmb3JtYXR0ZWRDb250ZW50ID0gW107XHJcbiAgICBsZXQgdGV4dENvbG9yID0gbnVsbDtcclxuICAgIGxldCBkZWJ1Z0luZm8gPSBbXTtcclxuXHJcbiAgICBjb25zdCBleHRyYWN0VGV4dFJlY3Vyc2l2ZWx5ID0gKGVsZW1lbnQsIGRlcHRoID0gMCwgY29udGV4dCA9IHt9KSA9PiB7XHJcbiAgICAgIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGNvbnRlbnQgKz0gZWxlbWVudDtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50ID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgLy8gRU5IQU5DRUQ6IFNwZWNpYWwgaGFuZGxpbmcgZm9yIENoYXJhY3RlclN0eWxlUmFuZ2Ugd2l0aCBzb3BoaXN0aWNhdGVkIEJyIGRldGVjdGlvblxyXG4gICAgICAgIGlmIChlbGVtZW50LkNoYXJhY3RlclN0eWxlUmFuZ2UpIHtcclxuICAgICAgICAgIGNvbnN0IHJhbmdlcyA9IEFycmF5LmlzQXJyYXkoZWxlbWVudC5DaGFyYWN0ZXJTdHlsZVJhbmdlKVxyXG4gICAgICAgICAgICA/IGVsZW1lbnQuQ2hhcmFjdGVyU3R5bGVSYW5nZVxyXG4gICAgICAgICAgICA6IFtlbGVtZW50LkNoYXJhY3RlclN0eWxlUmFuZ2VdO1xyXG5cclxuICAgICAgICAgIHJhbmdlcy5mb3JFYWNoKChyYW5nZSwgcmFuZ2VJbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBFeHRyYWN0IGRpcmVjdCBmb250IHJlZmVyZW5jZXMgZnJvbSB0aGUgWE1MIHJhbmdlXHJcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdEZvbnRSZWYgPVxyXG4gICAgICAgICAgICAgIHJhbmdlW1wiQF9BcHBsaWVkRm9udFwiXSB8fFxyXG4gICAgICAgICAgICAgIHJhbmdlW1wiQF9Gb250RmFtaWx5XCJdIHx8XHJcbiAgICAgICAgICAgICAgcmFuZ2VbXCJAX0ZvbnRcIl0gfHxcclxuICAgICAgICAgICAgICBcIlwiO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZm9ybWF0dGluZyA9IHtcclxuICAgICAgICAgICAgICBwYXJhZ3JhcGhTdHlsZTpcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRbXCJAX0FwcGxpZWRQYXJhZ3JhcGhTdHlsZVwiXSB8fFxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5hcHBsaWVkU3R5bGUgfHxcclxuICAgICAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgICAgY2hhcmFjdGVyU3R5bGU6IHJhbmdlW1wiQF9BcHBsaWVkQ2hhcmFjdGVyU3R5bGVcIl0gfHwgbnVsbCxcclxuICAgICAgICAgICAgICBmb250U2l6ZTogcmFuZ2VbXCJAX1BvaW50U2l6ZVwiXVxyXG4gICAgICAgICAgICAgICAgPyB0aGlzLmNvbnZlcnRGb250U2l6ZVRvUGl4ZWxzKHBhcnNlRmxvYXQocmFuZ2VbXCJAX1BvaW50U2l6ZVwiXSkpIC8vIEFEREVEOiBDb252ZXJ0IHRvIHBpeGVsc1xyXG4gICAgICAgICAgICAgICAgOiBudWxsLFxyXG4gICAgICAgICAgICAgIG9yaWdpbmFsRm9udFNpemU6IHJhbmdlW1wiQF9Qb2ludFNpemVcIl1cclxuICAgICAgICAgICAgICAgID8gcGFyc2VGbG9hdChyYW5nZVtcIkBfUG9pbnRTaXplXCJdKVxyXG4gICAgICAgICAgICAgICAgOiBudWxsLCAvLyBBRERFRDogUHJlc2VydmUgb3JpZ2luYWxcclxuICAgICAgICAgICAgICBmb250UmVmZXJlbmNlOiBkaXJlY3RGb250UmVmLFxyXG4gICAgICAgICAgICAgIGZpbGxDb2xvcjogcmFuZ2VbXCJAX0ZpbGxDb2xvclwiXSB8fCBudWxsLFxyXG4gICAgICAgICAgICAgIGZvbnRTdHlsZTogcmFuZ2VbXCJAX0ZvbnRTdHlsZVwiXSB8fCBudWxsLFxyXG4gICAgICAgICAgICAgIC8vIENSSVRJQ0FMIEZJWDogSW5oZXJpdCBwYXJhZ3JhcGggYWxpZ25tZW50IGZyb20gY29udGV4dCBpZiBub3QgZXhwbGljaXRseSBzZXRcclxuICAgICAgICAgICAgICBhbGlnbm1lbnQ6XHJcbiAgICAgICAgICAgICAgICByYW5nZVtcIkBfSnVzdGlmaWNhdGlvblwiXSB8fFxyXG4gICAgICAgICAgICAgICAgcmFuZ2VbXCJAX0FsaWdubWVudFwiXSB8fFxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5wYXJhZ3JhcGhBbGlnbm1lbnQgfHxcclxuICAgICAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZEZvcm1hdHRpbmcgPVxyXG4gICAgICAgICAgICAgIHRoaXMuc3R5bGVQYXJzZXIucmVzb2x2ZVN0eWxlRm9ybWF0dGluZyhmb3JtYXR0aW5nKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENSSVRJQ0FMIEZJWDogUHJvY2VzcyBDb250ZW50IGFuZCBCciBlbGVtZW50cyBpbiBkb2N1bWVudCBvcmRlclxyXG4gICAgICAgICAgICAvLyBUaGlzIGhhbmRsZXMgaW50ZXJsZWF2ZWQgPENvbnRlbnQ+IGFuZCA8QnI+IGVsZW1lbnRzIGNvcnJlY3RseVxyXG4gICAgICAgICAgICBjb250ZW50ID0gdGhpcy5wcm9jZXNzQ2hhcmFjdGVyUmFuZ2VJbk9yZGVyKFxyXG4gICAgICAgICAgICAgIHJhbmdlLFxyXG4gICAgICAgICAgICAgIHJlc29sdmVkRm9ybWF0dGluZyxcclxuICAgICAgICAgICAgICByYW5nZUluZGV4LFxyXG4gICAgICAgICAgICAgIHJhbmdlcy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgY29udGVudCxcclxuICAgICAgICAgICAgICBmb3JtYXR0ZWRDb250ZW50LFxyXG4gICAgICAgICAgICAgIGRlYnVnSW5mbyxcclxuICAgICAgICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgICAgICAgIGZpbGVOYW1lXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyBDUklUSUNBTCBGSVg6IEFkZCBzcGFjZSBiZXR3ZWVuIGNoYXJhY3RlciBzdHlsZSByYW5nZXMgaWYgbmVlZGVkXHJcbiAgICAgICAgICAgIGlmIChyYW5nZUluZGV4IDwgcmFuZ2VzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICBjb25zdCBuZXh0UmFuZ2UgPSByYW5nZXNbcmFuZ2VJbmRleCArIDFdO1xyXG5cclxuICAgICAgICAgICAgICAvLyBNb3JlIHJvYnVzdCBzcGFjZSBkZXRlY3Rpb25cclxuICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VGV4dCA9IGNvbnRlbnQuc2xpY2UoLTEwKTsgLy8gQ2hlY2sgbGFzdCAxMCBjaGFyYWN0ZXJzXHJcbiAgICAgICAgICAgICAgY29uc3QgY3VycmVudFJhbmdlRW5kc1dpdGhTcGFjZSA9IC9cXHMkLy50ZXN0KGN1cnJlbnRUZXh0KTsgLy8gQW55IHdoaXRlc3BhY2UgYXQgZW5kXHJcblxyXG4gICAgICAgICAgICAgIGNvbnN0IG5leHRDb250ZW50ID0gbmV4dFJhbmdlLkNvbnRlbnRcclxuICAgICAgICAgICAgICAgID8gU3RyaW5nKFxyXG4gICAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkobmV4dFJhbmdlLkNvbnRlbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICA/IG5leHRSYW5nZS5Db250ZW50WzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICA6IG5leHRSYW5nZS5Db250ZW50XHJcbiAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIDogXCJcIjtcclxuICAgICAgICAgICAgICBjb25zdCBuZXh0UmFuZ2VTdGFydHNXaXRoU3BhY2UgPSAvXlxccy8udGVzdChuZXh0Q29udGVudCk7IC8vIEFueSB3aGl0ZXNwYWNlIGF0IHN0YXJ0XHJcblxyXG4gICAgICAgICAgICAgIC8vIEFHR1JFU1NJVkUgRklYOiBBZGQgc3BhY2UgYmV0d2VlbiBBTEwgcmFuZ2VzIHVubGVzcyBleHBsaWNpdGx5IG5vdCBuZWVkZWRcclxuICAgICAgICAgICAgICBjb25zdCBzaG91bGRTa2lwU3BhY2UgPVxyXG4gICAgICAgICAgICAgICAgY3VycmVudFJhbmdlRW5kc1dpdGhTcGFjZSB8fFxyXG4gICAgICAgICAgICAgICAgbmV4dFJhbmdlU3RhcnRzV2l0aFNwYWNlIHx8XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3VsZEluc2VydEltcGxpY2l0TGluZUJyZWFrKHJhbmdlLCBuZXh0UmFuZ2UsIGNvbnRleHQpIHx8XHJcbiAgICAgICAgICAgICAgICAhbmV4dFJhbmdlLkNvbnRlbnQgfHwgLy8gU2tpcCBpZiBuZXh0IHJhbmdlIGhhcyBubyBjb250ZW50XHJcbiAgICAgICAgICAgICAgICBuZXh0Q29udGVudC50cmltKCkgPT09IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgIGlmICghc2hvdWxkU2tpcFNwYWNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U3R5bGUgPSByYW5nZVtcIkBfQXBwbGllZENoYXJhY3RlclN0eWxlXCJdIHx8IFwibm9uZVwiO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dFN0eWxlID1cclxuICAgICAgICAgICAgICAgICAgbmV4dFJhbmdlW1wiQF9BcHBsaWVkQ2hhcmFjdGVyU3R5bGVcIl0gfHwgXCJub25lXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3BhY2VUZXh0ID0gXCIgXCI7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50ICs9IHNwYWNlVGV4dDtcclxuICAgICAgICAgICAgICAgIGZvcm1hdHRlZENvbnRlbnQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgIHRleHQ6IHNwYWNlVGV4dCxcclxuICAgICAgICAgICAgICAgICAgZm9ybWF0dGluZzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzU3BhY2U6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBcImJldHdlZW4gY2hhcmFjdGVyIHN0eWxlIHJhbmdlcyAoYWdncmVzc2l2ZSlcIixcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3R5bGUsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dFN0eWxlLFxyXG4gICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVidWdJbmZvLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICB0eXBlOiBcIlNwYWNlIGluc2VydGVkIGJldHdlZW4gY2hhcmFjdGVyIHN0eWxlcyAoYWdncmVzc2l2ZSlcIixcclxuICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGBCZXR3ZWVuIHJhbmdlcyAke3JhbmdlSW5kZXh9IGFuZCAke1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlSW5kZXggKyAxXHJcbiAgICAgICAgICAgICAgICAgIH1gLFxyXG4gICAgICAgICAgICAgICAgICBjdXJyZW50U3R5bGUsXHJcbiAgICAgICAgICAgICAgICAgIG5leHRTdHlsZSxcclxuICAgICAgICAgICAgICAgICAgcmVhc29uOlxyXG4gICAgICAgICAgICAgICAgICAgIFwiRGVmYXVsdCBzcGFjZSBpbnNlcnRpb24gLSB3b3JkcyBsaWtlbHkgc3BsaXQgYWNyb3NzIHJhbmdlc1wiLFxyXG4gICAgICAgICAgICAgICAgICBjdXJyZW50VGV4dEVuZDogY3VycmVudFRleHQuc2xpY2UoLTUpLFxyXG4gICAgICAgICAgICAgICAgICBuZXh0VGV4dFN0YXJ0OiBuZXh0Q29udGVudC5zbGljZSgwLCA1KSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkZWJ1Z0luZm8ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiU3BhY2UgaW5zZXJ0aW9uIHNraXBwZWRcIixcclxuICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGBCZXR3ZWVuIHJhbmdlcyAke3JhbmdlSW5kZXh9IGFuZCAke1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlSW5kZXggKyAxXHJcbiAgICAgICAgICAgICAgICAgIH1gLFxyXG4gICAgICAgICAgICAgICAgICByZWFzb246IGN1cnJlbnRSYW5nZUVuZHNXaXRoU3BhY2VcclxuICAgICAgICAgICAgICAgICAgICA/IFwiQ3VycmVudCByYW5nZSBlbmRzIHdpdGggc3BhY2VcIlxyXG4gICAgICAgICAgICAgICAgICAgIDogbmV4dFJhbmdlU3RhcnRzV2l0aFNwYWNlXHJcbiAgICAgICAgICAgICAgICAgICAgPyBcIk5leHQgcmFuZ2Ugc3RhcnRzIHdpdGggc3BhY2VcIlxyXG4gICAgICAgICAgICAgICAgICAgIDogIW5leHRSYW5nZS5Db250ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgPyBcIk5leHQgcmFuZ2UgaGFzIG5vIGNvbnRlbnRcIlxyXG4gICAgICAgICAgICAgICAgICAgIDogbmV4dENvbnRlbnQudHJpbSgpID09PSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgPyBcIk5leHQgY29udGVudCBpcyBvbmx5IHdoaXRlc3BhY2VcIlxyXG4gICAgICAgICAgICAgICAgICAgIDogXCJMaW5lIGJyZWFrIHdvdWxkIGJlIGluc2VydGVkXCIsXHJcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRUZXh0RW5kOiBjdXJyZW50VGV4dC5zbGljZSgtNSksXHJcbiAgICAgICAgICAgICAgICAgIG5leHRUZXh0U3RhcnQ6IG5leHRDb250ZW50LnNsaWNlKDAsIDUpLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAvLyBIYW5kbGUgZXhwbGljaXQgbGluZSBicmVha3MgYmV0d2VlbiByYW5nZXMgKGZvciBjYXNlcyB3aGVyZSBzaG91bGRJbnNlcnRJbXBsaWNpdExpbmVCcmVhayBpcyB0cnVlKVxyXG4gICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvdWxkSW5zZXJ0SW1wbGljaXRMaW5lQnJlYWsocmFuZ2UsIG5leHRSYW5nZSwgY29udGV4dClcclxuICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGltcGxpY2l0QnJlYWsgPSBcIlxcblwiO1xyXG4gICAgICAgICAgICAgICAgY29udGVudCArPSBpbXBsaWNpdEJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkQ29udGVudC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgdGV4dDogaW1wbGljaXRCcmVhayxcclxuICAgICAgICAgICAgICAgICAgZm9ybWF0dGluZzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzQnJlYWs6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtUeXBlOiBcImltcGxpY2l0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBcImJldHdlZW4gcmFuZ2VzXCIsXHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWJ1Z0luZm8ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiSW1wbGljaXQgbGluZSBicmVha1wiLFxyXG4gICAgICAgICAgICAgICAgICBsb2NhdGlvbjogYEJldHdlZW4gcmFuZ2VzICR7cmFuZ2VJbmRleH0gYW5kICR7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VJbmRleCArIDFcclxuICAgICAgICAgICAgICAgICAgfWAsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuOyAvLyBEb24ndCBjb250aW51ZSBwcm9jZXNzaW5nIHRvIGF2b2lkIGR1cGxpY2F0aW9uXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBFTkhBTkNFRDogSGFuZGxlIFBhcmFncmFwaFN0eWxlUmFuZ2Ugd2l0aCBjb250ZXh0XHJcbiAgICAgICAgaWYgKGVsZW1lbnQuUGFyYWdyYXBoU3R5bGVSYW5nZSkge1xyXG4gICAgICAgICAgY29uc3QgcmFuZ2VzID0gQXJyYXkuaXNBcnJheShlbGVtZW50LlBhcmFncmFwaFN0eWxlUmFuZ2UpXHJcbiAgICAgICAgICAgID8gZWxlbWVudC5QYXJhZ3JhcGhTdHlsZVJhbmdlXHJcbiAgICAgICAgICAgIDogW2VsZW1lbnQuUGFyYWdyYXBoU3R5bGVSYW5nZV07XHJcblxyXG4gICAgICAgICAgcmFuZ2VzLmZvckVhY2goKHJhbmdlLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJhZ3JhcGhDb250ZXh0ID0ge1xyXG4gICAgICAgICAgICAgIC4uLmNvbnRleHQsXHJcbiAgICAgICAgICAgICAgcGFyYWdyYXBoSW5kZXg6IGluZGV4LFxyXG4gICAgICAgICAgICAgIHRvdGFsUGFyYWdyYXBoczogcmFuZ2VzLmxlbmd0aCxcclxuICAgICAgICAgICAgICBhcHBsaWVkU3R5bGU6IHJhbmdlW1wiQF9BcHBsaWVkUGFyYWdyYXBoU3R5bGVcIl0sXHJcbiAgICAgICAgICAgICAgLy8gQ1JJVElDQUwgRklYOiBQYXNzIGRvd24gZGlyZWN0IHBhcmFncmFwaC1sZXZlbCBhbGlnbm1lbnRcclxuICAgICAgICAgICAgICBwYXJhZ3JhcGhBbGlnbm1lbnQ6XHJcbiAgICAgICAgICAgICAgICByYW5nZVtcIkBfSnVzdGlmaWNhdGlvblwiXSB8fCByYW5nZVtcIkBfQWxpZ25tZW50XCJdLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gVHJhY2sgY29udGVudCBsZW5ndGggYmVmb3JlXHJcbiAgICAgICAgICAgIGNvbnN0IGJlZm9yZUxlbiA9IGNvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICBleHRyYWN0VGV4dFJlY3Vyc2l2ZWx5KHJhbmdlLCBkZXB0aCArIDEsIHBhcmFncmFwaENvbnRleHQpO1xyXG4gICAgICAgICAgICAvLyBUcmFjayBjb250ZW50IGxlbmd0aCBhZnRlclxyXG4gICAgICAgICAgICBjb25zdCBhZnRlckxlbiA9IGNvbnRlbnQubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgLy8gSWYgbm90aGluZyB3YXMgYWRkZWQsIHRoaXMgaXMgYW4gZW1wdHkgcGFyYWdyYXBoOiBhZGQgYSBuZXdsaW5lXHJcbiAgICAgICAgICAgIGlmIChhZnRlckxlbiA9PT0gYmVmb3JlTGVuKSB7XHJcbiAgICAgICAgICAgICAgY29udGVudCArPSBcIlxcblwiO1xyXG4gICAgICAgICAgICAgIGZvcm1hdHRlZENvbnRlbnQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIlxcblwiLFxyXG4gICAgICAgICAgICAgICAgZm9ybWF0dGluZzoge1xyXG4gICAgICAgICAgICAgICAgICBpc0JyZWFrOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICBicmVha1R5cGU6IFwiZW1wdHktcGFyYWdyYXBoXCIsXHJcbiAgICAgICAgICAgICAgICAgIHNvdXJjZTogXCJlbXB0eSBQYXJhZ3JhcGhTdHlsZVJhbmdlXCIsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIGRlYnVnSW5mby5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiRW1wdHkgcGFyYWdyYXBoIGRldGVjdGVkXCIsXHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjogYFBhcmFncmFwaFN0eWxlUmFuZ2VbJHtpbmRleH1dYCxcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQWRkIHBhcmFncmFwaCBicmVhayBiZXR3ZWVuIHBhcmFncmFwaHMgKGJ1dCBub3QgYWZ0ZXIgdGhlIGxhc3Qgb25lKVxyXG4gICAgICAgICAgICBpZiAoaW5kZXggPCByYW5nZXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHBhcmFncmFwaEJyZWFrID0gXCJcXG5cXG5cIjsgLy8gVXNlIGRvdWJsZSBuZXdsaW5lIGZvciBwYXJhZ3JhcGggYnJlYWtzXHJcbiAgICAgICAgICAgICAgY29udGVudCArPSBwYXJhZ3JhcGhCcmVhaztcclxuICAgICAgICAgICAgICBmb3JtYXR0ZWRDb250ZW50LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgdGV4dDogcGFyYWdyYXBoQnJlYWssXHJcbiAgICAgICAgICAgICAgICBmb3JtYXR0aW5nOiB7XHJcbiAgICAgICAgICAgICAgICAgIGlzQnJlYWs6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgIGJyZWFrVHlwZTogXCJwYXJhZ3JhcGhcIixcclxuICAgICAgICAgICAgICAgICAgc291cmNlOiBcImJldHdlZW4gcGFyYWdyYXBoc1wiLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBkZWJ1Z0luZm8ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcIlBhcmFncmFwaCBicmVha1wiLFxyXG4gICAgICAgICAgICAgICAgbG9jYXRpb246IGBiZXR3ZWVuIHBhcmFncmFwaHMgJHtpbmRleH0gYW5kICR7aW5kZXggKyAxfWAsXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIGRpcmVjdCBDb250ZW50IGVsZW1lbnRzICh3aGVuIG5vdCBpbnNpZGUgQ2hhcmFjdGVyU3R5bGVSYW5nZSlcclxuICAgICAgICBpZiAoZWxlbWVudC5Db250ZW50ICYmICFlbGVtZW50LkNoYXJhY3RlclN0eWxlUmFuZ2UpIHtcclxuICAgICAgICAgIGxldCB0ZXh0ID0gQXJyYXkuaXNBcnJheShlbGVtZW50LkNvbnRlbnQpXHJcbiAgICAgICAgICAgID8gZWxlbWVudC5Db250ZW50LmpvaW4oXCJcIilcclxuICAgICAgICAgICAgOiBTdHJpbmcoZWxlbWVudC5Db250ZW50KTtcclxuICAgICAgICAgIHRleHQgPSBJRE1MVXRpbHMuZGVjb2RlWE1MRW50aXRpZXModGV4dCk7XHJcbiAgICAgICAgICBjb250ZW50ICs9IHRleHQ7XHJcblxyXG4gICAgICAgICAgY29uc3QgZm9ybWF0dGluZyA9IHtcclxuICAgICAgICAgICAgcGFyYWdyYXBoU3R5bGU6XHJcbiAgICAgICAgICAgICAgZWxlbWVudFtcIkBfQXBwbGllZFBhcmFncmFwaFN0eWxlXCJdIHx8XHJcbiAgICAgICAgICAgICAgY29udGV4dC5hcHBsaWVkU3R5bGUgfHxcclxuICAgICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICBjaGFyYWN0ZXJTdHlsZTogZWxlbWVudFtcIkBfQXBwbGllZENoYXJhY3RlclN0eWxlXCJdIHx8IG51bGwsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiBlbGVtZW50W1wiQF9Qb2ludFNpemVcIl0gfHwgbnVsbCxcclxuICAgICAgICAgICAgZm9udEZhbWlseTogZWxlbWVudFtcIkBfQXBwbGllZEZvbnRcIl0gfHwgbnVsbCxcclxuICAgICAgICAgICAgZmlsbENvbG9yOiBlbGVtZW50W1wiQF9GaWxsQ29sb3JcIl0gfHwgbnVsbCxcclxuICAgICAgICAgICAgLy8gQ1JJVElDQUwgRklYOiBJbmhlcml0IHBhcmFncmFwaCBhbGlnbm1lbnQgZnJvbSBjb250ZXh0IGlmIG5vdCBleHBsaWNpdGx5IHNldFxyXG4gICAgICAgICAgICBhbGlnbm1lbnQ6XHJcbiAgICAgICAgICAgICAgZWxlbWVudFtcIkBfSnVzdGlmaWNhdGlvblwiXSB8fFxyXG4gICAgICAgICAgICAgIGVsZW1lbnRbXCJAX0FsaWdubWVudFwiXSB8fFxyXG4gICAgICAgICAgICAgIGNvbnRleHQucGFyYWdyYXBoQWxpZ25tZW50IHx8XHJcbiAgICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgY29uc3QgcmVzb2x2ZWRGb3JtYXR0aW5nID1cclxuICAgICAgICAgICAgdGhpcy5zdHlsZVBhcnNlci5yZXNvbHZlU3R5bGVGb3JtYXR0aW5nKGZvcm1hdHRpbmcpO1xyXG5cclxuICAgICAgICAgIGZvcm1hdHRlZENvbnRlbnQucHVzaCh7XHJcbiAgICAgICAgICAgIHRleHQ6IHRleHQucmVwbGFjZSgvXFx1MjAyOC9nLCBcIlxcblwiKS5yZXBsYWNlKC9cXHUyMDI5L2csIFwiXFxuXFxuXCIpLFxyXG4gICAgICAgICAgICBmb3JtYXR0aW5nOiByZXNvbHZlZEZvcm1hdHRpbmcsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEVOSEFOQ0VEOiBEaXJlY3QgQnIgZWxlbWVudCBoYW5kbGluZyAob3V0c2lkZSBvZiByYW5nZXMpXHJcbiAgICAgICAgaWYgKGVsZW1lbnQuQnIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgY29uc3QgYnJFbGVtZW50cyA9IEFycmF5LmlzQXJyYXkoZWxlbWVudC5CcilcclxuICAgICAgICAgICAgPyBlbGVtZW50LkJyXHJcbiAgICAgICAgICAgIDogW2VsZW1lbnQuQnJdO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICAgIGDwn5SnIFByb2Nlc3NpbmcgJHtickVsZW1lbnRzLmxlbmd0aH0gZGlyZWN0IEJyIGVsZW1lbnRzOmAsXHJcbiAgICAgICAgICAgIGJyRWxlbWVudHNcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgYnJFbGVtZW50cy5mb3JFYWNoKChiciwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbGluZUJyZWFrVGV4dCA9IFwiXFxuXCI7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICAgIGDwn5SnIERpcmVjdCBCciBlbGVtZW50ICR7aW5kZXggKyAxfS8ke1xyXG4gICAgICAgICAgICAgICAgYnJFbGVtZW50cy5sZW5ndGhcclxuICAgICAgICAgICAgICB9IGNyZWF0ZXM6ICR7SlNPTi5zdHJpbmdpZnkobGluZUJyZWFrVGV4dCl9YFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBjb250ZW50ICs9IGxpbmVCcmVha1RleHQ7XHJcbiAgICAgICAgICAgIGZvcm1hdHRlZENvbnRlbnQucHVzaCh7XHJcbiAgICAgICAgICAgICAgdGV4dDogbGluZUJyZWFrVGV4dCxcclxuICAgICAgICAgICAgICBmb3JtYXR0aW5nOiB7XHJcbiAgICAgICAgICAgICAgICBpc0JyZWFrOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYnJlYWtUeXBlOiBcImV4cGxpY2l0XCIsXHJcbiAgICAgICAgICAgICAgICBzb3VyY2U6IFwiZGlyZWN0IEJyIGVsZW1lbnRcIixcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZGVidWdJbmZvLnB1c2goe1xyXG4gICAgICAgICAgICAgIHR5cGU6IFwiRGlyZWN0IEJyIGVsZW1lbnRcIixcclxuICAgICAgICAgICAgICBsb2NhdGlvbjogYERpcmVjdCBlbGVtZW50LCBpbmRleCAke2luZGV4fWAsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICAgIGDwn5SnIEFmdGVyIHByb2Nlc3NpbmcgJHtickVsZW1lbnRzLmxlbmd0aH0gZGlyZWN0IEJyIGVsZW1lbnRzLCBjb250ZW50IGVuZHMgd2l0aDpgLFxyXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShjb250ZW50LnNsaWNlKC0xMCkpXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ29udGludWUgd2l0aCBvdGhlciBuZXN0ZWQgZWxlbWVudHNcclxuICAgICAgICBPYmplY3QuZW50cmllcyhlbGVtZW50KS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgIWtleS5zdGFydHNXaXRoKFwiQF9cIikgJiZcclxuICAgICAgICAgICAga2V5ICE9PSBcIkNvbnRlbnRcIiAmJlxyXG4gICAgICAgICAgICBrZXkgIT09IFwiQnJcIiAmJlxyXG4gICAgICAgICAgICBrZXkgIT09IFwiQ2hhcmFjdGVyU3R5bGVSYW5nZVwiICYmXHJcbiAgICAgICAgICAgIGtleSAhPT0gXCJQYXJhZ3JhcGhTdHlsZVJhbmdlXCJcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKChpdGVtKSA9PlxyXG4gICAgICAgICAgICAgICAgZXh0cmFjdFRleHRSZWN1cnNpdmVseShpdGVtLCBkZXB0aCArIDEsIGNvbnRleHQpXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgZGVwdGggPCAxMCkge1xyXG4gICAgICAgICAgICAgIGV4dHJhY3RUZXh0UmVjdXJzaXZlbHkodmFsdWUsIGRlcHRoICsgMSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBleHRyYWN0VGV4dFJlY3Vyc2l2ZWx5KHN0b3J5RGF0YSk7XHJcblxyXG4gICAgLy8gREVCVUc6IFByaW50IHRoZSBmdWxsIHJhdyBjb250ZW50IHN0cmluZyB3aXRoIHZpc2libGUgbmV3bGluZXMgYmVmb3JlIHByb2Nlc3NpbmdcclxuICAgIGNvbnNvbGUubG9nKFwi8J+TnSA9PT0gQ09NUExFVEUgQ09OVEVOVCBBTkFMWVNJUyA9PT1cIik7XHJcbiAgICBjb25zb2xlLmxvZyhcIiAgIC0gUmF3IGNvbnRlbnQgYmVmb3JlIHByb2Nlc3Npbmc6XCIsIEpTT04uc3RyaW5naWZ5KGNvbnRlbnQpKTtcclxuICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICBcIiAgIC0gUmF3IGNvbnRlbnQgbmV3bGluZSBjb3VudDpcIixcclxuICAgICAgKGNvbnRlbnQubWF0Y2goL1xcbi9nKSB8fCBbXSkubGVuZ3RoXHJcbiAgICApO1xyXG4gICAgY29uc29sZS5sb2coXCIgICAtIFJhdyBjb250ZW50IGNoYXJhY3RlciBicmVha2Rvd246XCIpO1xyXG4gICAgY29uc3QgY2hhcnMgPSBjb250ZW50XHJcbiAgICAgIC5zcGxpdChcIlwiKVxyXG4gICAgICAubWFwKChjaGFyLCBpKSA9PiBgJHtpfTogJHtKU09OLnN0cmluZ2lmeShjaGFyKX1gKTtcclxuICAgIGNvbnNvbGUubG9nKFwiICAgLSBGaXJzdCA1MCBjaGFyYWN0ZXJzOlwiLCBjaGFycy5zbGljZSgwLCA1MCkpO1xyXG4gICAgaWYgKGNvbnRlbnQubGVuZ3RoID4gNTApIHtcclxuICAgICAgY29uc29sZS5sb2coXCIgICAtIExhc3QgMjAgY2hhcmFjdGVyczpcIiwgY2hhcnMuc2xpY2UoLTIwKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRU5IQU5DRUQ6IFByb2Nlc3MgYW5kIGNsZWFuIHVwIHRoZSBjb250ZW50IHdpdGggc29waGlzdGljYXRlZCBsaW5lIGJyZWFrIHByZXNlcnZhdGlvblxyXG4gICAgbGV0IHByb2Nlc3NlZENvbnRlbnQgPSBJRE1MVXRpbHMuc29waGlzdGljYXRlZExpbmVCcmVha1Byb2Nlc3NpbmcoY29udGVudCk7XHJcblxyXG4gICAgLy8gQ1JJVElDQUw6IEV4cGxpY2l0bHkgcHJlc2VydmUgYWxsIG5ld2xpbmVzIGFzLWlzIChubyBtZXJnaW5nIG9yIHN0cmlwcGluZylcclxuICAgIHByb2Nlc3NlZENvbnRlbnQgPSBwcm9jZXNzZWRDb250ZW50LnJlcGxhY2UoL1xcclxcbj8vZywgXCJcXG5cIik7IC8vIE5vcm1hbGl6ZSBDUkxGL0NSIHRvIExGXHJcbiAgICAvLyBEbyBOT1QgY29sbGFwc2UgbXVsdGlwbGUgbmV3bGluZXMgaW50byBvbmU7IHByZXNlcnZlIGFzLWlzXHJcblxyXG4gICAgY29uc29sZS5sb2coXCLwn5OdID09PSBQUk9DRVNTRUQgQ09OVEVOVCBBTkFMWVNJUyA9PT1cIik7XHJcbiAgICBjb25zb2xlLmxvZyhcIiAgIC0gUHJvY2Vzc2VkIGNvbnRlbnQ6XCIsIEpTT04uc3RyaW5naWZ5KHByb2Nlc3NlZENvbnRlbnQpKTtcclxuICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICBcIiAgIC0gUHJvY2Vzc2VkIGNvbnRlbnQgbmV3bGluZSBjb3VudDpcIixcclxuICAgICAgKHByb2Nlc3NlZENvbnRlbnQubWF0Y2goL1xcbi9nKSB8fCBbXSkubGVuZ3RoXHJcbiAgICApO1xyXG4gICAgY29uc29sZS5sb2coXHJcbiAgICAgIFwiICAgLSBDb250ZW50IGxlbmd0aCBjaGFuZ2U6XCIsXHJcbiAgICAgIGNvbnRlbnQubGVuZ3RoLFxyXG4gICAgICBcIuKGklwiLFxyXG4gICAgICBwcm9jZXNzZWRDb250ZW50Lmxlbmd0aFxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBTaG93IGRpZmZlcmVuY2VzIGlmIGFueVxyXG4gICAgaWYgKGNvbnRlbnQgIT09IHByb2Nlc3NlZENvbnRlbnQpIHtcclxuICAgICAgY29uc29sZS5sb2coXCLimqDvuI8gIENPTlRFTlQgV0FTIE1PRElGSUVEIERVUklORyBQUk9DRVNTSU5HIVwiKTtcclxuICAgICAgY29uc29sZS5sb2coXCIgICAtIE9yaWdpbmFsOlwiLCBKU09OLnN0cmluZ2lmeShjb250ZW50LnNsaWNlKDAsIDEwMCkpKTtcclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgXCIgICAtIFByb2Nlc3NlZDpcIixcclxuICAgICAgICBKU09OLnN0cmluZ2lmeShwcm9jZXNzZWRDb250ZW50LnNsaWNlKDAsIDEwMCkpXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIuKchSBDb250ZW50IHByZXNlcnZlZCBleGFjdGx5IGR1cmluZyBwcm9jZXNzaW5nXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERFQlVHOiBMb2cgc3BhY2UgcHJlc2VydmF0aW9uIHJlc3VsdHNcclxuICAgIGNvbnNvbGUubG9nKFwi8J+TnSBUZXh0IGV4dHJhY3Rpb24gcmVzdWx0czpcIik7XHJcbiAgICBjb25zb2xlLmxvZyhcIiAgIC0gT3JpZ2luYWwgY29udGVudCBsZW5ndGg6XCIsIGNvbnRlbnQubGVuZ3RoKTtcclxuICAgIGNvbnNvbGUubG9nKFwiICAgLSBQcm9jZXNzZWQgY29udGVudCBsZW5ndGg6XCIsIHByb2Nlc3NlZENvbnRlbnQubGVuZ3RoKTtcclxuICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICBcIiAgIC0gU3BhY2UgcHJlc2VydmF0aW9uIGV2ZW50czpcIixcclxuICAgICAgZGVidWdJbmZvLmZpbHRlcigoaW5mbykgPT4gaW5mby50eXBlLmluY2x1ZGVzKFwiU3BhY2UgaW5zZXJ0ZWRcIikpLmxlbmd0aFxyXG4gICAgKTtcclxuICAgIC8vIERFQlVHOiBTaG93IGZpcnN0IDMwMCBjaGFycyB3aXRoIHZpc2libGUgbmV3bGluZXNcclxuICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICBcIiAgIC0gRXh0cmFjdGVkIHRleHQgcHJldmlldzpcIixcclxuICAgICAgSlNPTi5zdHJpbmdpZnkocHJvY2Vzc2VkQ29udGVudC5zbGljZSgwLCAzMDApKVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBTUEVDSUZJQyBERUJVRzogQ2hlY2sgZm9yIHRoZSBwcm9ibGVtYXRpYyBcInBhdm9sdXB0dXNkYVwiIHRleHQgKHNpbXBsaWZpZWQpXHJcbiAgICBpZiAoXHJcbiAgICAgIHByb2Nlc3NlZENvbnRlbnQuaW5jbHVkZXMoXCJwYXZvbHVwdHVzZGFcIikgfHxcclxuICAgICAgKHByb2Nlc3NlZENvbnRlbnQuaW5jbHVkZXMoXCJwYVwiKSAmJlxyXG4gICAgICAgIHByb2Nlc3NlZENvbnRlbnQuaW5jbHVkZXMoXCJ2b2x1cHR1c2RhXCIpKVxyXG4gICAgKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwi8J+aqCBGT1VORCBQUk9CTEVNQVRJQyBURVhUOlwiKTtcclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgJyAgIC0gQ29udGFpbnMgXCJwYXZvbHVwdHVzZGFcIjonLFxyXG4gICAgICAgIHByb2Nlc3NlZENvbnRlbnQuaW5jbHVkZXMoXCJwYXZvbHVwdHVzZGFcIilcclxuICAgICAgKTtcclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgJyAgIC0gQ29udGFpbnMgXCJwYSB2b2x1cHR1c2RhXCI6JyxcclxuICAgICAgICBwcm9jZXNzZWRDb250ZW50LmluY2x1ZGVzKFwicGEgdm9sdXB0dXNkYVwiKVxyXG4gICAgICApO1xyXG4gICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICBcIiAgIC0gRm9ybWF0dGVkQ29udGVudCBicmVha2Rvd246XCIsXHJcbiAgICAgICAgZm9ybWF0dGVkQ29udGVudC5tYXAoKGl0ZW0pID0+IGl0ZW0udGV4dCkuam9pbihcInxcIilcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBsaW5lQnJlYWtJbmZvID0ge1xyXG4gICAgICBoYXNMaW5lQnJlYWtzOiBwcm9jZXNzZWRDb250ZW50LmluY2x1ZGVzKFwiXFxuXCIpLFxyXG4gICAgICBsaW5lQnJlYWtDb3VudDogKHByb2Nlc3NlZENvbnRlbnQubWF0Y2goL1xcbi9nKSB8fCBbXSkubGVuZ3RoLFxyXG4gICAgICBsaW5lQnJlYWtUeXBlczogdGhpcy5hbmFseXplTGluZUJyZWFrVHlwZXMoZm9ybWF0dGVkQ29udGVudCksXHJcbiAgICAgIGRlYnVnSW5mbzogZGVidWdJbmZvLFxyXG4gICAgICBzcGFjZVByZXNlcnZhdGlvbkNvdW50OiBkZWJ1Z0luZm8uZmlsdGVyKChpbmZvKSA9PlxyXG4gICAgICAgIGluZm8udHlwZS5pbmNsdWRlcyhcIlNwYWNlIGluc2VydGVkXCIpXHJcbiAgICAgICkubGVuZ3RoLFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBwbGFpblRleHQ6IHByb2Nlc3NlZENvbnRlbnQsXHJcbiAgICAgIGZvcm1hdHRlZENvbnRlbnQ6IGZvcm1hdHRlZENvbnRlbnQuZmlsdGVyKFxyXG4gICAgICAgIChpdGVtKSA9PiBpdGVtLnRleHQgJiYgaXRlbS50ZXh0Lmxlbmd0aCA+IDBcclxuICAgICAgKSxcclxuICAgICAgd29yZENvdW50OiBJRE1MVXRpbHMuY291bnRXb3Jkcyhwcm9jZXNzZWRDb250ZW50LnJlcGxhY2UoL1xcbi9nLCBcIiBcIikpLFxyXG4gICAgICBjaGFyYWN0ZXJDb3VudDogcHJvY2Vzc2VkQ29udGVudC5sZW5ndGgsXHJcbiAgICAgIHRleHRDb2xvcjogdGV4dENvbG9yLFxyXG4gICAgICBsaW5lQnJlYWtJbmZvOiBsaW5lQnJlYWtJbmZvLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIE5FVzogUHJvY2VzcyBDaGFyYWN0ZXJTdHlsZVJhbmdlIGNvbnRlbnQgYW5kIGJyZWFrcyBpbiBkb2N1bWVudCBvcmRlciAtIEZVTExZIERZTkFNSUNcclxuICBwcm9jZXNzQ2hhcmFjdGVyUmFuZ2VJbk9yZGVyKFxyXG4gICAgcmFuZ2UsXHJcbiAgICByZXNvbHZlZEZvcm1hdHRpbmcsXHJcbiAgICByYW5nZUluZGV4LFxyXG4gICAgdG90YWxSYW5nZXMsXHJcbiAgICBjb250ZW50LFxyXG4gICAgZm9ybWF0dGVkQ29udGVudCxcclxuICAgIGRlYnVnSW5mbyxcclxuICAgIGNvbnRleHQsXHJcbiAgICBmaWxlTmFtZVxyXG4gICkge1xyXG4gICAgY29uc29sZS5sb2coXHJcbiAgICAgIGDwn5SnIFByb2Nlc3NpbmcgQ2hhcmFjdGVyU3R5bGVSYW5nZVske3JhbmdlSW5kZXh9XSBpbiBkb2N1bWVudCBvcmRlcjpgLFxyXG4gICAgICB7XHJcbiAgICAgICAgaGFzQ29udGVudDogISFyYW5nZS5Db250ZW50LFxyXG4gICAgICAgIGhhc0JyOiByYW5nZS5CciAhPT0gdW5kZWZpbmVkLFxyXG4gICAgICAgIGNvbnRlbnRUeXBlOiBBcnJheS5pc0FycmF5KHJhbmdlLkNvbnRlbnQpXHJcbiAgICAgICAgICA/IFwiYXJyYXlcIlxyXG4gICAgICAgICAgOiB0eXBlb2YgcmFuZ2UuQ29udGVudCxcclxuICAgICAgICBiclR5cGU6IEFycmF5LmlzQXJyYXkocmFuZ2UuQnIpID8gXCJhcnJheVwiIDogdHlwZW9mIHJhbmdlLkJyLFxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIC8vIENPTVBSRUhFTlNJVkUgRURHRSBDQVNFIEhBTkRMSU5HXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBDYXNlIDE6IEJvdGggQ29udGVudCBhbmQgQnIgZWxlbWVudHMgZXhpc3QgLSBtb3N0IGNvbW1vbiBjYXNlXHJcbiAgICAgIGlmIChyYW5nZS5Db250ZW50ICYmIHJhbmdlLkJyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhg8J+UpyBQcm9jZXNzaW5nIHJhbmdlIHdpdGggYm90aCBjb250ZW50IGFuZCBicmVha3NgKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzSW50ZXJsZWF2ZWRDb250ZW50QW5kQnIoXHJcbiAgICAgICAgICByYW5nZSxcclxuICAgICAgICAgIHJlc29sdmVkRm9ybWF0dGluZyxcclxuICAgICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgICBmb3JtYXR0ZWRDb250ZW50LFxyXG4gICAgICAgICAgZGVidWdJbmZvLFxyXG4gICAgICAgICAgZmlsZU5hbWVcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDYXNlIDI6IE9ubHkgQ29udGVudCwgbm8gQnIgZWxlbWVudHNcclxuICAgICAgZWxzZSBpZiAocmFuZ2UuQ29udGVudCAmJiByYW5nZS5CciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYPCflKcgUHJvY2Vzc2luZyByYW5nZSB3aXRoIG9ubHkgY29udGVudGApO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NDb250ZW50RWxlbWVudHMoXHJcbiAgICAgICAgICByYW5nZSxcclxuICAgICAgICAgIHJlc29sdmVkRm9ybWF0dGluZyxcclxuICAgICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgICBmb3JtYXR0ZWRDb250ZW50LFxyXG4gICAgICAgICAgZmlsZU5hbWVcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDYXNlIDM6IE9ubHkgQnIgZWxlbWVudHMsIG5vIENvbnRlbnRcclxuICAgICAgZWxzZSBpZiAoIXJhbmdlLkNvbnRlbnQgJiYgcmFuZ2UuQnIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDwn5SnIFByb2Nlc3NpbmcgcmFuZ2Ugd2l0aCBvbmx5IGJyZWFrc2ApO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NCckVsZW1lbnRzKFxyXG4gICAgICAgICAgcmFuZ2UsXHJcbiAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgZm9ybWF0dGVkQ29udGVudCxcclxuICAgICAgICAgIGRlYnVnSW5mbyxcclxuICAgICAgICAgIHJhbmdlSW5kZXgsXHJcbiAgICAgICAgICBmaWxlTmFtZVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENhc2UgNDogTmVpdGhlciBDb250ZW50IG5vciBCciAtIGVtcHR5IHJhbmdlXHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDimqDvuI8gRW1wdHkgcmFuZ2UgZW5jb3VudGVyZWQgLSBubyBjb250ZW50IG9yIGJyZWFrc2ApO1xyXG4gICAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAvLyBVTFRJTUFURSBGQUxMQkFDSzogSWYgYW55dGhpbmcgZ29lcyB3cm9uZywgdHJ5IHRvIHNhbHZhZ2Ugd2hhdCB3ZSBjYW5cclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgYOKdjCBFcnJvciBwcm9jZXNzaW5nIENoYXJhY3RlclN0eWxlUmFuZ2VbJHtyYW5nZUluZGV4fV06ICR7ZXJyb3IubWVzc2FnZX1gXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5SEIEF0dGVtcHRpbmcgZW1lcmdlbmN5IGNvbnRlbnQgZXh0cmFjdGlvbi4uLmApO1xyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuZW1lcmdlbmN5Q29udGVudEV4dHJhY3Rpb24oXHJcbiAgICAgICAgcmFuZ2UsXHJcbiAgICAgICAgcmVzb2x2ZWRGb3JtYXR0aW5nLFxyXG4gICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgZm9ybWF0dGVkQ29udGVudCxcclxuICAgICAgICBmaWxlTmFtZVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gRU1FUkdFTkNZIEZBTExCQUNLOiBFeHRyYWN0IGNvbnRlbnQgZnJvbSBtYWxmb3JtZWQgb3IgdW5leHBlY3RlZCBYTUwgc3RydWN0dXJlc1xyXG4gIGVtZXJnZW5jeUNvbnRlbnRFeHRyYWN0aW9uKFxyXG4gICAgcmFuZ2UsXHJcbiAgICByZXNvbHZlZEZvcm1hdHRpbmcsXHJcbiAgICBjb250ZW50LFxyXG4gICAgZm9ybWF0dGVkQ29udGVudCxcclxuICAgIGZpbGVOYW1lXHJcbiAgKSB7XHJcbiAgICBjb25zb2xlLmxvZyhg8J+aqCBFbWVyZ2VuY3kgY29udGVudCBleHRyYWN0aW9uIGZvciB1bnVzdWFsIFhNTCBzdHJ1Y3R1cmVgKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBUcnkgdG8gZXh0cmFjdCBhbnkgdGV4dCBjb250ZW50IHVzaW5nIGRpZmZlcmVudCBhcHByb2FjaGVzXHJcbiAgICAgIGNvbnN0IGV4dHJhY3RlZFRleHRzID0gW107XHJcbiAgICAgIGNvbnN0IGV4dHJhY3RlZEJyZWFrcyA9IFtdO1xyXG5cclxuICAgICAgLy8gQXBwcm9hY2ggMTogRGlyZWN0IHByb3BlcnR5IGFjY2Vzc1xyXG4gICAgICBpZiAocmFuZ2UuQ29udGVudCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRzID0gQXJyYXkuaXNBcnJheShyYW5nZS5Db250ZW50KVxyXG4gICAgICAgICAgPyByYW5nZS5Db250ZW50XHJcbiAgICAgICAgICA6IFtyYW5nZS5Db250ZW50XTtcclxuICAgICAgICBjb250ZW50cy5mb3JFYWNoKChjKSA9PiB7XHJcbiAgICAgICAgICBpZiAodHlwZW9mIGMgPT09IFwic3RyaW5nXCIgJiYgYy50cmltKCkpIHtcclxuICAgICAgICAgICAgZXh0cmFjdGVkVGV4dHMucHVzaChjLnRyaW0oKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEFwcHJvYWNoIDI6IFNlYXJjaCBmb3IgYW55IHRleHQtbGlrZSBwcm9wZXJ0aWVzXHJcbiAgICAgIE9iamVjdC5rZXlzKHJhbmdlKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICB0eXBlb2YgcmFuZ2Vba2V5XSA9PT0gXCJzdHJpbmdcIiAmJlxyXG4gICAgICAgICAgcmFuZ2Vba2V5XS50cmltKCkgJiZcclxuICAgICAgICAgIGtleSAhPT0gXCJAX1NlbGZcIiAmJlxyXG4gICAgICAgICAgIWtleS5zdGFydHNXaXRoKFwiQF9cIilcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGV4dHJhY3RlZFRleHRzLnB1c2gocmFuZ2Vba2V5XS50cmltKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBBcHByb2FjaCAzOiBDb3VudCBhbnkgYnJlYWstbGlrZSBwcm9wZXJ0aWVzXHJcbiAgICAgIGlmIChyYW5nZS5CciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY29uc3QgYnJlYWtzID0gQXJyYXkuaXNBcnJheShyYW5nZS5CcikgPyByYW5nZS5CciA6IFtyYW5nZS5Ccl07XHJcbiAgICAgICAgZXh0cmFjdGVkQnJlYWtzLnB1c2goLi4uYnJlYWtzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQWRkIGV4dHJhY3RlZCBjb250ZW50XHJcbiAgICAgIGV4dHJhY3RlZFRleHRzLmZvckVhY2goKHRleHQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2xlYW5UZXh0ID0gSURNTFV0aWxzLmRlY29kZVhNTEVudGl0aWVzKHRleHQpO1xyXG4gICAgICAgIGNvbnRlbnQgKz0gY2xlYW5UZXh0O1xyXG4gICAgICAgIGZvcm1hdHRlZENvbnRlbnQucHVzaCh7XHJcbiAgICAgICAgICB0ZXh0OiBjbGVhblRleHQucmVwbGFjZSgvXFx1MjAyOC9nLCBcIlxcblwiKS5yZXBsYWNlKC9cXHUyMDI5L2csIFwiXFxuXFxuXCIpLFxyXG4gICAgICAgICAgZm9ybWF0dGluZzogcmVzb2x2ZWRGb3JtYXR0aW5nLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgIGDwn5qoIEVtZXJnZW5jeSBleHRyYWN0ZWQgY29udGVudFske2luZGV4fV06ICR7SlNPTi5zdHJpbmdpZnkoXHJcbiAgICAgICAgICAgIGNsZWFuVGV4dFxyXG4gICAgICAgICAgKX1gXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gQWRkIGJyZWFrcyBiZXR3ZWVuIGNvbnRlbnQgaXRlbXMgKHNpbXBsZSAxOjEgcmF0aW8pXHJcbiAgICAgICAgaWYgKGluZGV4IDwgZXh0cmFjdGVkQnJlYWtzLmxlbmd0aCkge1xyXG4gICAgICAgICAgY29uc3QgbGluZUJyZWFrVGV4dCA9IFwiXFxuXCI7XHJcbiAgICAgICAgICBjb250ZW50ICs9IGxpbmVCcmVha1RleHQ7XHJcbiAgICAgICAgICBmb3JtYXR0ZWRDb250ZW50LnB1c2goe1xyXG4gICAgICAgICAgICB0ZXh0OiBsaW5lQnJlYWtUZXh0XHJcbiAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcdTIwMjgvZywgXCJcXG5cIilcclxuICAgICAgICAgICAgICAucmVwbGFjZSgvXFx1MjAyOS9nLCBcIlxcblxcblwiKSxcclxuICAgICAgICAgICAgZm9ybWF0dGluZzoge1xyXG4gICAgICAgICAgICAgIGlzQnJlYWs6IHRydWUsXHJcbiAgICAgICAgICAgICAgYnJlYWtUeXBlOiBcImxpbmVcIixcclxuICAgICAgICAgICAgICBzb3VyY2U6IFwiZW1lcmdlbmN5IGV4dHJhY3Rpb25cIixcclxuICAgICAgICAgICAgICBlbWVyZ2VuY3lJbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgYPCfmqggRW1lcmdlbmN5IGV4dHJhY3RlZCBicmVha1ske2luZGV4fV06ICR7SlNPTi5zdHJpbmdpZnkoXHJcbiAgICAgICAgICAgICAgbGluZUJyZWFrVGV4dFxyXG4gICAgICAgICAgICApfWBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIEFkZCBhbnkgcmVtYWluaW5nIGJyZWFrcyBhdCB0aGUgZW5kXHJcbiAgICAgIGZvciAobGV0IGkgPSBleHRyYWN0ZWRUZXh0cy5sZW5ndGg7IGkgPCBleHRyYWN0ZWRCcmVha3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBsaW5lQnJlYWtUZXh0ID0gXCJcXG5cIjtcclxuICAgICAgICBjb250ZW50ICs9IGxpbmVCcmVha1RleHQ7XHJcbiAgICAgICAgZm9ybWF0dGVkQ29udGVudC5wdXNoKHtcclxuICAgICAgICAgIHRleHQ6IGxpbmVCcmVha1RleHRcclxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcdTIwMjgvZywgXCJcXG5cIilcclxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgXCJcXG5cXG5cIiksXHJcbiAgICAgICAgICBmb3JtYXR0aW5nOiB7XHJcbiAgICAgICAgICAgIGlzQnJlYWs6IHRydWUsXHJcbiAgICAgICAgICAgIGJyZWFrVHlwZTogXCJsaW5lXCIsXHJcbiAgICAgICAgICAgIHNvdXJjZTogXCJlbWVyZ2VuY3kgdHJhaWxpbmcgYnJlYWtcIixcclxuICAgICAgICAgICAgZW1lcmdlbmN5SW5kZXg6IGksXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgIGDwn5qoIEVtZXJnZW5jeSBleHRyYWN0ZWQgdHJhaWxpbmcgYnJlYWtbJHtpfV06ICR7SlNPTi5zdHJpbmdpZnkoXHJcbiAgICAgICAgICAgIGxpbmVCcmVha1RleHRcclxuICAgICAgICAgICl9YFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIGDinIUgRW1lcmdlbmN5IGV4dHJhY3Rpb24gc3VjY2Vzc2Z1bDogJHtleHRyYWN0ZWRUZXh0cy5sZW5ndGh9IHRleHRzLCAke2V4dHJhY3RlZEJyZWFrcy5sZW5ndGh9IGJyZWFrc2BcclxuICAgICAgKTtcclxuICAgIH0gY2F0Y2ggKGVtZXJnZW5jeUVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5KAIEVtZXJnZW5jeSBleHRyYWN0aW9uIGZhaWxlZDogJHtlbWVyZ2VuY3lFcnJvci5tZXNzYWdlfWApO1xyXG4gICAgICAvLyBMYXN0IHJlc29ydDoganVzdCBhZGQgYSB3YXJuaW5nIGNvbW1lbnRcclxuICAgICAgY29uc3Qgd2FybmluZ1RleHQgPSBcIjwhLS0gWE1MIHBhcnNpbmcgZXJyb3IgLS0+XCI7XHJcbiAgICAgIGNvbnRlbnQgKz0gd2FybmluZ1RleHQ7XHJcbiAgICAgIGZvcm1hdHRlZENvbnRlbnQucHVzaCh7XHJcbiAgICAgICAgdGV4dDogd2FybmluZ1RleHQucmVwbGFjZSgvXFx1MjAyOC9nLCBcIlxcblwiKS5yZXBsYWNlKC9cXHUyMDI5L2csIFwiXFxuXFxuXCIpLFxyXG4gICAgICAgIGZvcm1hdHRpbmc6IHJlc29sdmVkRm9ybWF0dGluZyxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgfVxyXG5cclxuICAvLyBQcm9jZXNzIGludGVybGVhdmVkIENvbnRlbnQgYW5kIEJyIGVsZW1lbnRzIC0gRlVMTFkgRFlOQU1JQ1xyXG4gIHByb2Nlc3NJbnRlcmxlYXZlZENvbnRlbnRBbmRCcihcclxuICAgIHJhbmdlLFxyXG4gICAgcmVzb2x2ZWRGb3JtYXR0aW5nLFxyXG4gICAgY29udGVudCxcclxuICAgIGZvcm1hdHRlZENvbnRlbnQsXHJcbiAgICBkZWJ1Z0luZm8sXHJcbiAgICBmaWxlTmFtZVxyXG4gICkge1xyXG4gICAgY29uc3QgY29udGVudHMgPSBBcnJheS5pc0FycmF5KHJhbmdlLkNvbnRlbnQpXHJcbiAgICAgID8gcmFuZ2UuQ29udGVudFxyXG4gICAgICA6IFtyYW5nZS5Db250ZW50XTtcclxuICAgIGNvbnN0IGJyRWxlbWVudHMgPSBBcnJheS5pc0FycmF5KHJhbmdlLkJyKSA/IHJhbmdlLkJyIDogW3JhbmdlLkJyXTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhcclxuICAgICAgYPCflKcgUHJvY2Vzc2luZyBpbnRlcmxlYXZlZCBjb250ZW50OiAke2NvbnRlbnRzLmxlbmd0aH0gY29udGVudCBpdGVtcywgJHtickVsZW1lbnRzLmxlbmd0aH0gQnIgZWxlbWVudHNgXHJcbiAgICApO1xyXG5cclxuICAgIC8vIEVER0UgQ0FTRTogTm8gY29udGVudCBvciBicmVha3NcclxuICAgIGlmICghcmFuZ2UuQ29udGVudCAmJiAhcmFuZ2UuQnIpIHtcclxuICAgICAgY29uc29sZS5sb2coYOKaoO+4jyBObyBjb250ZW50IG9yIGJyZWFrcyB0byBwcm9jZXNzIGluIHJhbmdlYCk7XHJcbiAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEVER0UgQ0FTRTogT25seSBjb250ZW50LCBubyBicmVha3NcclxuICAgIGlmIChyYW5nZS5Db250ZW50ICYmICFyYW5nZS5Ccikge1xyXG4gICAgICBjb25zb2xlLmxvZyhg8J+TnSBPbmx5IGNvbnRlbnQsIG5vIGJyZWFrcyAtIHByb2Nlc3NpbmcgY29udGVudCBvbmx5YCk7XHJcbiAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NDb250ZW50RWxlbWVudHMoXHJcbiAgICAgICAgcmFuZ2UsXHJcbiAgICAgICAgcmVzb2x2ZWRGb3JtYXR0aW5nLFxyXG4gICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgZm9ybWF0dGVkQ29udGVudCxcclxuICAgICAgICBmaWxlTmFtZVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEVER0UgQ0FTRTogT25seSBicmVha3MsIG5vIGNvbnRlbnRcclxuICAgIGlmICghcmFuZ2UuQ29udGVudCAmJiByYW5nZS5Ccikge1xyXG4gICAgICBjb25zb2xlLmxvZyhg8J+UlyBPbmx5IGJyZWFrcywgbm8gY29udGVudCAtIHByb2Nlc3NpbmcgYnJlYWtzIG9ubHlgKTtcclxuICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc0JyRWxlbWVudHMoXHJcbiAgICAgICAgcmFuZ2UsXHJcbiAgICAgICAgY29udGVudCxcclxuICAgICAgICBmb3JtYXR0ZWRDb250ZW50LFxyXG4gICAgICAgIGRlYnVnSW5mbyxcclxuICAgICAgICAwLFxyXG4gICAgICAgIGZpbGVOYW1lXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRFlOQU1JQzogVHJ5IHRvIHVzZSBjYWNoZWQgZG9jdW1lbnQgb3JkZXIgaWYgYXZhaWxhYmxlXHJcbiAgICBjb25zdCBjYWNoZWRPcmRlciA9XHJcbiAgICAgIHRoaXMuZG9jdW1lbnRPcmRlckNhY2hlICYmIHRoaXMuZG9jdW1lbnRPcmRlckNhY2hlW2ZpbGVOYW1lXTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIGNhY2hlZE9yZGVyICYmXHJcbiAgICAgIGNhY2hlZE9yZGVyLmJyZWFrUGF0dGVybiAmJlxyXG4gICAgICBjYWNoZWRPcmRlci5icmVha1BhdHRlcm4ubGVuZ3RoID4gMFxyXG4gICAgKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIGDinIUgVXNpbmcgY2FjaGVkIGRvY3VtZW50IG9yZGVyIGZvciBwcmVjaXNlIGJyZWFrIGRpc3RyaWJ1dGlvbmBcclxuICAgICAgKTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzQ29udGVudFdpdGhDYWNoZWRQYXR0ZXJuKFxyXG4gICAgICAgICAgY29udGVudHMsXHJcbiAgICAgICAgICByZXNvbHZlZEZvcm1hdHRpbmcsXHJcbiAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgZm9ybWF0dGVkQ29udGVudCxcclxuICAgICAgICAgIGNhY2hlZE9yZGVyLmJyZWFrUGF0dGVybixcclxuICAgICAgICAgIGZpbGVOYW1lXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgIGDinYwgRXJyb3IgdXNpbmcgY2FjaGVkIHBhdHRlcm46ICR7ZXJyb3IubWVzc2FnZX0sIGZhbGxpbmcgYmFjayB0byBkeW5hbWljIGRpc3RyaWJ1dGlvbmBcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICBg4pqg77iPIE5vIGNhY2hlZCBkb2N1bWVudCBvcmRlciBhdmFpbGFibGUsIHVzaW5nIGR5bmFtaWMgZmFsbGJhY2sgZGlzdHJpYnV0aW9uYFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERZTkFNSUMgRkFMTEJBQ0s6IERpc3RyaWJ1dGUgYnJlYWtzIGludGVsbGlnZW50bHkgYmFzZWQgb24gY29udGVudCBzdHJ1Y3R1cmVcclxuICAgIHJldHVybiB0aGlzLnByb2Nlc3NJbnRlcmxlYXZlZENvbnRlbnREeW5hbWljRmFsbGJhY2soXHJcbiAgICAgIGNvbnRlbnRzLFxyXG4gICAgICBickVsZW1lbnRzLFxyXG4gICAgICByZXNvbHZlZEZvcm1hdHRpbmcsXHJcbiAgICAgIGNvbnRlbnQsXHJcbiAgICAgIGZvcm1hdHRlZENvbnRlbnQsXHJcbiAgICAgIGZpbGVOYW1lXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gRFlOQU1JQyBGQUxMQkFDSzogSW50ZWxsaWdlbnQgYnJlYWsgZGlzdHJpYnV0aW9uIGZvciBhbnkgY29udGVudCBzdHJ1Y3R1cmVcclxuICBwcm9jZXNzSW50ZXJsZWF2ZWRDb250ZW50RHluYW1pY0ZhbGxiYWNrKFxyXG4gICAgY29udGVudHMsXHJcbiAgICBickVsZW1lbnRzLFxyXG4gICAgcmVzb2x2ZWRGb3JtYXR0aW5nLFxyXG4gICAgY29udGVudCxcclxuICAgIGZvcm1hdHRlZENvbnRlbnQsXHJcbiAgICBmaWxlTmFtZVxyXG4gICkge1xyXG4gICAgY29uc29sZS5sb2coXHJcbiAgICAgIGDwn5SEIFVzaW5nIGR5bmFtaWMgZmFsbGJhY2sgZm9yICR7Y29udGVudHMubGVuZ3RofSBjb250ZW50IGl0ZW1zIGFuZCAke2JyRWxlbWVudHMubGVuZ3RofSBicmVha3NgXHJcbiAgICApO1xyXG5cclxuICAgIGxldCBickluZGV4ID0gMDtcclxuICAgIGNvbnN0IGNvbnRlbnRMZW5ndGggPSBjb250ZW50cy5sZW5ndGg7XHJcblxyXG4gICAgY29udGVudHMuZm9yRWFjaCgoY29udGVudEl0ZW0sIGNvbnRlbnRJbmRleCkgPT4ge1xyXG4gICAgICAvLyBBZGQgdGhlIGNvbnRlbnRcclxuICAgICAgY29uc3QgdGV4dCA9IElETUxVdGlscy5kZWNvZGVYTUxFbnRpdGllcyhTdHJpbmcoY29udGVudEl0ZW0pKTtcclxuICAgICAgY29udGVudCArPSB0ZXh0O1xyXG4gICAgICBmb3JtYXR0ZWRDb250ZW50LnB1c2goe1xyXG4gICAgICAgIHRleHQ6IHRleHQucmVwbGFjZSgvXFx1MjAyOC9nLCBcIlxcblwiKS5yZXBsYWNlKC9cXHUyMDI5L2csIFwiXFxuXFxuXCIpLFxyXG4gICAgICAgIGZvcm1hdHRpbmc6IHJlc29sdmVkRm9ybWF0dGluZyxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZyhg8J+UpyBBZGRlZCBjb250ZW50WyR7Y29udGVudEluZGV4fV06ICR7SlNPTi5zdHJpbmdpZnkodGV4dCl9YCk7XHJcblxyXG4gICAgICAvLyBEWU5BTUlDOiBDYWxjdWxhdGUgaG93IG1hbnkgYnJlYWtzIHRvIGFkZCBhZnRlciB0aGlzIGNvbnRlbnRcclxuICAgICAgY29uc3QgYnJlYWtzVG9BZGQgPSB0aGlzLmNhbGN1bGF0ZUJyZWFrc0FmdGVyQ29udGVudChcclxuICAgICAgICBjb250ZW50SW5kZXgsXHJcbiAgICAgICAgY29udGVudExlbmd0aCxcclxuICAgICAgICBickVsZW1lbnRzLmxlbmd0aFxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gQWRkIHRoZSBjYWxjdWxhdGVkIG51bWJlciBvZiBicmVha3NcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBicmVha3NUb0FkZCAmJiBickluZGV4IDwgYnJFbGVtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGxpbmVCcmVha1RleHQgPSBcIlxcblwiO1xyXG4gICAgICAgIGNvbnRlbnQgKz0gbGluZUJyZWFrVGV4dDtcclxuICAgICAgICBmb3JtYXR0ZWRDb250ZW50LnB1c2goe1xyXG4gICAgICAgICAgdGV4dDogbGluZUJyZWFrVGV4dFxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXFx1MjAyOC9nLCBcIlxcblwiKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXFx1MjAyOS9nLCBcIlxcblxcblwiKSxcclxuICAgICAgICAgIGZvcm1hdHRpbmc6IHtcclxuICAgICAgICAgICAgaXNCcmVhazogdHJ1ZSxcclxuICAgICAgICAgICAgYnJlYWtUeXBlOiBcImxpbmVcIixcclxuICAgICAgICAgICAgc291cmNlOiBcImR5bmFtaWMgZmFsbGJhY2sgZGlzdHJpYnV0aW9uXCIsXHJcbiAgICAgICAgICAgIGJySW5kZXg6IGJySW5kZXgsXHJcbiAgICAgICAgICAgIGFmdGVyQ29udGVudDogY29udGVudEluZGV4LFxyXG4gICAgICAgICAgICBjYWxjdWxhdGVkQnJlYWtzOiBicmVha3NUb0FkZCxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgYPCflKcgQWRkZWQgQnJbJHtickluZGV4fV0gYWZ0ZXIgY29udGVudFske2NvbnRlbnRJbmRleH1dOiAke0pTT04uc3RyaW5naWZ5KFxyXG4gICAgICAgICAgICBsaW5lQnJlYWtUZXh0XHJcbiAgICAgICAgICApfWBcclxuICAgICAgICApO1xyXG4gICAgICAgIGJySW5kZXgrKztcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRURHRSBDQVNFOiBIYW5kbGUgYW55IHJlbWFpbmluZyBicmVha3NcclxuICAgIGlmIChickluZGV4IDwgYnJFbGVtZW50cy5sZW5ndGgpIHtcclxuICAgICAgY29uc3QgcmVtYWluaW5nQnJlYWtzID0gYnJFbGVtZW50cy5sZW5ndGggLSBickluZGV4O1xyXG4gICAgICBjb25zb2xlLmxvZyhg8J+UpyBBZGRpbmcgJHtyZW1haW5pbmdCcmVha3N9IHJlbWFpbmluZyBicmVha3MgYXQgdGhlIGVuZGApO1xyXG5cclxuICAgICAgd2hpbGUgKGJySW5kZXggPCBickVsZW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGxpbmVCcmVha1RleHQgPSBcIlxcblwiO1xyXG4gICAgICAgIGNvbnRlbnQgKz0gbGluZUJyZWFrVGV4dDtcclxuICAgICAgICBmb3JtYXR0ZWRDb250ZW50LnB1c2goe1xyXG4gICAgICAgICAgdGV4dDogbGluZUJyZWFrVGV4dFxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXFx1MjAyOC9nLCBcIlxcblwiKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXFx1MjAyOS9nLCBcIlxcblxcblwiKSxcclxuICAgICAgICAgIGZvcm1hdHRpbmc6IHtcclxuICAgICAgICAgICAgaXNCcmVhazogdHJ1ZSxcclxuICAgICAgICAgICAgYnJlYWtUeXBlOiBcImxpbmVcIixcclxuICAgICAgICAgICAgc291cmNlOiBcInRyYWlsaW5nIGJyZWFrcyAoZHluYW1pYyBmYWxsYmFjaylcIixcclxuICAgICAgICAgICAgYnJJbmRleDogYnJJbmRleCxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgYPCflKcgQWRkZWQgdHJhaWxpbmcgQnJbJHtickluZGV4fV06ICR7SlNPTi5zdHJpbmdpZnkobGluZUJyZWFrVGV4dCl9YFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgYnJJbmRleCsrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVkFMSURBVElPTjogRW5zdXJlIGFsbCBicmVha3Mgd2VyZSBwcm9jZXNzZWRcclxuICAgIGlmIChickluZGV4ICE9PSBickVsZW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICBg4pqg77iPIFdhcm5pbmc6IEV4cGVjdGVkIHRvIHByb2Nlc3MgJHtickVsZW1lbnRzLmxlbmd0aH0gYnJlYWtzIGJ1dCBwcm9jZXNzZWQgJHtickluZGV4fWBcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY29udGVudDtcclxuICB9XHJcblxyXG4gIC8vIFByb2Nlc3MgY29udGVudCB1c2luZyBjYWNoZWQgZG9jdW1lbnQgb3JkZXIgcGF0dGVybiAtIEZVTExZIERZTkFNSUNcclxuICBwcm9jZXNzQ29udGVudFdpdGhDYWNoZWRQYXR0ZXJuKFxyXG4gICAgY29udGVudHMsXHJcbiAgICByZXNvbHZlZEZvcm1hdHRpbmcsXHJcbiAgICBjb250ZW50LFxyXG4gICAgZm9ybWF0dGVkQ29udGVudCxcclxuICAgIGJyZWFrUGF0dGVybixcclxuICAgIGZpbGVOYW1lXHJcbiAgKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcclxuICAgICAgYPCfjq8gUHJvY2Vzc2luZyAke2NvbnRlbnRzLmxlbmd0aH0gY29udGVudCBpdGVtcyB3aXRoIGNhY2hlZCBwYXR0ZXJuICgke2JyZWFrUGF0dGVybi5sZW5ndGh9IHBhdHRlcm4gZW50cmllcylgXHJcbiAgICApO1xyXG5cclxuICAgIC8vIERZTkFNSUM6IEhhbmRsZSBhbnkgbnVtYmVyIG9mIGNvbnRlbnQgaXRlbXMgYW5kIGFueSBicmVhayBkaXN0cmlidXRpb25cclxuICAgIGNvbnRlbnRzLmZvckVhY2goKGNvbnRlbnRJdGVtLCBjb250ZW50SW5kZXgpID0+IHtcclxuICAgICAgLy8gQWRkIHRoZSBjb250ZW50XHJcbiAgICAgIGNvbnN0IHRleHQgPSBJRE1MVXRpbHMuZGVjb2RlWE1MRW50aXRpZXMoU3RyaW5nKGNvbnRlbnRJdGVtKSk7XHJcbiAgICAgIGNvbnRlbnQgKz0gdGV4dDtcclxuICAgICAgZm9ybWF0dGVkQ29udGVudC5wdXNoKHtcclxuICAgICAgICB0ZXh0OiB0ZXh0LnJlcGxhY2UoL1xcdTIwMjgvZywgXCJcXG5cIikucmVwbGFjZSgvXFx1MjAyOS9nLCBcIlxcblxcblwiKSxcclxuICAgICAgICBmb3JtYXR0aW5nOiByZXNvbHZlZEZvcm1hdHRpbmcsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coYPCflKcgQWRkZWQgY29udGVudFske2NvbnRlbnRJbmRleH1dOiAke0pTT04uc3RyaW5naWZ5KHRleHQpfWApO1xyXG5cclxuICAgICAgLy8gRFlOQU1JQzogRmluZCB0aGUgY29ycmVzcG9uZGluZyBwYXR0ZXJuIGVudHJ5XHJcbiAgICAgIGNvbnN0IHBhdHRlcm5FbnRyeSA9IGJyZWFrUGF0dGVybi5maW5kKFxyXG4gICAgICAgIChwKSA9PiBwLmNvbnRlbnRJbmRleCA9PT0gY29udGVudEluZGV4XHJcbiAgICAgICk7XHJcbiAgICAgIGlmIChwYXR0ZXJuRW50cnkpIHtcclxuICAgICAgICBjb25zdCBicmVha3NUb0FkZCA9IHBhdHRlcm5FbnRyeS5icmVha3NBZnRlcjtcclxuICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgIGDwn46vIFBhdHRlcm4gc2F5cyBjb250ZW50WyR7Y29udGVudEluZGV4fV0gc2hvdWxkIGhhdmUgJHticmVha3NUb0FkZH0gYnJlYWtzIGFmdGVyIGl0YFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIERZTkFNSUM6IEFkZCB0aGUgZXhhY3QgbnVtYmVyIG9mIGJyZWFrcyBzcGVjaWZpZWQgaW4gdGhlIHBhdHRlcm5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJyZWFrc1RvQWRkOyBpKyspIHtcclxuICAgICAgICAgIGNvbnN0IGxpbmVCcmVha1RleHQgPSBcIlxcblwiO1xyXG4gICAgICAgICAgY29udGVudCArPSBsaW5lQnJlYWtUZXh0O1xyXG4gICAgICAgICAgZm9ybWF0dGVkQ29udGVudC5wdXNoKHtcclxuICAgICAgICAgICAgdGV4dDogbGluZUJyZWFrVGV4dFxyXG4gICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHUyMDI4L2csIFwiXFxuXCIpXHJcbiAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgXCJcXG5cXG5cIiksXHJcbiAgICAgICAgICAgIGZvcm1hdHRpbmc6IHtcclxuICAgICAgICAgICAgICBpc0JyZWFrOiB0cnVlLFxyXG4gICAgICAgICAgICAgIGJyZWFrVHlwZTogXCJsaW5lXCIsXHJcbiAgICAgICAgICAgICAgc291cmNlOiBcInByZWNpc2UgZG9jdW1lbnQgb3JkZXJcIixcclxuICAgICAgICAgICAgICBjb250ZW50SW5kZXg6IGNvbnRlbnRJbmRleCxcclxuICAgICAgICAgICAgICBicmVha0luZGV4OiBpLFxyXG4gICAgICAgICAgICAgIHRvdGFsQnJlYWtzQWZ0ZXJDb250ZW50OiBicmVha3NUb0FkZCxcclxuICAgICAgICAgICAgICBwYXR0ZXJuRW50cnk6IHBhdHRlcm5FbnRyeSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICBg8J+OryBBZGRlZCBwcmVjaXNlIEJyWyR7XHJcbiAgICAgICAgICAgICAgaSArIDFcclxuICAgICAgICAgICAgfS8ke2JyZWFrc1RvQWRkfV0gYWZ0ZXIgY29udGVudFske2NvbnRlbnRJbmRleH1dOiAke0pTT04uc3RyaW5naWZ5KFxyXG4gICAgICAgICAgICAgIGxpbmVCcmVha1RleHRcclxuICAgICAgICAgICAgKX1gXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgIGDimqDvuI8gTm8gcGF0dGVybiBlbnRyeSBmb3VuZCBmb3IgY29udGVudFske2NvbnRlbnRJbmRleH1dIC0gdGhpcyBpcyB1bnVzdWFsIGJ1dCBub3QgY3JpdGljYWxgXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyBEWU5BTUlDOiBJZiBubyBwYXR0ZXJuIGVudHJ5LCBkb24ndCBhZGQgYW55IGJyZWFrcyAodGhlIHBhdHRlcm4gc2hvdWxkIGNvdmVyIGFsbCBjb250ZW50KVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBWQUxJREFUSU9OOiBDaGVjayBpZiB3ZSBwcm9jZXNzZWQgYWxsIGV4cGVjdGVkIGNvbnRlbnRcclxuICAgIGNvbnN0IGV4cGVjdGVkQ29udGVudENvdW50ID0gYnJlYWtQYXR0ZXJuLmxlbmd0aDtcclxuICAgIGlmIChjb250ZW50cy5sZW5ndGggIT09IGV4cGVjdGVkQ29udGVudENvdW50KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIGDimqDvuI8gV2FybmluZzogRXhwZWN0ZWQgJHtleHBlY3RlZENvbnRlbnRDb3VudH0gY29udGVudCBpdGVtcyBidXQgcHJvY2Vzc2VkICR7Y29udGVudHMubGVuZ3RofWBcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY29udGVudDtcclxuICB9XHJcblxyXG4gIC8vIERZTkFNSUM6IENhbGN1bGF0ZSBicmVha3MgZGlzdHJpYnV0aW9uIGFzIGZhbGxiYWNrIC0gY29tcGxldGVseSBnZW5lcmljXHJcbiAgY2FsY3VsYXRlQnJlYWtzQWZ0ZXJDb250ZW50KGNvbnRlbnRJbmRleCwgdG90YWxDb250ZW50LCB0b3RhbEJyZWFrcykge1xyXG4gICAgY29uc29sZS5sb2coXHJcbiAgICAgIGDwn5SnIEZBTExCQUNLOiBDYWxjdWxhdGluZyBicmVha3MgZm9yIGNvbnRlbnRbJHtjb250ZW50SW5kZXh9XSBvZiAke3RvdGFsQ29udGVudH0gdG90YWwsICR7dG90YWxCcmVha3N9IHRvdGFsIGJyZWFrc2BcclxuICAgICk7XHJcblxyXG4gICAgLy8gRURHRSBDQVNFOiBObyBicmVha3MgdG8gZGlzdHJpYnV0ZVxyXG4gICAgaWYgKHRvdGFsQnJlYWtzID09PSAwKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5SnIE5vIGJyZWFrcyB0byBkaXN0cmlidXRlYCk7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEVER0UgQ0FTRTogT25seSBvbmUgY29udGVudCBpdGVtXHJcbiAgICBpZiAodG90YWxDb250ZW50ID09PSAxKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5SnIFNpbmdsZSBjb250ZW50IGl0ZW0gZ2V0cyBhbGwgJHt0b3RhbEJyZWFrc30gYnJlYWtzYCk7XHJcbiAgICAgIHJldHVybiBjb250ZW50SW5kZXggPT09IDAgPyB0b3RhbEJyZWFrcyA6IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRURHRSBDQVNFOiBMYXN0IGNvbnRlbnQgaXRlbVxyXG4gICAgaWYgKGNvbnRlbnRJbmRleCA9PT0gdG90YWxDb250ZW50IC0gMSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICBg8J+UpyBMYXN0IGNvbnRlbnQgaXRlbSBnZXRzIG5vIGJyZWFrcyBpbiBzdGFuZGFyZCBkaXN0cmlidXRpb25gXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERZTkFNSUM6IERpc3RyaWJ1dGUgYnJlYWtzIGFtb25nIG5vbi1sYXN0IGNvbnRlbnQgaXRlbXNcclxuICAgIGNvbnN0IG5vbkxhc3RDb250ZW50SXRlbXMgPSB0b3RhbENvbnRlbnQgLSAxO1xyXG4gICAgY29uc3QgYmFzZUJyZWFrcyA9IE1hdGguZmxvb3IodG90YWxCcmVha3MgLyBub25MYXN0Q29udGVudEl0ZW1zKTtcclxuICAgIGNvbnN0IGV4dHJhQnJlYWtzID0gdG90YWxCcmVha3MgJSBub25MYXN0Q29udGVudEl0ZW1zO1xyXG5cclxuICAgIC8vIERZTkFNSUM6IERpc3RyaWJ1dGUgZXh0cmEgYnJlYWtzIHN0YXJ0aW5nIGZyb20gdGhlIGVuZCB0byBtYXRjaCBjb21tb24gSURNTCBwYXR0ZXJuc1xyXG4gICAgLy8gd2hlcmUgbGF0ZXIgY29udGVudCB0ZW5kcyB0byBoYXZlIG1vcmUgYnJlYWtzXHJcbiAgICBjb25zdCBicmVha3NGb3JUaGlzQ29udGVudCA9XHJcbiAgICAgIGJhc2VCcmVha3MgKyAoY29udGVudEluZGV4ID49IG5vbkxhc3RDb250ZW50SXRlbXMgLSBleHRyYUJyZWFrcyA/IDEgOiAwKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhcclxuICAgICAgYPCflKcgQ29udGVudFske2NvbnRlbnRJbmRleH1dIGdldHMgJHticmVha3NGb3JUaGlzQ29udGVudH0gYnJlYWtzIChiYXNlOiAke2Jhc2VCcmVha3N9LCBleHRyYTogJHtleHRyYUJyZWFrc30pYFxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gYnJlYWtzRm9yVGhpc0NvbnRlbnQ7XHJcbiAgfVxyXG5cclxuICAvLyBQcm9jZXNzIG9ubHkgQ29udGVudCBlbGVtZW50c1xyXG4gIHByb2Nlc3NDb250ZW50RWxlbWVudHMoXHJcbiAgICByYW5nZSxcclxuICAgIHJlc29sdmVkRm9ybWF0dGluZyxcclxuICAgIGNvbnRlbnQsXHJcbiAgICBmb3JtYXR0ZWRDb250ZW50LFxyXG4gICAgZmlsZU5hbWVcclxuICApIHtcclxuICAgIGNvbnN0IGNvbnRlbnRzID0gQXJyYXkuaXNBcnJheShyYW5nZS5Db250ZW50KVxyXG4gICAgICA/IHJhbmdlLkNvbnRlbnRcclxuICAgICAgOiBbcmFuZ2UuQ29udGVudF07XHJcblxyXG4gICAgY29udGVudHMuZm9yRWFjaCgoY29udGVudEl0ZW0pID0+IHtcclxuICAgICAgY29uc3QgdGV4dCA9IElETUxVdGlscy5kZWNvZGVYTUxFbnRpdGllcyhTdHJpbmcoY29udGVudEl0ZW0pKTtcclxuICAgICAgY29udGVudCArPSB0ZXh0O1xyXG4gICAgICBmb3JtYXR0ZWRDb250ZW50LnB1c2goe1xyXG4gICAgICAgIHRleHQ6IHRleHQucmVwbGFjZSgvXFx1MjAyOC9nLCBcIlxcblwiKS5yZXBsYWNlKC9cXHUyMDI5L2csIFwiXFxuXFxuXCIpLFxyXG4gICAgICAgIGZvcm1hdHRpbmc6IHJlc29sdmVkRm9ybWF0dGluZyxcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBjb250ZW50O1xyXG4gIH1cclxuXHJcbiAgLy8gUHJvY2VzcyBvbmx5IEJyIGVsZW1lbnRzXHJcbiAgcHJvY2Vzc0JyRWxlbWVudHMoXHJcbiAgICByYW5nZSxcclxuICAgIGNvbnRlbnQsXHJcbiAgICBmb3JtYXR0ZWRDb250ZW50LFxyXG4gICAgZGVidWdJbmZvLFxyXG4gICAgcmFuZ2VJbmRleCxcclxuICAgIGZpbGVOYW1lXHJcbiAgKSB7XHJcbiAgICBjb25zdCBickVsZW1lbnRzID0gQXJyYXkuaXNBcnJheShyYW5nZS5CcikgPyByYW5nZS5CciA6IFtyYW5nZS5Ccl07XHJcblxyXG4gICAgYnJFbGVtZW50cy5mb3JFYWNoKChiciwgYnJJbmRleCkgPT4ge1xyXG4gICAgICBjb25zdCBsaW5lQnJlYWtUZXh0ID0gXCJcXG5cIjtcclxuICAgICAgY29udGVudCArPSBsaW5lQnJlYWtUZXh0O1xyXG4gICAgICBmb3JtYXR0ZWRDb250ZW50LnB1c2goe1xyXG4gICAgICAgIHRleHQ6IGxpbmVCcmVha1RleHQucmVwbGFjZSgvXFx1MjAyOC9nLCBcIlxcblwiKS5yZXBsYWNlKC9cXHUyMDI5L2csIFwiXFxuXFxuXCIpLFxyXG4gICAgICAgIGZvcm1hdHRpbmc6IHtcclxuICAgICAgICAgIGlzQnJlYWs6IHRydWUsXHJcbiAgICAgICAgICBicmVha1R5cGU6IFwibGluZVwiLFxyXG4gICAgICAgICAgc291cmNlOiBcInN0YW5kYWxvbmUgQnIgZWxlbWVudFwiLFxyXG4gICAgICAgICAgcmFuZ2VJbmRleDogcmFuZ2VJbmRleCxcclxuICAgICAgICAgIGJySW5kZXg6IGJySW5kZXgsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBkZWJ1Z0luZm8ucHVzaCh7XHJcbiAgICAgICAgdHlwZTogXCJTdGFuZGFsb25lIEJyIGVsZW1lbnRcIixcclxuICAgICAgICBsb2NhdGlvbjogYENoYXJhY3RlclN0eWxlUmFuZ2VbJHtyYW5nZUluZGV4fV0sIEJyWyR7YnJJbmRleH1dYCxcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBjb250ZW50O1xyXG4gIH1cclxuXHJcbiAgLy8gQWRkIHRoaXMgaGVscGVyIG1ldGhvZCB0byBiZXR0ZXIgaGFuZGxlIG1peGVkIGNvbnRlbnQgYW5kIEJyIGVsZW1lbnRzXHJcbiAgYW5hbHl6ZUNvbnRlbnRTdHJ1Y3R1cmUocmFuZ2UpIHtcclxuICAgIGNvbnN0IHN0cnVjdHVyZSA9IHtcclxuICAgICAgaGFzQ29udGVudDogISFyYW5nZS5Db250ZW50LFxyXG4gICAgICBoYXNCcjogcmFuZ2UuQnIgIT09IHVuZGVmaW5lZCxcclxuICAgICAgY29udGVudEl0ZW1zOiByYW5nZS5Db250ZW50XHJcbiAgICAgICAgPyBBcnJheS5pc0FycmF5KHJhbmdlLkNvbnRlbnQpXHJcbiAgICAgICAgICA/IHJhbmdlLkNvbnRlbnRcclxuICAgICAgICAgIDogW3JhbmdlLkNvbnRlbnRdXHJcbiAgICAgICAgOiBbXSxcclxuICAgICAgYnJFbGVtZW50czogcmFuZ2UuQnJcclxuICAgICAgICA/IEFycmF5LmlzQXJyYXkocmFuZ2UuQnIpXHJcbiAgICAgICAgICA/IHJhbmdlLkJyXHJcbiAgICAgICAgICA6IFtyYW5nZS5Ccl1cclxuICAgICAgICA6IFtdLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhcIkNvbnRlbnQgc3RydWN0dXJlIGFuYWx5c2lzOlwiLCBzdHJ1Y3R1cmUpO1xyXG4gICAgcmV0dXJuIHN0cnVjdHVyZTtcclxuICB9XHJcblxyXG4gIC8vIEVuaGFuY2VkIGhlbHBlciBmb3IgcHJvY2Vzc2luZyBpbnRlcmxlYXZlZCBjb250ZW50IGFuZCBicmVha3NcclxuICBwcm9jZXNzSW50ZXJsZWF2ZWRDb250ZW50KHJhbmdlLCByZXNvbHZlZEZvcm1hdHRpbmcpIHtcclxuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcclxuICAgIGxldCBjb250ZW50ID0gXCJcIjtcclxuXHJcbiAgICAvLyBUaGlzIG1ldGhvZCB3b3VsZCBuZWVkIGFjY2VzcyB0byB0aGUgYWN0dWFsIFhNTCBzdHJ1Y3R1cmUgdG8gZGV0ZXJtaW5lXHJcbiAgICAvLyB0aGUgZXhhY3Qgb3JkZXIgb2YgQ29udGVudCBhbmQgQnIgZWxlbWVudHMuIEZvciBub3csIHdlJ2xsIHVzZSB0aGVcclxuICAgIC8vIGFwcHJvYWNoIGFib3ZlIHdoaWNoIGhhbmRsZXMgdGhlIG1vc3QgY29tbW9uIGNhc2UuXHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgfVxyXG5cclxuICAvLyBTT1BISVNUSUNBVEVEOiBIZWxwZXIgbWV0aG9kIHRvIGV4dHJhY3QgQnIgZWxlbWVudHMgd2l0aCBjb250ZXh0XHJcbiAgZXh0cmFjdEJyRWxlbWVudHMocmFuZ2UpIHtcclxuICAgIGNvbnN0IGJyRWxlbWVudHMgPSBbXTtcclxuXHJcbiAgICBpZiAocmFuZ2UuQnIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIvCflKcgUHJvY2Vzc2luZyBCciBlbGVtZW50czpcIiwge1xyXG4gICAgICAgIGlzQXJyYXk6IEFycmF5LmlzQXJyYXkocmFuZ2UuQnIpLFxyXG4gICAgICAgIGNvdW50OiBBcnJheS5pc0FycmF5KHJhbmdlLkJyKSA/IHJhbmdlLkJyLmxlbmd0aCA6IDEsXHJcbiAgICAgICAgcmF3QnI6IHJhbmdlLkJyLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJhbmdlLkJyKSkge1xyXG4gICAgICAgIHJhbmdlLkJyLmZvckVhY2goKGJyLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgYnJFbGVtZW50cy5wdXNoKHtcclxuICAgICAgICAgICAgdHlwZTogXCJsaW5lXCIsXHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBpbmRleCA9PT0gMCA/IFwic3RhcnRcIiA6IFwibWlkZGxlXCIsXHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IGJyLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICBg8J+UpyBDcmVhdGVkICR7YnJFbGVtZW50cy5sZW5ndGh9IGxpbmUgYnJlYWsgZWxlbWVudHMgZnJvbSBhcnJheSAtIEVBQ0ggU0hPVUxEIENSRUFURSBPTkUgXFxcXG5gXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBickVsZW1lbnRzLnB1c2goe1xyXG4gICAgICAgICAgdHlwZTogXCJsaW5lXCIsXHJcbiAgICAgICAgICBwb3NpdGlvbjogXCJlbmRcIixcclxuICAgICAgICAgIGVsZW1lbnQ6IHJhbmdlLkJyLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi8J+UpyBDcmVhdGVkIDEgbGluZSBicmVhayBlbGVtZW50IGZyb20gc2luZ2xlIEJyXCIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGJyRWxlbWVudHM7XHJcbiAgfVxyXG5cclxuICAvLyBTT1BISVNUSUNBVEVEOiBEZXRlcm1pbmUgdGhlIGFwcHJvcHJpYXRlIGxpbmUgYnJlYWsgdHlwZVxyXG4gIGRldGVybWluZUxpbmVCcmVha1R5cGUoYnJJbmZvLCBjb250ZXh0KSB7XHJcbiAgICAvLyBEaWZmZXJlbnQgbGluZSBicmVhayBjaGFyYWN0ZXJzIGJhc2VkIG9uIGNvbnRleHRcclxuICAgIHN3aXRjaCAoYnJJbmZvLnR5cGUpIHtcclxuICAgICAgY2FzZSBcInBhcmFncmFwaFwiOlxyXG4gICAgICAgIHJldHVybiBcIlxcblxcblwiOyAvLyBEb3VibGUgbGluZSBicmVhayBmb3IgcGFyYWdyYXBoIHNlcGFyYXRpb25cclxuICAgICAgY2FzZSBcImZvcmNlZFwiOlxyXG4gICAgICAgIHJldHVybiBcIlxcblwiOyAvLyBGb3JjZWQgbGluZSBicmVhayAoU2hpZnQrRW50ZXIgZXF1aXZhbGVudClcclxuICAgICAgY2FzZSBcImxpbmVcIjpcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gXCJcXG5cIjsgLy8gU3RhbmRhcmQgbGluZSBicmVha1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gU09QSElTVElDQVRFRDogRGV0ZXJtaW5lIGlmIGFuIGltcGxpY2l0IGxpbmUgYnJlYWsgc2hvdWxkIGJlIGluc2VydGVkXHJcbiAgc2hvdWxkSW5zZXJ0SW1wbGljaXRMaW5lQnJlYWsoY3VycmVudFJhbmdlLCBuZXh0UmFuZ2UsIGNvbnRleHQpIHtcclxuICAgIC8vIERvbid0IGluc2VydCBpbXBsaWNpdCBicmVha3MgaWYgZXhwbGljaXQgQnIgZWxlbWVudHMgYXJlIHByZXNlbnRcclxuICAgIGlmIChjdXJyZW50UmFuZ2UuQnIgIT09IHVuZGVmaW5lZCB8fCBuZXh0UmFuZ2UuQnIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSW5zZXJ0IGJyZWFrcyBiZXR3ZWVuIGRpZmZlcmVudCBjaGFyYWN0ZXIgc3R5bGVzIGluIGRpZmZlcmVudCBwYXJhZ3JhcGhzXHJcbiAgICBjb25zdCBjdXJyZW50Q2hhclN0eWxlID0gY3VycmVudFJhbmdlW1wiQF9BcHBsaWVkQ2hhcmFjdGVyU3R5bGVcIl07XHJcbiAgICBjb25zdCBuZXh0Q2hhclN0eWxlID0gbmV4dFJhbmdlW1wiQF9BcHBsaWVkQ2hhcmFjdGVyU3R5bGVcIl07XHJcblxyXG4gICAgLy8gSWYgd2UncmUgaW4gYSBjb250ZXh0IHdoZXJlIHN0eWxlcyBjaGFuZ2Ugc2lnbmlmaWNhbnRseSwgYWRkIGEgYnJlYWtcclxuICAgIGlmIChcclxuICAgICAgY3VycmVudENoYXJTdHlsZSAmJlxyXG4gICAgICBuZXh0Q2hhclN0eWxlICYmXHJcbiAgICAgIGN1cnJlbnRDaGFyU3R5bGUgIT09IG5leHRDaGFyU3R5bGVcclxuICAgICkge1xyXG4gICAgICAvLyBDaGVjayBpZiB0aGlzIG1pZ2h0IGJlIGEgdGl0bGUvaGVhZGluZyBmb2xsb3dlZCBieSBib2R5IHRleHRcclxuICAgICAgY29uc3Qgc3R5bGVJbmRpY2F0ZXNCcmVhayA9IHRoaXMuc3R5bGVJbmRpY2F0ZXNMaW5lQnJlYWsoXHJcbiAgICAgICAgY3VycmVudENoYXJTdHlsZSxcclxuICAgICAgICBuZXh0Q2hhclN0eWxlXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiBzdHlsZUluZGljYXRlc0JyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8vIFNPUEhJU1RJQ0FURUQ6IEFuYWx5emUgaWYgc3R5bGUgY2hhbmdlIGluZGljYXRlcyBhIGxpbmUgYnJlYWtcclxuICBzdHlsZUluZGljYXRlc0xpbmVCcmVhayhjdXJyZW50U3R5bGUsIG5leHRTdHlsZSkge1xyXG4gICAgY29uc3QgdGl0bGVJbmRpY2F0b3JzID0gW1widGl0bGVcIiwgXCJoZWFkaW5nXCIsIFwiaGVhZGVyXCJdO1xyXG4gICAgY29uc3QgYm9keUluZGljYXRvcnMgPSBbXCJib2R5XCIsIFwidGV4dFwiLCBcIm5vcm1hbFwiXTtcclxuXHJcbiAgICBjb25zdCBjdXJyZW50SXNUaXRsZSA9IHRpdGxlSW5kaWNhdG9ycy5zb21lKChpbmRpY2F0b3IpID0+XHJcbiAgICAgIGN1cnJlbnRTdHlsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGluZGljYXRvcilcclxuICAgICk7XHJcbiAgICBjb25zdCBuZXh0SXNCb2R5ID0gYm9keUluZGljYXRvcnMuc29tZSgoaW5kaWNhdG9yKSA9PlxyXG4gICAgICBuZXh0U3R5bGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhpbmRpY2F0b3IpXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiBjdXJyZW50SXNUaXRsZSAmJiBuZXh0SXNCb2R5O1xyXG4gIH1cclxuXHJcbiAgLy8gU09QSElTVElDQVRFRDogQW5hbHl6ZSBsaW5lIGJyZWFrIHR5cGVzIGluIGZvcm1hdHRlZCBjb250ZW50XHJcbiAgYW5hbHl6ZUxpbmVCcmVha1R5cGVzKGZvcm1hdHRlZENvbnRlbnQpIHtcclxuICAgIGNvbnN0IHR5cGVzID0ge1xyXG4gICAgICBleHBsaWNpdDogMCwgLy8gRnJvbSA8QnIvPiBlbGVtZW50c1xyXG4gICAgICBpbXBsaWNpdDogMCwgLy8gSW5mZXJyZWQgZnJvbSBzdHlsZSBjaGFuZ2VzXHJcbiAgICAgIHBhcmFncmFwaDogMCwgLy8gQmV0d2VlbiBwYXJhZ3JhcGhzXHJcbiAgICAgIGRpcmVjdDogMCwgLy8gRGlyZWN0IEJyIGVsZW1lbnRzXHJcbiAgICB9O1xyXG5cclxuICAgIGZvcm1hdHRlZENvbnRlbnQuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICBpZiAoaXRlbS5mb3JtYXR0aW5nPy5pc0JyZWFrKSB7XHJcbiAgICAgICAgY29uc3QgYnJlYWtUeXBlID0gaXRlbS5mb3JtYXR0aW5nLmJyZWFrVHlwZSB8fCBcInVua25vd25cIjtcclxuICAgICAgICBpZiAodHlwZXMuaGFzT3duUHJvcGVydHkoYnJlYWtUeXBlKSkge1xyXG4gICAgICAgICAgdHlwZXNbYnJlYWtUeXBlXSsrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHR5cGVzO1xyXG4gIH1cclxuXHJcbiAgZXh0cmFjdERldGFpbGVkRm9ybWF0dGluZ0Zyb21SYW5nZShyYW5nZSkge1xyXG4gICAgY29uc3QgZm9ybWF0dGluZyA9IHt9O1xyXG5cclxuICAgIC8vIEV4dHJhY3QgYWxsIHBvc3NpYmxlIGZvbnQgYXR0cmlidXRlc1xyXG4gICAgY29uc3QgZm9udEF0dHJpYnV0ZXMgPSBbXHJcbiAgICAgIFwiQF9BcHBsaWVkRm9udFwiLFxyXG4gICAgICBcIkBfRm9udEZhbWlseVwiLFxyXG4gICAgICBcIkBfRm9udFwiLFxyXG4gICAgICBcIkBfUG9zdFNjcmlwdE5hbWVcIixcclxuICAgICAgXCJAX0ZvbnROYW1lXCIsXHJcbiAgICBdO1xyXG5cclxuICAgIGZvbnRBdHRyaWJ1dGVzLmZvckVhY2goKGF0dHIpID0+IHtcclxuICAgICAgaWYgKHJhbmdlW2F0dHJdKSB7XHJcbiAgICAgICAgZm9ybWF0dGluZy5mb250UmVmZXJlbmNlID0gcmFuZ2VbYXR0cl07XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEV4dHJhY3QgZm9udCBhbmQgc2l6ZSBhdHRyaWJ1dGVzXHJcbiAgICBjb25zdCByYXdGb250U2l6ZSA9IElETUxVdGlscy5wYXJzZU51bWVyaWMocmFuZ2VbXCJAX1BvaW50U2l6ZVwiXSk7XHJcbiAgICBmb3JtYXR0aW5nLmZvbnRTaXplID0gdGhpcy5jb252ZXJ0Rm9udFNpemVUb1BpeGVscyhyYXdGb250U2l6ZSk7IC8vIEFEREVEOiBDb252ZXJ0IHRvIHBpeGVsc1xyXG4gICAgZm9ybWF0dGluZy5vcmlnaW5hbEZvbnRTaXplID0gcmF3Rm9udFNpemU7IC8vIEFEREVEOiBQcmVzZXJ2ZSBvcmlnaW5hbFxyXG5cclxuICAgIC8vIEVOSEFOQ0VEOiBFeHRyYWN0IGxlYWRpbmcgd2l0aCBwcm9wZXIgcHJvY2Vzc2luZ1xyXG4gICAgY29uc3QgcmF3TGVhZGluZyA9IHJhbmdlW1wiQF9MZWFkaW5nXCJdO1xyXG4gICAgZm9ybWF0dGluZy5sZWFkaW5nID0gdGhpcy5wcm9jZXNzTGVhZGluZ1ZhbHVlKFxyXG4gICAgICByYXdMZWFkaW5nLFxyXG4gICAgICBmb3JtYXR0aW5nLmZvbnRTaXplXHJcbiAgICApO1xyXG4gICAgZm9ybWF0dGluZy5sZWFkaW5nVHlwZSA9IHRoaXMuZGV0ZXJtaW5lTGVhZGluZ1R5cGUocmF3TGVhZGluZyk7XHJcblxyXG4gICAgLy8gRXh0cmFjdCBjb2xvciBhbmQgc3R5bGUgYXR0cmlidXRlc1xyXG4gICAgZm9ybWF0dGluZy5maWxsQ29sb3IgPSByYW5nZVtcIkBfRmlsbENvbG9yXCJdO1xyXG4gICAgZm9ybWF0dGluZy5zdHJva2VDb2xvciA9IHJhbmdlW1wiQF9TdHJva2VDb2xvclwiXTtcclxuICAgIGZvcm1hdHRpbmcuZm9udFN0eWxlID0gcmFuZ2VbXCJAX0ZvbnRTdHlsZVwiXTtcclxuXHJcbiAgICAvLyBFeHRyYWN0IGFkdmFuY2VkIHR5cG9ncmFwaHkgYXR0cmlidXRlc1xyXG4gICAgZm9ybWF0dGluZy50cmFja2luZyA9IElETUxVdGlscy5wYXJzZU51bWVyaWMocmFuZ2VbXCJAX1RyYWNraW5nXCJdKTtcclxuICAgIGZvcm1hdHRpbmcuYmFzZWxpbmVTaGlmdCA9IElETUxVdGlscy5wYXJzZU51bWVyaWMocmFuZ2VbXCJAX0Jhc2VsaW5lU2hpZnRcIl0pO1xyXG4gICAgZm9ybWF0dGluZy5rZXJuaW5nID0gSURNTFV0aWxzLnBhcnNlTnVtZXJpYyhyYW5nZVtcIkBfS2VybmluZ1wiXSk7XHJcbiAgICBmb3JtYXR0aW5nLmhvcml6b250YWxTY2FsZSA9XHJcbiAgICAgIElETUxVdGlscy5wYXJzZU51bWVyaWMocmFuZ2VbXCJAX0hvcml6b250YWxTY2FsZVwiXSkgfHwgMTAwO1xyXG4gICAgZm9ybWF0dGluZy52ZXJ0aWNhbFNjYWxlID1cclxuICAgICAgSURNTFV0aWxzLnBhcnNlTnVtZXJpYyhyYW5nZVtcIkBfVmVydGljYWxTY2FsZVwiXSkgfHwgMTAwO1xyXG5cclxuICAgIC8vIEVOSEFOQ0VEOiBFeHRyYWN0IEluRGVzaWduLXNwZWNpZmljIHRleHQgbGF5b3V0IHByb3BlcnRpZXMgZm9yIHByZWNpc2UgcmVuZGVyaW5nXHJcbiAgICBmb3JtYXR0aW5nLmJhc2VsaW5lR3JpZEFsaWduID0gcmFuZ2VbXCJAX0FsaWduVG9CYXNlbGluZVwiXSB8fCBcIk5vbmVcIjtcclxuICAgIGZvcm1hdHRpbmcuZHJvcENhcExpbmVzID1cclxuICAgICAgSURNTFV0aWxzLnBhcnNlTnVtZXJpYyhyYW5nZVtcIkBfRHJvcENhcExpbmVzXCJdKSB8fCAwO1xyXG4gICAgZm9ybWF0dGluZy5kcm9wQ2FwQ2hhcmFjdGVycyA9XHJcbiAgICAgIElETUxVdGlscy5wYXJzZU51bWVyaWMocmFuZ2VbXCJAX0Ryb3BDYXBDaGFyYWN0ZXJzXCJdKSB8fCAwO1xyXG5cclxuICAgIC8vIEV4dHJhY3QgcGFyYWdyYXBoLWxldmVsIGF0dHJpYnV0ZXMgaWYgcHJlc2VudFxyXG4gICAgLy8gQ1JJVElDQUwgRklYOiBPbmx5IHNldCBhbGlnbm1lbnQgaWYgZXhwbGljaXRseSBzcGVjaWZpZWQsIGFsbG93aW5nIHBhcmFncmFwaCBpbmhlcml0YW5jZVxyXG4gICAgY29uc3QgZXhwbGljaXRBbGlnbm1lbnQgPSByYW5nZVtcIkBfSnVzdGlmaWNhdGlvblwiXSB8fCByYW5nZVtcIkBfQWxpZ25tZW50XCJdO1xyXG4gICAgaWYgKGV4cGxpY2l0QWxpZ25tZW50KSB7XHJcbiAgICAgIGZvcm1hdHRpbmcuYWxpZ25tZW50ID0gZXhwbGljaXRBbGlnbm1lbnQ7XHJcbiAgICB9XHJcbiAgICBmb3JtYXR0aW5nLmxlZnRJbmRlbnQgPSBJRE1MVXRpbHMucGFyc2VOdW1lcmljKHJhbmdlW1wiQF9MZWZ0SW5kZW50XCJdKTtcclxuICAgIGZvcm1hdHRpbmcucmlnaHRJbmRlbnQgPSBJRE1MVXRpbHMucGFyc2VOdW1lcmljKHJhbmdlW1wiQF9SaWdodEluZGVudFwiXSk7XHJcbiAgICBmb3JtYXR0aW5nLmZpcnN0TGluZUluZGVudCA9IElETUxVdGlscy5wYXJzZU51bWVyaWMoXHJcbiAgICAgIHJhbmdlW1wiQF9GaXJzdExpbmVJbmRlbnRcIl1cclxuICAgICk7XHJcbiAgICBmb3JtYXR0aW5nLnNwYWNlQmVmb3JlID0gSURNTFV0aWxzLnBhcnNlTnVtZXJpYyhyYW5nZVtcIkBfU3BhY2VCZWZvcmVcIl0pO1xyXG4gICAgZm9ybWF0dGluZy5zcGFjZUFmdGVyID0gSURNTFV0aWxzLnBhcnNlTnVtZXJpYyhyYW5nZVtcIkBfU3BhY2VBZnRlclwiXSk7XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIGVmZmVjdGl2ZSBsaW5lIGhlaWdodCBmb3IgQ1NTXHJcbiAgICBmb3JtYXR0aW5nLmVmZmVjdGl2ZUxpbmVIZWlnaHQgPVxyXG4gICAgICB0aGlzLmNhbGN1bGF0ZUVmZmVjdGl2ZUxpbmVIZWlnaHQoZm9ybWF0dGluZyk7XHJcblxyXG4gICAgcmV0dXJuIGZvcm1hdHRpbmc7XHJcbiAgfVxyXG5cclxuICAvLyBGSVhFRDogUHJvY2VzcyBsZWFkaW5nIHZhbHVlcyB3aXRoIEluRGVzaWduLXNwZWNpZmljIGxvZ2ljIGFuZCBjb252ZXJ0IHRvIHBpeGVsc1xyXG4gIHByb2Nlc3NMZWFkaW5nVmFsdWUocmF3TGVhZGluZywgZm9udFNpemUpIHtcclxuICAgIGlmICghcmF3TGVhZGluZykgcmV0dXJuIFwiYXV0b1wiO1xyXG5cclxuICAgIC8vIEhhbmRsZSBcImF1dG9cIiBsZWFkaW5nXHJcbiAgICBpZiAocmF3TGVhZGluZyA9PT0gXCJhdXRvXCIgfHwgcmF3TGVhZGluZyA9PT0gXCJBdXRvXCIpIHtcclxuICAgICAgcmV0dXJuIGZvbnRTaXplID8gZm9udFNpemUgKiAxLjIgOiBcImF1dG9cIjsgLy8gSW5EZXNpZ24gZGVmYXVsdCBhdXRvIGxlYWRpbmcgaXMgMTIwJVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEhhbmRsZSBudW1lcmljIGxlYWRpbmcgKGluIHBvaW50cykgLSBGSVhFRDogQ29udmVydCB0byBwaXhlbHNcclxuICAgIGNvbnN0IG51bWVyaWNMZWFkaW5nID0gSURNTFV0aWxzLnBhcnNlTnVtZXJpYyhyYXdMZWFkaW5nKTtcclxuICAgIGlmIChudW1lcmljTGVhZGluZykge1xyXG4gICAgICAvLyBGSVhFRDogQ29udmVydCBudW1lcmljIGxlYWRpbmcgdG8gcGl4ZWxzIGlmIHVuaXRDb252ZXJ0ZXIgaXMgYXZhaWxhYmxlXHJcbiAgICAgIGlmIChcclxuICAgICAgICB0aGlzLnVuaXRDb252ZXJ0ZXIgJiZcclxuICAgICAgICB0aGlzLmRvY3VtZW50VW5pdHMgJiZcclxuICAgICAgICB0aGlzLnVuaXRDb252ZXJ0ZXIuaXNTdXBwb3J0ZWRVbml0KHRoaXMuZG9jdW1lbnRVbml0cylcclxuICAgICAgKSB7XHJcbiAgICAgICAgY29uc3QgcGl4ZWxMZWFkaW5nID0gdGhpcy51bml0Q29udmVydGVyLnRvUGl4ZWxzKFxyXG4gICAgICAgICAgbnVtZXJpY0xlYWRpbmcsXHJcbiAgICAgICAgICB0aGlzLmRvY3VtZW50VW5pdHNcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgYPCfk5AgQ29udmVydGVkIGxlYWRpbmc6ICR7bnVtZXJpY0xlYWRpbmd9ICR7dGhpcy5kb2N1bWVudFVuaXRzfSDihpIgJHtwaXhlbExlYWRpbmd9IHB4YFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHBpeGVsTGVhZGluZztcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbnVtZXJpY0xlYWRpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFuZGxlIHBlcmNlbnRhZ2UtYmFzZWQgbGVhZGluZ1xyXG4gICAgaWYgKHJhd0xlYWRpbmcuaW5jbHVkZXMoXCIlXCIpKSB7XHJcbiAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBwYXJzZUZsb2F0KHJhd0xlYWRpbmcucmVwbGFjZShcIiVcIiwgXCJcIikpO1xyXG4gICAgICByZXR1cm4gZm9udFNpemUgPyAoZm9udFNpemUgKiBwZXJjZW50YWdlKSAvIDEwMCA6IFwiYXV0b1wiO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBcImF1dG9cIjtcclxuICB9XHJcblxyXG4gIC8vIE5FVzogRGV0ZXJtaW5lIHRoZSB0eXBlIG9mIGxlYWRpbmcgYmVpbmcgdXNlZFxyXG4gIGRldGVybWluZUxlYWRpbmdUeXBlKHJhd0xlYWRpbmcpIHtcclxuICAgIGlmICghcmF3TGVhZGluZyB8fCByYXdMZWFkaW5nID09PSBcImF1dG9cIiB8fCByYXdMZWFkaW5nID09PSBcIkF1dG9cIikge1xyXG4gICAgICByZXR1cm4gXCJhdXRvXCI7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHJhd0xlYWRpbmcuaW5jbHVkZXMoXCIlXCIpKSB7XHJcbiAgICAgIHJldHVybiBcInBlcmNlbnRhZ2VcIjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoSURNTFV0aWxzLnBhcnNlTnVtZXJpYyhyYXdMZWFkaW5nKSkge1xyXG4gICAgICByZXR1cm4gXCJhYnNvbHV0ZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBcInVua25vd25cIjtcclxuICB9XHJcblxyXG4gIC8vIE5FVzogQ2FsY3VsYXRlIGVmZmVjdGl2ZSBsaW5lIGhlaWdodCBmb3IgQ1NTIHJlbmRlcmluZ1xyXG4gIGNhbGN1bGF0ZUVmZmVjdGl2ZUxpbmVIZWlnaHQoZm9ybWF0dGluZykge1xyXG4gICAgY29uc3QgZm9udFNpemUgPSBmb3JtYXR0aW5nLmZvbnRTaXplIHx8IDEyO1xyXG4gICAgY29uc3QgbGVhZGluZyA9IGZvcm1hdHRpbmcubGVhZGluZztcclxuXHJcbiAgICBpZiAobGVhZGluZyA9PT0gXCJhdXRvXCIpIHtcclxuICAgICAgcmV0dXJuIDEuMjsgLy8gQ1NTIGxpbmUtaGVpZ2h0IHJhdGlvIGZvciBhdXRvXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBsZWFkaW5nID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgIC8vIENvbnZlcnQgcG9pbnRzIHRvIENTUyBsaW5lLWhlaWdodCByYXRpb1xyXG4gICAgICByZXR1cm4gbGVhZGluZyAvIGZvbnRTaXplO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAxLjI7IC8vIEZhbGxiYWNrXHJcbiAgfVxyXG5cclxuICBleHRyYWN0VGV4dEZvcm1hdHRpbmcoc3RvcnlEYXRhKSB7XHJcbiAgICBjb25zdCBmb3JtYXR0aW5nID0ge1xyXG4gICAgICBwYXJhZ3JhcGhTdHlsZXM6IFtdLFxyXG4gICAgICBjaGFyYWN0ZXJTdHlsZXM6IFtdLFxyXG4gICAgICBhcHBsaWVkU3R5bGVzOiBbXSxcclxuICAgIH07XHJcblxyXG4gICAgLy8gRXh0cmFjdCBhcHBsaWVkIHBhcmFncmFwaCBzdHlsZXNcclxuICAgIGlmIChzdG9yeURhdGEuUGFyYWdyYXBoU3R5bGVSYW5nZSkge1xyXG4gICAgICBjb25zdCByYW5nZXMgPSBBcnJheS5pc0FycmF5KHN0b3J5RGF0YS5QYXJhZ3JhcGhTdHlsZVJhbmdlKVxyXG4gICAgICAgID8gc3RvcnlEYXRhLlBhcmFncmFwaFN0eWxlUmFuZ2VcclxuICAgICAgICA6IFtzdG9yeURhdGEuUGFyYWdyYXBoU3R5bGVSYW5nZV07XHJcblxyXG4gICAgICByYW5nZXMuZm9yRWFjaCgocmFuZ2UpID0+IHtcclxuICAgICAgICBjb25zdCBhcHBsaWVkU3R5bGUgPSByYW5nZVtcIkBfQXBwbGllZFBhcmFncmFwaFN0eWxlXCJdO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGFwcGxpZWRTdHlsZSAmJlxyXG4gICAgICAgICAgIWZvcm1hdHRpbmcucGFyYWdyYXBoU3R5bGVzLmluY2x1ZGVzKGFwcGxpZWRTdHlsZSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGZvcm1hdHRpbmcucGFyYWdyYXBoU3R5bGVzLnB1c2goYXBwbGllZFN0eWxlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEV4dHJhY3QgY2hhcmFjdGVyIHN0eWxlcyB3aXRoaW4gcGFyYWdyYXBoIHJhbmdlc1xyXG4gICAgICAgIGlmIChyYW5nZS5DaGFyYWN0ZXJTdHlsZVJhbmdlKSB7XHJcbiAgICAgICAgICBjb25zdCBjaGFyUmFuZ2VzID0gQXJyYXkuaXNBcnJheShyYW5nZS5DaGFyYWN0ZXJTdHlsZVJhbmdlKVxyXG4gICAgICAgICAgICA/IHJhbmdlLkNoYXJhY3RlclN0eWxlUmFuZ2VcclxuICAgICAgICAgICAgOiBbcmFuZ2UuQ2hhcmFjdGVyU3R5bGVSYW5nZV07XHJcblxyXG4gICAgICAgICAgY2hhclJhbmdlcy5mb3JFYWNoKChjaGFyUmFuZ2UpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2hhclN0eWxlID0gY2hhclJhbmdlW1wiQF9BcHBsaWVkQ2hhcmFjdGVyU3R5bGVcIl07XHJcbiAgICAgICAgICAgIGlmIChjaGFyU3R5bGUgJiYgIWZvcm1hdHRpbmcuY2hhcmFjdGVyU3R5bGVzLmluY2x1ZGVzKGNoYXJTdHlsZSkpIHtcclxuICAgICAgICAgICAgICBmb3JtYXR0aW5nLmNoYXJhY3RlclN0eWxlcy5wdXNoKGNoYXJTdHlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZvcm1hdHRpbmc7XHJcbiAgfVxyXG5cclxuICAvLyBBZGQgdGhpcyBtZXRob2QgdG8gZGVidWcgcmF3IHN0b3J5IGNvbnRlbnRcclxuICBkZWJ1Z1Jhd1N0b3J5Q29udGVudChzdG9yeURhdGEpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiXFxu8J+UjSBSQVcgU1RPUlkgQ09OVEVOVCBERUJVRzpcIik7XHJcbiAgICBjb25zb2xlLmxvZyhcIlN0b3J5IGtleXM6XCIsIE9iamVjdC5rZXlzKHN0b3J5RGF0YSkpO1xyXG5cclxuICAgIGNvbnN0IGZpbmRDaGFyYWN0ZXJSYW5nZXMgPSAob2JqLCBwYXRoID0gXCJcIikgPT4ge1xyXG4gICAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiBvYmogIT09IG51bGwpIHtcclxuICAgICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgaWYgKGtleSA9PT0gXCJDaGFyYWN0ZXJTdHlsZVJhbmdlXCIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFxcbvCfk50gRm91bmQgQ2hhcmFjdGVyU3R5bGVSYW5nZSBhdCAke3BhdGh9OmAsIG9ialtrZXldKTtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2VzID0gQXJyYXkuaXNBcnJheShvYmpba2V5XSkgPyBvYmpba2V5XSA6IFtvYmpba2V5XV07XHJcbiAgICAgICAgICAgIHJhbmdlcy5mb3JFYWNoKChyYW5nZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgICAgIGAgIFJhbmdlICR7aW5kZXggKyAxfSBhdHRyaWJ1dGVzOmAsXHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhyYW5nZSkuZmlsdGVyKChrKSA9PiBrLnN0YXJ0c1dpdGgoXCJAX1wiKSlcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAgIFJhbmdlICR7aW5kZXggKyAxfSBmb250IGluZm86YCwge1xyXG4gICAgICAgICAgICAgICAgQXBwbGllZEZvbnQ6IHJhbmdlW1wiQF9BcHBsaWVkRm9udFwiXSxcclxuICAgICAgICAgICAgICAgIEZvbnRTdHlsZTogcmFuZ2VbXCJAX0ZvbnRTdHlsZVwiXSxcclxuICAgICAgICAgICAgICAgIFBvaW50U2l6ZTogcmFuZ2VbXCJAX1BvaW50U2l6ZVwiXSxcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmpba2V5XSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICBmaW5kQ2hhcmFjdGVyUmFuZ2VzKG9ialtrZXldLCBgJHtwYXRofS4ke2tleX1gKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmaW5kQ2hhcmFjdGVyUmFuZ2VzKHN0b3J5RGF0YSk7XHJcbiAgfVxyXG5cclxuICAvLyBBREQgREVCVUdHSU5HIEZPUiBQQVJTRUQgQlIgU1RSVUNUVVJFXHJcbiAgZGVidWdCckVsZW1lbnRzSW5QYXJzZWRTdHJ1Y3R1cmUocGFyc2VkRGF0YSwgcGF0aCA9IFwiXCIpIHtcclxuICAgIGlmICh0eXBlb2YgcGFyc2VkRGF0YSA9PT0gXCJvYmplY3RcIiAmJiBwYXJzZWREYXRhICE9PSBudWxsKSB7XHJcbiAgICAgIE9iamVjdC5lbnRyaWVzKHBhcnNlZERhdGEpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xyXG4gICAgICAgIGlmIChrZXkgPT09IFwiQnJcIikge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYCR7cGF0aH0gaGFzIEJyIGVsZW1lbnQ6YCwgdmFsdWUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICB0aGlzLmRlYnVnQnJFbGVtZW50c0luUGFyc2VkU3RydWN0dXJlKHZhbHVlLCBgJHtwYXRofS4ke2tleX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ1JJVElDQUwgRklYOiBQYXJzZSByYXcgWE1MIHRvIHByZXNlcnZlIGV4YWN0IGRvY3VtZW50IG9yZGVyIC0gRlVMTFkgRFlOQU1JQ1xyXG4gIHBhcnNlUmF3WE1MRm9yRG9jdW1lbnRPcmRlcihyYXdYTUxDb250ZW50LCBmaWxlTmFtZSkge1xyXG4gICAgY29uc29sZS5sb2coYPCflI0gUGFyc2luZyByYXcgWE1MIGZvciBkb2N1bWVudCBvcmRlcjogJHtmaWxlTmFtZX1gKTtcclxuXHJcbiAgICAvLyBEWU5BTUlDOiBIYW5kbGUgbXVsdGlwbGUgQ2hhcmFjdGVyU3R5bGVSYW5nZSBlbGVtZW50c1xyXG4gICAgY29uc3QgY2hhclJhbmdlUGF0dGVybiA9XHJcbiAgICAgIC88Q2hhcmFjdGVyU3R5bGVSYW5nZVtePl0qPiguKj8pPFxcL0NoYXJhY3RlclN0eWxlUmFuZ2U+L2dzO1xyXG4gICAgY29uc3QgY2hhclJhbmdlTWF0Y2hlcyA9IFsuLi5yYXdYTUxDb250ZW50Lm1hdGNoQWxsKGNoYXJSYW5nZVBhdHRlcm4pXTtcclxuXHJcbiAgICBpZiAoY2hhclJhbmdlTWF0Y2hlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgY29uc29sZS5sb2coXCLinYwgTm8gQ2hhcmFjdGVyU3R5bGVSYW5nZSBmb3VuZCBpbiBYTUxcIik7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICBg8J+ThCBGb3VuZCAke2NoYXJSYW5nZU1hdGNoZXMubGVuZ3RofSBDaGFyYWN0ZXJTdHlsZVJhbmdlIGVsZW1lbnRzYFxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBEWU5BTUlDOiBQcm9jZXNzIGFsbCBDaGFyYWN0ZXJTdHlsZVJhbmdlIGVsZW1lbnRzXHJcbiAgICBjb25zdCBhbGxEb2N1bWVudE9yZGVyID0gW107XHJcblxyXG4gICAgY2hhclJhbmdlTWF0Y2hlcy5mb3JFYWNoKChtYXRjaCwgcmFuZ2VJbmRleCkgPT4ge1xyXG4gICAgICBjb25zdCBjaGFyUmFuZ2VDb250ZW50ID0gbWF0Y2hbMV07XHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIGDwn5OEIFByb2Nlc3NpbmcgQ2hhcmFjdGVyU3R5bGVSYW5nZVske3JhbmdlSW5kZXh9XTpgLFxyXG4gICAgICAgIGNoYXJSYW5nZUNvbnRlbnQuc3Vic3RyaW5nKDAsIDIwMCkgKyBcIi4uLlwiXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBFTkhBTkNFRDogTW9yZSBmbGV4aWJsZSBwYXR0ZXJuIHRvIGhhbmRsZSBkaWZmZXJlbnQgWE1MIHN0cnVjdHVyZXNcclxuICAgICAgLy8gTWF0Y2hlczogPENvbnRlbnQ+dGV4dDwvQ29udGVudD4sIDxDb250ZW50Lz4sIDxCci8+LCA8QnI+PC9Ccj4sIDxCciAvPlxyXG4gICAgICBjb25zdCBlbGVtZW50UGF0dGVybiA9XHJcbiAgICAgICAgLzwoQ29udGVudHxCcikoPzpcXHMrW14+XSopPz4oW148XSopPFxcL1xcMT58PChDb250ZW50fEJyKSg/OlxccytbXj5dKik/XFwvPz58PChDb250ZW50fEJyKSg/OlxccytbXj5dKik/PihbXjxdKikvZztcclxuXHJcbiAgICAgIGxldCBlbGVtZW50TWF0Y2g7XHJcbiAgICAgIGNvbnN0IHJhbmdlRWxlbWVudHMgPSBbXTtcclxuXHJcbiAgICAgIHdoaWxlICgoZWxlbWVudE1hdGNoID0gZWxlbWVudFBhdHRlcm4uZXhlYyhjaGFyUmFuZ2VDb250ZW50KSkgIT09IG51bGwpIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50VHlwZSA9XHJcbiAgICAgICAgICBlbGVtZW50TWF0Y2hbMV0gfHwgZWxlbWVudE1hdGNoWzNdIHx8IGVsZW1lbnRNYXRjaFs0XTtcclxuICAgICAgICBjb25zdCBlbGVtZW50Q29udGVudCA9IGVsZW1lbnRNYXRjaFsyXSB8fCBlbGVtZW50TWF0Y2hbNV0gfHwgXCJcIjtcclxuXHJcbiAgICAgICAgaWYgKGVsZW1lbnRUeXBlID09PSBcIkNvbnRlbnRcIikge1xyXG4gICAgICAgICAgY29uc3QgY29udGVudFRleHQgPSBlbGVtZW50Q29udGVudC50cmltKCk7XHJcbiAgICAgICAgICBpZiAoY29udGVudFRleHQpIHtcclxuICAgICAgICAgICAgLy8gT25seSBhZGQgbm9uLWVtcHR5IGNvbnRlbnRcclxuICAgICAgICAgICAgcmFuZ2VFbGVtZW50cy5wdXNoKHtcclxuICAgICAgICAgICAgICB0eXBlOiBcIkNvbnRlbnRcIixcclxuICAgICAgICAgICAgICB0ZXh0OiBjb250ZW50VGV4dCxcclxuICAgICAgICAgICAgICByYW5nZUluZGV4OiByYW5nZUluZGV4LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYPCfk50gRm91bmQgQ29udGVudFske3JhbmdlSW5kZXh9XTogXCIke2NvbnRlbnRUZXh0fVwiYCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gXCJCclwiKSB7XHJcbiAgICAgICAgICByYW5nZUVsZW1lbnRzLnB1c2goe1xyXG4gICAgICAgICAgICB0eXBlOiBcIkJyXCIsXHJcbiAgICAgICAgICAgIHJhbmdlSW5kZXg6IHJhbmdlSW5kZXgsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGDwn5SXIEZvdW5kIEJyWyR7cmFuZ2VJbmRleH1dYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBZGQgcmFuZ2UgZWxlbWVudHMgdG8gb3ZlcmFsbCBkb2N1bWVudCBvcmRlclxyXG4gICAgICBhbGxEb2N1bWVudE9yZGVyLnB1c2goLi4ucmFuZ2VFbGVtZW50cyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoYWxsRG9jdW1lbnRPcmRlci5sZW5ndGggPT09IDApIHtcclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgXCLinYwgTm8gQ29udGVudCBvciBCciBlbGVtZW50cyBmb3VuZCBpbiBhbnkgQ2hhcmFjdGVyU3R5bGVSYW5nZVwiXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERZTkFNSUM6IEFuYWx5emUgdGhlIGJyZWFrIHBhdHRlcm4gZm9yIGFueSBzdHJ1Y3R1cmVcclxuICAgIGNvbnN0IGJyZWFrUGF0dGVybiA9IHRoaXMuYW5hbHl6ZUJyZWFrUGF0dGVybkR5bmFtaWMoYWxsRG9jdW1lbnRPcmRlcik7XHJcbiAgICBjb25zb2xlLmxvZyhcIvCfk4ogRHluYW1pYyBicmVhayBwYXR0ZXJuIGFuYWx5c2lzOlwiLCBicmVha1BhdHRlcm4pO1xyXG5cclxuICAgIC8vIFN0b3JlIHRoaXMgZm9yIGxhdGVyIHVzZSBpbiBwcm9jZXNzaW5nXHJcbiAgICB0aGlzLmRvY3VtZW50T3JkZXJDYWNoZSA9IHRoaXMuZG9jdW1lbnRPcmRlckNhY2hlIHx8IHt9O1xyXG4gICAgdGhpcy5kb2N1bWVudE9yZGVyQ2FjaGVbZmlsZU5hbWVdID0ge1xyXG4gICAgICBkb2N1bWVudE9yZGVyOiBhbGxEb2N1bWVudE9yZGVyLFxyXG4gICAgICBicmVha1BhdHRlcm46IGJyZWFrUGF0dGVybixcclxuICAgICAgdG90YWxDaGFyYWN0ZXJSYW5nZXM6IGNoYXJSYW5nZU1hdGNoZXMubGVuZ3RoLFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBkb2N1bWVudE9yZGVyOiBhbGxEb2N1bWVudE9yZGVyLFxyXG4gICAgICBicmVha1BhdHRlcm46IGJyZWFrUGF0dGVybixcclxuICAgICAgdG90YWxDaGFyYWN0ZXJSYW5nZXM6IGNoYXJSYW5nZU1hdGNoZXMubGVuZ3RoLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIERZTkFNSUM6IEFuYWx5emUgYnJlYWsgcGF0dGVybiBmb3IgYW55IGRvY3VtZW50IHN0cnVjdHVyZVxyXG4gIGFuYWx5emVCcmVha1BhdHRlcm5EeW5hbWljKGRvY3VtZW50T3JkZXIpIHtcclxuICAgIGNvbnN0IHBhdHRlcm4gPSBbXTtcclxuICAgIGxldCBjb250ZW50SW5kZXggPSAwO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZG9jdW1lbnRPcmRlci5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnRPcmRlcltpXTtcclxuXHJcbiAgICAgIGlmIChlbGVtZW50LnR5cGUgPT09IFwiQ29udGVudFwiKSB7XHJcbiAgICAgICAgLy8gRFlOQU1JQzogQ291bnQgY29uc2VjdXRpdmUgYnJlYWtzIGFmdGVyIHRoaXMgY29udGVudFxyXG4gICAgICAgIGxldCBicmVha3NBZnRlciA9IDA7XHJcbiAgICAgICAgbGV0IGogPSBpICsgMTtcclxuXHJcbiAgICAgICAgLy8gQ291bnQgYWxsIGNvbnNlY3V0aXZlIEJyIGVsZW1lbnRzIGZvbGxvd2luZyB0aGlzIENvbnRlbnRcclxuICAgICAgICB3aGlsZSAoaiA8IGRvY3VtZW50T3JkZXIubGVuZ3RoICYmIGRvY3VtZW50T3JkZXJbal0udHlwZSA9PT0gXCJCclwiKSB7XHJcbiAgICAgICAgICBicmVha3NBZnRlcisrO1xyXG4gICAgICAgICAgaisrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcGF0dGVybi5wdXNoKHtcclxuICAgICAgICAgIGNvbnRlbnRJbmRleDogY29udGVudEluZGV4LFxyXG4gICAgICAgICAgY29udGVudFRleHQ6IGVsZW1lbnQudGV4dCxcclxuICAgICAgICAgIGJyZWFrc0FmdGVyOiBicmVha3NBZnRlcixcclxuICAgICAgICAgIHJhbmdlSW5kZXg6IGVsZW1lbnQucmFuZ2VJbmRleCxcclxuICAgICAgICAgIGRvY3VtZW50UG9zaXRpb246IGksXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgYPCfk4sgQ29udGVudFske2NvbnRlbnRJbmRleH1dIFwiJHtlbGVtZW50LnRleHR9XCIgaGFzICR7YnJlYWtzQWZ0ZXJ9IGJyZWFrcyBhZnRlciBpdCAoZG9jIHBvczogJHtpfSlgXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb250ZW50SW5kZXgrKztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFZBTElEQVRJT046IEVuc3VyZSBwYXR0ZXJuIG1ha2VzIHNlbnNlXHJcbiAgICBjb25zdCB0b3RhbENvbnRlbnQgPSBwYXR0ZXJuLmxlbmd0aDtcclxuICAgIGNvbnN0IHRvdGFsQnJlYWtzID0gcGF0dGVybi5yZWR1Y2UoKHN1bSwgcCkgPT4gc3VtICsgcC5icmVha3NBZnRlciwgMCk7XHJcblxyXG4gICAgY29uc29sZS5sb2coXHJcbiAgICAgIGDwn5SNIFBhdHRlcm4gdmFsaWRhdGlvbjogJHt0b3RhbENvbnRlbnR9IGNvbnRlbnQgaXRlbXMsICR7dG90YWxCcmVha3N9IHRvdGFsIGJyZWFrc2BcclxuICAgICk7XHJcblxyXG4gICAgaWYgKHRvdGFsQ29udGVudCA9PT0gMCkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIuKaoO+4jyBXYXJuaW5nOiBObyBjb250ZW50IGl0ZW1zIGZvdW5kIGluIHBhdHRlcm5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBhdHRlcm47XHJcbiAgfVxyXG5cclxuICBnZXRTdG9yaWVzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RvcmllcztcclxuICB9XHJcblxyXG4gIGdldFN0b3J5KHN0b3J5SWQpIHtcclxuICAgIHJldHVybiB0aGlzLnN0b3JpZXNbc3RvcnlJZF07XHJcbiAgfVxyXG5cclxuICBjbGVhclN0b3JpZXMoKSB7XHJcbiAgICB0aGlzLnN0b3JpZXMgPSB7fTtcclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU3RvcnlQYXJzZXI7XHJcbiJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIklETUxVdGlscyIsIlN0b3J5UGFyc2VyIiwic2V0RG9jdW1lbnRVbml0cyIsInVuaXRzIiwiZG9jdW1lbnRVbml0cyIsImNvbnNvbGUiLCJsb2ciLCJjb252ZXJ0Rm9udFNpemVUb1BpeGVscyIsImZvbnRTaXplIiwidW5pdENvbnZlcnRlciIsImZvbnRVbml0cyIsImlzU3VwcG9ydGVkVW5pdCIsInBpeGVsU2l6ZSIsInRvUGl4ZWxzIiwicGFyc2VTdG9yeUZpbGUiLCJmaWxlTmFtZSIsImNvbnRlbnQiLCJ4bWxQYXJzZXIiLCJwYXJzZWQiLCJwYXJzZSIsInN0b3J5SWQiLCJiYXNlbmFtZSIsInN0b3J5RGF0YSIsIlN0b3J5Iiwic3Vic3RyaW5nIiwiYnJNYXRjaGVzIiwibWF0Y2giLCJsZW5ndGgiLCJjb25zZWN1dGl2ZUJyUGF0dGVybiIsImNvbnNlY3V0aXZlQnJNYXRjaGVzIiwicGFyc2VSYXdYTUxGb3JEb2N1bWVudE9yZGVyIiwiT2JqZWN0Iiwia2V5cyIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZXRhaWxlZFN0b3J5Iiwic2VsZiIsImFwcGxpZWRUT0NTdHlsZSIsInVzZXJUZXh0IiwiZXh0cmFjdERldGFpbGVkU3RvcnlDb250ZW50IiwidGV4dEZvcm1hdHRpbmciLCJleHRyYWN0VGV4dEZvcm1hdHRpbmciLCJkZWJ1Z0JyRWxlbWVudHNJblBhcnNlZFN0cnVjdHVyZSIsImNsZWFuU3RvcnlJZCIsInJlcGxhY2UiLCJzdG9yaWVzIiwicGxhaW5UZXh0IiwibGluZUJyZWFrSW5mbyIsIndvcmRDb3VudCIsImxpbmVCcmVha0NvdW50IiwiZXJyb3IiLCJtZXNzYWdlIiwiZm9ybWF0dGVkQ29udGVudCIsInRleHRDb2xvciIsImRlYnVnSW5mbyIsImV4dHJhY3RUZXh0UmVjdXJzaXZlbHkiLCJlbGVtZW50IiwiZGVwdGgiLCJjb250ZXh0IiwiQ2hhcmFjdGVyU3R5bGVSYW5nZSIsInJhbmdlcyIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJyYW5nZSIsInJhbmdlSW5kZXgiLCJkaXJlY3RGb250UmVmIiwiZm9ybWF0dGluZyIsInBhcmFncmFwaFN0eWxlIiwiYXBwbGllZFN0eWxlIiwiY2hhcmFjdGVyU3R5bGUiLCJwYXJzZUZsb2F0Iiwib3JpZ2luYWxGb250U2l6ZSIsImZvbnRSZWZlcmVuY2UiLCJmaWxsQ29sb3IiLCJmb250U3R5bGUiLCJhbGlnbm1lbnQiLCJwYXJhZ3JhcGhBbGlnbm1lbnQiLCJyZXNvbHZlZEZvcm1hdHRpbmciLCJzdHlsZVBhcnNlciIsInJlc29sdmVTdHlsZUZvcm1hdHRpbmciLCJwcm9jZXNzQ2hhcmFjdGVyUmFuZ2VJbk9yZGVyIiwibmV4dFJhbmdlIiwiY3VycmVudFRleHQiLCJzbGljZSIsImN1cnJlbnRSYW5nZUVuZHNXaXRoU3BhY2UiLCJ0ZXN0IiwibmV4dENvbnRlbnQiLCJDb250ZW50IiwiU3RyaW5nIiwibmV4dFJhbmdlU3RhcnRzV2l0aFNwYWNlIiwic2hvdWxkU2tpcFNwYWNlIiwic2hvdWxkSW5zZXJ0SW1wbGljaXRMaW5lQnJlYWsiLCJ0cmltIiwiY3VycmVudFN0eWxlIiwibmV4dFN0eWxlIiwic3BhY2VUZXh0IiwicHVzaCIsInRleHQiLCJpc1NwYWNlIiwic291cmNlIiwidHlwZSIsImxvY2F0aW9uIiwicmVhc29uIiwiY3VycmVudFRleHRFbmQiLCJuZXh0VGV4dFN0YXJ0IiwiaW1wbGljaXRCcmVhayIsImlzQnJlYWsiLCJicmVha1R5cGUiLCJQYXJhZ3JhcGhTdHlsZVJhbmdlIiwiaW5kZXgiLCJwYXJhZ3JhcGhDb250ZXh0IiwicGFyYWdyYXBoSW5kZXgiLCJ0b3RhbFBhcmFncmFwaHMiLCJiZWZvcmVMZW4iLCJhZnRlckxlbiIsInBhcmFncmFwaEJyZWFrIiwiam9pbiIsImRlY29kZVhNTEVudGl0aWVzIiwiZm9udEZhbWlseSIsIkJyIiwidW5kZWZpbmVkIiwiYnJFbGVtZW50cyIsImJyIiwibGluZUJyZWFrVGV4dCIsImVudHJpZXMiLCJrZXkiLCJ2YWx1ZSIsInN0YXJ0c1dpdGgiLCJpdGVtIiwiY2hhcnMiLCJzcGxpdCIsIm1hcCIsImNoYXIiLCJpIiwicHJvY2Vzc2VkQ29udGVudCIsInNvcGhpc3RpY2F0ZWRMaW5lQnJlYWtQcm9jZXNzaW5nIiwiZmlsdGVyIiwiaW5mbyIsImluY2x1ZGVzIiwiaGFzTGluZUJyZWFrcyIsImxpbmVCcmVha1R5cGVzIiwiYW5hbHl6ZUxpbmVCcmVha1R5cGVzIiwic3BhY2VQcmVzZXJ2YXRpb25Db3VudCIsImNvdW50V29yZHMiLCJjaGFyYWN0ZXJDb3VudCIsInRvdGFsUmFuZ2VzIiwiaGFzQ29udGVudCIsImhhc0JyIiwiY29udGVudFR5cGUiLCJiclR5cGUiLCJwcm9jZXNzSW50ZXJsZWF2ZWRDb250ZW50QW5kQnIiLCJwcm9jZXNzQ29udGVudEVsZW1lbnRzIiwicHJvY2Vzc0JyRWxlbWVudHMiLCJlbWVyZ2VuY3lDb250ZW50RXh0cmFjdGlvbiIsImV4dHJhY3RlZFRleHRzIiwiZXh0cmFjdGVkQnJlYWtzIiwiY29udGVudHMiLCJjIiwiYnJlYWtzIiwiY2xlYW5UZXh0IiwiZW1lcmdlbmN5SW5kZXgiLCJlbWVyZ2VuY3lFcnJvciIsIndhcm5pbmdUZXh0IiwiY2FjaGVkT3JkZXIiLCJkb2N1bWVudE9yZGVyQ2FjaGUiLCJicmVha1BhdHRlcm4iLCJwcm9jZXNzQ29udGVudFdpdGhDYWNoZWRQYXR0ZXJuIiwicHJvY2Vzc0ludGVybGVhdmVkQ29udGVudER5bmFtaWNGYWxsYmFjayIsImJySW5kZXgiLCJjb250ZW50TGVuZ3RoIiwiY29udGVudEl0ZW0iLCJjb250ZW50SW5kZXgiLCJicmVha3NUb0FkZCIsImNhbGN1bGF0ZUJyZWFrc0FmdGVyQ29udGVudCIsImFmdGVyQ29udGVudCIsImNhbGN1bGF0ZWRCcmVha3MiLCJyZW1haW5pbmdCcmVha3MiLCJwYXR0ZXJuRW50cnkiLCJmaW5kIiwicCIsImJyZWFrc0FmdGVyIiwiYnJlYWtJbmRleCIsInRvdGFsQnJlYWtzQWZ0ZXJDb250ZW50IiwiZXhwZWN0ZWRDb250ZW50Q291bnQiLCJ0b3RhbENvbnRlbnQiLCJ0b3RhbEJyZWFrcyIsIm5vbkxhc3RDb250ZW50SXRlbXMiLCJiYXNlQnJlYWtzIiwiTWF0aCIsImZsb29yIiwiZXh0cmFCcmVha3MiLCJicmVha3NGb3JUaGlzQ29udGVudCIsImFuYWx5emVDb250ZW50U3RydWN0dXJlIiwic3RydWN0dXJlIiwiY29udGVudEl0ZW1zIiwicHJvY2Vzc0ludGVybGVhdmVkQ29udGVudCIsInJlc3VsdHMiLCJleHRyYWN0QnJFbGVtZW50cyIsImNvdW50IiwicmF3QnIiLCJwb3NpdGlvbiIsImRldGVybWluZUxpbmVCcmVha1R5cGUiLCJickluZm8iLCJjdXJyZW50UmFuZ2UiLCJjdXJyZW50Q2hhclN0eWxlIiwibmV4dENoYXJTdHlsZSIsInN0eWxlSW5kaWNhdGVzQnJlYWsiLCJzdHlsZUluZGljYXRlc0xpbmVCcmVhayIsInRpdGxlSW5kaWNhdG9ycyIsImJvZHlJbmRpY2F0b3JzIiwiY3VycmVudElzVGl0bGUiLCJzb21lIiwiaW5kaWNhdG9yIiwidG9Mb3dlckNhc2UiLCJuZXh0SXNCb2R5IiwidHlwZXMiLCJleHBsaWNpdCIsImltcGxpY2l0IiwicGFyYWdyYXBoIiwiZGlyZWN0IiwiaGFzT3duUHJvcGVydHkiLCJleHRyYWN0RGV0YWlsZWRGb3JtYXR0aW5nRnJvbVJhbmdlIiwiZm9udEF0dHJpYnV0ZXMiLCJhdHRyIiwicmF3Rm9udFNpemUiLCJwYXJzZU51bWVyaWMiLCJyYXdMZWFkaW5nIiwibGVhZGluZyIsInByb2Nlc3NMZWFkaW5nVmFsdWUiLCJsZWFkaW5nVHlwZSIsImRldGVybWluZUxlYWRpbmdUeXBlIiwic3Ryb2tlQ29sb3IiLCJ0cmFja2luZyIsImJhc2VsaW5lU2hpZnQiLCJrZXJuaW5nIiwiaG9yaXpvbnRhbFNjYWxlIiwidmVydGljYWxTY2FsZSIsImJhc2VsaW5lR3JpZEFsaWduIiwiZHJvcENhcExpbmVzIiwiZHJvcENhcENoYXJhY3RlcnMiLCJleHBsaWNpdEFsaWdubWVudCIsImxlZnRJbmRlbnQiLCJyaWdodEluZGVudCIsImZpcnN0TGluZUluZGVudCIsInNwYWNlQmVmb3JlIiwic3BhY2VBZnRlciIsImVmZmVjdGl2ZUxpbmVIZWlnaHQiLCJjYWxjdWxhdGVFZmZlY3RpdmVMaW5lSGVpZ2h0IiwibnVtZXJpY0xlYWRpbmciLCJwaXhlbExlYWRpbmciLCJwZXJjZW50YWdlIiwicGFyYWdyYXBoU3R5bGVzIiwiY2hhcmFjdGVyU3R5bGVzIiwiYXBwbGllZFN0eWxlcyIsImNoYXJSYW5nZXMiLCJjaGFyUmFuZ2UiLCJjaGFyU3R5bGUiLCJkZWJ1Z1Jhd1N0b3J5Q29udGVudCIsImZpbmRDaGFyYWN0ZXJSYW5nZXMiLCJvYmoiLCJrIiwiQXBwbGllZEZvbnQiLCJGb250U3R5bGUiLCJQb2ludFNpemUiLCJwYXJzZWREYXRhIiwicmF3WE1MQ29udGVudCIsImNoYXJSYW5nZVBhdHRlcm4iLCJjaGFyUmFuZ2VNYXRjaGVzIiwibWF0Y2hBbGwiLCJhbGxEb2N1bWVudE9yZGVyIiwiY2hhclJhbmdlQ29udGVudCIsImVsZW1lbnRQYXR0ZXJuIiwiZWxlbWVudE1hdGNoIiwicmFuZ2VFbGVtZW50cyIsImV4ZWMiLCJlbGVtZW50VHlwZSIsImVsZW1lbnRDb250ZW50IiwiY29udGVudFRleHQiLCJhbmFseXplQnJlYWtQYXR0ZXJuRHluYW1pYyIsImRvY3VtZW50T3JkZXIiLCJ0b3RhbENoYXJhY3RlclJhbmdlcyIsInBhdHRlcm4iLCJqIiwiZG9jdW1lbnRQb3NpdGlvbiIsInJlZHVjZSIsInN1bSIsImdldFN0b3JpZXMiLCJnZXRTdG9yeSIsImNsZWFyU3RvcmllcyIsImNvbnN0cnVjdG9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./lib/parsers/StoryParser.js\n"));

/***/ }),

/***/ "./lib/parsers/StyleParser.js":
/*!************************************!*\
  !*** ./lib/parsers/StyleParser.js ***!
  \************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nconst path = __webpack_require__(/*! path */ \"./node_modules/next/dist/compiled/path-browserify/index.js\");\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass StyleParser {\n    // ADDED: Method to set document units for typography conversion\n    setDocumentUnits(units) {\n        this.documentUnits = units;\n        console.log(\"\\uD83D\\uDCD0 StyleParser: Set document units to\", units);\n    }\n    // ADDED: Method to convert typography measurements to pixels\n    convertTypographyToPixels(value) {\n        if (typeof value !== \"number\" || isNaN(value) || !this.unitConverter || !this.documentUnits) {\n            return value;\n        }\n        // Only convert if we have a supported unit and it's not already pixels\n        if (this.unitConverter.isSupportedUnit(this.documentUnits)) {\n            const convertedValue = this.unitConverter.toPixels(value, this.documentUnits);\n            console.log(\"\\uD83D\\uDCD0 Converted typography: \".concat(value, \" \").concat(this.documentUnits, \" → \").concat(convertedValue, \" px\"));\n            return convertedValue;\n        }\n        return value;\n    }\n    // ADDED: Method to convert an entire style object's measurements to pixels\n    convertStyleMeasurementsToPixels(style) {\n        if (!this.unitConverter || !this.documentUnits) {\n            return style;\n        }\n        const convertedStyle = {\n            ...style\n        };\n        // Convert measurements that need pixel conversion\n        const measurementFields = [\n            \"leftIndent\",\n            \"rightIndent\",\n            \"firstLineIndent\",\n            \"spaceBefore\",\n            \"spaceAfter\",\n            \"tracking\",\n            \"kerning\"\n        ];\n        measurementFields.forEach((field)=>{\n            if (typeof convertedStyle[field] === \"number\") {\n                convertedStyle[field] = this.convertTypographyToPixels(convertedStyle[field]);\n            }\n        });\n        // Convert leading if it's a numeric value\n        if (typeof convertedStyle.leading === \"number\") {\n            convertedStyle.leading = this.convertTypographyToPixels(convertedStyle.leading);\n        }\n        return convertedStyle;\n    }\n    async parseResourceFile(fileName, content, xmlParser) {\n        console.log(\"\\uD83D\\uDCCB Parsing resource: \".concat(fileName));\n        try {\n            const parsed = xmlParser.parse(content);\n            const resourceName = path.basename(fileName, \".xml\");\n            // Handle different resource types\n            if (fileName.includes(\"Styles.xml\")) {\n                await this.extractStyles(parsed);\n            } else if (fileName.includes(\"Fonts.xml\")) {\n                await this.extractFonts(parsed);\n            } else if (fileName.includes(\"Graphic.xml\")) {\n                await this.extractGraphics(parsed);\n            } else if (fileName.includes(\"Preferences.xml\")) {\n                await this.extractPreferences(parsed);\n            }\n            console.log(\"✅ Resource \".concat(resourceName, \" parsed\"));\n        } catch (error) {\n            console.error(\"❌ Error parsing \".concat(fileName, \":\"), error.message);\n        }\n    }\n    async extractStyles(stylesData) {\n        console.log(\"Extracting styles...\");\n        const styles = stylesData.Styles || stylesData;\n        // Extract Paragraph Styles\n        if (styles.RootParagraphStyleGroup) {\n            this.extractParagraphStyles(styles.RootParagraphStyleGroup);\n        }\n        // Extract Character Styles\n        if (styles.RootCharacterStyleGroup) {\n            this.extractCharacterStyles(styles.RootCharacterStyleGroup);\n        }\n    }\n    extractParagraphStyles(styleGroup) {\n        const extractStylesRecursively = (group)=>{\n            if (group.ParagraphStyle) {\n                const styles = Array.isArray(group.ParagraphStyle) ? group.ParagraphStyle : [\n                    group.ParagraphStyle\n                ];\n                styles.forEach((style)=>{\n                    // CRITICAL: Extract font reference from multiple possible locations\n                    const fontRef = this.extractFontFromStyle(style);\n                    // ENHANCED: Process leading with proper InDesign logic\n                    const fontSize = parseFloat(style[\"@_PointSize\"]) || 12;\n                    const rawLeading = style[\"@_Leading\"];\n                    const processedLeading = this.processLeadingValue(rawLeading, fontSize);\n                    // FIXED: Extract raw typography measurements for conversion\n                    const rawLeftIndent = parseFloat(style[\"@_LeftIndent\"]) || 0;\n                    const rawRightIndent = parseFloat(style[\"@_RightIndent\"]) || 0;\n                    const rawFirstLineIndent = parseFloat(style[\"@_FirstLineIndent\"]) || 0;\n                    const rawSpaceBefore = parseFloat(style[\"@_SpaceBefore\"]) || 0;\n                    const rawSpaceAfter = parseFloat(style[\"@_SpaceAfter\"]) || 0;\n                    const rawTracking = parseFloat(style[\"@_Tracking\"]) || 0;\n                    const rawKerning = parseFloat(style[\"@_Kerning\"]) || 0;\n                    // FIXED: Create base style object with raw values\n                    const baseStyle = {\n                        self: style[\"@_Self\"],\n                        name: style[\"@_Name\"] || \"\",\n                        fontStyle: style[\"@_FontStyle\"] || \"Regular\",\n                        pointSize: fontSize,\n                        leading: processedLeading,\n                        leadingType: this.determineLeadingType(rawLeading),\n                        effectiveLineHeight: this.calculateEffectiveLineHeight(processedLeading, fontSize),\n                        alignment: style[\"@_Justification\"] || \"LeftAlign\",\n                        // Raw measurements (will be converted to pixels)\n                        leftIndent: rawLeftIndent,\n                        rightIndent: rawRightIndent,\n                        firstLineIndent: rawFirstLineIndent,\n                        spaceBefore: rawSpaceBefore,\n                        spaceAfter: rawSpaceAfter,\n                        tracking: rawTracking,\n                        kerning: rawKerning,\n                        // Store original values for reference\n                        originalLeftIndent: rawLeftIndent,\n                        originalRightIndent: rawRightIndent,\n                        originalFirstLineIndent: rawFirstLineIndent,\n                        originalSpaceBefore: rawSpaceBefore,\n                        originalSpaceAfter: rawSpaceAfter,\n                        originalTracking: rawTracking,\n                        originalKerning: rawKerning,\n                        horizontalScale: parseFloat(style[\"@_HorizontalScale\"]) || 100,\n                        verticalScale: parseFloat(style[\"@_VerticalScale\"]) || 100,\n                        // ENHANCED: Use the new extraction method\n                        appliedFont: fontRef,\n                        originalFontRef: fontRef,\n                        fillColor: style[\"@_FillColor\"] || \"Color/Black\",\n                        rawStyle: style\n                    };\n                    // FIXED: Apply unit conversion to create pixel-converted style\n                    this.styles.paragraph[style[\"@_Self\"]] = this.convertStyleMeasurementsToPixels(baseStyle);\n                    console.log(\"✅ Paragraph Style: \".concat(style[\"@_Name\"], ' -> Font: \"').concat(fontRef, '\"'));\n                });\n            }\n            if (group.ParagraphStyleGroup) {\n                const subGroups = Array.isArray(group.ParagraphStyleGroup) ? group.ParagraphStyleGroup : [\n                    group.ParagraphStyleGroup\n                ];\n                subGroups.forEach(extractStylesRecursively);\n            }\n        };\n        extractStylesRecursively(styleGroup);\n    }\n    extractFontFromStyle(style) {\n        // Try direct attributes first\n        let fontRef = style[\"@_AppliedFont\"] || style[\"@_FontFamily\"] || style[\"@_Font\"] || \"\";\n        // If not found, try Properties nested structure\n        if (!fontRef && style.Properties) {\n            if (style.Properties.AppliedFont) {\n                fontRef = style.Properties.AppliedFont[\"#text\"] || style.Properties.AppliedFont || \"\";\n            }\n            // Also try other property variations\n            if (!fontRef && style.Properties.FontFamily) {\n                fontRef = style.Properties.FontFamily[\"#text\"] || style.Properties.FontFamily || \"\";\n            }\n        }\n        return fontRef || \"\";\n    }\n    extractCharacterStyles(styleGroup) {\n        const extractStylesRecursively = (group)=>{\n            if (group.CharacterStyle) {\n                const styles = Array.isArray(group.CharacterStyle) ? group.CharacterStyle : [\n                    group.CharacterStyle\n                ];\n                styles.forEach((style)=>{\n                    const fontRef = this.extractFontFromStyle(style);\n                    this.styles.character[style[\"@_Self\"]] = {\n                        self: style[\"@_Self\"],\n                        name: style[\"@_Name\"] || \"\",\n                        fontStyle: style[\"@_FontStyle\"] || \"Regular\",\n                        pointSize: parseFloat(style[\"@_PointSize\"]) || null,\n                        appliedFont: fontRef,\n                        originalFontRef: fontRef,\n                        fillColor: style[\"@_FillColor\"] || null,\n                        strokeColor: style[\"@_StrokeColor\"] || null,\n                        rawStyle: style\n                    };\n                    console.log(\"✅ Character Style: \".concat(style[\"@_Name\"], ' -> Font: \"').concat(fontRef, '\"'));\n                });\n            }\n            if (group.CharacterStyleGroup) {\n                const subGroups = Array.isArray(group.CharacterStyleGroup) ? group.CharacterStyleGroup : [\n                    group.CharacterStyleGroup\n                ];\n                subGroups.forEach(extractStylesRecursively);\n            }\n        };\n        extractStylesRecursively(styleGroup);\n    }\n    async extractFonts(fontsData) {\n        console.log(\"Extracting fonts with enhanced mapping...\");\n        const fonts = fontsData.Fonts || fontsData;\n        this.resources.fonts = {};\n        this.fontMap = new Map(); // Global font lookup map\n        if (fonts.FontFamily) {\n            const fontFamilies = Array.isArray(fonts.FontFamily) ? fonts.FontFamily : [\n                fonts.FontFamily\n            ];\n            fontFamilies.forEach((family)=>{\n                const familyInfo = {\n                    self: family[\"@_Self\"],\n                    name: family[\"@_Name\"] || \"\",\n                    fonts: []\n                };\n                if (family.Font) {\n                    const fontList = Array.isArray(family.Font) ? family.Font : [\n                        family.Font\n                    ];\n                    fontList.forEach((font)=>{\n                        const fontInfo = {\n                            self: font[\"@_Self\"],\n                            fontFamily: font[\"@_FontFamily\"] || familyInfo.name,\n                            name: font[\"@_Name\"] || \"\",\n                            postScriptName: font[\"@_PostScriptName\"] || \"\",\n                            status: font[\"@_Status\"] || \"Unknown\",\n                            fontStyleName: font[\"@_FontStyleName\"] || \"Regular\"\n                        };\n                        familyInfo.fonts.push(fontInfo);\n                        // Create multiple lookup entries for this font\n                        this.fontMap.set(font[\"@_Self\"], familyInfo.name);\n                        this.fontMap.set(font[\"@_PostScriptName\"], familyInfo.name);\n                        this.fontMap.set(font[\"@_Name\"], familyInfo.name);\n                        this.fontMap.set(font[\"@_FontFamily\"], familyInfo.name);\n                        console.log(\"Font mapping: \".concat(font[\"@_Self\"], \" -> \").concat(familyInfo.name));\n                    });\n                }\n                this.resources.fonts[family[\"@_Self\"]] = familyInfo;\n            });\n        }\n        console.log(\"✅ Fonts extracted: \".concat(Object.keys(this.resources.fonts).length, \" families\"));\n        console.log(\"Font map entries: \".concat(this.fontMap.size));\n    }\n    async extractGraphics(graphicsData) {\n        console.log(\"Extracting graphics and colors...\");\n        const graphics = graphicsData.Graphic || graphicsData;\n        this.resources.colors = {};\n        this.resources.gradients = {};\n        // Extract Colors\n        if (graphics.Color) {\n            const colors = Array.isArray(graphics.Color) ? graphics.Color : [\n                graphics.Color\n            ];\n            colors.forEach((color)=>{\n                // Extract individual channel values from attributes (if present)\n                const cyan = parseFloat(color[\"@_Cyan\"]) || 0;\n                const magenta = parseFloat(color[\"@_Magenta\"]) || 0;\n                const yellow = parseFloat(color[\"@_Yellow\"]) || 0;\n                const black = parseFloat(color[\"@_Black\"]) || 0;\n                const red = parseFloat(color[\"@_Red\"]) || 0;\n                const green = parseFloat(color[\"@_Green\"]) || 0;\n                const blue = parseFloat(color[\"@_Blue\"]) || 0;\n                // Get color space and model information\n                const colorSpace = color[\"@_Space\"] || \"CMYK\";\n                const colorModel = color[\"@_Model\"] || \"Process\";\n                const colorValue = color[\"@_ColorValue\"];\n                const colorName = color[\"@_Name\"] || \"\";\n                const colorSelf = color[\"@_Self\"] || \"\";\n                console.log(\"\\uD83C\\uDFA8 Processing color: \".concat(colorSelf));\n                console.log('   Name: \"'.concat(colorName, '\", Space: ').concat(colorSpace, \", Model: \").concat(colorModel));\n                console.log('   ColorValue: \"'.concat(colorValue, '\"'));\n                console.log(\"   Individual channels - C:\".concat(cyan, \" M:\").concat(magenta, \" Y:\").concat(yellow, \" K:\").concat(black, \" R:\").concat(red, \" G:\").concat(green, \" B:\").concat(blue));\n                // CRITICAL: Determine if this is a custom color that should use RGB ColorValue\n                const isCustomColor = this.isCustomColorName(colorSelf, colorName);\n                console.log(\"   \\uD83D\\uDD0D Is custom color: \".concat(isCustomColor));\n                // Initialize color data structure\n                let finalColorData = {\n                    self: colorSelf,\n                    name: colorName,\n                    model: colorModel,\n                    space: colorSpace,\n                    cyan: 0,\n                    magenta: 0,\n                    yellow: 0,\n                    black: 0,\n                    red: 0,\n                    green: 0,\n                    blue: 0,\n                    // Additional fields to track color source\n                    colorSource: \"unknown\",\n                    hasDirectRGB: false,\n                    hasDirectCMYK: false,\n                    hasColorValue: !!colorValue,\n                    isCustomColor: isCustomColor\n                };\n                // STRATEGY 1: Check for direct RGB values in individual attributes\n                if (red > 0 || green > 0 || blue > 0) {\n                    console.log(\"   ✅ Using direct RGB from individual channels: R:\".concat(red, \" G:\").concat(green, \" B:\").concat(blue));\n                    finalColorData.red = red;\n                    finalColorData.green = green;\n                    finalColorData.blue = blue;\n                    finalColorData.colorSource = \"direct_rgb_channels\";\n                    finalColorData.hasDirectRGB = true;\n                } else if (cyan > 0 || magenta > 0 || yellow > 0 || black > 0) {\n                    console.log(\"   ✅ Using direct CMYK from individual channels: C:\".concat(cyan, \" M:\").concat(magenta, \" Y:\").concat(yellow, \" K:\").concat(black));\n                    finalColorData.cyan = cyan;\n                    finalColorData.magenta = magenta;\n                    finalColorData.yellow = yellow;\n                    finalColorData.black = black;\n                    finalColorData.colorSource = \"direct_cmyk_channels\";\n                    finalColorData.hasDirectCMYK = true;\n                } else if (colorValue && isCustomColor) {\n                    console.log('   \\uD83D\\uDD0D Parsing ColorValue for CUSTOM color: \"'.concat(colorValue, '\"'));\n                    // Split ColorValue into numeric parts\n                    const valueParts = colorValue.split(/\\s+/).map(Number).filter((v)=>!isNaN(v));\n                    if (valueParts.length === 3 && colorSpace === \"RGB\") {\n                        // RGB ColorValue: \"255 137 0\" -> R:255 G:137 B:0\n                        console.log(\"   ✅ Using RGB ColorValue for custom color: R:\".concat(valueParts[0], \" G:\").concat(valueParts[1], \" B:\").concat(valueParts[2]));\n                        finalColorData.red = valueParts[0];\n                        finalColorData.green = valueParts[1];\n                        finalColorData.blue = valueParts[2];\n                        finalColorData.colorSource = \"colorvalue_rgb_custom\";\n                        finalColorData.hasDirectRGB = true;\n                    } else if (valueParts.length === 4 && colorSpace === \"CMYK\") {\n                        // CMYK ColorValue: \"0 0 0 100\" -> C:0 M:0 Y:0 K:100\n                        console.log(\"   ✅ Using CMYK ColorValue for custom color: C:\".concat(valueParts[0], \" M:\").concat(valueParts[1], \" Y:\").concat(valueParts[2], \" K:\").concat(valueParts[3]));\n                        finalColorData.cyan = valueParts[0];\n                        finalColorData.magenta = valueParts[1];\n                        finalColorData.yellow = valueParts[2];\n                        finalColorData.black = valueParts[3];\n                        finalColorData.colorSource = \"colorvalue_cmyk_custom\";\n                        finalColorData.hasDirectCMYK = true;\n                    } else if (valueParts.length === 3) {\n                        // Assume RGB if space is unknown but we have 3 values (for custom colors)\n                        console.log(\"   ⚠️  Assuming RGB for 3-value ColorValue on custom color: R:\".concat(valueParts[0], \" G:\").concat(valueParts[1], \" B:\").concat(valueParts[2]));\n                        finalColorData.red = valueParts[0];\n                        finalColorData.green = valueParts[1];\n                        finalColorData.blue = valueParts[2];\n                        finalColorData.space = \"RGB\";\n                        finalColorData.colorSource = \"colorvalue_assumed_rgb_custom\";\n                        finalColorData.hasDirectRGB = true;\n                    } else {\n                        console.log('   ⚠️  Could not parse ColorValue for custom color: \"'.concat(colorValue, '\" (').concat(valueParts.length, \" parts)\"));\n                        finalColorData.colorSource = \"colorvalue_unparseable_custom\";\n                    }\n                } else if (colorValue && !isCustomColor) {\n                    console.log('   \\uD83D\\uDD0D Parsing ColorValue for STANDARD color: \"'.concat(colorValue, '\"'));\n                    // Split ColorValue into numeric parts\n                    const valueParts = colorValue.split(/\\s+/).map(Number).filter((v)=>!isNaN(v));\n                    if (valueParts.length === 4 && colorSpace === \"CMYK\") {\n                        // Only use CMYK ColorValue for standard colors, ignore RGB ColorValue\n                        console.log(\"   ✅ Using CMYK ColorValue for standard color: C:\".concat(valueParts[0], \" M:\").concat(valueParts[1], \" Y:\").concat(valueParts[2], \" K:\").concat(valueParts[3]));\n                        finalColorData.cyan = valueParts[0];\n                        finalColorData.magenta = valueParts[1];\n                        finalColorData.yellow = valueParts[2];\n                        finalColorData.black = valueParts[3];\n                        finalColorData.colorSource = \"colorvalue_cmyk_standard\";\n                        finalColorData.hasDirectCMYK = true;\n                    } else if (valueParts.length === 3 && colorSpace === \"RGB\") {\n                        // Skip RGB ColorValue for standard colors to avoid \"0 0 0\" issues\n                        console.log('   ⚠️  Skipping RGB ColorValue for standard color (avoiding black fallback): \"'.concat(colorValue, '\"'));\n                        finalColorData.colorSource = \"colorvalue_rgb_skipped_standard\";\n                    } else {\n                        console.log('   ⚠️  Could not parse ColorValue for standard color: \"'.concat(colorValue, '\" (').concat(valueParts.length, \" parts)\"));\n                        finalColorData.colorSource = \"colorvalue_unparseable_standard\";\n                    }\n                }\n                // STRATEGY 5: Handle special color types (fallback)\n                if (finalColorData.colorSource === \"unknown\") {\n                    console.log(\"   \\uD83D\\uDD04 Using fallback handling for color: \".concat(colorSelf));\n                    finalColorData.colorSource = \"fallback\";\n                    // For standard colors with no data, don't store them at all\n                    // This will cause them to fall through to the gray fallback in ColorUtils\n                    if (!isCustomColor && finalColorData.cyan === 0 && finalColorData.magenta === 0 && finalColorData.yellow === 0 && finalColorData.black === 0 && finalColorData.red === 0 && finalColorData.green === 0 && finalColorData.blue === 0) {\n                        console.log(\"   ⚠️  Standard color with no valid data - skipping storage to allow gray fallback\");\n                        return; // Skip storing this color completely\n                    }\n                }\n                // Store the color data\n                this.resources.colors[colorSelf] = finalColorData;\n                console.log(\"   \\uD83D\\uDCBE Stored color data:\", {\n                    self: finalColorData.self,\n                    source: finalColorData.colorSource,\n                    hasRGB: finalColorData.hasDirectRGB,\n                    hasCMYK: finalColorData.hasDirectCMYK,\n                    isCustom: finalColorData.isCustomColor,\n                    rgb: \"\".concat(finalColorData.red, \",\").concat(finalColorData.green, \",\").concat(finalColorData.blue),\n                    cmyk: \"\".concat(finalColorData.cyan, \",\").concat(finalColorData.magenta, \",\").concat(finalColorData.yellow, \",\").concat(finalColorData.black)\n                });\n            });\n        }\n        // Extract Gradients\n        if (graphics.Gradient) {\n            const gradients = Array.isArray(graphics.Gradient) ? graphics.Gradient : [\n                graphics.Gradient\n            ];\n            gradients.forEach((gradient)=>{\n                this.resources.gradients[gradient[\"@_Self\"]] = {\n                    self: gradient[\"@_Self\"],\n                    name: gradient[\"@_Name\"] || \"\",\n                    type: gradient[\"@_Type\"] || \"Linear\",\n                    gradientStops: this.extractGradientStops(gradient)\n                };\n            });\n        }\n        console.log(\"✅ Graphics extraction complete. Colors: \".concat(Object.keys(this.resources.colors).length, \", Gradients: \").concat(Object.keys(this.resources.gradients).length));\n    }\n    // NEW METHOD: Determine if a color is custom and should use RGB ColorValue\n    isCustomColorName(colorSelf, colorName) {\n        // Standard/predefined InDesign colors that should NOT use RGB ColorValue\n        const standardColors = [\n            \"Color/Black\",\n            \"Color/White\",\n            \"Color/Red\",\n            \"Color/Green\",\n            \"Color/Blue\",\n            \"Color/Cyan\",\n            \"Color/Magenta\",\n            \"Color/Yellow\",\n            \"Color/Paper\",\n            \"Color/Registration\",\n            \"Color/None\"\n        ];\n        // Standard color patterns (CMYK values in the name)\n        const cmykPattern = /Color\\/C=[\\d.]+\\s*M=[\\d.]+\\s*Y=[\\d.]+\\s*K=[\\d.]+/;\n        const rgbPattern = /Color\\/R=[\\d.]+\\s*G=[\\d.]+\\s*B=[\\d.]+/;\n        // Check if it's a standard color\n        if (standardColors.includes(colorSelf)) {\n            return false;\n        }\n        // Check if it follows CMYK or RGB pattern (these are auto-generated, not custom)\n        if (cmykPattern.test(colorSelf) || rgbPattern.test(colorSelf)) {\n            return false;\n        }\n        // Check for hidden/system colors\n        if (colorSelf.includes(\"/u\") && /\\/u\\d+$/.test(colorSelf)) {\n            return false;\n        }\n        // If color name is generic or empty, it's likely not custom\n        if (!colorName || colorName === \"\" || colorName === \"$ID/\") {\n            return false;\n        }\n        // Custom colors typically have meaningful names like \"Main\", \"Brand\", \"Accent\", etc.\n        const customColorPatterns = [\n            /main/i,\n            /brand/i,\n            /accent/i,\n            /primary/i,\n            /secondary/i,\n            /theme/i,\n            /custom/i\n        ];\n        // Check if the name matches custom patterns\n        const hasCustomPattern = customColorPatterns.some((pattern)=>pattern.test(colorName) || pattern.test(colorSelf));\n        if (hasCustomPattern) {\n            return true;\n        }\n        // If it's not a standard color and has a meaningful name, consider it custom\n        return colorName.length > 2 && !colorName.includes(\"$ID/\");\n    }\n    extractGradientStops(gradient) {\n        const stops = [];\n        if (gradient.GradientStop) {\n            const stopList = Array.isArray(gradient.GradientStop) ? gradient.GradientStop : [\n                gradient.GradientStop\n            ];\n            stopList.forEach((stop)=>{\n                stops.push({\n                    self: stop[\"@_Self\"],\n                    stopColor: stop[\"@_StopColor\"] || \"\",\n                    location: parseFloat(stop[\"@_Location\"]) || 0,\n                    midpoint: parseFloat(stop[\"@_Midpoint\"]) || 50\n                });\n            });\n        }\n        return stops;\n    }\n    async extractPreferences(preferencesData) {\n        console.log(\"Extracting document preferences...\");\n        const prefs = preferencesData.Preferences || preferencesData;\n        // Extract various document preferences\n        this.documentInfo = {\n            preferences: {\n                documentPreferences: this.extractDocumentPrefs(prefs.DocumentPreference),\n                viewPreferences: this.extractViewPrefs(prefs.ViewPreference),\n                guidePreferences: this.extractGuidePrefs(prefs.GuidePreference),\n                gridPreferences: this.extractGridPrefs(prefs.GridPreference),\n                marginPreferences: this.extractMarginPrefs(prefs.MarginPreference),\n                columnPreferences: this.extractColumnPrefs(prefs.ColumnPreference)\n            }\n        };\n    }\n    extractDocumentPrefs(docPref) {\n        if (!docPref) return {};\n        return {\n            pageWidth: parseFloat(docPref[\"@_PageWidth\"]) || 0,\n            pageHeight: parseFloat(docPref[\"@_PageHeight\"]) || 0,\n            left: parseFloat(docPref[\"@_Left\"]) || 0,\n            top: parseFloat(docPref[\"@_Top\"]) || 0,\n            right: parseFloat(docPref[\"@_Right\"]) || 0,\n            bottom: parseFloat(docPref[\"@_Bottom\"]) || 0,\n            columnCount: parseInt(docPref[\"@_ColumnCount\"]) || 1,\n            columnGutter: parseFloat(docPref[\"@_ColumnGutter\"]) || 0,\n            facingPages: docPref[\"@_FacingPages\"] === true,\n            allowPageShuffle: docPref[\"@_AllowPageShuffle\"] !== false,\n            slugBleedType: docPref[\"@_SlugBleedType\"] || \"None\",\n            documentBleedTopOffset: parseFloat(docPref[\"@_DocumentBleedTopOffset\"]) || 0,\n            documentBleedBottomOffset: parseFloat(docPref[\"@_DocumentBleedBottomOffset\"]) || 0,\n            documentBleedInsideOrLeftOffset: parseFloat(docPref[\"@_DocumentBleedInsideOrLeftOffset\"]) || 0,\n            documentBleedOutsideOrRightOffset: parseFloat(docPref[\"@_DocumentBleedOutsideOrRightOffset\"]) || 0\n        };\n    }\n    extractViewPrefs(viewPref) {\n        if (!viewPref) return {};\n        return {\n            horizontalMeasurementUnits: viewPref[\"@_HorizontalMeasurementUnits\"] || \"Points\",\n            verticalMeasurementUnits: viewPref[\"@_VerticalMeasurementUnits\"] || \"Points\",\n            rulerOrigin: viewPref[\"@_RulerOrigin\"] || \"SpreadOrigin\",\n            showRulers: viewPref[\"@_ShowRulers\"] !== false\n        };\n    }\n    extractGuidePrefs(guidePref) {\n        if (!guidePref) return {};\n        return {\n            rulerGuideColor: guidePref[\"@_RulerGuideColor\"] || \"Green\",\n            guidesInBack: guidePref[\"@_GuidesInBack\"] === true,\n            guidesLocked: guidePref[\"@_GuidesLocked\"] === true,\n            guidesShown: guidePref[\"@_GuidesShown\"] !== false,\n            guidesSnapto: guidePref[\"@_GuidesSnapto\"] !== false\n        };\n    }\n    extractGridPrefs(gridPref) {\n        if (!gridPref) return {};\n        return {\n            baselineStart: parseFloat(gridPref[\"@_BaselineStart\"]) || 0,\n            baselineDivision: parseFloat(gridPref[\"@_BaselineDivision\"]) || 12,\n            baselineShown: gridPref[\"@_BaselineShown\"] === true,\n            baselineSnapto: gridPref[\"@_BaselineSnapto\"] === true,\n            documentGridShown: gridPref[\"@_DocumentGridShown\"] === true,\n            documentGridSnapto: gridPref[\"@_DocumentGridSnapto\"] === true\n        };\n    }\n    extractMarginPrefs(marginPref) {\n        if (!marginPref) return {};\n        return {\n            top: parseFloat(marginPref[\"@_Top\"]) || 0,\n            bottom: parseFloat(marginPref[\"@_Bottom\"]) || 0,\n            left: parseFloat(marginPref[\"@_Left\"]) || 0,\n            right: parseFloat(marginPref[\"@_Right\"]) || 0,\n            columnCount: parseInt(marginPref[\"@_ColumnCount\"]) || 1,\n            columnGutter: parseFloat(marginPref[\"@_ColumnGutter\"]) || 0\n        };\n    }\n    extractColumnPrefs(columnPref) {\n        if (!columnPref) return {};\n        return {\n            textColumnCount: parseInt(columnPref[\"@_TextColumnCount\"]) || 1,\n            textColumnGutter: parseFloat(columnPref[\"@_TextColumnGutter\"]) || 0\n        };\n    }\n    resolveStyleFormatting(formatting) {\n        const resolved = {\n            ...formatting\n        };\n        // DEBUG: Check if formatting is being applied (generic check)\n        const hasAnyFormatting = formatting.paragraphStyle || formatting.characterStyle || formatting.fontStyle || formatting.fontReference || formatting.fontSize;\n        if (hasAnyFormatting) {\n            console.log(\"\\uD83D\\uDD27 StyleParser.resolveStyleFormatting - Input:\", {\n                paragraphStyle: formatting.paragraphStyle,\n                characterStyle: formatting.characterStyle,\n                directFontStyle: formatting.fontStyle,\n                directFontRef: formatting.fontReference,\n                directFontSize: formatting.fontSize\n            });\n        }\n        // Resolve paragraph style (base layer)\n        if (formatting.paragraphStyle && this.styles.paragraph[formatting.paragraphStyle]) {\n            const pStyle = this.styles.paragraph[formatting.paragraphStyle];\n            if (!resolved.fontSize && pStyle.pointSize) resolved.fontSize = pStyle.pointSize;\n            if (!resolved.fillColor && pStyle.fillColor) resolved.fillColor = pStyle.fillColor;\n            // CRITICAL FIX: Always inherit paragraph alignment unless explicitly overridden\n            if (pStyle.alignment) resolved.alignment = pStyle.alignment;\n            if (!resolved.fontStyle && pStyle.fontStyle) {\n                resolved.fontStyle = pStyle.fontStyle;\n                if (hasAnyFormatting) {\n                    console.log('   FontStyle from paragraph style: \"'.concat(pStyle.fontStyle, '\"'));\n                }\n            }\n            // CRITICAL: Resolve font from paragraph style\n            if (!resolved.fontFamily && pStyle.appliedFont) {\n                resolved.fontFamily = this.resolveFontReference(pStyle.appliedFont);\n                if (hasAnyFormatting) {\n                    console.log(\"   Font from paragraph style: \".concat(pStyle.appliedFont, \" -> \").concat(resolved.fontFamily));\n                }\n            }\n            // Add other paragraph properties with enhanced leading support\n            resolved.leading = pStyle.leading;\n            resolved.leadingType = pStyle.leadingType;\n            resolved.effectiveLineHeight = pStyle.effectiveLineHeight;\n            resolved.leftIndent = pStyle.leftIndent;\n            resolved.rightIndent = pStyle.rightIndent;\n            resolved.firstLineIndent = pStyle.firstLineIndent;\n            resolved.spaceBefore = pStyle.spaceBefore;\n            resolved.spaceAfter = pStyle.spaceAfter;\n            resolved.tracking = pStyle.tracking;\n            resolved.kerning = pStyle.kerning;\n        }\n        // Resolve character style (override layer)\n        if (formatting.characterStyle && this.styles.character[formatting.characterStyle]) {\n            const cStyle = this.styles.character[formatting.characterStyle];\n            if (cStyle.pointSize) resolved.fontSize = cStyle.pointSize;\n            if (cStyle.fillColor) resolved.fillColor = cStyle.fillColor;\n            if (cStyle.fontStyle) {\n                resolved.fontStyle = cStyle.fontStyle;\n                if (hasAnyFormatting) {\n                    console.log('   FontStyle from character style: \"'.concat(cStyle.fontStyle, '\"'));\n                }\n            }\n            if (cStyle.strokeColor) resolved.strokeColor = cStyle.strokeColor;\n            // Include leading information from character style\n            if (cStyle.leading) resolved.leading = cStyle.leading;\n            if (cStyle.leadingType) resolved.leadingType = cStyle.leadingType;\n            if (cStyle.effectiveLineHeight) resolved.effectiveLineHeight = cStyle.effectiveLineHeight;\n            // CRITICAL: Character style font overrides paragraph style\n            if (cStyle.appliedFont) {\n                resolved.fontFamily = this.resolveFontReference(cStyle.appliedFont);\n                if (hasAnyFormatting) {\n                    console.log(\"   Font from character style: \".concat(cStyle.appliedFont, \" -> \").concat(resolved.fontFamily));\n                }\n            }\n        }\n        // Apply direct formatting (highest priority)\n        if (formatting.fontReference) {\n            resolved.fontFamily = this.resolveFontReference(formatting.fontReference);\n            if (hasAnyFormatting) {\n                console.log(\"   Font from direct formatting: \".concat(formatting.fontReference, \" -> \").concat(resolved.fontFamily));\n            }\n        }\n        // CRITICAL: Apply direct fontStyle if provided (this might be the issue)\n        if (formatting.fontStyle) {\n            resolved.fontStyle = formatting.fontStyle;\n            if (hasAnyFormatting) {\n                console.log('   FontStyle from direct formatting: \"'.concat(formatting.fontStyle, '\"'));\n            }\n        }\n        // Apply direct leading information (highest priority)\n        if (formatting.leading !== undefined) resolved.leading = formatting.leading;\n        if (formatting.leadingType) resolved.leadingType = formatting.leadingType;\n        if (formatting.effectiveLineHeight) resolved.effectiveLineHeight = formatting.effectiveLineHeight;\n        // Apply other direct formatting attributes\n        if (formatting.fontSize) resolved.fontSize = formatting.fontSize;\n        if (formatting.tracking) resolved.tracking = formatting.tracking;\n        if (formatting.kerning) resolved.kerning = formatting.kerning;\n        // CRITICAL FIX: Apply direct alignment if explicitly specified (overrides paragraph alignment)\n        if (formatting.alignment) {\n            resolved.alignment = formatting.alignment;\n            if (hasAnyFormatting) {\n                console.log('   Alignment from direct formatting: \"'.concat(formatting.alignment, '\"'));\n            }\n        }\n        // FIXED: Ensure fontStyle defaults to Regular/normal if not set\n        if (!resolved.fontStyle || resolved.fontStyle === \"\") {\n            resolved.fontStyle = \"Regular\";\n            if (hasAnyFormatting) {\n                console.log('   FontStyle defaulted to: \"Regular\"');\n            }\n        }\n        // ADDITIONAL FIX: If no styles were applied from any source, ensure clean defaults\n        if (!formatting.paragraphStyle && !formatting.characterStyle && !formatting.fontStyle && !formatting.fontReference) {\n            resolved.fontStyle = \"Regular\";\n            if (hasAnyFormatting) {\n                console.log(\"   No source styles found - ensuring clean defaults\");\n            }\n        }\n        // Final fallback\n        if (!resolved.fontFamily || resolved.fontFamily === \"\") {\n            resolved.fontFamily = this.getDefaultFont();\n            if (hasAnyFormatting) {\n                console.log(\"   Using fallback font: \".concat(resolved.fontFamily));\n            }\n        }\n        // Ensure line height is calculated if not explicitly set\n        if (!resolved.effectiveLineHeight && resolved.fontSize && resolved.leading) {\n            resolved.effectiveLineHeight = this.calculateEffectiveLineHeight(resolved.leading, resolved.fontSize);\n        }\n        if (hasAnyFormatting) {\n            console.log(\"\\uD83D\\uDD27 StyleParser.resolveStyleFormatting - Final Output:\", {\n                fontSize: resolved.fontSize,\n                fontFamily: resolved.fontFamily,\n                fontStyle: resolved.fontStyle,\n                fillColor: resolved.fillColor,\n                leading: resolved.leading,\n                effectiveLineHeight: resolved.effectiveLineHeight\n            });\n        }\n        return resolved;\n    }\n    resolveFontReference(fontRef) {\n        if (!fontRef || fontRef === \"\") {\n            console.log(\"Empty font reference, using fallback\");\n            return this.getDefaultFont();\n        }\n        // Try direct lookup in font map\n        if (this.fontMap && this.fontMap.has(fontRef)) {\n            const resolvedFont = this.fontMap.get(fontRef);\n            console.log('Font resolved: \"'.concat(fontRef, '\" -> \"').concat(resolvedFont, '\"'));\n            return resolvedFont;\n        }\n        // Try partial matching for font families\n        if (this.resources.fonts) {\n            for (const [familyId, familyInfo] of Object.entries(this.resources.fonts)){\n                // Check family name match\n                if (familyInfo.name && (familyInfo.name.toLowerCase().includes(fontRef.toLowerCase()) || fontRef.toLowerCase().includes(familyInfo.name.toLowerCase()))) {\n                    console.log('Font partially matched: \"'.concat(fontRef, '\" -> \"').concat(familyInfo.name, '\"'));\n                    return familyInfo.name;\n                }\n                // Check individual font matches\n                if (familyInfo.fonts) {\n                    for (const font of familyInfo.fonts){\n                        if (font.self === fontRef || font.postScriptName === fontRef || font.name === fontRef) {\n                            console.log('Font exactly matched: \"'.concat(fontRef, '\" -> \"').concat(familyInfo.name, '\"'));\n                            return familyInfo.name;\n                        }\n                    }\n                }\n            }\n        }\n        console.log('Font not found: \"'.concat(fontRef, '\", using fallback'));\n        return this.getDefaultFont() || fontRef;\n    }\n    getDefaultFont() {\n        if (this.resources.fonts && Object.keys(this.resources.fonts).length > 0) {\n            const firstFamily = Object.values(this.resources.fonts)[0];\n            return firstFamily.name || \"Arial\";\n        }\n        return \"Arial\";\n    }\n    inferFontFromContext() {\n        // If we have font definitions but no explicit references,\n        // return the first available font as a fallback\n        if (this.resources.fonts && Object.keys(this.resources.fonts).length > 0) {\n            const firstFontFamily = Object.values(this.resources.fonts)[0];\n            return firstFontFamily.name;\n        }\n        return null;\n    }\n    getStoryStyleSummary(story) {\n        var _story_content_formattedContent, _story_content;\n        const summary = {\n            fontSize: null,\n            fontFamily: null,\n            alignment: null,\n            fillColor: null,\n            fontStyle: null,\n            leading: null,\n            leadingType: null,\n            effectiveLineHeight: null,\n            tracking: null,\n            kerning: null\n        };\n        // Get the most common or first formatting values\n        if (((_story_content = story.content) === null || _story_content === void 0 ? void 0 : (_story_content_formattedContent = _story_content.formattedContent) === null || _story_content_formattedContent === void 0 ? void 0 : _story_content_formattedContent.length) > 0) {\n            const firstFormatted = story.content.formattedContent.find((item)=>item.formatting && !item.formatting.isBreak);\n            if (firstFormatted === null || firstFormatted === void 0 ? void 0 : firstFormatted.formatting) {\n                const fmt = firstFormatted.formatting;\n                summary.fontSize = fmt.fontSize;\n                summary.fontFamily = fmt.fontFamily;\n                summary.alignment = fmt.alignment;\n                summary.fillColor = fmt.fillColor;\n                summary.fontStyle = fmt.fontStyle;\n                summary.leading = fmt.leading;\n                summary.leadingType = fmt.leadingType;\n                summary.effectiveLineHeight = fmt.effectiveLineHeight;\n                summary.tracking = fmt.tracking;\n                summary.kerning = fmt.kerning;\n            }\n        }\n        return summary;\n    }\n    // NEW: Process leading values with InDesign-specific logic (shared with StoryParser)\n    processLeadingValue(rawLeading, fontSize) {\n        if (!rawLeading) return \"auto\";\n        // Handle \"auto\" leading\n        if (rawLeading === \"auto\" || rawLeading === \"Auto\") {\n            return fontSize ? fontSize * 1.2 : \"auto\"; // InDesign default auto leading is 120%\n        }\n        // Handle numeric leading (in points)\n        const numericLeading = parseFloat(rawLeading);\n        if (!isNaN(numericLeading)) {\n            return numericLeading;\n        }\n        // Handle percentage-based leading\n        if (rawLeading.includes(\"%\")) {\n            const percentage = parseFloat(rawLeading.replace(\"%\", \"\"));\n            return fontSize ? fontSize * percentage / 100 : \"auto\";\n        }\n        return \"auto\";\n    }\n    // NEW: Determine the type of leading being used\n    determineLeadingType(rawLeading) {\n        if (!rawLeading || rawLeading === \"auto\" || rawLeading === \"Auto\") {\n            return \"auto\";\n        }\n        if (rawLeading.includes(\"%\")) {\n            return \"percentage\";\n        }\n        if (!isNaN(parseFloat(rawLeading))) {\n            return \"absolute\";\n        }\n        return \"unknown\";\n    }\n    // NEW: Calculate effective line height for CSS rendering\n    calculateEffectiveLineHeight(leading, fontSize) {\n        if (leading === \"auto\") {\n            return 1.2; // CSS line-height ratio for auto\n        }\n        if (typeof leading === \"number\" && fontSize) {\n            // Convert points to CSS line-height ratio\n            return Math.max(0.8, leading / fontSize); // Ensure minimum line height\n        }\n        return 1.2; // Fallback\n    }\n    getStyles() {\n        return this.styles;\n    }\n    getResources() {\n        return this.resources;\n    }\n    getFontMap() {\n        return this.fontMap;\n    }\n    // Add methods to return style and font definitions for debug\n    getParagraphStyles() {\n        return this.styles.paragraph;\n    }\n    getCharacterStyles() {\n        return this.styles.character;\n    }\n    getFontDefinitions() {\n        // Prefer plain object for debug output\n        if (this.resources && this.resources.fonts) {\n            return this.resources.fonts;\n        }\n        // Fallback: convert fontMap to object\n        if (this.fontMap && typeof this.fontMap.entries === \"function\") {\n            return Object.fromEntries(this.fontMap.entries());\n        }\n        return {};\n    }\n    // FIXED: Add method to access document preferences including ViewPreferences\n    getDocumentInfo() {\n        return this.documentInfo;\n    }\n    constructor(unitConverter = null){\n        this.styles = {\n            paragraph: {},\n            character: {},\n            object: {},\n            table: {},\n            cell: {}\n        };\n        this.resources = {\n            fonts: {},\n            colors: {},\n            gradients: {}\n        };\n        this.fontMap = new Map(); // Global font lookup map\n        this.unitConverter = unitConverter; // ADDED: Unit converter for typography measurements\n        this.documentUnits = null; // Will be set from document units\n    }\n}\nmodule.exports = StyleParser;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/parsers/StyleParser.js\n"));

/***/ }),

/***/ "./lib/parsers/XMLParser.js":
/*!**********************************!*\
  !*** ./lib/parsers/XMLParser.js ***!
  \**********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nconst { XMLParser } = __webpack_require__(/*! fast-xml-parser */ \"./node_modules/fast-xml-parser/src/fxp.js\");\nclass IDMLXMLParser {\n    parse(xmlContent) {\n        try {\n            return this.xmlParser.parse(xmlContent);\n        } catch (error) {\n            console.error(\"Error parsing XML:\", error);\n            throw error;\n        }\n    }\n    parseWithErrorHandling(xmlContent) {\n        let fileName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"unknown\";\n        try {\n            const parsed = this.xmlParser.parse(xmlContent);\n            return {\n                success: true,\n                data: parsed,\n                error: null\n            };\n        } catch (error) {\n            console.error(\"Error parsing XML file \".concat(fileName, \":\"), error.message);\n            return {\n                success: false,\n                data: null,\n                error: error.message\n            };\n        }\n    }\n    validateXMLStructure(xmlContent) {\n        if (!xmlContent || typeof xmlContent !== \"string\") {\n            return {\n                valid: false,\n                error: \"Invalid XML content\"\n            };\n        }\n        if (!xmlContent.trim().startsWith(\"<\")) {\n            return {\n                valid: false,\n                error: \"Content does not appear to be XML\"\n            };\n        }\n        try {\n            this.xmlParser.parse(xmlContent);\n            return {\n                valid: true,\n                error: null\n            };\n        } catch (error) {\n            return {\n                valid: false,\n                error: error.message\n            };\n        }\n    }\n    extractRootElement(parsedXML) {\n        if (!parsedXML || typeof parsedXML !== \"object\") {\n            return null;\n        }\n        const keys = Object.keys(parsedXML);\n        if (keys.length === 1) {\n            return parsedXML[keys[0]];\n        }\n        return parsedXML;\n    }\n    findElementsByAttribute(obj, attributeName) {\n        let attributeValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n        const results = [];\n        const search = function(current) {\n            let path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n            if (typeof current === \"object\" && current !== null) {\n                // Check if current object has the attribute\n                if (current[attributeName] !== undefined) {\n                    if (attributeValue === null || current[attributeName] === attributeValue) {\n                        results.push({\n                            element: current,\n                            path: path,\n                            value: current[attributeName]\n                        });\n                    }\n                }\n                // Recursively search nested objects\n                Object.keys(current).forEach((key)=>{\n                    if (typeof current[key] === \"object\") {\n                        search(current[key], path ? \"\".concat(path, \".\").concat(key) : key);\n                    }\n                });\n            }\n        };\n        search(obj);\n        return results;\n    }\n    findElementsByType(obj, elementType) {\n        const results = [];\n        const search = function(current) {\n            let path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n            if (typeof current === \"object\" && current !== null) {\n                // Check if we found the element type\n                if (current[elementType]) {\n                    const elements = Array.isArray(current[elementType]) ? current[elementType] : [\n                        current[elementType]\n                    ];\n                    elements.forEach((element, index)=>{\n                        results.push({\n                            element: element,\n                            path: \"\".concat(path, \".\").concat(elementType, \"[\").concat(index, \"]\"),\n                            type: elementType\n                        });\n                    });\n                }\n                // Continue searching in nested objects\n                Object.keys(current).forEach((key)=>{\n                    if (typeof current[key] === \"object\" && key !== elementType) {\n                        search(current[key], path ? \"\".concat(path, \".\").concat(key) : key);\n                    }\n                });\n            }\n        };\n        search(obj);\n        return results;\n    }\n    extractAllAttributes(obj) {\n        let prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"@_\";\n        const attributes = {};\n        const extract = function(current) {\n            let path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n            if (typeof current === \"object\" && current !== null) {\n                Object.keys(current).forEach((key)=>{\n                    if (key.startsWith(prefix)) {\n                        const fullPath = path ? \"\".concat(path, \".\").concat(key) : key;\n                        attributes[fullPath] = current[key];\n                    } else if (typeof current[key] === \"object\") {\n                        extract(current[key], path ? \"\".concat(path, \".\").concat(key) : key);\n                    }\n                });\n            }\n        };\n        extract(obj);\n        return attributes;\n    }\n    getElementHierarchy(obj) {\n        let maxDepth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;\n        const hierarchy = {};\n        const buildHierarchy = function(current) {\n            let depth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"\";\n            if (depth >= maxDepth || typeof current !== \"object\" || current === null) {\n                return typeof current;\n            }\n            const structure = {};\n            Object.keys(current).forEach((key)=>{\n                if (Array.isArray(current[key])) {\n                    structure[key] = {\n                        type: \"array\",\n                        length: current[key].length,\n                        children: current[key].length > 0 ? buildHierarchy(current[key][0], depth + 1, \"\".concat(path, \".\").concat(key, \"[0]\")) : null\n                    };\n                } else if (typeof current[key] === \"object\" && current[key] !== null) {\n                    structure[key] = {\n                        type: \"object\",\n                        children: buildHierarchy(current[key], depth + 1, \"\".concat(path, \".\").concat(key))\n                    };\n                } else {\n                    structure[key] = {\n                        type: typeof current[key],\n                        value: key.startsWith(\"@_\") ? current[key] : null\n                    };\n                }\n            });\n            return structure;\n        };\n        return buildHierarchy(obj);\n    }\n    normalizeXMLContent(xmlContent) {\n        return xmlContent.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\").trim();\n    }\n    logXMLStructure(parsedXML) {\n        let maxDepth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3;\n        console.log(\"XML Structure Analysis:\");\n        const analyzeStructure = function(obj) {\n            let depth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, prefix = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"\";\n            if (depth >= maxDepth || typeof obj !== \"object\" || obj === null) {\n                return;\n            }\n            Object.keys(obj).forEach((key)=>{\n                const value = obj[key];\n                const indent = \"  \".repeat(depth);\n                if (Array.isArray(value)) {\n                    console.log(\"\".concat(indent).concat(prefix).concat(key, \": Array[\").concat(value.length, \"]\"));\n                    if (value.length > 0 && typeof value[0] === \"object\") {\n                        analyzeStructure(value[0], depth + 1, \"\".concat(prefix).concat(key, \"[0].\"));\n                    }\n                } else if (typeof value === \"object\" && value !== null) {\n                    console.log(\"\".concat(indent).concat(prefix).concat(key, \": Object\"));\n                    analyzeStructure(value, depth + 1, \"\".concat(prefix).concat(key, \".\"));\n                } else if (key.startsWith(\"@_\")) {\n                    console.log(\"\".concat(indent).concat(prefix).concat(key, \": \").concat(typeof value, \" = \").concat(value));\n                } else {\n                    console.log(\"\".concat(indent).concat(prefix).concat(key, \": \").concat(typeof value));\n                }\n            });\n        };\n        analyzeStructure(parsedXML);\n    }\n    constructor(){\n        // Critical parser configuration for IDML files\n        this.xmlParser = new XMLParser({\n            ignoreAttributes: false,\n            attributeNamePrefix: \"@_\",\n            removeNSPrefix: true,\n            parseAttributeValue: true,\n            trimValues: true,\n            parseTrueNumberOnly: false,\n            textNodeName: \"#text\"\n        });\n    }\n}\nmodule.exports = IDMLXMLParser;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/parsers/XMLParser.js\n"));

/***/ }),

/***/ "./lib/processors/ImageProcessor.js":
/*!******************************************!*\
  !*** ./lib/processors/ImageProcessor.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n\nconst path = __webpack_require__(/*! path */ \"./node_modules/next/dist/compiled/path-browserify/index.js\");\nconst fs = __webpack_require__(/*! fs */ \"?e234\");\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass ImageProcessor {\n    async processIDMLPackage(idmlFilePath, packageStructure) {\n        let extractedImages = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n        console.log(\"Processing IDML package:\", idmlFilePath);\n        try {\n            // Process linked images and update elements\n            const imageMap = await this.buildImageMap(packageStructure);\n            // Add extracted images to the map\n            extractedImages.forEach((embeddedInfo)=>{\n                imageMap.set(embeddedInfo.fileName, embeddedInfo.extractedPath);\n                console.log(\"\\uD83D\\uDCCE Added extracted image to map: \".concat(embeddedInfo.fileName));\n            });\n            return imageMap;\n        } catch (error) {\n            console.error(\"Error processing IDML package:\", error);\n            throw error;\n        }\n    }\n    async buildImageMap(packageStructure) {\n        const imageMap = new Map();\n        console.log(\"Building image map...\");\n        // Check all files in resourceMap first\n        if (packageStructure.resourceMap) {\n            packageStructure.resourceMap.forEach((filePath, fileName)=>{\n                if (IDMLUtils.isImageFile(fileName)) {\n                    imageMap.set(fileName, filePath);\n                    // Also add without extension for matching\n                    const nameWithoutExt = path.parse(fileName).name;\n                    imageMap.set(nameWithoutExt, filePath);\n                    console.log(\"Added to image map:\", fileName, \"->\", filePath);\n                }\n            });\n        }\n        // Check Links folder if it exists\n        if (packageStructure.linksFolder && fs.existsSync(packageStructure.linksFolder)) {\n            const files = fs.readdirSync(packageStructure.linksFolder);\n            console.log(\"Links folder contents:\", files);\n            for (const fileName of files){\n                if (IDMLUtils.isImageFile(fileName)) {\n                    const fullPath = path.join(packageStructure.linksFolder, fileName);\n                    imageMap.set(fileName, fullPath);\n                    const nameWithoutExt = path.parse(fileName).name;\n                    imageMap.set(nameWithoutExt, fullPath);\n                    console.log(\"Added from Links folder:\", fileName, \"->\", fullPath);\n                }\n            }\n        }\n        console.log(\"\\uD83D\\uDCF8 Image map built with \".concat(imageMap.size / 2, \" unique images\"));\n        Array.from(imageMap.keys()).forEach((key)=>{\n            console.log(\"  - Image key:\", key);\n        });\n        return imageMap;\n    }\n    async processLinkedResources(documentData, packageStructure) {\n        let extractedImages = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n        console.log(\"Processing linked resources...\");\n        const imageMap = await this.buildImageMap(packageStructure);\n        // Add extracted images to the map\n        extractedImages.forEach((embeddedInfo)=>{\n            imageMap.set(embeddedInfo.fileName, embeddedInfo.extractedPath);\n            console.log(\"\\uD83D\\uDCCE Added extracted image to map: \".concat(embeddedInfo.fileName));\n        });\n        // Process elements and link them to package resources\n        for (const element of documentData.elements || []){\n            if (this.hasImageReference(element)) {\n                await this.linkElementToImage(element, packageStructure, imageMap, extractedImages);\n            }\n            // Also check for nested elements (groups, etc.)\n            if (element.groupItems && element.groupItems.length > 0) {\n                for (const groupItem of element.groupItems){\n                    if (this.hasImageReference(groupItem)) {\n                        await this.linkElementToImage(groupItem, packageStructure, imageMap, extractedImages);\n                    }\n                }\n            }\n        }\n        await this.processTextImages(documentData, packageStructure, imageMap);\n        console.log(\"✅ Linked resources processed\");\n        console.log(\"\\uD83D\\uDCCA Summary: \".concat(imageMap.size - extractedImages.length, \" external images, \").concat(extractedImages.length, \" extracted embedded images\"));\n    }\n    hasImageReference(element) {\n        // ENHANCED: Check for embedded images first\n        if (element.isContentFrame && element.hasPlacedContent) {\n            return true;\n        }\n        // Check for embedded image data in element properties\n        if (element.placedContent && (element.placedContent.href || element.placedContent.imageTypeName || element.placedContent.actualPpi)) {\n            return true;\n        }\n        // For rectangles, check if they could be content frames\n        if (element.type === \"Rectangle\") {\n            return true; // Most rectangles are potential image containers\n        }\n        // ENHANCED: Check for embedded image indicators\n        const hasEmbeddedImage = element.name && element.name.includes(\"[\") && element.name.includes(\"]\") || // [YOUR IMAGE HERE]\n        element.fillColor && element.fillColor.includes(\"Image/\") || element.Properties && (element.Properties.Image || element.Properties.PlacedImage || element.Properties.EPS || element.Properties.PDF);\n        return hasEmbeddedImage || element.Image || element.Link || element.PlacedImage || element.imageReference || element.linkedImage;\n    }\n    findImageByName(searchName, imageMap) {\n        if (!searchName) return null;\n        // Clean the search name\n        const cleanName = searchName.replace(/^file:\\/\\//, \"\").replace(/^\\//, \"\");\n        const baseName = path.basename(cleanName);\n        const nameWithoutExt = path.parse(baseName).name;\n        // Try exact match first\n        if (imageMap.has(baseName)) {\n            return baseName;\n        }\n        // Try without extension\n        if (imageMap.has(nameWithoutExt)) {\n            const possibleFile = Array.from(imageMap.keys()).find((key)=>path.parse(key).name === nameWithoutExt && IDMLUtils.isImageFile(key));\n            if (possibleFile) return possibleFile;\n        }\n        // Try partial matching\n        const possibleMatches = Array.from(imageMap.keys()).filter((key)=>key.toLowerCase().includes(cleanName.toLowerCase()) || cleanName.toLowerCase().includes(key.toLowerCase()));\n        if (possibleMatches.length > 0) {\n            return possibleMatches[0];\n        }\n        return null;\n    }\n    async linkElementToImage(element, packageStructure, imageMap, extractedImages) {\n        console.log(\"\\uD83D\\uDD0D Linking images for element:\", element.id || element.self, element.type);\n        try {\n            let imageFileName = null;\n            const uploadId = packageStructure.uploadId;\n            // ENHANCED: Check for embedded images first\n            const embeddedInfo = this.detectEmbeddedImages(element);\n            if (embeddedInfo.hasEmbeddedContent || embeddedInfo.isPlaceholder) {\n                console.log(\"\\uD83D\\uDCCE Found embedded content in \".concat(element.id || element.self));\n                // Check if we have an extracted image for this element\n                const matchingExtractedImage = extractedImages === null || extractedImages === void 0 ? void 0 : extractedImages.find((img)=>img.originalPath.includes(element.id || element.self) || img.fileName.toLowerCase().includes(\"tesla\") // Based on your debug data\n                );\n                if (matchingExtractedImage) {\n                    // Use the extracted image\n                    element.linkedImage = {\n                        fileName: matchingExtractedImage.fileName,\n                        url: \"/api/image/\".concat(uploadId, \"/ExtractedImages/\").concat(matchingExtractedImage.fileName),\n                        originalPath: matchingExtractedImage.extractedPath,\n                        isEmbedded: true,\n                        isExtracted: true,\n                        embeddedType: embeddedInfo.embeddedType,\n                        embeddedData: embeddedInfo.embeddedData,\n                        framePosition: element.position,\n                        imagePosition: element.imagePosition\n                    };\n                    console.log(\"✅ Linked extracted embedded image: \".concat(matchingExtractedImage.fileName));\n                    return true;\n                } else {\n                    // Fallback to placeholder if no extracted image found\n                    element.linkedImage = {\n                        fileName: \"embedded_\".concat(element.id || element.self, \".\").concat(IDMLUtils.getImageExtension(embeddedInfo.embeddedType)),\n                        url: null,\n                        isEmbedded: true,\n                        embeddedType: embeddedInfo.embeddedType,\n                        embeddedData: embeddedInfo.embeddedData,\n                        framePosition: element.position,\n                        imagePosition: element.imagePosition\n                    };\n                    console.log(\"\\uD83D\\uDCCB Created placeholder for embedded image: \".concat(element.id || element.self));\n                    return true;\n                }\n            }\n            // Existing external image linking logic...\n            if (element.isContentFrame && element.hasPlacedContent) {\n                var _element_placedContent;\n                if ((_element_placedContent = element.placedContent) === null || _element_placedContent === void 0 ? void 0 : _element_placedContent.href) {\n                    const referencedImage = path.basename(element.placedContent.href);\n                    imageFileName = this.findImageByName(referencedImage, imageMap);\n                }\n                if (!imageFileName) {\n                    const availableImages = Array.from(imageMap.keys()).filter((key)=>IDMLUtils.isImageFile(key));\n                    if (availableImages.length > 0) {\n                        imageFileName = availableImages[0];\n                        console.log(\"\\uD83D\\uDCCE Auto-linking \".concat(imageFileName, \" to content frame \").concat(element.id || element.self));\n                    }\n                }\n            }\n            if (imageFileName && imageMap.has(imageFileName)) {\n                element.linkedImage = {\n                    fileName: imageFileName,\n                    url: \"/api/image/\".concat(uploadId, \"/\").concat(imageFileName),\n                    originalPath: imageMap.get(imageFileName),\n                    isEmbedded: false,\n                    framePosition: element.position,\n                    imagePosition: element.imagePosition\n                };\n                console.log(\"✅ External image linked: \".concat(imageFileName));\n                return true;\n            }\n            console.log(\"❌ No image linked for \".concat(element.id || element.self));\n            return false;\n        } catch (error) {\n            console.error(\"❌ Error linking image:\", error);\n            return false;\n        }\n    }\n    detectEmbeddedImages(element) {\n        const embeddedIndicators = {\n            hasEmbeddedContent: false,\n            embeddedType: null,\n            embeddedData: null,\n            embeddedFileName: null,\n            isPlaceholder: false\n        };\n        // Check if element name indicates placeholder\n        if (element.name && (element.name.includes(\"[YOUR IMAGE HERE]\") || element.name.includes(\"[IMAGE]\") || element.name.toLowerCase().includes(\"placeholder\"))) {\n            embeddedIndicators.isPlaceholder = true;\n            embeddedIndicators.embeddedType = \"placeholder\";\n        }\n        // ENHANCED: Check for actual embedded image data\n        if (element.placedContent) {\n            const content = element.placedContent;\n            // Check if href looks like an embedded reference\n            if (content.href && content.isEmbedded) {\n                embeddedIndicators.hasEmbeddedContent = true;\n                embeddedIndicators.embeddedType = content.imageTypeName || \"unknown\";\n                embeddedIndicators.embeddedData = content.href;\n                embeddedIndicators.embeddedFileName = \"\".concat(content.href, \".\").concat(IDMLUtils.getImageExtension(content.imageTypeName));\n            }\n        }\n        return embeddedIndicators;\n    }\n    findElementImageReference(element, imageMap) {\n        var _element_placedContent;\n        // Check for placed content references\n        if ((_element_placedContent = element.placedContent) === null || _element_placedContent === void 0 ? void 0 : _element_placedContent.href) {\n            const imageName = path.basename(element.placedContent.href);\n            return this.findImageByName(imageName, imageMap);\n        }\n        // Check element name for image hints\n        if (element.name && element.name !== \"$ID/\") {\n            return this.findImageByName(element.name, imageMap);\n        }\n        return null;\n    }\n    matchImageBySize(element, imageMap) {\n        // TODO: Implement image size matching if metadata available\n        return null;\n    }\n    async processTextImages(documentData, packageStructure, imageMap) {\n        // Process images that might be embedded in text stories\n        Object.values(documentData.stories || {}).forEach((story)=>{\n            if (story.content && story.content.formattedContent) {\n                story.content.formattedContent.forEach((content)=>{\n                    // Look for image references in text content\n                    if (content.text && content.text.includes(\"Image/\")) {\n                        // Extract and process image references\n                        const imageRefs = content.text.match(/Image\\/[^\\s\\]]+/g);\n                        if (imageRefs) {\n                            imageRefs.forEach((ref)=>{\n                                const imageName = ref.replace(\"Image/\", \"\");\n                                const fileName = this.findImageByName(imageName, imageMap);\n                                if (fileName) {\n                                    content.linkedImage = fileName;\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        });\n    }\n    async analyzeSpreadForImageReferences(idmlPath, xmlParser) {\n        console.log(\"\\n\\uD83D\\uDD0D === ANALYZING SPREADS FOR IMAGE REFERENCES ===\");\n        const spreadAnalysis = {\n            spreadsAnalyzed: 0,\n            imageReferences: [],\n            linkReferences: [],\n            placedContentDetails: []\n        };\n        try {\n            const extractedData = await this.fileExtractor.extractIDMLContents(idmlPath);\n            // Find spread files\n            const spreadFiles = Object.keys(extractedData).filter((name)=>name.startsWith(\"Spreads/\") && name.endsWith(\".xml\"));\n            // Analyze each spread\n            for (const spreadFile of spreadFiles){\n                try {\n                    const spreadContent = extractedData[spreadFile];\n                    const analysis = this.analyzeSpreadXMLForImages(spreadContent, spreadFile, xmlParser);\n                    spreadAnalysis.spreadsAnalyzed++;\n                    spreadAnalysis.imageReferences.push(...analysis.imageReferences);\n                    spreadAnalysis.linkReferences.push(...analysis.linkReferences);\n                    spreadAnalysis.placedContentDetails.push(...analysis.placedContentDetails);\n                } catch (error) {\n                    console.error(\"Error analyzing \".concat(spreadFile, \":\"), error);\n                }\n            }\n            return spreadAnalysis;\n        } catch (error) {\n            console.error(\"Error analyzing spreads for image references:\", error);\n            return spreadAnalysis;\n        }\n    }\n    analyzeSpreadXMLForImages(xmlContent, fileName, xmlParser) {\n        console.log(\"\\uD83D\\uDD0D Analyzing \".concat(fileName, \" for image references...\"));\n        const analysis = {\n            imageReferences: [],\n            linkReferences: [],\n            placedContentDetails: []\n        };\n        try {\n            const parsed = xmlParser.parse(xmlContent);\n            // Look for any image-related attributes\n            const findImageRefs = function(obj) {\n                let path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n                if (typeof obj === \"object\" && obj !== null) {\n                    Object.keys(obj).forEach((key)=>{\n                        const value = obj[key];\n                        // Look for href attributes\n                        if (key.includes(\"href\") || key.includes(\"Href\")) {\n                            analysis.linkReferences.push({\n                                file: fileName,\n                                path: \"\".concat(path, \".\").concat(key),\n                                value: value\n                            });\n                            console.log(\"\\uD83D\\uDD17 Found href: \".concat(path, \".\").concat(key, \" = \").concat(value));\n                        }\n                        // Look for image type names\n                        if (key.includes(\"ImageType\") || key.includes(\"imageType\")) {\n                            analysis.imageReferences.push({\n                                file: fileName,\n                                path: \"\".concat(path, \".\").concat(key),\n                                value: value\n                            });\n                            console.log(\"\\uD83D\\uDDBC️ Found image type: \".concat(path, \".\").concat(key, \" = \").concat(value));\n                        }\n                        // Look for Links or Link references\n                        if (key === \"Link\" || key === \"Links\") {\n                            analysis.linkReferences.push({\n                                file: fileName,\n                                path: \"\".concat(path, \".\").concat(key),\n                                value: JSON.stringify(value).substring(0, 200)\n                            });\n                            console.log(\"\\uD83D\\uDD17 Found Link object at: \".concat(path, \".\").concat(key));\n                        }\n                        // Look for placed content\n                        if (key.includes(\"Image\") || key.includes(\"EPS\") || key.includes(\"PDF\")) {\n                            analysis.placedContentDetails.push({\n                                file: fileName,\n                                elementType: key,\n                                path: \"\".concat(path, \".\").concat(key),\n                                details: value\n                            });\n                            console.log(\"\\uD83D\\uDCCE Found placed content: \".concat(key, \" at \").concat(path));\n                        }\n                        if (typeof value === \"object\") {\n                            findImageRefs(value, path ? \"\".concat(path, \".\").concat(key) : key);\n                        }\n                    });\n                }\n            };\n            findImageRefs(parsed);\n        } catch (error) {\n            console.error(\"Error parsing XML in \".concat(fileName, \":\"), error);\n        }\n        return analysis;\n    }\n    async extractEmbeddedImageFromSpread(idmlPath, uploadDir, xmlParser) {\n        console.log(\"\\uD83D\\uDDBC️ Extracting embedded images from spread XML...\");\n        const embeddedImages = [];\n        try {\n            const spreadAnalysis = await this.analyzeSpreadForImageReferences(idmlPath, xmlParser);\n            for (const placedContent of spreadAnalysis.placedContentDetails){\n                if (placedContent.elementType === \"Image\" && placedContent.details && placedContent.details.Properties && placedContent.details.Properties.Contents) {\n                    const base64Data = placedContent.details.Properties.Contents;\n                    console.log(\"\\uD83D\\uDCF7 Found Base64 image data: \".concat(base64Data.length, \" characters\"));\n                    const linkInfo = placedContent.details.Link || {};\n                    const imageName = IDMLUtils.extractImageNameFromLink(linkInfo[\"@_LinkResourceURI\"]) || \"embedded_image\";\n                    const imageType = linkInfo[\"@_LinkResourceFormat\"] || \"$ID/JPEG\";\n                    const extension = IDMLUtils.getImageExtensionFromFormat(imageType);\n                    // Create filename with timestamp to avoid conflicts\n                    const fileName = \"\".concat(imageName, \".\").concat(extension);\n                    const outputPath = path.join(uploadDir, \"ExtractedImages\", fileName);\n                    // Create directory\n                    const outputDir = path.dirname(outputPath);\n                    if (!fs.existsSync(outputDir)) {\n                        fs.mkdirSync(outputDir, {\n                            recursive: true\n                        });\n                    }\n                    try {\n                        const imageBuffer = Buffer.from(base64Data, \"base64\");\n                        fs.writeFileSync(outputPath, imageBuffer);\n                        embeddedImages.push({\n                            originalPath: placedContent.path,\n                            extractedPath: outputPath,\n                            fileName: fileName,\n                            size: imageBuffer.length,\n                            base64Length: base64Data.length,\n                            linkInfo: linkInfo,\n                            isExtracted: true\n                        });\n                        console.log(\"✅ Extracted image: \".concat(fileName, \" (\").concat(imageBuffer.length, \" bytes)\"));\n                    } catch (error) {\n                        console.error(\"❌ Failed to convert Base64 to image:\", error);\n                    }\n                }\n            }\n        } catch (error) {\n            console.error(\"❌ Error extracting embedded images from spread:\", error);\n        }\n        console.log(\"✅ Extracted \".concat(embeddedImages.length, \" embedded images from spread\"));\n        return embeddedImages;\n    }\n    constructor(fileExtractor){\n        this.fileExtractor = fileExtractor;\n    }\n}\nmodule.exports = ImageProcessor;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/processors/ImageProcessor.js\n"));

/***/ }),

/***/ "./lib/utils/ColorUtils.js":
/*!*********************************!*\
  !*** ./lib/utils/ColorUtils.js ***!
  \*********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\r\n * ColorUtils.js - Comprehensive color conversion and manipulation utilities\r\n * Handles CMYK, RGB, HEX, and other color format conversions for IDML processing\r\n */ \nclass ColorUtils {\n    /**\r\n   * Convert CMYK color values to RGB\r\n   * @param {number} c - Cyan (0-100)\r\n   * @param {number} m - Magenta (0-100)\r\n   * @param {number} y - Yellow (0-100)\r\n   * @param {number} k - Black/Key (0-100)\r\n   * @returns {object} RGB object with r, g, b values (0-255)\r\n   */ static cmykToRgb(c, m, y, k) {\n        // Normalize CMYK values to 0-1 range\n        const cNorm = c / 100;\n        const mNorm = m / 100;\n        const yNorm = y / 100;\n        const kNorm = k / 100;\n        // Convert to RGB using standard formula\n        const r = Math.round(255 * (1 - cNorm) * (1 - kNorm));\n        const g = Math.round(255 * (1 - mNorm) * (1 - kNorm));\n        const b = Math.round(255 * (1 - yNorm) * (1 - kNorm));\n        return {\n            r,\n            g,\n            b\n        };\n    }\n    /**\r\n   * Convert CMYK to RGB CSS string\r\n   * @param {number} c - Cyan (0-100)\r\n   * @param {number} m - Magenta (0-100)\r\n   * @param {number} y - Yellow (0-100)\r\n   * @param {number} k - Black/Key (0-100)\r\n   * @returns {string} CSS rgb() string\r\n   */ static cmykToRgbString(c, m, y, k) {\n        const { r, g, b } = this.cmykToRgb(c, m, y, k);\n        return \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n    }\n    /**\r\n   * Convert RGB to HEX\r\n   * @param {number} r - Red (0-255)\r\n   * @param {number} g - Green (0-255)\r\n   * @param {number} b - Blue (0-255)\r\n   * @returns {string} HEX color string\r\n   */ static rgbToHex(r, g, b) {\n        const toHex = (component)=>{\n            const hex = component.toString(16);\n            return hex.length === 1 ? \"0\" + hex : hex;\n        };\n        return \"#\".concat(toHex(r)).concat(toHex(g)).concat(toHex(b));\n    }\n    /**\r\n   * Convert CMYK to HEX\r\n   * @param {number} c - Cyan (0-100)\r\n   * @param {number} m - Magenta (0-100)\r\n   * @param {number} y - Yellow (0-100)\r\n   * @param {number} k - Black/Key (0-100)\r\n   * @returns {string} HEX color string\r\n   */ static cmykToHex(c, m, y, k) {\n        const { r, g, b } = this.cmykToRgb(c, m, y, k);\n        return this.rgbToHex(r, g, b);\n    }\n    /**\r\n   * Parse CMYK values from IDML color reference string\r\n   * @param {string} colorRef - IDML color reference (e.g., \"Color/C=1 M=18 Y=16 K=0\")\r\n   * @returns {object|null} Object with c, m, y, k values or null if not parseable\r\n   */ static parseCmykFromColorRef(colorRef) {\n        if (!colorRef || typeof colorRef !== \"string\") {\n            return null;\n        }\n        // Match CMYK pattern in IDML color references\n        const cmykMatch = colorRef.match(/Color\\/C=([\\d.]+)\\s*M=([\\d.]+)\\s*Y=([\\d.]+)\\s*K=([\\d.]+)/);\n        if (cmykMatch) {\n            const [, c, m, y, k] = cmykMatch.map((val)=>parseFloat(val));\n            return {\n                c,\n                m,\n                y,\n                k\n            };\n        }\n        return null;\n    }\n    /**\r\n   * Convert IDML color reference to RGB CSS string\r\n   * @param {string} colorRef - IDML color reference\r\n   * @returns {string} CSS color string (rgb, hex, or named color)\r\n   */ static convertIdmlColorToRgb(colorRefOrObj) {\n        if (!colorRefOrObj || colorRefOrObj === \"Color/None\") {\n            return \"transparent\";\n        }\n        // ENHANCED: Handle color objects with intelligent RGB/CMYK prioritization\n        if (typeof colorRefOrObj === \"object\") {\n            console.log(\"\\uD83C\\uDFA8 Converting color object:\", {\n                self: colorRefOrObj.self,\n                source: colorRefOrObj.colorSource,\n                hasRGB: colorRefOrObj.hasDirectRGB,\n                hasCMYK: colorRefOrObj.hasDirectCMYK,\n                space: colorRefOrObj.space\n            });\n            // PRIORITY 1: Use direct RGB values (ONLY if they're meaningful, not all zeros)\n            if (colorRefOrObj.hasDirectRGB && (colorRefOrObj.red !== undefined && colorRefOrObj.red > 0 || colorRefOrObj.green !== undefined && colorRefOrObj.green > 0 || colorRefOrObj.blue !== undefined && colorRefOrObj.blue > 0)) {\n                const rgbString = \"rgb(\".concat(colorRefOrObj.red || 0, \", \").concat(colorRefOrObj.green || 0, \", \").concat(colorRefOrObj.blue || 0, \")\");\n                console.log(\"   ✅ Using direct RGB values: \".concat(rgbString, \" (source: \").concat(colorRefOrObj.colorSource, \")\"));\n                return rgbString;\n            }\n            // PRIORITY 2: Convert CMYK values to RGB (when RGB not available or RGB is all zeros)\n            if (colorRefOrObj.hasDirectCMYK && (colorRefOrObj.cyan !== undefined || colorRefOrObj.magenta !== undefined || colorRefOrObj.yellow !== undefined || colorRefOrObj.black !== undefined)) {\n                const { r, g, b } = this.cmykToRgb(colorRefOrObj.cyan || 0, colorRefOrObj.magenta || 0, colorRefOrObj.yellow || 0, colorRefOrObj.black || 0);\n                const rgbString = \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n                console.log(\"   \\uD83D\\uDD04 Converted CMYK to RGB: C:\".concat(colorRefOrObj.cyan, \" M:\").concat(colorRefOrObj.magenta, \" Y:\").concat(colorRefOrObj.yellow, \" K:\").concat(colorRefOrObj.black, \" → \").concat(rgbString, \" (source: \").concat(colorRefOrObj.colorSource, \")\"));\n                return rgbString;\n            }\n            // PRIORITY 3: Handle special case where RGB values are all zero but it's marked as RGB source\n            // This should NOT use \"0 0 0\" for standard colors\n            if (colorRefOrObj.hasDirectRGB && colorRefOrObj.red === 0 && colorRefOrObj.green === 0 && colorRefOrObj.blue === 0 && colorRefOrObj.isCustomColor === true) {\n                // Only use RGB \"0 0 0\" for custom colors that explicitly want black\n                const rgbString = \"rgb(0, 0, 0)\";\n                console.log(\"   ✅ Using RGB black for custom color: \".concat(rgbString, \" (source: \").concat(colorRefOrObj.colorSource, \")\"));\n                return rgbString;\n            }\n            // FALLBACK: Legacy object handling (backward compatibility)\n            // Check for legacy red/green/blue properties (but avoid all-zero unless it's a custom color)\n            if (colorRefOrObj.red !== undefined && colorRefOrObj.green !== undefined && colorRefOrObj.blue !== undefined) {\n                // Only use RGB if it has actual color values OR it's explicitly a custom color\n                if (colorRefOrObj.red > 0 || colorRefOrObj.green > 0 || colorRefOrObj.blue > 0 || colorRefOrObj.isCustomColor === true) {\n                    const rgbString = \"rgb(\".concat(colorRefOrObj.red, \", \").concat(colorRefOrObj.green, \", \").concat(colorRefOrObj.blue, \")\");\n                    console.log(\"   ✅ Using legacy RGB properties: \".concat(rgbString));\n                    return rgbString;\n                } else {\n                    console.log('   ⚠️  Skipping legacy RGB \"0 0 0\" for non-custom color');\n                }\n            }\n            // Check for legacy cyan/magenta/yellow/black properties\n            if (colorRefOrObj.cyan !== undefined && colorRefOrObj.magenta !== undefined && colorRefOrObj.yellow !== undefined && colorRefOrObj.black !== undefined) {\n                // Only convert CMYK if it has meaningful values OR it's from a CMYK source that should be processed\n                const hasValidCMYK = colorRefOrObj.cyan > 0 || colorRefOrObj.magenta > 0 || colorRefOrObj.yellow > 0 || colorRefOrObj.black > 0;\n                const isCMYKSource = colorRefOrObj.colorSource && colorRefOrObj.colorSource.includes(\"cmyk\");\n                if (hasValidCMYK || isCMYKSource || colorRefOrObj.isCustomColor === true) {\n                    const { r, g, b } = this.cmykToRgb(colorRefOrObj.cyan, colorRefOrObj.magenta, colorRefOrObj.yellow, colorRefOrObj.black);\n                    const rgbString = \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n                    console.log(\"   \\uD83D\\uDD04 Converted legacy CMYK to RGB: \".concat(rgbString));\n                    return rgbString;\n                } else {\n                    console.log('   ⚠️  Skipping legacy CMYK \"0 0 0 0\" for non-CMYK source');\n                }\n            }\n        }\n        // Handle string-based color references (color names like \"Color/Main\", \"Color/Black\", etc.)\n        if (typeof colorRefOrObj === \"string\") {\n            console.log('\\uD83C\\uDFA8 Processing string color reference: \"'.concat(colorRefOrObj, '\"'));\n            // Try to parse CMYK pattern from string\n            const cmyk = this.parseCmykFromColorRef(colorRefOrObj);\n            if (cmyk) {\n                const rgbString = this.cmykToRgbString(cmyk.c, cmyk.m, cmyk.y, cmyk.k);\n                console.log(\"   \\uD83D\\uDD04 Parsed and converted CMYK string: \".concat(colorRefOrObj, \" → \").concat(rgbString));\n                return rgbString;\n            }\n            // Check predefined named colors\n            const namedColors = {\n                \"Color/Black\": \"rgb(0, 0, 0)\",\n                \"Color/White\": \"rgb(255, 255, 255)\",\n                \"Color/Red\": \"rgb(255, 0, 0)\",\n                \"Color/Green\": \"rgb(0, 255, 0)\",\n                \"Color/Blue\": \"rgb(0, 0, 255)\",\n                \"Color/Cyan\": \"rgb(0, 255, 255)\",\n                \"Color/Magenta\": \"rgb(255, 0, 255)\",\n                \"Color/Yellow\": \"rgb(255, 255, 0)\",\n                \"Color/Paper\": \"rgb(255, 255, 255)\"\n            };\n            if (namedColors[colorRefOrObj]) {\n                console.log(\"   ✅ Using predefined named color: \".concat(colorRefOrObj, \" → \").concat(namedColors[colorRefOrObj]));\n                return namedColors[colorRefOrObj];\n            }\n        }\n        // Ultimate fallback\n        console.log(\"   ⚠️  No valid color data found, using default gray: \".concat(JSON.stringify(colorRefOrObj)));\n        return \"rgb(200, 200, 200)\";\n    }\n    /**\r\n   * Determine if a CMYK color is suitable for use as a background\r\n   * @param {number} c - Cyan (0-100)\r\n   * @param {number} m - Magenta (0-100)\r\n   * @param {number} y - Yellow (0-100)\r\n   * @param {number} k - Black/Key (0-100)\r\n   * @returns {object} Analysis result with isLightBackground boolean and reasoning\r\n   */ static analyzeCmykForBackground(c, m, y, k) {\n        const maxCMY = Math.max(c, m, y);\n        const avgCMY = (c + m + y) / 3;\n        const analysis = {\n            c,\n            m,\n            y,\n            k,\n            maxCMY,\n            avgCMY,\n            isLightBackground: false,\n            category: \"unknown\",\n            reasoning: \"\"\n        };\n        // Very light colors: low K and low CMY values\n        if (k <= 20 && maxCMY <= 30 && avgCMY <= 20) {\n            analysis.isLightBackground = true;\n            analysis.category = \"very_light\";\n            analysis.reasoning = \"Very light color suitable for background\";\n            return analysis;\n        }\n        // Light tinted colors: very low K, slightly higher CMY (like light pink, light blue, etc.)\n        if (k <= 10 && maxCMY <= 50 && avgCMY <= 25) {\n            analysis.isLightBackground = true;\n            analysis.category = \"light_tinted\";\n            analysis.reasoning = \"Light tinted color suitable for background\";\n            return analysis;\n        }\n        // Light gray: balanced CMY, moderate K\n        if (k >= 5 && k <= 60 && maxCMY <= 15 && Math.abs(c - m) <= 5 && Math.abs(m - y) <= 5) {\n            analysis.isLightBackground = true;\n            analysis.category = \"light_gray\";\n            analysis.reasoning = \"Light gray color suitable for background\";\n            return analysis;\n        }\n        // Not suitable for background\n        analysis.reasoning = \"Too dark or saturated for background use\";\n        return analysis;\n    }\n    /**\r\n   * Analyze IDML color reference for background suitability\r\n   * @param {string} colorRef - IDML color reference\r\n   * @returns {object|null} Analysis result or null if not CMYK\r\n   */ static analyzeIdmlColorForBackground(colorRef) {\n        // Handle Paper color specially\n        if (colorRef === \"Color/Paper\" || colorRef.includes(\"Paper\")) {\n            return {\n                isLightBackground: true,\n                category: \"paper\",\n                reasoning: \"InDesign Paper color - ideal for background\",\n                colorRef\n            };\n        }\n        const cmyk = this.parseCmykFromColorRef(colorRef);\n        if (!cmyk) {\n            return null;\n        }\n        const analysis = this.analyzeCmykForBackground(cmyk.c, cmyk.m, cmyk.y, cmyk.k);\n        analysis.colorRef = colorRef;\n        return analysis;\n    }\n    /**\r\n   * Get RGB brightness value (0-255, higher = brighter)\r\n   * @param {number} r - Red (0-255)\r\n   * @param {number} g - Green (0-255)\r\n   * @param {number} b - Blue (0-255)\r\n   * @returns {number} Brightness value\r\n   */ static getRgbBrightness(r, g, b) {\n        // Use relative luminance formula\n        return 0.299 * r + 0.587 * g + 0.114 * b;\n    }\n    /**\r\n   * Get brightness from CMYK values\r\n   * @param {number} c - Cyan (0-100)\r\n   * @param {number} m - Magenta (0-100)\r\n   * @param {number} y - Yellow (0-100)\r\n   * @param {number} k - Black/Key (0-100)\r\n   * @returns {number} Brightness value (0-255)\r\n   */ static getCmykBrightness(c, m, y, k) {\n        const { r, g, b } = this.cmykToRgb(c, m, y, k);\n        return this.getRgbBrightness(r, g, b);\n    }\n    /**\r\n   * Sort colors by lightness (lightest first)\r\n   * @param {Array} colorRefs - Array of IDML color references\r\n   * @returns {Array} Sorted array with lightest colors first\r\n   */ static sortColorsByLightness(colorRefs) {\n        return colorRefs.sort((a, b)=>{\n            // Analyze both colors for background suitability\n            const analysisA = this.analyzeIdmlColorForBackground(a);\n            const analysisB = this.analyzeIdmlColorForBackground(b);\n            // Prioritize actual CMYK colors over Paper color for visual interest\n            const aIsPaper = a.includes(\"Paper\");\n            const bIsPaper = b.includes(\"Paper\");\n            const aIsCmyk = !aIsPaper && analysisA && analysisA.c !== undefined;\n            const bIsCmyk = !bIsPaper && analysisB && analysisB.c !== undefined;\n            // If one is CMYK and other is Paper, prefer CMYK for visual interest\n            if (aIsCmyk && bIsPaper) return -1;\n            if (bIsCmyk && aIsPaper) return 1;\n            // If both are CMYK, sort by lightness (lower K value = lighter)\n            if (aIsCmyk && bIsCmyk) {\n                const cmykA = this.parseCmykFromColorRef(a);\n                const cmykB = this.parseCmykFromColorRef(b);\n                if (cmykA && cmykB) {\n                    // First compare by category priority (very_light > light_gray, etc.)\n                    const categoryPriority = {\n                        very_light: 1,\n                        light_gray: 2,\n                        paper: 3,\n                        unknown: 4\n                    };\n                    const priorityA = categoryPriority[analysisA.category] || 4;\n                    const priorityB = categoryPriority[analysisB.category] || 4;\n                    if (priorityA !== priorityB) {\n                        return priorityA - priorityB;\n                    }\n                    // If same category, sort by K value (lower K = lighter)\n                    return cmykA.k - cmykB.k;\n                }\n            }\n            // If both are Paper or both are unknown, maintain original order\n            return 0;\n        });\n    }\n}\n// Restore CommonJS exports\nmodule.exports = ColorUtils;\nmodule.exports.cmykToRgb = ColorUtils.cmykToRgb;\nmodule.exports.cmykToRgbString = ColorUtils.cmykToRgbString;\nmodule.exports.cmykToHex = ColorUtils.cmykToHex;\nmodule.exports.rgbToHex = ColorUtils.rgbToHex;\nmodule.exports.parseCmykFromColorRef = ColorUtils.parseCmykFromColorRef;\nmodule.exports.convertIdmlColorToRgb = ColorUtils.convertIdmlColorToRgb;\nmodule.exports.analyzeCmykForBackground = ColorUtils.analyzeCmykForBackground;\nmodule.exports.analyzeIdmlColorForBackground = ColorUtils.analyzeIdmlColorForBackground;\nmodule.exports.getRgbBrightness = ColorUtils.getRgbBrightness;\nmodule.exports.getCmykBrightness = ColorUtils.getCmykBrightness;\nmodule.exports.sortColorsByLightness = ColorUtils.sortColorsByLightness;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/utils/ColorUtils.js\n"));

/***/ }),

/***/ "./lib/utils/IDMLUtils.js":
/*!********************************!*\
  !*** ./lib/utils/IDMLUtils.js ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nconst path = __webpack_require__(/*! path */ \"./node_modules/next/dist/compiled/path-browserify/index.js\");\nconst fs = __webpack_require__(/*! fs */ \"?82df\");\nclass IDMLUtils {\n    static parseGeometricBounds(boundsString) {\n        console.log(\"DEBUG: boundsString =\", boundsString);\n        if (!boundsString || boundsString === \"undefined\") {\n            console.log(\"Warning: Missing geometric bounds, using defaults\");\n            return {\n                top: 0,\n                left: 0,\n                bottom: 100,\n                right: 100,\n                width: 100,\n                height: 100\n            };\n        }\n        const bounds = boundsString.split(\" \").map(parseFloat);\n        const result = {\n            top: bounds[0] || 0,\n            left: bounds[1] || 0,\n            bottom: bounds[2] || 0,\n            right: bounds[3] || 0,\n            width: (bounds[3] || 0) - (bounds[1] || 0),\n            height: (bounds[2] || 0) - (bounds[0] || 0)\n        };\n        console.log(\"Parsed bounds:\", result);\n        return result;\n    }\n    static parseTransform(transformString) {\n        if (!transformString) return {\n            a: 1,\n            b: 0,\n            c: 0,\n            d: 1,\n            tx: 0,\n            ty: 0\n        };\n        const values = transformString.split(\" \").map(parseFloat);\n        return {\n            a: values[0] || 1,\n            b: values[1] || 0,\n            c: values[2] || 0,\n            d: values[3] || 1,\n            tx: values[4] || 0,\n            ty: values[5] || 0\n        };\n    }\n    static calculateRotation(transform) {\n        // Calculate rotation angle from transform matrix\n        return Math.atan2(transform.b, transform.a) * (180 / Math.PI);\n    }\n    static calculateCorners(bounds, transform) {\n        const corners = {\n            topLeft: {\n                x: bounds.left,\n                y: bounds.top\n            },\n            topRight: {\n                x: bounds.right,\n                y: bounds.top\n            },\n            bottomLeft: {\n                x: bounds.left,\n                y: bounds.bottom\n            },\n            bottomRight: {\n                x: bounds.right,\n                y: bounds.bottom\n            }\n        };\n        // Apply transformation to corners\n        Object.keys(corners).forEach((corner)=>{\n            const point = corners[corner];\n            corners[corner] = {\n                x: transform.a * point.x + transform.c * point.y + transform.tx,\n                y: transform.b * point.x + transform.d * point.y + transform.ty\n            };\n        });\n        return corners;\n    }\n    static cmykToRgb(c, m, y, k) {\n        // Convert CMYK percentages (0-100) to RGB (0-255)\n        c = c / 100;\n        m = m / 100;\n        y = y / 100;\n        k = k / 100;\n        const r = Math.round(255 * (1 - c) * (1 - k));\n        const g = Math.round(255 * (1 - m) * (1 - k));\n        const b = Math.round(255 * (1 - y) * (1 - k));\n        return {\n            r,\n            g,\n            b\n        };\n    }\n    static parseInDesignColor(colorRef) {\n        if (!colorRef || colorRef === \"Color/None\") return null;\n        // Handle CMYK colors\n        const cmykMatch = colorRef.match(/Color\\/C=(\\d+)\\s*M=(\\d+)\\s*Y=(\\d+)\\s*K=(\\d+)/);\n        if (cmykMatch) {\n            const [, c, m, y, k] = cmykMatch.map(Number);\n            const rgb = this.cmykToRgb(c, m, y, k);\n            return \"rgb(\".concat(rgb.r, \", \").concat(rgb.g, \", \").concat(rgb.b, \")\");\n        }\n        // Handle RGB colors\n        const rgbMatch = colorRef.match(/Color\\/R=(\\d+)\\s*G=(\\d+)\\s*B=(\\d+)/);\n        if (rgbMatch) {\n            const [, r, g, b] = rgbMatch.map(Number);\n            return \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n        }\n        // Standard colors\n        const standardColors = {\n            \"Color/Black\": \"rgb(0, 0, 0)\",\n            \"Color/White\": \"rgb(255, 255, 255)\",\n            \"Color/Red\": \"rgb(255, 0, 0)\",\n            \"Color/Green\": \"rgb(0, 255, 0)\",\n            \"Color/Blue\": \"rgb(0, 0, 255)\",\n            \"Color/Cyan\": \"rgb(0, 255, 255)\",\n            \"Color/Magenta\": \"rgb(255, 0, 255)\",\n            \"Color/Yellow\": \"rgb(255, 255, 0)\",\n            \"Color/Paper\": \"rgb(255, 255, 255)\",\n            \"Color/Registration\": \"rgb(0, 0, 0)\"\n        };\n        return standardColors[colorRef] || null;\n    }\n    static decodeXMLEntities(text) {\n        if (!text) return \"\";\n        return text.replace(/&#x000A;/g, \"\\n\") // Line feed\n        .replace(/&#x000D;/g, \"\\r\") // Carriage return\n        .replace(/&#x0009;/g, \"\t\") // Tab\n        .replace(/&#x00A0;/g, \"\\xa0\") // Non-breaking space\n        .replace(/&#x2028;/g, \"\\n\") // Line separator\n        .replace(/&#x2029;/g, \"\\u2029\") // Paragraph separator\n        .replace(/&#10;/g, \"\\n\") // Decimal line feed\n        .replace(/&#13;/g, \"\\r\") // Decimal carriage return\n        .replace(/&#9;/g, \"\t\") // Decimal tab\n        .replace(/&#160;/g, \"\\xa0\") // Decimal non-breaking space\n        .replace(/&lt;/g, \"<\") // Less than\n        .replace(/&gt;/g, \">\") // Greater than\n        .replace(/&amp;/g, \"&\") // Ampersand (must be last)\n        .replace(/&quot;/g, '\"') // Quote\n        .replace(/&apos;/g, \"'\"); // Apostrophe\n    }\n    static cleanTextContent(content) {\n        return content.replace(/\\r\\n/g, \"\\n\") // Normalize Windows line breaks\n        .replace(/\\r/g, \"\\n\") // Normalize old Mac line breaks\n        .replace(/\\t/g, \"    \") // Convert tabs to spaces\n        .replace(/\\u00A0/g, \" \") // Convert non-breaking spaces\n        .replace(/ +/g, \" \") // Collapse multiple spaces\n        // REMOVED: .replace(/\\n{3,}/g, '\\n\\n')  // Allow unlimited consecutive line breaks\n        .trim();\n    }\n    static preserveLineBreaks(content) {\n        return content.replace(/\\r\\n/g, \"\\n\") // Normalize Windows line breaks\n        .replace(/\\r/g, \"\\n\") // Normalize old Mac line breaks\n        .replace(/\\u2028/g, \"\\n\") // Convert line separators\n        .replace(/\\u2029/g, \"\\n\\n\"); // Convert paragraph separators\n    // REMOVED: .replace(/\\n{3,}/g, '\\n\\n'); // Allow unlimited consecutive line breaks\n    }\n    // NEW: Clean up excessive line breaks to prevent text overflow\n    static cleanTextForRendering(text) {\n        if (!text) return \"\";\n        return text// Normalize line endings\n        .replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\")// Remove trailing whitespace on each line only\n        .replace(/[ \\t]+\\n/g, \"\\n\");\n    // DO NOT collapse multiple spaces, tabs, or newlines\n    // DO NOT trim the whole string\n    }\n    // ENHANCED: Better line break processing that preserves word spaces\n    static sophisticatedLineBreakProcessing(content) {\n        if (!content) return \"\";\n        // DEBUG: Track if problematic text is being processed\n        const hasProblematicText = content.includes(\"pavoluptusda\") || content.includes(\"pa\") && content.includes(\"voluptusda\");\n        if (hasProblematicText) {\n            console.log(\"\\uD83D\\uDD27 IDMLUtils.sophisticatedLineBreakProcessing:\");\n            console.log(\"   - Input:\", JSON.stringify(content));\n        }\n        // First clean up the content but preserve word spaces\n        let processed = this.cleanTextForRendering(content).replace(/\\u2028/g, \"\\n\");\n        if (hasProblematicText) {\n            console.log(\"   - After cleanTextForRendering:\", JSON.stringify(processed));\n        }\n        // Normalize line breaks but don't touch word spaces\n        // processed = processed\n        //   .replace(/\\r\\n/g, '\\n')      // Normalize Windows line breaks\n        //   .replace(/\\r/g, '\\n')        // Normalize old Mac line breaks\n        //   .replace(/\\u2029/g, '\\n')    // Convert line separators\n        //   .replace(/\\u2028/g, '\\n\\n')  // Convert paragraph separators to double breaks\n        //   .replace(/\\u000A/g, '\\n');   // Convert explicit line feed characters\n        // Ensure paragraph breaks are properly spaced\n        // processed = processed.replace(/\\n\\n+/g, '\\n\\n'); // REMOVE THIS LINE to preserve all consecutive newlines\n        return processed;\n    }\n    static countWords(text) {\n        return text.split(/\\s+/).filter((word)=>word.length > 0).length;\n    }\n    static parseNumeric(value) {\n        if (value === null || value === undefined || value === \"\") return null;\n        const num = parseFloat(value);\n        return isNaN(num) ? null : num;\n    }\n    static isImageFile(fileName) {\n        const imageExtensions = [\n            \".jpg\",\n            \".jpeg\",\n            \".png\",\n            \".gif\",\n            \".tiff\",\n            \".tif\",\n            \".bmp\",\n            \".svg\",\n            \".eps\",\n            \".ai\",\n            \".psd\",\n            \".webp\",\n            \".ico\",\n            \".jfif\",\n            \".jp2\",\n            \".jpx\"\n        ];\n        return imageExtensions.some((ext)=>fileName.toLowerCase().endsWith(ext));\n    }\n    static getImageExtension(imageTypeName) {\n        const typeMap = {\n            \"$ID/JPEG\": \"jpg\",\n            \"$ID/PNG\": \"png\",\n            \"$ID/TIFF\": \"tif\",\n            \"$ID/GIF\": \"gif\",\n            \"$ID/BMP\": \"bmp\"\n        };\n        return typeMap[imageTypeName] || \"jpg\";\n    }\n    static getImageExtensionFromFormat(format) {\n        const formatMap = {\n            \"$ID/JPEG\": \"jpg\",\n            \"$ID/PNG\": \"png\",\n            \"$ID/TIFF\": \"tif\",\n            \"$ID/GIF\": \"gif\",\n            \"$ID/BMP\": \"bmp\"\n        };\n        return formatMap[format] || \"jpg\";\n    }\n    static extractImageNameFromLink(linkUri) {\n        if (!linkUri) return null;\n        // Extract filename from path like \"file:C:/Users/lalo/Downloads/Tesla-Model-3.jpg 13325 \"\n        const match = linkUri.match(/([^\\/\\\\]+)\\.[^.]+$/);\n        return match ? match[1] : null;\n    }\n    static calculateCoordinateOffset(elements) {\n        if (!elements || elements.length === 0) {\n            console.log(\"\\uD83D\\uDEAB No elements provided for coordinate offset calculation\");\n            return {\n                x: 0,\n                y: 0\n            };\n        }\n        let minX = Infinity, minY = Infinity;\n        let maxStrokeWidth = 0;\n        let validElements = 0;\n        console.log(\"\\uD83D\\uDD0D ANALYZING \".concat(elements.length, \" elements for coordinate offset...\"));\n        // First pass: find TRUE minimum coordinates across all elements\n        elements.forEach((element, index)=>{\n            const bounds = element.geometricBounds || element.originalBounds;\n            const transform = element.itemTransform || {\n                tx: 0,\n                ty: 0\n            };\n            if (bounds && (bounds.left !== undefined || bounds.top !== undefined)) {\n                // Calculate final position after transform\n                const finalX = (bounds.left || 0) + (transform.tx || 0);\n                const finalY = (bounds.top || 0) + (transform.ty || 0);\n                console.log(\"   Element \".concat(index, \": bounds(\").concat(bounds.left, \", \").concat(bounds.top, \") + transform(\").concat(transform.tx, \", \").concat(transform.ty, \") = final(\").concat(finalX, \", \").concat(finalY, \")\"));\n                minX = Math.min(minX, finalX);\n                minY = Math.min(minY, finalY);\n                validElements++;\n                // Track maximum stroke width for intelligent padding\n                const strokeWidth = element.strokeWeight || 0;\n                maxStrokeWidth = Math.max(maxStrokeWidth, strokeWidth);\n            } else {\n                console.log(\"   Element \".concat(index, \": No valid bounds - skipping\"));\n            }\n        });\n        // Handle case where no valid elements found\n        if (validElements === 0) {\n            console.log(\"⚠️  No valid elements with bounds found - using zero offset\");\n            return {\n                x: 0,\n                y: 0\n            };\n        }\n        // Reset infinite values to 0 if no valid coordinates found\n        if (minX === Infinity) minX = 0;\n        if (minY === Infinity) minY = 0;\n        console.log(\"\\uD83D\\uDCCA ANALYSIS COMPLETE: minX=\".concat(minX, \", minY=\").concat(minY, \", maxStroke=\").concat(maxStrokeWidth, \"px, validElements=\").concat(validElements));\n        // ZERO-BASED OFFSET CALCULATION:\n        // The goal is to have NO OFFSET unless absolutely necessary for negative coordinates\n        let offsetX = 0;\n        let offsetY = 0;\n        // Only add offset if coordinates are actually negative\n        if (minX < 0) {\n            offsetX = Math.abs(minX);\n            console.log(\"❌ Negative X detected: \".concat(minX, \" → adding offset: \").concat(offsetX));\n        }\n        if (minY < 0) {\n            offsetY = Math.abs(minY);\n            console.log(\"❌ Negative Y detected: \".concat(minY, \" → adding offset: \").concat(offsetY));\n        }\n        // Add minimal stroke padding only if we already have an offset\n        if ((offsetX > 0 || offsetY > 0) && maxStrokeWidth > 0) {\n            const strokePadding = Math.ceil(maxStrokeWidth / 2);\n            if (offsetX > 0) offsetX += strokePadding;\n            if (offsetY > 0) offsetY += strokePadding;\n            console.log(\"\\uD83D\\uDD8C️ Added stroke padding: \".concat(strokePadding, \"px\"));\n        }\n        console.log(\"\\uD83C\\uDFAF FINAL OFFSET: X=\".concat(offsetX, \", Y=\").concat(offsetY));\n        console.log(\"   \".concat(offsetX === 0 ? \"✅ Perfect! No X offset needed\" : \"⚠️ X offset: \".concat(offsetX, \"px (\").concat(minX, \" was negative)\")));\n        console.log(\"   \".concat(offsetY === 0 ? \"✅ Perfect! No Y offset needed\" : \"⚠️ Y offset: \".concat(offsetY, \"px (\").concat(minY, \" was negative)\")));\n        return {\n            x: offsetX,\n            y: offsetY\n        };\n    }\n    /**\r\n   * Calculate precise coordinate offset for pixel-perfect InDesign coordinate system transformation\r\n   * This ensures accurate positioning similar to professional tools like IMG.LY InDesign\r\n   * @param {Array} elements - Array of elements with bounds and transforms\r\n   * @returns {Object} - {x, y} offset for coordinate transformation\r\n   */ static calculateCoordinateOffsetPrecise(elements) {\n        if (!elements || elements.length === 0) {\n            console.warn(\"\\uD83C\\uDFAF No elements provided for coordinate offset calculation\");\n            return {\n                x: 0,\n                y: 0\n            };\n        }\n        console.log(\"\\uD83D\\uDD0D ANALYZING\", elements.length, \"elements for PRECISE coordinate offset...\");\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxStroke = 0;\n        let validElements = 0;\n        elements.forEach((element, index)=>{\n            if (!element.geometricBounds || !element.itemTransform) {\n                console.warn(\"   ⚠️ Element \".concat(index, \" missing bounds/transform - skipping\"));\n                return;\n            }\n            // Calculate final position (bounds + transform)\n            const finalX = element.geometricBounds.left + element.itemTransform.tx;\n            const finalY = element.geometricBounds.top + element.itemTransform.ty;\n            // Track stroke width for precise positioning\n            const strokeWidth = element.strokeWeight || 0;\n            maxStroke = Math.max(maxStroke, strokeWidth);\n            console.log(\"   Element \".concat(index, \": bounds(\").concat(element.geometricBounds.left, \", \").concat(element.geometricBounds.top, \") + transform(\").concat(element.itemTransform.tx, \", \").concat(element.itemTransform.ty, \") = final(\").concat(finalX, \", \").concat(finalY, \")\"));\n            minX = Math.min(minX, finalX);\n            minY = Math.min(minY, finalY);\n            validElements++;\n        });\n        console.log(\"\\uD83D\\uDCCA ANALYSIS COMPLETE:\", \"minX=\".concat(minX, \", minY=\").concat(minY, \", maxStroke=\").concat(maxStroke, \"px, validElements=\").concat(validElements));\n        // FIXED: Only add offset if coordinates are actually negative\n        // Don't force elements to start at origin - preserve InDesign positioning\n        let offsetX = 0;\n        let offsetY = 0;\n        // Only handle negative coordinates that would be clipped by the browser\n        if (minX < 0) {\n            offsetX = Math.abs(minX) + maxStroke;\n            console.log(\"❌ Negative X detected: \".concat(minX, \" → adding offset: \").concat(offsetX));\n        } else {\n            console.log(\"✅ Positive X coordinates: \".concat(minX, \" → no offset needed\"));\n        }\n        if (minY < 0) {\n            offsetY = Math.abs(minY) + maxStroke;\n            console.log(\"❌ Negative Y detected: \".concat(minY, \" → adding offset: \").concat(offsetY));\n        } else {\n            console.log(\"✅ Positive Y coordinates: \".concat(minY, \" → no offset needed\"));\n        }\n        const finalOffset = {\n            x: offsetX,\n            y: offsetY\n        };\n        console.log(\"\\uD83C\\uDFAF FINAL PRECISE OFFSET:\", \"X=\".concat(offsetX, \", Y=\").concat(offsetY));\n        console.log(\"   \".concat(offsetX === 0 ? \"✅ Perfect! No X offset needed\" : \"⚠️ X offset: \".concat(offsetX, \"px (compensating for negative coordinates)\")));\n        console.log(\"   \".concat(offsetY === 0 ? \"✅ Perfect! No Y offset needed\" : \"⚠️ Y offset: \".concat(offsetY, \"px (compensating for negative coordinates)\")));\n        return finalOffset;\n    }\n    static calculateBoundsFromPath(item) {\n        try {\n            var _item_Properties_PathGeometry_GeometryPathType_PathPointArray, _item_Properties_PathGeometry_GeometryPathType, _item_Properties_PathGeometry, _item_Properties;\n            // First try to get bounds from GeometricBounds attribute\n            if (item[\"@_GeometricBounds\"]) {\n                return this.parseGeometricBounds(item[\"@_GeometricBounds\"]);\n            }\n            // Then try path geometry\n            const pathGeometry = item === null || item === void 0 ? void 0 : (_item_Properties = item.Properties) === null || _item_Properties === void 0 ? void 0 : (_item_Properties_PathGeometry = _item_Properties.PathGeometry) === null || _item_Properties_PathGeometry === void 0 ? void 0 : (_item_Properties_PathGeometry_GeometryPathType = _item_Properties_PathGeometry.GeometryPathType) === null || _item_Properties_PathGeometry_GeometryPathType === void 0 ? void 0 : (_item_Properties_PathGeometry_GeometryPathType_PathPointArray = _item_Properties_PathGeometry_GeometryPathType.PathPointArray) === null || _item_Properties_PathGeometry_GeometryPathType_PathPointArray === void 0 ? void 0 : _item_Properties_PathGeometry_GeometryPathType_PathPointArray.PathPointType;\n            if (!pathGeometry || !Array.isArray(pathGeometry)) {\n                console.log(\"Warning: No geometry found for \".concat(item[\"@_Self\"], \", using item transform\"));\n                // Fallback to item transform if available\n                const transform = this.parseTransform(item[\"@_ItemTransform\"]);\n                return {\n                    top: transform.ty || 0,\n                    left: transform.tx || 0,\n                    bottom: (transform.ty || 0) + 100,\n                    right: (transform.tx || 0) + 100,\n                    width: 100,\n                    height: 100\n                };\n            }\n            let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\n            pathGeometry.forEach((point)=>{\n                const anchor = point[\"@_Anchor\"];\n                if (anchor) {\n                    const [x, y] = anchor.split(\" \").map(parseFloat);\n                    if (!isNaN(x) && !isNaN(y)) {\n                        minX = Math.min(minX, x);\n                        maxX = Math.max(maxX, x);\n                        minY = Math.min(minY, y);\n                        maxY = Math.max(maxY, y);\n                    }\n                }\n            });\n            if (minX === Infinity || minY === Infinity) {\n                console.log(\"Warning: Could not calculate bounds for \".concat(item[\"@_Self\"]));\n                return {\n                    top: 0,\n                    left: 0,\n                    bottom: 100,\n                    right: 100,\n                    width: 100,\n                    height: 100\n                };\n            }\n            return {\n                top: minY,\n                left: minX,\n                bottom: maxY,\n                right: maxX,\n                width: maxX - minX,\n                height: maxY - minY\n            };\n        } catch (error) {\n            console.error(\"Error calculating bounds for \".concat(item[\"@_Self\"], \":\"), error);\n            return {\n                top: 0,\n                left: 0,\n                bottom: 100,\n                right: 100,\n                width: 100,\n                height: 100\n            };\n        }\n    }\n    static calculateRelativePosition(frameBounds, contentBounds, frameTransform, contentTransform) {\n        if (!frameBounds || !contentBounds) return null;\n        return {\n            offsetX: (contentBounds.left || 0) - (frameBounds.left || 0),\n            offsetY: (contentBounds.top || 0) - (frameBounds.top || 0),\n            scaleX: (contentTransform === null || contentTransform === void 0 ? void 0 : contentTransform.a) || 1,\n            scaleY: (contentTransform === null || contentTransform === void 0 ? void 0 : contentTransform.d) || 1,\n            transformDifference: {\n                frame: frameTransform,\n                content: contentTransform\n            }\n        };\n    }\n    static calculateGap(frameBounds, contentBounds) {\n        if (!frameBounds || !contentBounds) return null;\n        return {\n            top: (contentBounds.top || 0) - (frameBounds.top || 0),\n            left: (contentBounds.left || 0) - (frameBounds.left || 0),\n            bottom: (frameBounds.bottom || 0) - (contentBounds.bottom || 0),\n            right: (frameBounds.right || 0) - (contentBounds.right || 0)\n        };\n    }\n    static calculateImagePositionInFrame(frameBounds, frameTransform, placedContent) {\n        if (!frameBounds || !(placedContent === null || placedContent === void 0 ? void 0 : placedContent.transform)) {\n            return null;\n        }\n        const imageTransform = placedContent.transform;\n        // Calculate image position relative to frame\n        const imageX = (frameBounds.left || 0) + (imageTransform.tx || 0);\n        const imageY = (frameBounds.top || 0) + (imageTransform.ty || 0);\n        // Calculate image size with scaling\n        const imageWidth = (frameBounds.width || 0) * (imageTransform.a || 1);\n        const imageHeight = (frameBounds.height || 0) * (imageTransform.d || 1);\n        return {\n            x: imageX,\n            y: imageY,\n            width: imageWidth,\n            height: imageHeight,\n            scaleX: imageTransform.a || 1,\n            scaleY: imageTransform.d || 1\n        };\n    }\n    static getXMLStructure(obj) {\n        let maxDepth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3, currentDepth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        if (currentDepth >= maxDepth || typeof obj !== \"object\" || obj === null) {\n            return typeof obj;\n        }\n        const structure = {};\n        Object.keys(obj).forEach((key)=>{\n            if (Array.isArray(obj[key])) {\n                structure[key] = \"Array[\".concat(obj[key].length, \"]\");\n            } else if (typeof obj[key] === \"object\" && obj[key] !== null) {\n                structure[key] = this.getXMLStructure(obj[key], maxDepth, currentDepth + 1);\n            } else {\n                structure[key] = typeof obj[key];\n            }\n        });\n        return structure;\n    }\n    static isFormattingAttribute(attributeName) {\n        const formattingAttributes = [\n            \"@_PointSize\",\n            \"@_Leading\",\n            \"@_Tracking\",\n            \"@_FontStyle\",\n            \"@_AppliedFont\",\n            \"@_FillColor\",\n            \"@_StrokeColor\",\n            \"@_Justification\",\n            \"@_LeftIndent\",\n            \"@_RightIndent\",\n            \"@_FirstLineIndent\",\n            \"@_SpaceBefore\",\n            \"@_SpaceAfter\",\n            \"@_Alignment\"\n        ];\n        return formattingAttributes.includes(attributeName);\n    }\n    static saveDebugInfo(debugInfo, fileName) {\n        try {\n            fs.writeFileSync(fileName, JSON.stringify(debugInfo, null, 2));\n            console.log(\"✅ Debug info saved to \".concat(fileName));\n        } catch (error) {\n            console.error(\"❌ Error saving debug info:\", error);\n            console.log(\"Debug info (first 2000 chars):\", JSON.stringify(debugInfo, null, 2).substring(0, 2000));\n        }\n    }\n}\nmodule.exports = IDMLUtils;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/utils/IDMLUtils.js\n"));

/***/ }),

/***/ "./lib/utils/InDesignTextMetrics.js":
/*!******************************************!*\
  !*** ./lib/utils/InDesignTextMetrics.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\r\n * InDesignTextMetrics.js - Precise text measurement utility for 1:1 InDesign compatibility\r\n * Handles font metrics, leading calculations, and text frame insets exactly like InDesign\r\n */ \nclass InDesignTextMetrics {\n    /**\r\n   * Calculate precise text frame dimensions including InDesign-specific insets\r\n   * @param {object} textFrame - The text frame element\r\n   * @param {object} textFramePrefs - Text frame preferences from InDesign\r\n   * @returns {object} Adjusted frame dimensions\r\n   */ static calculateTextFrameInsets(textFrame, textFramePrefs) {\n        var _textFramePrefs_insetSpacing, _textFramePrefs_textInsets, _textFramePrefs_insetSpacing1, _textFramePrefs_textInsets1, _textFramePrefs_insetSpacing2, _textFramePrefs_textInsets2, _textFramePrefs_insetSpacing3, _textFramePrefs_textInsets3;\n        // InDesign default text frame insets (in points)\n        const DEFAULT_INSETS = {\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0\n        };\n        // Extract insets from preferences if available\n        const insets = {\n            top: (textFramePrefs === null || textFramePrefs === void 0 ? void 0 : (_textFramePrefs_insetSpacing = textFramePrefs.insetSpacing) === null || _textFramePrefs_insetSpacing === void 0 ? void 0 : _textFramePrefs_insetSpacing.top) || (textFramePrefs === null || textFramePrefs === void 0 ? void 0 : (_textFramePrefs_textInsets = textFramePrefs.textInsets) === null || _textFramePrefs_textInsets === void 0 ? void 0 : _textFramePrefs_textInsets.top) || DEFAULT_INSETS.top,\n            bottom: (textFramePrefs === null || textFramePrefs === void 0 ? void 0 : (_textFramePrefs_insetSpacing1 = textFramePrefs.insetSpacing) === null || _textFramePrefs_insetSpacing1 === void 0 ? void 0 : _textFramePrefs_insetSpacing1.bottom) || (textFramePrefs === null || textFramePrefs === void 0 ? void 0 : (_textFramePrefs_textInsets1 = textFramePrefs.textInsets) === null || _textFramePrefs_textInsets1 === void 0 ? void 0 : _textFramePrefs_textInsets1.bottom) || DEFAULT_INSETS.bottom,\n            left: (textFramePrefs === null || textFramePrefs === void 0 ? void 0 : (_textFramePrefs_insetSpacing2 = textFramePrefs.insetSpacing) === null || _textFramePrefs_insetSpacing2 === void 0 ? void 0 : _textFramePrefs_insetSpacing2.left) || (textFramePrefs === null || textFramePrefs === void 0 ? void 0 : (_textFramePrefs_textInsets2 = textFramePrefs.textInsets) === null || _textFramePrefs_textInsets2 === void 0 ? void 0 : _textFramePrefs_textInsets2.left) || DEFAULT_INSETS.left,\n            right: (textFramePrefs === null || textFramePrefs === void 0 ? void 0 : (_textFramePrefs_insetSpacing3 = textFramePrefs.insetSpacing) === null || _textFramePrefs_insetSpacing3 === void 0 ? void 0 : _textFramePrefs_insetSpacing3.right) || (textFramePrefs === null || textFramePrefs === void 0 ? void 0 : (_textFramePrefs_textInsets3 = textFramePrefs.textInsets) === null || _textFramePrefs_textInsets3 === void 0 ? void 0 : _textFramePrefs_textInsets3.right) || DEFAULT_INSETS.right\n        };\n        // Calculate content area (available for text)\n        const contentArea = {\n            width: Math.max(0, textFrame.position.width - insets.left - insets.right),\n            height: Math.max(0, textFrame.position.height - insets.top - insets.bottom),\n            offsetX: insets.left,\n            offsetY: insets.top\n        };\n        return {\n            originalFrame: textFrame.position,\n            insets,\n            contentArea,\n            hasInsets: insets.top > 0 || insets.bottom > 0 || insets.left > 0 || insets.right > 0\n        };\n    }\n    /**\r\n   * Convert InDesign leading to precise CSS line-height\r\n   * @param {number|string} leading - InDesign leading value\r\n   * @param {number} fontSize - Font size in points\r\n   * @param {string} leadingType - Type of leading (auto, absolute, percentage)\r\n   * @returns {object} CSS-compatible line height info\r\n   */ static convertLeadingToCSS(leading, fontSize) {\n        let leadingType = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"auto\";\n        let cssLineHeight;\n        let lineHeightPx;\n        switch(leadingType){\n            case \"auto\":\n                // InDesign auto leading is typically 120% of font size\n                cssLineHeight = 1.2;\n                lineHeightPx = fontSize * 1.2;\n                break;\n            case \"absolute\":\n                // Leading is in points, convert to line-height ratio\n                if (typeof leading === \"number\" && leading > 0) {\n                    cssLineHeight = Math.max(0.8, leading / fontSize);\n                    lineHeightPx = leading;\n                } else {\n                    cssLineHeight = 1.2;\n                    lineHeightPx = fontSize * 1.2;\n                }\n                break;\n            case \"percentage\":\n                // Leading is percentage-based\n                const percentage = parseFloat(leading) / 100;\n                cssLineHeight = Math.max(0.8, percentage);\n                lineHeightPx = fontSize * percentage;\n                break;\n            default:\n                cssLineHeight = 1.2;\n                lineHeightPx = fontSize * 1.2;\n        }\n        return {\n            cssLineHeight: Math.round(cssLineHeight * 1000) / 1000,\n            lineHeightPx: Math.round(lineHeightPx * 100) / 100,\n            leadingType,\n            originalLeading: leading\n        };\n    }\n    /**\r\n   * Calculate first baseline offset according to InDesign rules\r\n   * @param {string} firstBaselineOffset - InDesign first baseline offset setting\r\n   * @param {number} fontSize - Font size in points\r\n   * @param {number} lineHeight - Line height in points\r\n   * @returns {number} First baseline offset in points\r\n   */ static calculateFirstBaselineOffset(firstBaselineOffset, fontSize, lineHeight) {\n        switch(firstBaselineOffset){\n            case \"AscentOffset\":\n                // Text sits at natural ascent line (default)\n                return fontSize * 0.8; // Approximate ascent for most fonts\n            case \"CapHeightOffset\":\n                // Text sits at cap height\n                return fontSize * 0.7; // Approximate cap height for most fonts\n            case \"FixedHeight\":\n                // Custom fixed height - use line height\n                return lineHeight;\n            case \"XHeightOffset\":\n                // Text sits at x-height\n                return fontSize * 0.5; // Approximate x-height for most fonts\n            default:\n                return fontSize * 0.8; // Default to ascent offset\n        }\n    }\n    /**\r\n   * Measure text accurately using canvas with InDesign-specific adjustments\r\n   * @param {string} text - Text to measure\r\n   * @param {object} textStyles - Complete text styling object\r\n   * @param {object} frameMetrics - Text frame metrics\r\n   * @returns {object} Precise text measurement data\r\n   */ static measureTextPrecisely(text, textStyles, frameMetrics) {\n        if (!text || text.trim() === \"\") {\n            return {\n                textWidth: 0,\n                textHeight: 0,\n                lineCount: 0,\n                lines: [],\n                willOverflow: false,\n                fits: true\n            };\n        }\n        // Create canvas for measurement\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        // Set font with proper fallbacks\n        const fontSize = parseFloat(textStyles.fontSize) || 12;\n        const fontFamily = textStyles.fontFamily || \"Arial, sans-serif\";\n        const fontWeight = textStyles.fontWeight || \"normal\";\n        const fontStyle = textStyles.fontStyle || \"normal\";\n        ctx.font = \"\".concat(fontStyle, \" \").concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n        // Calculate effective content width accounting for tracking\n        const tracking = textStyles.tracking || 0;\n        const trackingAdjustment = tracking * fontSize / 1000; // Convert em to px\n        const effectiveWidth = Math.max(10, frameMetrics.contentArea.width - Math.abs(trackingAdjustment) - 2); // Leave 2px margin\n        // Split text into words for accurate wrapping, preserving line breaks\n        const words = text.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\").split(/(\\s+|\\n)/).filter((word)=>word.length > 0);\n        const lines = [];\n        let currentLine = \"\";\n        let currentLineWidth = 0;\n        // Measure space width once\n        const spaceWidth = ctx.measureText(\" \").width + trackingAdjustment;\n        for(let i = 0; i < words.length; i++){\n            const word = words[i];\n            // Handle explicit line breaks\n            if (word === \"\\n\") {\n                if (currentLine) {\n                    lines.push({\n                        text: currentLine,\n                        width: currentLineWidth\n                    });\n                    currentLine = \"\";\n                    currentLineWidth = 0;\n                }\n                continue;\n            }\n            // Skip pure whitespace (except spaces)\n            if (/^\\s+$/.test(word) && word !== \" \") {\n                continue;\n            }\n            const wordWidth = ctx.measureText(word).width + Math.max(0, word.length - 1) * trackingAdjustment;\n            // Check if word fits on current line\n            const wordWithSpaceWidth = currentLine && word !== \" \" ? wordWidth + spaceWidth : wordWidth;\n            if (currentLine && word !== \" \" && currentLineWidth + wordWithSpaceWidth > effectiveWidth) {\n                // Word doesn't fit, start new line\n                lines.push({\n                    text: currentLine,\n                    width: currentLineWidth\n                });\n                currentLine = word;\n                currentLineWidth = wordWidth;\n            } else {\n                // Word fits, add to current line\n                if (currentLine && word !== \" \") {\n                    currentLine += \" \" + word;\n                    currentLineWidth += wordWithSpaceWidth;\n                } else if (word !== \" \") {\n                    currentLine = word;\n                    currentLineWidth = wordWidth;\n                }\n            }\n        }\n        // Add the last line\n        if (currentLine) {\n            lines.push({\n                text: currentLine,\n                width: currentLineWidth\n            });\n        }\n        // Calculate text height using InDesign-accurate leading\n        const lineHeightInfo = this.convertLeadingToCSS(textStyles.leading, fontSize, textStyles.leadingType);\n        const lineCount = Math.max(1, lines.length);\n        const firstBaselineOffset = this.calculateFirstBaselineOffset(textStyles.firstBaselineOffset || \"AscentOffset\", fontSize, lineHeightInfo.lineHeightPx);\n        // Calculate total text height including first baseline offset\n        const textHeight = firstBaselineOffset + (lineCount - 1) * lineHeightInfo.lineHeightPx;\n        // Check if text overflows the available height\n        const willOverflow = textHeight > frameMetrics.contentArea.height;\n        return {\n            textWidth: Math.max(...lines.map((line)=>line.width)),\n            textHeight: Math.round(textHeight * 100) / 100,\n            lineCount,\n            lines,\n            lineHeightPx: lineHeightInfo.lineHeightPx,\n            firstBaselineOffset,\n            willOverflow,\n            fits: !willOverflow,\n            availableHeight: frameMetrics.contentArea.height,\n            overflowAmount: willOverflow ? textHeight - frameMetrics.contentArea.height : 0,\n            // Detailed metrics for debugging\n            metrics: {\n                fontSize,\n                leading: textStyles.leading,\n                leadingType: textStyles.leadingType,\n                effectiveWidth,\n                tracking: trackingAdjustment,\n                spaceWidth\n            }\n        };\n    }\n    /**\r\n   * Calculate optimal font size to prevent overflow while maintaining design integrity\r\n   * @param {object} textMeasurement - Result from measureTextPrecisely\r\n   * @param {object} originalStyles - Original text styles\r\n   * @param {number} maxReduction - Maximum font size reduction allowed (0.0-1.0)\r\n   * @returns {object} Adjusted text styles or null if no adjustment needed\r\n   */ static calculateOptimalFontSize(textMeasurement, originalStyles) {\n        let maxReduction = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0.25;\n        if (!textMeasurement.willOverflow) {\n            return null; // No adjustment needed\n        }\n        const originalFontSize = parseFloat(originalStyles.fontSize) || 12;\n        const overflowRatio = textMeasurement.textHeight / textMeasurement.availableHeight;\n        console.log(\"\\uD83D\\uDD27 calculateOptimalFontSize:\", {\n            originalFontSize,\n            textHeight: textMeasurement.textHeight,\n            availableHeight: textMeasurement.availableHeight,\n            overflowRatio,\n            overflowAmount: textMeasurement.overflowAmount\n        });\n        // Calculate required scale factor to fit exactly\n        let scaleFactor = 1 / overflowRatio;\n        // Apply maximum reduction limit to preserve design integrity\n        const minAllowedScale = 1 - maxReduction;\n        const finalScaleFactor = Math.max(minAllowedScale, scaleFactor);\n        const newFontSize = originalFontSize * finalScaleFactor;\n        console.log(\"\\uD83D\\uDD27 Scale calculation:\", {\n            requiredScale: scaleFactor,\n            maxReduction,\n            minAllowedScale,\n            finalScaleFactor,\n            newFontSize\n        });\n        // Calculate if text will still overflow after adjustment\n        const willStillOverflow = finalScaleFactor > scaleFactor;\n        return {\n            adjustedStyles: {\n                ...originalStyles,\n                fontSize: \"\".concat(Math.round(newFontSize * 100) / 100, \"px\"),\n                // Also adjust line-height proportionally if needed\n                lineHeight: overflowRatio > 1.3 ? Math.max(0.9, parseFloat(originalStyles.lineHeight || \"1.2\") * finalScaleFactor) : originalStyles.lineHeight\n            },\n            adjustmentType: willStillOverflow ? \"partial_font_reduction\" : \"font_size_optimized\",\n            scaleFactor: finalScaleFactor,\n            originalFontSize,\n            newFontSize: Math.round(newFontSize * 100) / 100,\n            stillOverflows: willStillOverflow,\n            reductionApplied: ((1 - finalScaleFactor) * 100).toFixed(1) + \"%\"\n        };\n    }\n    /**\r\n   * Generate CSS styles with InDesign-accurate typography\r\n   * @param {object} inDesignFormatting - Formatting object from InDesign\r\n   * @param {object} frameMetrics - Text frame metrics\r\n   * @returns {object} CSS styles optimized for InDesign compatibility\r\n   */ static generateInDesignCSS(inDesignFormatting, frameMetrics) {\n        const fontSize = inDesignFormatting.fontSize || 12;\n        // Convert leading to CSS\n        const lineHeightInfo = this.convertLeadingToCSS(inDesignFormatting.leading, fontSize, inDesignFormatting.leadingType);\n        // Calculate first baseline offset for positioning\n        const firstBaselineOffset = this.calculateFirstBaselineOffset(inDesignFormatting.firstBaselineOffset || \"AscentOffset\", fontSize, lineHeightInfo.lineHeightPx);\n        return {\n            // Typography\n            fontSize: \"\".concat(fontSize, \"px\"),\n            lineHeight: lineHeightInfo.cssLineHeight,\n            fontFamily: inDesignFormatting.fontFamily || \"Arial, sans-serif\",\n            fontWeight: inDesignFormatting.fontWeight || \"normal\",\n            fontStyle: inDesignFormatting.fontStyle || \"normal\",\n            // Advanced typography\n            letterSpacing: inDesignFormatting.tracking ? \"\".concat(inDesignFormatting.tracking / 1000, \"em\") : \"normal\",\n            textAlign: inDesignFormatting.textAlign || \"left\",\n            color: inDesignFormatting.color || \"black\",\n            // Layout and positioning - minimal padding to avoid excessive top spacing\n            padding: \"\".concat(Math.min(2, firstBaselineOffset * 0.3), \"px \").concat(frameMetrics.insets.right, \"px \").concat(frameMetrics.insets.bottom, \"px \").concat(frameMetrics.insets.left, \"px\"),\n            margin: 0,\n            // Overflow control\n            width: \"\".concat(frameMetrics.contentArea.width, \"px\"),\n            height: \"\".concat(frameMetrics.contentArea.height, \"px\"),\n            overflow: \"hidden\",\n            boxSizing: \"border-box\",\n            // Text layout optimization\n            whiteSpace: \"normal\",\n            wordWrap: \"break-word\",\n            overflowWrap: \"break-word\",\n            wordBreak: \"normal\",\n            // InDesign-specific adjustments\n            position: \"relative\",\n            top: frameMetrics.hasInsets ? \"\".concat(frameMetrics.offsetY, \"px\") : \"0\",\n            left: frameMetrics.hasInsets ? \"\".concat(frameMetrics.offsetX, \"px\") : \"0\",\n            // Debug info (can be removed in production)\n            \"--indesign-leading\": inDesignFormatting.leading,\n            \"--indesign-leading-type\": inDesignFormatting.leadingType,\n            \"--css-line-height\": lineHeightInfo.cssLineHeight,\n            \"--first-baseline-offset\": \"\".concat(firstBaselineOffset, \"px\")\n        };\n    }\n}\n// Export for use in other modules\nif ( true && module.exports) {\n    module.exports = InDesignTextMetrics;\n} else if (true) {\n    window.InDesignTextMetrics = InDesignTextMetrics;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/utils/InDesignTextMetrics.js\n"));

/***/ }),

/***/ "./lib/utils/NextFontMapper.js":
/*!*************************************!*\
  !*** ./lib/utils/NextFontMapper.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\r\n * NextFontMapper.js - Dynamic Next.js font mapping based on font characteristics\r\n * NO HARDCODED MAPPINGS - Automatically maps any font to appropriate Next.js fonts\r\n */ \nclass NextFontMapper {\n    /**\r\n   * Initialize comprehensive Next.js font database with characteristics\r\n   * @returns {Object} Font database categorized by type and characteristics\r\n   */ initializeNextFontDatabase() {\n        return {\n            serif: {\n                traditional: [\n                    {\n                        nextFont: \"Crimson_Text\",\n                        family: \"Crimson Text\",\n                        weights: [\n                            \"400\",\n                            \"600\",\n                            \"700\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"elegant\",\n                            \"traditional\",\n                            \"readable\",\n                            \"body-text\"\n                        ],\n                        keywords: [\n                            \"minion\",\n                            \"times\",\n                            \"garamond\",\n                            \"baskerville\",\n                            \"caslon\"\n                        ]\n                    },\n                    {\n                        nextFont: \"Libre_Baskerville\",\n                        family: \"Libre Baskerville\",\n                        weights: [\n                            \"400\",\n                            \"700\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"classic\",\n                            \"readable\",\n                            \"book\"\n                        ],\n                        keywords: [\n                            \"baskerville\",\n                            \"libre\",\n                            \"book\"\n                        ]\n                    },\n                    {\n                        nextFont: \"Lora\",\n                        family: \"Lora\",\n                        weights: [\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"modern\",\n                            \"friendly\",\n                            \"calligraphic\"\n                        ],\n                        keywords: [\n                            \"lora\",\n                            \"modern-serif\"\n                        ]\n                    }\n                ],\n                display: [\n                    {\n                        nextFont: \"Playfair_Display\",\n                        family: \"Playfair Display\",\n                        weights: [\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\",\n                            \"800\",\n                            \"900\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"elegant\",\n                            \"high-contrast\",\n                            \"display\",\n                            \"luxury\"\n                        ],\n                        keywords: [\n                            \"playfair\",\n                            \"display\",\n                            \"elegant\",\n                            \"luxury\"\n                        ]\n                    },\n                    {\n                        nextFont: \"Cormorant_Garamond\",\n                        family: \"Cormorant Garamond\",\n                        weights: [\n                            \"300\",\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"refined\",\n                            \"garamond\",\n                            \"classic\"\n                        ],\n                        keywords: [\n                            \"garamond\",\n                            \"cormorant\",\n                            \"refined\"\n                        ]\n                    }\n                ]\n            },\n            \"sans-serif\": {\n                geometric: [\n                    {\n                        nextFont: \"Inter\",\n                        family: \"Inter\",\n                        weights: [\n                            \"100\",\n                            \"200\",\n                            \"300\",\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\",\n                            \"800\",\n                            \"900\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"modern\",\n                            \"clean\",\n                            \"ui\",\n                            \"versatile\",\n                            \"geometric\"\n                        ],\n                        keywords: [\n                            \"inter\",\n                            \"ui\",\n                            \"interface\",\n                            \"modern\"\n                        ]\n                    },\n                    {\n                        nextFont: \"Nunito_Sans\",\n                        family: \"Nunito Sans\",\n                        weights: [\n                            \"200\",\n                            \"300\",\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\",\n                            \"800\",\n                            \"900\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"friendly\",\n                            \"rounded\",\n                            \"geometric\"\n                        ],\n                        keywords: [\n                            \"nunito\",\n                            \"friendly\",\n                            \"rounded\",\n                            \"futura\",\n                            \"avenir\"\n                        ]\n                    }\n                ],\n                humanist: [\n                    {\n                        nextFont: \"Open_Sans\",\n                        family: \"Open Sans\",\n                        weights: [\n                            \"300\",\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\",\n                            \"800\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"versatile\",\n                            \"readable\",\n                            \"neutral\",\n                            \"professional\"\n                        ],\n                        keywords: [\n                            \"open\",\n                            \"myriad\",\n                            \"professional\",\n                            \"clean\"\n                        ]\n                    },\n                    {\n                        nextFont: \"Source_Sans_3\",\n                        family: \"Source Sans 3\",\n                        weights: [\n                            \"200\",\n                            \"300\",\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\",\n                            \"800\",\n                            \"900\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"adobe\",\n                            \"technical\",\n                            \"clean\"\n                        ],\n                        keywords: [\n                            \"source\",\n                            \"adobe\",\n                            \"technical\",\n                            \"calibri\"\n                        ]\n                    },\n                    {\n                        nextFont: \"Lato\",\n                        family: \"Lato\",\n                        weights: [\n                            \"100\",\n                            \"300\",\n                            \"400\",\n                            \"700\",\n                            \"900\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"warm\",\n                            \"friendly\",\n                            \"professional\"\n                        ],\n                        keywords: [\n                            \"lato\",\n                            \"warm\",\n                            \"friendly\"\n                        ]\n                    }\n                ],\n                grotesque: [\n                    {\n                        nextFont: \"Roboto\",\n                        family: \"Roboto\",\n                        weights: [\n                            \"100\",\n                            \"300\",\n                            \"400\",\n                            \"500\",\n                            \"700\",\n                            \"900\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"android\",\n                            \"modern\",\n                            \"mechanical\"\n                        ],\n                        keywords: [\n                            \"roboto\",\n                            \"android\",\n                            \"mechanical\"\n                        ]\n                    },\n                    {\n                        nextFont: \"Work_Sans\",\n                        family: \"Work Sans\",\n                        weights: [\n                            \"100\",\n                            \"200\",\n                            \"300\",\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\",\n                            \"800\",\n                            \"900\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"work\",\n                            \"professional\",\n                            \"clean\"\n                        ],\n                        keywords: [\n                            \"work\",\n                            \"professional\",\n                            \"helvetica\"\n                        ]\n                    }\n                ]\n            },\n            monospace: [\n                {\n                    nextFont: \"JetBrains_Mono\",\n                    family: \"JetBrains Mono\",\n                    weights: [\n                        \"100\",\n                        \"200\",\n                        \"300\",\n                        \"400\",\n                        \"500\",\n                        \"600\",\n                        \"700\",\n                        \"800\"\n                    ],\n                    styles: [\n                        \"normal\",\n                        \"italic\"\n                    ],\n                    googleFont: true,\n                    characteristics: [\n                        \"coding\",\n                        \"modern\",\n                        \"ligatures\"\n                    ],\n                    keywords: [\n                        \"jetbrains\",\n                        \"code\",\n                        \"programming\"\n                    ]\n                },\n                {\n                    nextFont: \"Courier_Prime\",\n                    family: \"Courier Prime\",\n                    weights: [\n                        \"400\",\n                        \"700\"\n                    ],\n                    styles: [\n                        \"normal\",\n                        \"italic\"\n                    ],\n                    googleFont: true,\n                    characteristics: [\n                        \"typewriter\",\n                        \"classic\",\n                        \"courier\"\n                    ],\n                    keywords: [\n                        \"courier\",\n                        \"typewriter\",\n                        \"classic\"\n                    ]\n                },\n                {\n                    nextFont: \"Source_Code_Pro\",\n                    family: \"Source Code Pro\",\n                    weights: [\n                        \"200\",\n                        \"300\",\n                        \"400\",\n                        \"500\",\n                        \"600\",\n                        \"700\",\n                        \"800\",\n                        \"900\"\n                    ],\n                    styles: [\n                        \"normal\",\n                        \"italic\"\n                    ],\n                    googleFont: true,\n                    characteristics: [\n                        \"adobe\",\n                        \"coding\",\n                        \"technical\"\n                    ],\n                    keywords: [\n                        \"source\",\n                        \"code\",\n                        \"adobe\",\n                        \"technical\"\n                    ]\n                }\n            ],\n            // Language-specific fonts\n            japanese: [\n                {\n                    nextFont: \"Noto_Serif_JP\",\n                    family: \"Noto Serif JP\",\n                    weights: [\n                        \"200\",\n                        \"300\",\n                        \"400\",\n                        \"500\",\n                        \"600\",\n                        \"700\",\n                        \"900\"\n                    ],\n                    styles: [\n                        \"normal\"\n                    ],\n                    googleFont: true,\n                    characteristics: [\n                        \"japanese\",\n                        \"serif\",\n                        \"traditional\"\n                    ],\n                    keywords: [\n                        \"japanese\",\n                        \"jp\",\n                        \"mincho\",\n                        \"kozuka\",\n                        \"noto\"\n                    ]\n                },\n                {\n                    nextFont: \"Noto_Sans_JP\",\n                    family: \"Noto Sans JP\",\n                    weights: [\n                        \"100\",\n                        \"300\",\n                        \"400\",\n                        \"500\",\n                        \"700\",\n                        \"900\"\n                    ],\n                    styles: [\n                        \"normal\"\n                    ],\n                    googleFont: true,\n                    characteristics: [\n                        \"japanese\",\n                        \"sans-serif\",\n                        \"modern\"\n                    ],\n                    keywords: [\n                        \"japanese\",\n                        \"jp\",\n                        \"gothic\",\n                        \"sans\",\n                        \"noto\"\n                    ]\n                }\n            ],\n            chinese: [\n                {\n                    nextFont: \"Noto_Serif_SC\",\n                    family: \"Noto Serif SC\",\n                    weights: [\n                        \"200\",\n                        \"300\",\n                        \"400\",\n                        \"500\",\n                        \"600\",\n                        \"700\",\n                        \"900\"\n                    ],\n                    styles: [\n                        \"normal\"\n                    ],\n                    googleFont: true,\n                    characteristics: [\n                        \"chinese\",\n                        \"simplified\",\n                        \"serif\"\n                    ],\n                    keywords: [\n                        \"chinese\",\n                        \"simplified\",\n                        \"sc\",\n                        \"simsun\",\n                        \"noto\"\n                    ]\n                },\n                {\n                    nextFont: \"Noto_Sans_SC\",\n                    family: \"Noto Sans SC\",\n                    weights: [\n                        \"100\",\n                        \"300\",\n                        \"400\",\n                        \"500\",\n                        \"700\",\n                        \"900\"\n                    ],\n                    styles: [\n                        \"normal\"\n                    ],\n                    googleFont: true,\n                    characteristics: [\n                        \"chinese\",\n                        \"simplified\",\n                        \"sans-serif\"\n                    ],\n                    keywords: [\n                        \"chinese\",\n                        \"simplified\",\n                        \"sc\",\n                        \"sans\",\n                        \"noto\"\n                    ]\n                }\n            ]\n        };\n    }\n    /**\r\n   * Dynamically map IDML font to Next.js font based on characteristics\r\n   * @param {string} idmlFontFamily - Original IDML font family\r\n   * @param {string} fontStyle - Font style (Regular, Bold, Italic, etc.)\r\n   * @param {number} fontSize - Font size in pixels\r\n   * @param {Object} fontMetadata - Additional font metadata from IDML\r\n   * @returns {Object} Next.js font configuration\r\n   */ mapToNextFont(idmlFontFamily) {\n        let fontStyle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"Regular\", fontSize = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 16, fontMetadata = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n        if (!idmlFontFamily) {\n            console.log(\"⚠️  No font family provided, using default\");\n            return this.getDefaultFont();\n        }\n        // Create cache key\n        const cacheKey = \"\".concat(idmlFontFamily, \"-\").concat(fontStyle, \"-\").concat(fontSize);\n        // Check cache first\n        if (this.fontCache.has(cacheKey)) {\n            return this.fontCache.get(cacheKey);\n        }\n        console.log('\\uD83D\\uDD0D Dynamically mapping font: \"'.concat(idmlFontFamily, '\" (').concat(fontStyle, \")\"));\n        // Analyze font characteristics\n        const fontAnalysis = this.analyzeFontCharacteristics(idmlFontFamily, fontStyle, fontMetadata);\n        console.log('\\uD83D\\uDCCA Font analysis for \"'.concat(idmlFontFamily, '\":'), {\n            category: fontAnalysis.category,\n            subcategory: fontAnalysis.subcategory,\n            language: fontAnalysis.language,\n            keywords: fontAnalysis.detectedKeywords,\n            confidence: fontAnalysis.confidence\n        });\n        // Find best matching Next.js font\n        const bestMatch = this.findBestNextJSFont(fontAnalysis, idmlFontFamily);\n        // Build final font configuration\n        const finalConfig = this.buildFontConfig(bestMatch, fontStyle, fontSize, idmlFontFamily);\n        // Add to cache\n        this.fontCache.set(cacheKey, finalConfig);\n        // Track for import generation\n        this.nextFontImports.add(bestMatch.nextFont);\n        console.log('✅ Dynamic mapping: \"'.concat(idmlFontFamily, '\" → \"').concat(finalConfig.fontFamily, '\" (').concat(bestMatch.nextFont, \")\"));\n        return finalConfig;\n    }\n    /**\r\n   * Analyze font characteristics to determine category and properties\r\n   * @param {string} fontName - Font name to analyze\r\n   * @param {string} fontStyle - Font style\r\n   * @param {Object} metadata - Additional metadata\r\n   * @returns {Object} Font analysis result\r\n   */ analyzeFontCharacteristics(fontName, fontStyle) {\n        let metadata = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        const lowerName = fontName.toLowerCase();\n        const analysis = {\n            category: \"sans-serif\",\n            subcategory: \"humanist\",\n            language: \"latin\",\n            detectedKeywords: [],\n            confidence: 0,\n            weight: this.extractWeight(fontStyle),\n            isDisplay: false,\n            isCondensed: false\n        };\n        // Language detection\n        if (this.isJapaneseFont(lowerName)) {\n            analysis.language = \"japanese\";\n            analysis.category = this.isSerifFont(lowerName) ? \"serif\" : \"sans-serif\";\n            analysis.confidence += 0.8;\n            return analysis;\n        }\n        if (this.isChineseFont(lowerName)) {\n            analysis.language = \"chinese\";\n            analysis.category = this.isSerifFont(lowerName) ? \"serif\" : \"sans-serif\";\n            analysis.confidence += 0.8;\n            return analysis;\n        }\n        // Category detection\n        if (this.isSerifFont(lowerName)) {\n            analysis.category = \"serif\";\n            analysis.subcategory = this.isDisplayFont(lowerName) ? \"display\" : \"traditional\";\n            analysis.confidence += 0.6;\n        } else if (this.isMonospaceFont(lowerName)) {\n            analysis.category = \"monospace\";\n            analysis.confidence += 0.8;\n        } else {\n            // Sans-serif subcategory detection\n            analysis.category = \"sans-serif\";\n            if (this.isGeometricFont(lowerName)) {\n                analysis.subcategory = \"geometric\";\n                analysis.confidence += 0.5;\n            } else if (this.isGrotesqueFont(lowerName)) {\n                analysis.subcategory = \"grotesque\";\n                analysis.confidence += 0.5;\n            } else {\n                analysis.subcategory = \"humanist\"; // default\n                analysis.confidence += 0.3;\n            }\n        }\n        // Additional characteristics\n        analysis.isDisplay = this.isDisplayFont(lowerName);\n        analysis.isCondensed = this.isCondensedFont(lowerName);\n        // Extract keywords for matching\n        analysis.detectedKeywords = this.extractKeywords(lowerName);\n        return analysis;\n    }\n    /**\r\n   * Check if font is Japanese\r\n   */ isJapaneseFont(fontName) {\n        const japaneseIndicators = [\n            \"kozuka\",\n            \"mincho\",\n            \"gothic\",\n            \"hiragino\",\n            \"yu\",\n            \"meiryo\",\n            \"noto\",\n            \"jp\"\n        ];\n        return japaneseIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Check if font is Chinese\r\n   */ isChineseFont(fontName) {\n        const chineseIndicators = [\n            \"simsun\",\n            \"simhei\",\n            \"microsoft yahei\",\n            \"songti\",\n            \"fangsong\",\n            \"sc\",\n            \"tc\"\n        ];\n        return chineseIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Check if font is serif\r\n   */ isSerifFont(fontName) {\n        const serifIndicators = [\n            \"serif\",\n            \"times\",\n            \"minion\",\n            \"georgia\",\n            \"garamond\",\n            \"baskerville\",\n            \"caslon\",\n            \"mincho\",\n            \"songti\",\n            \"book\"\n        ];\n        return serifIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Check if font is monospace\r\n   */ isMonospaceFont(fontName) {\n        const monospaceIndicators = [\n            \"mono\",\n            \"courier\",\n            \"code\",\n            \"console\",\n            \"terminal\",\n            \"typewriter\"\n        ];\n        return monospaceIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Check if font is geometric sans-serif\r\n   */ isGeometricFont(fontName) {\n        const geometricIndicators = [\n            \"futura\",\n            \"avenir\",\n            \"nunito\",\n            \"inter\",\n            \"circular\",\n            \"geometric\"\n        ];\n        return geometricIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Check if font is grotesque sans-serif\r\n   */ isGrotesqueFont(fontName) {\n        const grotesqueIndicators = [\n            \"helvetica\",\n            \"arial\",\n            \"roboto\",\n            \"work\",\n            \"franklin\",\n            \"akzidenz\"\n        ];\n        return grotesqueIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Check if font is display type\r\n   */ isDisplayFont(fontName) {\n        const displayIndicators = [\n            \"display\",\n            \"title\",\n            \"headline\",\n            \"poster\",\n            \"banner\",\n            \"playfair\"\n        ];\n        return displayIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Check if font is condensed\r\n   */ isCondensedFont(fontName) {\n        const condensedIndicators = [\n            \"condensed\",\n            \"compressed\",\n            \"narrow\",\n            \"compact\"\n        ];\n        return condensedIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Extract weight from font style\r\n   */ extractWeight(fontStyle) {\n        const style = (fontStyle || \"\").toLowerCase();\n        if (style.includes(\"thin\")) return \"thin\";\n        if (style.includes(\"light\")) return \"light\";\n        if (style.includes(\"medium\")) return \"medium\";\n        if (style.includes(\"semibold\") || style.includes(\"semi bold\")) return \"semibold\";\n        if (style.includes(\"bold\")) return \"bold\";\n        if (style.includes(\"black\") || style.includes(\"heavy\")) return \"black\";\n        return \"regular\";\n    }\n    /**\r\n   * Extract keywords from font name for matching\r\n   */ extractKeywords(fontName) {\n        // Remove common suffixes and split into words\n        const cleaned = fontName.replace(/\\s+(pro|std|regular|bold|italic|light|medium|heavy|black|mt)$/gi, \"\").replace(/[^\\w\\s]/g, \" \").toLowerCase();\n        return cleaned.split(/\\s+/).filter((word)=>word.length > 2);\n    }\n    /**\r\n   * Find best matching Next.js font based on analysis\r\n   * @param {Object} analysis - Font analysis result\r\n   * @param {string} originalName - Original font name for logging\r\n   * @returns {Object} Best matching Next.js font configuration\r\n   */ findBestNextJSFont(analysis, originalName) {\n        let candidates = [];\n        // Get font category\n        if (analysis.language === \"japanese\") {\n            candidates = this.nextFontDatabase.japanese;\n        } else if (analysis.language === \"chinese\") {\n            candidates = this.nextFontDatabase.chinese;\n        } else if (analysis.category === \"monospace\") {\n            candidates = this.nextFontDatabase.monospace;\n        } else if (analysis.category === \"serif\") {\n            const subcategory = analysis.subcategory || \"traditional\";\n            candidates = this.nextFontDatabase.serif[subcategory] || this.nextFontDatabase.serif.traditional;\n        } else {\n            // sans-serif\n            const subcategory = analysis.subcategory || \"humanist\";\n            candidates = this.nextFontDatabase[\"sans-serif\"][subcategory] || this.nextFontDatabase[\"sans-serif\"].humanist;\n        }\n        if (!candidates || candidates.length === 0) {\n            console.log(\"⚠️ No candidates found for \".concat(originalName, \", using default\"));\n            return this.getDefaultFontConfig();\n        }\n        // Score each candidate\n        const scoredCandidates = candidates.map((font)=>({\n                ...font,\n                score: this.calculateFontScore(font, analysis, originalName)\n            }));\n        // Sort by score (highest first)\n        scoredCandidates.sort((a, b)=>b.score - a.score);\n        const bestMatch = scoredCandidates[0];\n        console.log('\\uD83C\\uDFAF Best match for \"'.concat(originalName, '\": ').concat(bestMatch.family, \" (score: \").concat(bestMatch.score.toFixed(2), \")\"));\n        return bestMatch;\n    }\n    /**\r\n   * Calculate matching score between font and analysis\r\n   */ calculateFontScore(font, analysis, originalName) {\n        let score = 0;\n        const lowerOriginal = originalName.toLowerCase();\n        // Keyword matching (high weight)\n        const keywordMatches = analysis.detectedKeywords.filter((keyword)=>font.keywords.some((fontKeyword)=>fontKeyword.includes(keyword) || keyword.includes(fontKeyword)));\n        score += keywordMatches.length * 2;\n        // Exact keyword match (very high weight)\n        if (font.keywords.some((keyword)=>lowerOriginal.includes(keyword))) {\n            score += 5;\n        }\n        // Family name similarity\n        if (lowerOriginal.includes(font.family.toLowerCase().split(\" \")[0])) {\n            score += 3;\n        }\n        // Characteristics matching\n        const characteristicMatches = font.characteristics.filter((char)=>analysis.detectedKeywords.includes(char) || lowerOriginal.includes(char));\n        score += characteristicMatches.length * 1;\n        // Weight availability\n        const targetWeight = this.mapFontWeight(analysis.weight, font.weights);\n        if (font.weights.includes(targetWeight)) {\n            score += 0.5;\n        }\n        // Display font preference\n        if (analysis.isDisplay && font.characteristics.includes(\"display\")) {\n            score += 2;\n        }\n        return score;\n    }\n    /**\r\n   * Build final font configuration\r\n   * @param {Object} fontConfig - Next.js font configuration\r\n   * @param {string} fontStyle - Original font style\r\n   * @param {number} fontSize - Font size\r\n   * @param {string} originalFamily - Original font family name\r\n   * @returns {Object} Complete font configuration\r\n   */ buildFontConfig(fontConfig, fontStyle, fontSize, originalFamily) {\n        // Safety check\n        if (!fontConfig) {\n            console.error(\"⚠️ buildFontConfig received null/undefined fontConfig\");\n            fontConfig = this.getDefaultFontConfig();\n        }\n        const weight = this.mapFontWeight(fontStyle, fontConfig.weights);\n        const style = this.mapFontStyle(fontStyle);\n        // ENHANCED: Extract complete style analysis\n        const styleAnalysis = this.analyzeComplexFontStyle(fontStyle);\n        return {\n            // Next.js specific\n            nextFont: fontConfig.nextFont,\n            nextFontVariable: \"--font-\".concat(fontConfig.nextFont.toLowerCase()),\n            // CSS properties\n            fontFamily: fontConfig.family,\n            fontSize: \"\".concat(fontSize, \"px\"),\n            fontWeight: weight,\n            fontStyle: style,\n            // ENHANCED: Complete style information\n            completeStyle: {\n                weight: weight,\n                style: style,\n                isItalic: styleAnalysis.isItalic,\n                isBold: styleAnalysis.isBold,\n                originalStyle: fontStyle,\n                complexStyle: styleAnalysis.complexStyle,\n                // CSS class suggestions\n                cssClasses: this.generateCSSClasses(styleAnalysis),\n                // Multiple weights for Next.js font loading\n                requiredWeights: this.getRequiredWeights(styleAnalysis, fontConfig.weights),\n                requiredStyles: this.getRequiredStyles(styleAnalysis)\n            },\n            // Fallback chain\n            fontFamilyFallback: [\n                fontConfig.family,\n                \"system-ui\",\n                \"-apple-system\",\n                \"sans-serif\"\n            ].join(\", \"),\n            // Metadata\n            category: fontConfig.characteristics ? fontConfig.characteristics[0] : \"sans-serif\",\n            isGoogleFont: fontConfig.googleFont || false,\n            isSystemFont: fontConfig.systemFont || false,\n            // Original values\n            originalFamily: originalFamily,\n            originalStyle: fontStyle,\n            originalSize: fontSize,\n            // Mapping info\n            mappingConfidence: fontConfig.score || 0,\n            mappingReason: this.generateMappingReason(fontConfig, originalFamily)\n        };\n    }\n    /**\r\n   * Analyze complex font styles like \"Bold Italic\", \"Semibold Condensed\", etc.\r\n   * @param {string} fontStyle - Font style string\r\n   * @returns {Object} Style analysis result\r\n   */ analyzeComplexFontStyle(fontStyle) {\n        if (!fontStyle) {\n            return {\n                isBold: false,\n                isItalic: false,\n                complexStyle: \"regular\",\n                weight: \"400\",\n                style: \"normal\"\n            };\n        }\n        const style = fontStyle.toLowerCase();\n        const analysis = {\n            isBold: style.includes(\"bold\"),\n            isItalic: style.includes(\"italic\") || style.includes(\"oblique\"),\n            isLight: style.includes(\"light\"),\n            isMedium: style.includes(\"medium\"),\n            isSemibold: style.includes(\"semibold\") || style.includes(\"demibold\"),\n            isBlack: style.includes(\"black\") || style.includes(\"heavy\"),\n            isCondensed: style.includes(\"condensed\") || style.includes(\"compressed\"),\n            originalStyle: fontStyle\n        };\n        // Determine complex style description\n        let complexStyle = \"regular\";\n        if (analysis.isBold && analysis.isItalic) {\n            complexStyle = \"bold-italic\";\n        } else if (analysis.isBold) {\n            complexStyle = \"bold\";\n        } else if (analysis.isItalic) {\n            complexStyle = \"italic\";\n        } else if (analysis.isSemibold) {\n            complexStyle = analysis.isItalic ? \"semibold-italic\" : \"semibold\";\n        } else if (analysis.isLight) {\n            complexStyle = analysis.isItalic ? \"light-italic\" : \"light\";\n        } else if (analysis.isMedium) {\n            complexStyle = analysis.isItalic ? \"medium-italic\" : \"medium\";\n        } else if (analysis.isBlack) {\n            complexStyle = analysis.isItalic ? \"black-italic\" : \"black\";\n        }\n        analysis.complexStyle = complexStyle;\n        analysis.weight = this.extractWeight(fontStyle);\n        analysis.style = analysis.isItalic ? \"italic\" : \"normal\";\n        return analysis;\n    }\n    /**\r\n   * Generate CSS classes for styling\r\n   * @param {Object} styleAnalysis - Style analysis result\r\n   * @returns {Array} CSS class suggestions\r\n   */ generateCSSClasses(styleAnalysis) {\n        const classes = [];\n        if (styleAnalysis.isBold) classes.push(\"font-bold\");\n        else if (styleAnalysis.isSemibold) classes.push(\"font-semibold\");\n        else if (styleAnalysis.isMedium) classes.push(\"font-medium\");\n        else if (styleAnalysis.isLight) classes.push(\"font-light\");\n        else classes.push(\"font-normal\");\n        if (styleAnalysis.isItalic) classes.push(\"italic\");\n        return classes;\n    }\n    /**\r\n   * Get required weights for Next.js font loading\r\n   * @param {Object} styleAnalysis - Style analysis result\r\n   * @param {Array} availableWeights - Available weights\r\n   * @returns {Array} Required weights\r\n   */ getRequiredWeights(styleAnalysis, availableWeights) {\n        const weights = [\n            \"400\"\n        ]; // Always include normal\n        if (styleAnalysis.isBold && availableWeights.includes(\"700\")) {\n            weights.push(\"700\");\n        }\n        if (styleAnalysis.isSemibold && availableWeights.includes(\"600\")) {\n            weights.push(\"600\");\n        }\n        if (styleAnalysis.isMedium && availableWeights.includes(\"500\")) {\n            weights.push(\"500\");\n        }\n        if (styleAnalysis.isLight && availableWeights.includes(\"300\")) {\n            weights.push(\"300\");\n        }\n        if (styleAnalysis.isBlack && availableWeights.includes(\"900\")) {\n            weights.push(\"900\");\n        }\n        return [\n            ...new Set(weights)\n        ];\n    }\n    /**\r\n   * Get required styles for Next.js font loading\r\n   * @param {Object} styleAnalysis - Style analysis result\r\n   * @returns {Array} Required styles\r\n   */ getRequiredStyles(styleAnalysis) {\n        const styles = [\n            \"normal\"\n        ];\n        if (styleAnalysis.isItalic) {\n            styles.push(\"italic\");\n        }\n        return styles;\n    }\n    /**\r\n   * Generate explanation for why this font was chosen\r\n   */ generateMappingReason(fontConfig, originalFamily) {\n        const reasons = [];\n        if (fontConfig.keywords && fontConfig.keywords.some((k)=>originalFamily.toLowerCase().includes(k))) {\n            reasons.push(\"keyword match\");\n        }\n        if (fontConfig.characteristics) {\n            reasons.push(\"\".concat(fontConfig.characteristics[0], \" characteristics\"));\n        }\n        if (fontConfig.googleFont) {\n            reasons.push(\"Google Font availability\");\n        }\n        return reasons.length > 0 ? reasons.join(\", \") : \"category fallback\";\n    }\n    /**\r\n   * Map InDesign font style to CSS font weight\r\n   * @param {string} fontStyle - InDesign font style\r\n   * @param {Array} availableWeights - Available weights for font\r\n   * @returns {string} CSS font weight\r\n   */ mapFontWeight(fontStyle) {\n        let availableWeights = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [\n            \"400\"\n        ];\n        const style = (fontStyle || \"\").toLowerCase();\n        // Weight mapping\n        const weightMap = {\n            thin: \"100\",\n            extralight: \"200\",\n            light: \"300\",\n            regular: \"400\",\n            normal: \"400\",\n            medium: \"500\",\n            semibold: \"600\",\n            bold: \"700\",\n            extrabold: \"800\",\n            black: \"900\",\n            heavy: \"900\"\n        };\n        // Check for weight keywords in style\n        for (const [keyword, weight] of Object.entries(weightMap)){\n            if (style.includes(keyword)) {\n                // Ensure the weight is available\n                return availableWeights.includes(weight) ? weight : availableWeights.includes(\"400\") ? \"400\" : availableWeights[0];\n            }\n        }\n        // Default to normal weight\n        return availableWeights.includes(\"400\") ? \"400\" : availableWeights[0];\n    }\n    /**\r\n   * Map InDesign font style to CSS font style\r\n   * @param {string} fontStyle - InDesign font style\r\n   * @returns {string} CSS font style\r\n   */ mapFontStyle(fontStyle) {\n        const style = (fontStyle || \"\").toLowerCase();\n        if (style.includes(\"italic\") || style.includes(\"oblique\")) {\n            return \"italic\";\n        }\n        return \"normal\";\n    }\n    /**\r\n   * Get default fallback font configuration\r\n   * @returns {Object} Default font configuration\r\n   */ getDefaultFontConfig() {\n        return this.nextFontDatabase[\"sans-serif\"].humanist[0]; // Inter\n    }\n    /**\r\n   * Get default fallback font\r\n   * @returns {Object} Default font configuration\r\n   */ getDefaultFont() {\n        return this.buildFontConfig(this.getDefaultFontConfig(), \"Regular\", 16, \"Default Font\");\n    }\n    /**\r\n   * Generate Next.js font imports code\r\n   * @returns {string} Import statements for fonts\r\n   */ generateNextFontImports() {\n        const imports = Array.from(this.nextFontImports).map((fontName)=>{\n            return \"import { \".concat(fontName, \" } from 'next/font/google';\");\n        });\n        return imports.join(\"\\n\");\n    }\n    /**\r\n   * Generate Next.js font variable definitions\r\n   * @returns {string} Font variable definitions\r\n   */ generateFontVariables() {\n        const variables = Array.from(this.nextFontImports).map((fontName)=>{\n            // Find font config for weights and styles\n            const fontConfig = this.findFontConfigByNextFont(fontName);\n            // ENHANCED: Collect all required weights and styles from mapped fonts\n            const allRequiredWeights = new Set([\n                \"400\"\n            ]); // Always include normal\n            const allRequiredStyles = new Set([\n                \"normal\"\n            ]); // Always include normal\n            // Check all cached fonts for this Next.js font to see what weights/styles are needed\n            for (const [cacheKey, cachedFont] of this.fontCache.entries()){\n                if (cachedFont.nextFont === fontName) {\n                    var _cachedFont_completeStyle, _cachedFont_completeStyle1;\n                    if ((_cachedFont_completeStyle = cachedFont.completeStyle) === null || _cachedFont_completeStyle === void 0 ? void 0 : _cachedFont_completeStyle.requiredWeights) {\n                        cachedFont.completeStyle.requiredWeights.forEach((w)=>allRequiredWeights.add(w));\n                    }\n                    if ((_cachedFont_completeStyle1 = cachedFont.completeStyle) === null || _cachedFont_completeStyle1 === void 0 ? void 0 : _cachedFont_completeStyle1.requiredStyles) {\n                        cachedFont.completeStyle.requiredStyles.forEach((s)=>allRequiredStyles.add(s));\n                    }\n                }\n            }\n            const weights = Array.from(allRequiredWeights).filter((w)=>fontConfig.weights.includes(w));\n            const styles = Array.from(allRequiredStyles).filter((s)=>fontConfig.styles.includes(s));\n            return \"const \".concat(fontName.toLowerCase(), \" = \").concat(fontName, \"({\\n  weight: [\").concat(weights.map((w)=>\"'\".concat(w, \"'\")).join(\", \"), \"],\\n  style: [\").concat(styles.map((s)=>\"'\".concat(s, \"'\")).join(\", \"), \"],\\n  subsets: ['latin'],\\n  variable: '--font-\").concat(fontName.toLowerCase(), \"',\\n  display: 'swap' // Optimize loading\\n});\");\n        });\n        return variables.join(\"\\n\\n\");\n    }\n    /**\r\n   * Find font config by Next.js font name\r\n   */ findFontConfigByNextFont(nextFontName) {\n        // Search through all categories\n        for (const category of Object.values(this.nextFontDatabase)){\n            if (Array.isArray(category)) {\n                const found = category.find((f)=>f.nextFont === nextFontName);\n                if (found) return found;\n            } else {\n                for (const subcategory of Object.values(category)){\n                    const found = subcategory.find((f)=>f.nextFont === nextFontName);\n                    if (found) return found;\n                }\n            }\n        }\n        // Default fallback\n        return this.getDefaultFontConfig();\n    }\n    /**\r\n   * Get all unique fonts used in a document\r\n   * @param {Object} documentData - Processed IDML document data\r\n   * @returns {Array} Array of font configurations\r\n   */ extractDocumentFonts(documentData) {\n        const usedFonts = new Set();\n        const fontConfigs = [];\n        console.log(\"\\uD83D\\uDD0D Extracting fonts from document data...\");\n        // Extract fonts from stories\n        if (documentData.stories) {\n            Object.values(documentData.stories).forEach((story)=>{\n                if (story.content && story.content.formattedContent) {\n                    story.content.formattedContent.forEach((segment)=>{\n                        if (segment.formatting && segment.formatting.fontFamily) {\n                            const key = \"\".concat(segment.formatting.fontFamily, \"-\").concat(segment.formatting.fontStyle || \"Regular\");\n                            if (!usedFonts.has(key)) {\n                                usedFonts.add(key);\n                                const config = this.mapToNextFont(segment.formatting.fontFamily, segment.formatting.fontStyle, segment.formatting.fontSize || 16);\n                                fontConfigs.push(config);\n                            }\n                        }\n                    });\n                }\n            });\n        }\n        // Extract fonts from resources\n        if (documentData.resources && documentData.resources.fonts) {\n            Object.values(documentData.resources.fonts).forEach((fontFamily)=>{\n                if (fontFamily.fonts) {\n                    fontFamily.fonts.forEach((font)=>{\n                        const key = \"\".concat(font.fontFamily, \"-\").concat(font.fontStyleName);\n                        if (!usedFonts.has(key)) {\n                            usedFonts.add(key);\n                            const config = this.mapToNextFont(font.fontFamily, font.fontStyleName, 16, {\n                                postScriptName: font.postScriptName,\n                                status: font.status\n                            });\n                            fontConfigs.push(config);\n                        }\n                    });\n                }\n            });\n        }\n        console.log(\"\\uD83D\\uDCCA Extracted \".concat(fontConfigs.length, \" unique fonts from document\"));\n        // Log summary\n        fontConfigs.forEach((font, index)=>{\n            console.log(\"   \".concat(index + 1, '. \"').concat(font.originalFamily, '\" → \"').concat(font.fontFamily, '\" (').concat(font.mappingReason, \")\"));\n        });\n        return fontConfigs;\n    }\n    /**\r\n   * Clear caches\r\n   */ clearCache() {\n        this.fontCache.clear();\n        this.nextFontImports.clear();\n    }\n    constructor(){\n        // Available Next.js font categories and their characteristics\n        this.nextFontDatabase = this.initializeNextFontDatabase();\n        this.fontCache = new Map(); // Cache for resolved fonts\n        this.nextFontImports = new Set(); // Track which fonts need to be imported\n    }\n}\nmodule.exports = NextFontMapper;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/utils/NextFontMapper.js\n"));

/***/ }),

/***/ "./lib/utils/UnitConverter.js":
/*!************************************!*\
  !*** ./lib/utils/UnitConverter.js ***!
  \************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\r\n * UnitConverter - Converts various design units to pixels\r\n * All conversions go through inches, then: pixels = inches × DPI\r\n *\r\n * Supported units: Pixels, Points, Picas, Millimeters, Centimeters, Inches, Cicero, Agate\r\n */ \nclass UnitConverter {\n    /**\r\n   * Set the DPI for conversions\r\n   * @param {number} dpi - Dots per inch (96 for web, 300/600 for print)\r\n   */ setDPI(dpi) {\n        this.dpi = dpi;\n    }\n    /**\r\n   * Get the DPI currently being used\r\n   * @returns {number} Current DPI setting\r\n   */ getDPI() {\n        return this.dpi;\n    }\n    /**\r\n   * Check if a unit is supported for conversion\r\n   * @param {string} unit - Unit name to check\r\n   * @returns {boolean} True if unit is supported\r\n   */ isSupportedUnit(unit) {\n        return unit in this.CONVERSIONS_TO_INCHES;\n    }\n    /**\r\n   * Convert any supported unit to pixels\r\n   * @param {number} value - Numeric value to convert\r\n   * @param {string} fromUnit - Source unit (e.g., 'Points', 'Millimeters')\r\n   * @returns {number} Value converted to pixels\r\n   */ toPixels(value, fromUnit) {\n        if (typeof value !== \"number\" || isNaN(value)) {\n            console.warn('UnitConverter: Invalid value \"'.concat(value, '\" for conversion'));\n            return 0;\n        }\n        if (!fromUnit) {\n            console.warn(\"UnitConverter: No unit specified, assuming pixels\");\n            return value;\n        }\n        // Check if already in pixels\n        if (this.CONVERSIONS_TO_INCHES[fromUnit] === null) {\n            return value; // Already in pixels, no conversion needed\n        }\n        // Get conversion factor to inches\n        const toInches = this.CONVERSIONS_TO_INCHES[fromUnit];\n        if (toInches === undefined) {\n            console.warn('UnitConverter: Unsupported unit \"'.concat(fromUnit, '\", treating as pixels'));\n            return value;\n        }\n        // Convert: value → inches → pixels\n        const inches = value * toInches;\n        const pixels = inches * this.dpi;\n        console.log(\"\\uD83D\\uDCD0 Converting: \".concat(value, \" \").concat(fromUnit, \" → \").concat(inches.toFixed(4), \" in → \").concat(pixels.toFixed(2), \" px (DPI: \").concat(this.dpi, \")\"));\n        return Math.round(pixels * 100) / 100; // Round to 2 decimal places\n    }\n    /**\r\n   * Convert multiple values to pixels (for geometric bounds, etc.)\r\n   * @param {object} values - Object with numeric values to convert\r\n   * @param {string} fromUnit - Source unit\r\n   * @returns {object} Object with values converted to pixels\r\n   */ convertObjectToPixels(values, fromUnit) {\n        if (!values || typeof values !== \"object\") {\n            return values;\n        }\n        const converted = {};\n        for (const [key, value] of Object.entries(values)){\n            if (typeof value === \"number\") {\n                converted[key] = this.toPixels(value, fromUnit);\n            } else {\n                converted[key] = value; // Keep non-numeric values as-is\n            }\n        }\n        return converted;\n    }\n    /**\r\n   * Convert dimensions object to pixels while preserving original\r\n   * @param {object} dimensions - Dimensions object with width, height, units\r\n   * @returns {object} Object with both original and pixel dimensions\r\n   */ convertDimensions(dimensions) {\n        if (!dimensions || typeof dimensions !== \"object\") {\n            return dimensions;\n        }\n        const { width, height, units, ...rest } = dimensions;\n        // If already in pixels, return as-is but add pixel dimensions for consistency\n        if (this.CONVERSIONS_TO_INCHES[units] === null) {\n            return {\n                ...dimensions,\n                pixelDimensions: {\n                    width: width,\n                    height: height,\n                    units: \"Pixels\"\n                }\n            };\n        }\n        // Convert to pixels\n        const pixelWidth = this.toPixels(width, units);\n        const pixelHeight = this.toPixels(height, units);\n        return {\n            ...dimensions,\n            pixelDimensions: {\n                width: pixelWidth,\n                height: pixelHeight,\n                units: \"Pixels\"\n            }\n        };\n    }\n    /**\r\n   * Get a list of all supported units\r\n   * @returns {string[]} Array of supported unit names\r\n   */ getSupportedUnits() {\n        return Object.keys(this.CONVERSIONS_TO_INCHES);\n    }\n    /**\r\n   * Create a unit converter with specific DPI\r\n   * @param {number} dpi - DPI setting\r\n   * @returns {UnitConverter} New UnitConverter instance\r\n   */ static withDPI(dpi) {\n        return new UnitConverter(dpi);\n    }\n    constructor(dpi = 96){\n        this.dpi = dpi; // Default web DPI\n        // Conversion factors to inches\n        this.CONVERSIONS_TO_INCHES = {\n            // Already in pixels - no conversion needed\n            Pixels: null,\n            pixels: null,\n            px: null,\n            // Standard units to inches\n            Points: 1 / 72,\n            points: 1 / 72,\n            pt: 1 / 72,\n            Picas: 1 / 6,\n            picas: 1 / 6,\n            pc: 1 / 6,\n            Millimeters: 0.0393701,\n            millimeters: 0.0393701,\n            mm: 0.0393701,\n            Centimeters: 0.393701,\n            centimeters: 0.393701,\n            cm: 0.393701,\n            Inches: 1,\n            inches: 1,\n            in: 1,\n            Cicero: 0.178,\n            cicero: 0.178,\n            Agate: 5.5 / 72,\n            agate: 5.5 / 72,\n            ag: 5.5 / 72\n        };\n    }\n}\nmodule.exports = UnitConverter;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/utils/UnitConverter.js\n"));

/***/ }),

/***/ "./pages/view/[uploadId].js":
/*!**********************************!*\
  !*** ./pages/view/[uploadId].js ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Viewer; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/index.js */ \"./lib/index.js\");\n/* harmony import */ var _lib_index_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_lib_index_js__WEBPACK_IMPORTED_MODULE_3__);\n\nvar _s = $RefreshSig$();\n\n\n // Added missing import for React.Fragment\n\nfunction Viewer() {\n    var _this = this;\n    var _documentData_document, _documentData_document1, _documentData_pageInfo_dimensions_pixelDimensions, _documentData_pageInfo_dimensions, _documentData_pageInfo, _documentData_pageInfo_dimensions1, _documentData_pageInfo1, _documentData_pageInfo_dimensions_pixelDimensions1, _documentData_pageInfo_dimensions2, _documentData_pageInfo2, _documentData_pageInfo_dimensions3, _documentData_pageInfo3, _documentData_pageInfo_dimensions4, _documentData_pageInfo4, _documentData_pageInfo5, _documentData_pageInfo_dimensions_pixelDimensions2, _documentData_pageInfo_dimensions5, _documentData_pageInfo_dimensions6, _documentData_pageInfo_dimensions_pixelDimensions3, _documentData_pageInfo_dimensions7, _documentData_pageInfo_dimensions8, _documentData_pageInfo_margins_pixelMargins, _documentData_pageInfo_margins_pixelMargins1, _documentData_pageInfo_margins_pixelMargins2, _documentData_pageInfo_margins_pixelMargins3, _documentData_pageInfo_dimensions_pixelDimensions4, _documentData_pageInfo_dimensions9, _documentData_pageInfo_dimensions10, _documentData_pageInfo_margins_pixelMargins4, _documentData_pageInfo_margins_pixelMargins5, _documentData_pageInfo_dimensions_pixelDimensions5, _documentData_pageInfo_dimensions11, _documentData_pageInfo_dimensions12, _documentData_pageInfo_margins_pixelMargins6, _documentData_pageInfo_margins_pixelMargins7, _documentData_elements, _documentData_pageInfo_dimensions_pixelDimensions6, _documentData_pageInfo_dimensions13, _documentData_pageInfo6, _documentData_pageInfo_dimensions14, _documentData_pageInfo7, _documentData_pageInfo_dimensions_pixelDimensions7, _documentData_pageInfo_dimensions15, _documentData_pageInfo8, _documentData_pageInfo_dimensions16, _documentData_pageInfo9, _documentData_pageInfo10, _selectedElement_placedContent_transform, _selectedElement_placedContent_transform1, _documentData_stories_selectedElement_parentStory_styling, _documentData_stories_selectedElement_parentStory_styling1, _documentData_stories_selectedElement_parentStory_styling2, _selectedElement_linkedImage, _selectedElement_linkedImage1;\n    _s();\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    const { uploadId } = router.query;\n    const [documentData, setDocumentData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [selectedElement, setSelectedElement] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [showMargins, setShowMargins] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [showDebugInfo, setShowDebugInfo] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // CONFIGURATION OPTIONS - Make background detection flexible\n    const [backgroundConfig, setBackgroundConfig] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        mode: \"auto\",\n        customColor: \"#ffffff\",\n        allowColorAnalysis: true,\n        preferPaperColor: true,\n        fallbackToWhite: true\n    });\n    // Background color override controls\n    const backgroundModes = [\n        {\n            value: \"auto\",\n            label: \"Auto Detect\"\n        },\n        {\n            value: \"white\",\n            label: \"Force White\"\n        },\n        {\n            value: \"transparent\",\n            label: \"Transparent\"\n        },\n        {\n            value: \"custom\",\n            label: \"Custom Color\"\n        }\n    ];\n    const mmToPx = (mm)=>{\n        if (typeof mm !== \"number\") return 0;\n        return mm * 96 / 25.4;\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (uploadId) {\n            loadDocument();\n        }\n    }, [\n        uploadId\n    ]);\n    const loadDocument = async ()=>{\n        try {\n            var _data_elements;\n            const response = await fetch(\"/api/document/\".concat(uploadId));\n            const data = await response.json();\n            console.log(\"\\uD83D\\uDCC4 Document data:\", data);\n            // DEBUG: Check element positioning data in detail\n            console.log(\"\\uD83D\\uDD0D DEBUG DATA STRUCTURE:\");\n            console.log(\"DATA EXISTS:\", !!data);\n            console.log(\"DATA.ELEMENTS EXISTS:\", !!(data === null || data === void 0 ? void 0 : data.elements));\n            console.log(\"DATA.ELEMENTS LENGTH:\", data === null || data === void 0 ? void 0 : (_data_elements = data.elements) === null || _data_elements === void 0 ? void 0 : _data_elements.length);\n            console.log(\"DATA KEYS:\", data ? Object.keys(data) : \"no data\");\n            console.log(\"FULL DATA OBJECT:\", data);\n            if (data && data.elements && data.elements.length > 0) {\n                console.log(\"\\uD83D\\uDD0D ELEMENT POSITIONING ANALYSIS:\");\n                console.log(\"RAW ELEMENTS ARRAY:\", data.elements);\n                data.elements.forEach((element, index)=>{\n                    var _element_position, _element_pixelPosition;\n                    console.log(\"\\n=== ELEMENT \".concat(index, \" ===\"));\n                    console.log(\"ELEMENT ID:\", element.id);\n                    console.log(\"ELEMENT NAME:\", element.name);\n                    console.log(\"ELEMENT TYPE:\", element.type);\n                    console.log(\"ORIGINAL POSITION:\", element.position);\n                    console.log(\"PIXEL POSITION:\", element.pixelPosition);\n                    // Check for Y=0 issues\n                    if (((_element_position = element.position) === null || _element_position === void 0 ? void 0 : _element_position.y) === 0) {\n                        console.log(\"\\uD83D\\uDEA8 ORIGINAL POSITION Y IS ZERO!\");\n                    }\n                    if (((_element_pixelPosition = element.pixelPosition) === null || _element_pixelPosition === void 0 ? void 0 : _element_pixelPosition.y) === 0) {\n                        console.log(\"\\uD83D\\uDEA8 PIXEL POSITION Y IS ZERO!\");\n                    }\n                    // Show what coordinates we're actually using for positioning\n                    const finalPosition = element.pixelPosition || element.position;\n                    console.log(\"FINAL POSITION FOR RENDERING:\", finalPosition);\n                    // Show each coordinate explicitly\n                    console.log(\"FINAL X:\", finalPosition === null || finalPosition === void 0 ? void 0 : finalPosition.x);\n                    console.log(\"FINAL Y:\", finalPosition === null || finalPosition === void 0 ? void 0 : finalPosition.y);\n                    console.log(\"FINAL WIDTH:\", finalPosition === null || finalPosition === void 0 ? void 0 : finalPosition.width);\n                    console.log(\"FINAL HEIGHT:\", finalPosition === null || finalPosition === void 0 ? void 0 : finalPosition.height);\n                });\n            } else {\n                console.log(\"\\uD83D\\uDEA8 NO ELEMENTS FOUND! This is the problem.\");\n            }\n            setDocumentData(data);\n            setLoading(false);\n        } catch (error) {\n            console.error(\"Error loading document:\", error);\n            setLoading(false);\n        }\n    };\n    // Use ColorUtils for color conversion\n    const convertColor = (colorRef)=>{\n        // If colorRef is a string and matches a color in resources, use the color object\n        if (typeof colorRef === \"string\" && documentData.resources && documentData.resources.colors && documentData.resources.colors[colorRef]) {\n            return _lib_index_js__WEBPACK_IMPORTED_MODULE_3__.ColorUtils.convertIdmlColorToRgb(documentData.resources.colors[colorRef]);\n        }\n        // Otherwise, pass through (handles objects or fallback)\n        return _lib_index_js__WEBPACK_IMPORTED_MODULE_3__.ColorUtils.convertIdmlColorToRgb(colorRef);\n    };\n    const getDocumentBackgroundColor = (documentData)=>{\n        var _documentData_pageInfo, _documentData_document, _documentData_resources, _documentData_resources1, _documentData_resources2, _documentData_resources3;\n        console.log(\"\\uD83D\\uDD0D Starting improved background color detection...\", {\n            config: backgroundConfig\n        });\n        // 1. Look for a full-page rectangle with a fill (prefer this over swatch analysis)\n        if (documentData.elements) {\n            var _documentData_pageInfo_dimensions_pixelDimensions, _documentData_pageInfo_dimensions, _documentData_pageInfo1, _documentData_pageInfo_dimensions_pixelDimensions1, _documentData_pageInfo_dimensions1, _documentData_pageInfo2;\n            const pageWidth = ((_documentData_pageInfo1 = documentData.pageInfo) === null || _documentData_pageInfo1 === void 0 ? void 0 : (_documentData_pageInfo_dimensions = _documentData_pageInfo1.dimensions) === null || _documentData_pageInfo_dimensions === void 0 ? void 0 : (_documentData_pageInfo_dimensions_pixelDimensions = _documentData_pageInfo_dimensions.pixelDimensions) === null || _documentData_pageInfo_dimensions_pixelDimensions === void 0 ? void 0 : _documentData_pageInfo_dimensions_pixelDimensions.width) || 612;\n            const pageHeight = ((_documentData_pageInfo2 = documentData.pageInfo) === null || _documentData_pageInfo2 === void 0 ? void 0 : (_documentData_pageInfo_dimensions1 = _documentData_pageInfo2.dimensions) === null || _documentData_pageInfo_dimensions1 === void 0 ? void 0 : (_documentData_pageInfo_dimensions_pixelDimensions1 = _documentData_pageInfo_dimensions1.pixelDimensions) === null || _documentData_pageInfo_dimensions_pixelDimensions1 === void 0 ? void 0 : _documentData_pageInfo_dimensions_pixelDimensions1.height) || 792;\n            // Find the largest rectangle with a non-None fill\n            const fullPageRects = documentData.elements.filter((el)=>el.type === \"Rectangle\" && el.pixelPosition && el.pixelPosition.x <= 5 && el.pixelPosition.y <= 5 && el.pixelPosition.width >= pageWidth * 0.95 && el.pixelPosition.height >= pageHeight * 0.95 && el.fill && el.fill !== \"Color/None\");\n            if (fullPageRects.length > 0) {\n                // Use the largest by area\n                const bgRect = fullPageRects.reduce((a, b)=>a.pixelPosition.width * a.pixelPosition.height > b.pixelPosition.width * b.pixelPosition.height ? a : b);\n                console.log(\"\\uD83C\\uDFA8 Using full-page rectangle as background:\", bgRect.fill);\n                return convertColor(bgRect.fill);\n            }\n        }\n        // Handle configured background modes\n        if (backgroundConfig.mode === \"white\") {\n            console.log(\"\\uD83D\\uDCC4 ✅ Force white mode - returning white\");\n            return \"white\";\n        }\n        if (backgroundConfig.mode === \"transparent\") {\n            console.log(\"\\uD83D\\uDCC4 ✅ Transparent mode - returning transparent\");\n            return \"transparent\";\n        }\n        if (backgroundConfig.mode === \"custom\") {\n            console.log(\"\\uD83D\\uDCC4 ✅ Custom color mode - returning:\", backgroundConfig.customColor);\n            return backgroundConfig.customColor;\n        }\n        // Auto mode - continue with detection logic\n        // Strategy 1: Look for page background color in pageInfo\n        if (((_documentData_pageInfo = documentData.pageInfo) === null || _documentData_pageInfo === void 0 ? void 0 : _documentData_pageInfo.backgroundColor) && documentData.pageInfo.backgroundColor !== \"Color/None\") {\n            console.log(\"\\uD83D\\uDCC4 Found page background in pageInfo:\", documentData.pageInfo.backgroundColor);\n            return convertColor(documentData.pageInfo.backgroundColor);\n        }\n        // Strategy 2: Look for document background in document properties\n        if (((_documentData_document = documentData.document) === null || _documentData_document === void 0 ? void 0 : _documentData_document.backgroundColor) && documentData.document.backgroundColor !== \"Color/None\") {\n            console.log(\"\\uD83D\\uDCC4 Found document background in document:\", documentData.document.backgroundColor);\n            return convertColor(documentData.document.backgroundColor);\n        }\n        // Strategy 3: Look for spreads background color\n        if (documentData.spreads) {\n            for (const [spreadId, spread] of Object.entries(documentData.spreads)){\n                if (spread.backgroundColor && spread.backgroundColor !== \"Color/None\") {\n                    console.log(\"\\uD83D\\uDCC4 Found spread background color:\", spread.backgroundColor);\n                    return convertColor(spread.backgroundColor);\n                }\n            }\n        }\n        // STRATEGY 3.5: Analyze document colors for suitable background colors using ColorUtils\n        if ((_documentData_resources = documentData.resources) === null || _documentData_resources === void 0 ? void 0 : _documentData_resources.colors) {\n            console.log(\"\\uD83D\\uDCC4 Analyzing document colors for background candidates...\");\n            // Use ColorUtils to analyze and filter background colors\n            const colorKeys = Object.keys(documentData.resources.colors);\n            const backgroundCandidates = [];\n            for (const colorKey of colorKeys){\n                const analysis = _lib_index_js__WEBPACK_IMPORTED_MODULE_3__.ColorUtils.analyzeIdmlColorForBackground(colorKey);\n                if (analysis && analysis.isLightBackground) {\n                    console.log(\"   ✅ Background candidate: \".concat(colorKey, \" - \").concat(analysis.reasoning, \" (\").concat(analysis.category, \")\"));\n                    backgroundCandidates.push(colorKey);\n                } else if (analysis) {\n                    console.log(\"   ❌ Not suitable: \".concat(colorKey, \" - \").concat(analysis.reasoning));\n                }\n            }\n            if (backgroundCandidates.length > 0) {\n                // Sort candidates using ColorUtils sorting function\n                const sortedCandidates = _lib_index_js__WEBPACK_IMPORTED_MODULE_3__.ColorUtils.sortColorsByLightness(backgroundCandidates);\n                const bestCandidate = sortedCandidates[0];\n                console.log(\"\\uD83D\\uDCC4 Found \".concat(backgroundCandidates.length, \" background color candidates:\"), sortedCandidates);\n                console.log(\"\\uD83D\\uDCC4 Using best background color candidate:\", bestCandidate);\n                return convertColor(bestCandidate);\n            }\n        }\n        // Strategy 4: Look for a large background rectangle element with actual fill\n        if (documentData.elements) {\n            var _documentData_pageInfo_dimensions_pixelDimensions2, _documentData_pageInfo_dimensions2, _documentData_pageInfo3, _documentData_pageInfo_dimensions_pixelDimensions3, _documentData_pageInfo_dimensions3, _documentData_pageInfo4;\n            const pageWidth = ((_documentData_pageInfo3 = documentData.pageInfo) === null || _documentData_pageInfo3 === void 0 ? void 0 : (_documentData_pageInfo_dimensions2 = _documentData_pageInfo3.dimensions) === null || _documentData_pageInfo_dimensions2 === void 0 ? void 0 : (_documentData_pageInfo_dimensions_pixelDimensions2 = _documentData_pageInfo_dimensions2.pixelDimensions) === null || _documentData_pageInfo_dimensions_pixelDimensions2 === void 0 ? void 0 : _documentData_pageInfo_dimensions_pixelDimensions2.width) || 612;\n            const pageHeight = ((_documentData_pageInfo4 = documentData.pageInfo) === null || _documentData_pageInfo4 === void 0 ? void 0 : (_documentData_pageInfo_dimensions3 = _documentData_pageInfo4.dimensions) === null || _documentData_pageInfo_dimensions3 === void 0 ? void 0 : (_documentData_pageInfo_dimensions_pixelDimensions3 = _documentData_pageInfo_dimensions3.pixelDimensions) === null || _documentData_pageInfo_dimensions_pixelDimensions3 === void 0 ? void 0 : _documentData_pageInfo_dimensions_pixelDimensions3.height) || 792;\n            console.log(\"\\uD83D\\uDCC4 Searching for background in\", documentData.elements.length, \"elements\");\n            console.log(\"\\uD83D\\uDCC4 Page dimensions:\", pageWidth, \"x\", pageHeight);\n            // Log all rectangles with their positions and fills for debugging\n            const rectangles = documentData.elements.filter((element)=>element.type === \"Rectangle\");\n            console.log(\"\\uD83D\\uDCC4 Found\", rectangles.length, \"rectangles:\");\n            let hasAnyActualFill = false;\n            rectangles.forEach((rect)=>{\n                console.log(\"   - \".concat(rect.id, \": pos(\").concat(rect.position.x, \", \").concat(rect.position.y, \") size(\").concat(rect.position.width, \" x \").concat(rect.position.height, \") fill: \").concat(rect.fill));\n                if (rect.fill && rect.fill !== \"Color/None\") {\n                    hasAnyActualFill = true;\n                }\n            });\n            // CRITICAL FIX: If ALL rectangles have Color/None, check if we already found a background color above\n            if (!hasAnyActualFill) {\n                console.log(\"\\uD83D\\uDCC4 ✅ ALL rectangles have Color/None - but checking for document-level background first\");\n            // Don't immediately default to white - continue checking other strategies\n            }\n            // Strategy 4a: Look for rectangles that cover the entire page area with actual color\n            const fullPageElements = documentData.elements.filter((element)=>{\n                return element.type === \"Rectangle\" && element.position.x <= 50 && // More tolerance for left edge\n                element.position.y <= 50 && // More tolerance for top edge\n                element.position.width >= pageWidth * 0.8 && // Covers most width\n                element.position.height >= pageHeight * 0.8 && // Covers most height\n                element.fill && element.fill !== \"Color/None\";\n            });\n            if (fullPageElements.length > 0) {\n                // Get the largest background element (likely the page background)\n                const backgroundElement = fullPageElements.reduce((largest, current)=>{\n                    const largestArea = largest.position.width * largest.position.height;\n                    const currentArea = current.position.width * current.position.height;\n                    return currentArea > largestArea ? current : largest;\n                });\n                console.log(\"\\uD83D\\uDCC4 Found full-page background element:\", backgroundElement.id, \"with color:\", backgroundElement.fill);\n                return convertColor(backgroundElement.fill);\n            }\n            // Strategy 4b: Look for any large rectangle with actual color (even if not full page)\n            const largeColoredElements = documentData.elements.filter((element)=>{\n                const area = element.position.width * element.position.height;\n                const pageArea = pageWidth * pageHeight;\n                return element.type === \"Rectangle\" && area >= pageArea * 0.3 && // At least 30% of page area\n                element.fill && element.fill !== \"Color/None\";\n            });\n            if (largeColoredElements.length > 0) {\n                // Sort by area, largest first\n                largeColoredElements.sort((a, b)=>{\n                    const areaA = a.position.width * a.position.height;\n                    const areaB = b.position.width * b.position.height;\n                    return areaB - areaA;\n                });\n                const backgroundElement = largeColoredElements[0];\n                console.log(\"\\uD83D\\uDCC4 Found large colored background element:\", backgroundElement.id, \"with color:\", backgroundElement.fill);\n                return convertColor(backgroundElement.fill);\n            }\n        }\n        // Strategy 5: Look for Paper color specifically (InDesign's default) - if enabled\n        if (backgroundConfig.preferPaperColor && ((_documentData_resources1 = documentData.resources) === null || _documentData_resources1 === void 0 ? void 0 : _documentData_resources1.colors)) {\n            const paperColor = Object.entries(documentData.resources.colors).find((param)=>{\n                let [key, color] = param;\n                return color.name === \"Paper\" || key === \"Color/Paper\";\n            });\n            if (paperColor) {\n                console.log(\"\\uD83D\\uDCC4 Found Paper color in resources - using as background\");\n                return convertColor(paperColor[0]);\n            }\n        }\n        // Strategy 6: Check for explicitly named background colors\n        if ((_documentData_resources2 = documentData.resources) === null || _documentData_resources2 === void 0 ? void 0 : _documentData_resources2.colors) {\n            // Look for specific background color names\n            const backgroundColorNames = [\n                \"Page\",\n                \"Background\",\n                \"Document\",\n                \"Page Color\",\n                \"Background Color\"\n            ];\n            for (const colorName of backgroundColorNames){\n                const foundColor = Object.entries(documentData.resources.colors).find((param)=>{\n                    let [key, color] = param;\n                    return color.name && backgroundColorNames.some((name)=>color.name.toLowerCase().includes(name.toLowerCase()));\n                });\n                if (foundColor) {\n                    console.log(\"\\uD83D\\uDCC4 Found named background color:\", foundColor[1].name);\n                    return convertColor(foundColor[0]);\n                }\n            }\n        }\n        // Strategy 7: Check spreads data for background colors\n        if (documentData.spreads) {\n            console.log(\"\\uD83D\\uDCC4 Checking spreads for background colors...\");\n            for (const [spreadId, spread] of Object.entries(documentData.spreads)){\n                console.log(\"   - Spread \".concat(spreadId, \" keys:\"), Object.keys(spread));\n                // Check for page background in spread\n                if (spread.pages) {\n                    for (const [index, page] of spread.pages.entries()){\n                        console.log(\"     - Page \".concat(index, \" keys:\"), Object.keys(page));\n                        if (page.backgroundColor && page.backgroundColor !== \"Color/None\") {\n                            console.log(\"\\uD83D\\uDCC4 Found page background in spread page:\", page.backgroundColor);\n                            return convertColor(page.backgroundColor);\n                        }\n                    }\n                }\n            }\n        }\n        // Strategy 8: Check master spreads for background\n        if (documentData.masterSpreads) {\n            console.log(\"\\uD83D\\uDCC4 Checking master spreads for background colors...\");\n            for (const [masterId, master] of Object.entries(documentData.masterSpreads)){\n                console.log(\"   - Master \".concat(masterId, \" keys:\"), Object.keys(master));\n                if (master.backgroundColor && master.backgroundColor !== \"Color/None\") {\n                    console.log(\"\\uD83D\\uDCC4 Found master spread background:\", master.backgroundColor);\n                    return convertColor(master.backgroundColor);\n                }\n            }\n        }\n        // Strategy 9: IMPROVED color analysis - only as last resort and only for colors actually used as fills - if enabled\n        if (backgroundConfig.allowColorAnalysis && ((_documentData_resources3 = documentData.resources) === null || _documentData_resources3 === void 0 ? void 0 : _documentData_resources3.colors) && documentData.elements) {\n            console.log(\"\\uD83D\\uDCC4 Performing last-resort color analysis...\");\n            // First, get all colors actually used as fills in the document\n            const usedFillColors = new Set();\n            documentData.elements.forEach((element)=>{\n                if (element.fill && element.fill !== \"Color/None\") {\n                    usedFillColors.add(element.fill);\n                }\n            });\n            console.log(\"\\uD83D\\uDCC4 Colors actually used as fills:\", Array.from(usedFillColors));\n            if (usedFillColors.size === 0) {\n                console.log(\"\\uD83D\\uDCC4 ✅ No colors used as fills - confirming white background\");\n                return \"white\";\n            }\n            // Analyze only colors that are actually used as fills\n            const fillColorAnalysis = Array.from(usedFillColors).map((colorKey)=>{\n                var _documentData_pageInfo_dimensions, _documentData_pageInfo, _documentData_pageInfo_dimensions1, _documentData_pageInfo1;\n                const color = documentData.resources.colors[colorKey];\n                if (!color) return null;\n                // Extract CMYK values from the key if available\n                const cmykMatch = colorKey.match(/Color\\/C=([\\d.]+)\\s*M=([\\d.]+)\\s*Y=([\\d.]+)\\s*K=([\\d.]+)/);\n                if (!cmykMatch) return null;\n                const [, c, m, y, k] = cmykMatch.map((val)=>parseFloat(val));\n                console.log(\"   → Analyzing used fill color \".concat(colorKey, \": C=\").concat(c, \" M=\").concat(m, \" Y=\").concat(y, \" K=\").concat(k));\n                // Calculate how \"background-like\" this color is\n                const colorfulness = c + m + y;\n                const darkness = k;\n                const lightness = 100 - darkness; // Higher is lighter\n                // Background colors should typically be:\n                // - Low colorfulness (neutral)\n                // - High lightness (bright)\n                // - Large coverage area\n                let backgroundScore = 0;\n                // Prefer lighter colors (white/paper-like)\n                backgroundScore += lightness * 2;\n                // Slightly penalize very colorful colors (unless they cover large areas)\n                if (colorfulness > 50) {\n                    backgroundScore -= colorfulness * 0.5;\n                }\n                // Calculate total area covered by this color\n                let totalArea = 0;\n                documentData.elements.forEach((element)=>{\n                    if (element.fill === colorKey) {\n                        totalArea += (element.position.width || 0) * (element.position.height || 0);\n                    }\n                });\n                const pageArea = (((_documentData_pageInfo = documentData.pageInfo) === null || _documentData_pageInfo === void 0 ? void 0 : (_documentData_pageInfo_dimensions = _documentData_pageInfo.dimensions) === null || _documentData_pageInfo_dimensions === void 0 ? void 0 : _documentData_pageInfo_dimensions.width) || 612) * (((_documentData_pageInfo1 = documentData.pageInfo) === null || _documentData_pageInfo1 === void 0 ? void 0 : (_documentData_pageInfo_dimensions1 = _documentData_pageInfo1.dimensions) === null || _documentData_pageInfo_dimensions1 === void 0 ? void 0 : _documentData_pageInfo_dimensions1.height) || 792);\n                const coverageRatio = totalArea / pageArea;\n                // Heavily boost colors that cover large areas\n                backgroundScore += coverageRatio * 1000;\n                console.log(\"   \\uD83D\\uDCCA Background score for \".concat(colorKey, \": \").concat(backgroundScore, \" (lightness: \").concat(lightness, \", colorfulness: \").concat(colorfulness, \", coverage: \").concat(coverageRatio.toFixed(3), \")\"));\n                return {\n                    key: colorKey,\n                    color,\n                    cmyk: {\n                        c,\n                        m,\n                        y,\n                        k\n                    },\n                    backgroundScore,\n                    lightness,\n                    colorfulness,\n                    coverageRatio\n                };\n            }).filter(Boolean);\n            if (fillColorAnalysis.length > 0) {\n                // Sort by background score (highest first)\n                fillColorAnalysis.sort((a, b)=>b.backgroundScore - a.backgroundScore);\n                const bestBackgroundColor = fillColorAnalysis[0];\n                console.log(\"\\uD83C\\uDFA8 Selected background color from fills: \".concat(bestBackgroundColor.key, \" (score: \").concat(bestBackgroundColor.backgroundScore, \")\"));\n                console.log(\"   Color details: C=\".concat(bestBackgroundColor.cmyk.c, \" M=\").concat(bestBackgroundColor.cmyk.m, \" Y=\").concat(bestBackgroundColor.cmyk.y, \" K=\").concat(bestBackgroundColor.cmyk.k));\n                return convertColor(bestBackgroundColor.key);\n            }\n        }\n        // Final Fallback: Use configured fallback\n        if (backgroundConfig.fallbackToWhite) {\n            console.log(\"\\uD83D\\uDCC4 ✅ No background color detected - using white fallback\");\n            return \"white\";\n        } else {\n            console.log(\"\\uD83D\\uDCC4 ✅ No background color detected - using transparent fallback\");\n            return \"transparent\";\n        }\n    };\n    const getFontWeight = (fontStyle)=>{\n        if (!fontStyle) return \"400\";\n        const style = fontStyle.toLowerCase();\n        // Handle complex styles like \"Bold Italic\", \"Semibold Condensed\", etc.\n        if (style.includes(\"thin\")) return \"100\";\n        if (style.includes(\"extralight\") || style.includes(\"ultra light\")) return \"200\";\n        if (style.includes(\"light\")) return \"300\";\n        if (style.includes(\"medium\")) return \"500\";\n        if (style.includes(\"demibold\") || style.includes(\"semibold\")) return \"600\";\n        if (style.includes(\"bold\")) return \"700\";\n        if (style.includes(\"extrabold\") || style.includes(\"ultra bold\")) return \"800\";\n        if (style.includes(\"black\") || style.includes(\"heavy\")) return \"900\";\n        return \"400\"; // Regular/Normal\n    };\n    const getFontStyle = (fontStyle)=>{\n        if (!fontStyle || fontStyle === \"\" || fontStyle === \"Regular\" || fontStyle === \"normal\") {\n            return \"normal\";\n        }\n        const style = fontStyle.toLowerCase().trim();\n        // FIXED: More precise italic detection - only exact matches or explicit italic styles\n        const willBeItalic = style === \"italic\" || style === \"oblique\" || style.endsWith(\" italic\") || style.startsWith(\"italic \") || style === \"it\" || style.includes(\" italic \") || style.endsWith(\"-italic\") || style.startsWith(\"italic-\");\n        // DEBUG: Log when italic is being applied\n        if (willBeItalic) {\n            console.log(\"\\uD83C\\uDFA8 Font style applying ITALIC:\", {\n                input: fontStyle,\n                inputType: typeof fontStyle,\n                normalizedInput: style,\n                reason: \"Matched italic pattern\"\n            });\n        }\n        if (willBeItalic) {\n            return \"italic\";\n        }\n        // Default to normal for everything else (including Regular, Medium, Bold, etc.)\n        return \"normal\";\n    };\n    const extractTextDecorations = (formatting)=>{\n        const decorations = [];\n        // Check for underline\n        if (formatting.underline || formatting.characterStyle && formatting.characterStyle.toLowerCase().includes(\"underline\")) {\n            decorations.push(\"underline\");\n        }\n        // Check for strikethrough\n        if (formatting.strikethrough || formatting.strikeThrough || formatting.characterStyle && formatting.characterStyle.toLowerCase().includes(\"strikethrough\")) {\n            decorations.push(\"line-through\");\n        }\n        // Check for overline\n        if (formatting.overline || formatting.characterStyle && formatting.characterStyle.toLowerCase().includes(\"overline\")) {\n            decorations.push(\"overline\");\n        }\n        return decorations.length > 0 ? decorations.join(\" \") : \"none\";\n    };\n    const getTextAlign = (alignment)=>{\n        const alignments = {\n            LeftAlign: \"left\",\n            RightAlign: \"right\",\n            CenterAlign: \"center\",\n            LeftJustified: \"justify\",\n            RightJustified: \"justify\",\n            CenterJustified: \"center\",\n            FullyJustified: \"justify\"\n        };\n        return alignments[alignment] || \"left\";\n    };\n    // ENHANCED: Pixel-perfect text measurement using canvas for accuracy\n    const measureTextAccurately = (text, fontSize, fontFamily, fontWeight, fontStyle)=>{\n        // Create a canvas for precise text measurement\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        // Set font properties to match the text\n        ctx.font = \"\".concat(fontStyle, \" \").concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n        const metrics = ctx.measureText(text);\n        const width = metrics.width;\n        const height = fontSize * 1.2; // Approximate height based on font size\n        return {\n            width,\n            height,\n            actualBounds: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n        };\n    };\n    // IMPROVED: Calculate text metrics with more generous spacing\n    const calculateTextMetrics = function(text, fontSize, lineHeight, containerWidth, containerHeight) {\n        let fontFamily = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : \"Arial\", fontWeight = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : \"normal\", fontStyle = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : \"normal\";\n        if (!text) return {\n            willOverflow: false,\n            estimatedLines: 0,\n            estimatedTextHeight: 0\n        };\n        // Method 1: Canvas-based measurement (most accurate)\n        const canvasMetrics = measureTextAccurately(text, fontSize, fontFamily, fontWeight, fontStyle);\n        // IMPROVED: More generous line height calculation\n        let lineHeightPx;\n        if (typeof lineHeight === \"string\" && lineHeight.includes(\"px\")) {\n            lineHeightPx = parseFloat(lineHeight);\n        } else if (typeof lineHeight === \"number\") {\n            lineHeightPx = lineHeight * fontSize;\n        } else {\n            // Parse CSS line-height values like \"1.2\", \"1.5\", etc.\n            const numericLineHeight = parseFloat(lineHeight) || 1.2;\n            lineHeightPx = numericLineHeight * fontSize;\n        }\n        // FIXED: More accurate word-based wrapping like InDesign\n        const effectiveWidth = containerWidth - 4; // Account for padding\n        // Split text into words and measure actual width\n        const words = text.split(/\\s+/).filter((word)=>word.length > 0);\n        const lines = [];\n        let currentLine = \"\";\n        let currentLineWidth = 0;\n        // Create canvas context for accurate word measurement\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        ctx.font = \"\".concat(fontStyle, \" \").concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n        for(let i = 0; i < words.length; i++){\n            const word = words[i];\n            const wordWidth = ctx.measureText(word).width;\n            const spaceWidth = ctx.measureText(\" \").width;\n            // Check if adding this word would exceed the line width\n            const wordWithSpaceWidth = currentLine ? wordWidth + spaceWidth : wordWidth;\n            if (currentLine && currentLineWidth + wordWithSpaceWidth > effectiveWidth) {\n                // Start a new line\n                lines.push(currentLine);\n                currentLine = word;\n                currentLineWidth = wordWidth;\n            } else {\n                // Add word to current line\n                if (currentLine) {\n                    currentLine += \" \" + word;\n                    currentLineWidth += wordWithSpaceWidth;\n                } else {\n                    currentLine = word;\n                    currentLineWidth = wordWidth;\n                }\n            }\n        }\n        // Add the last line if it has content\n        if (currentLine) {\n            lines.push(currentLine);\n        }\n        const estimatedLines = Math.max(1, lines.length);\n        const estimatedTextHeight = estimatedLines * lineHeightPx;\n        // Account for padding in available height\n        const availableHeight = containerHeight - 4;\n        return {\n            estimatedLines,\n            estimatedTextHeight,\n            lineHeightPx,\n            availableHeight,\n            actualLines: lines,\n            willOverflow: estimatedTextHeight > availableHeight,\n            overfillRatio: estimatedTextHeight / availableHeight,\n            overflowSeverity: estimatedTextHeight > availableHeight * 1.5 ? \"severe\" : estimatedTextHeight > availableHeight * 1.2 ? \"moderate\" : \"minor\"\n        };\n    };\n    // ENHANCED: Multiple text fitting strategies for pixel-perfect display\n    const TEXT_FITTING_STRATEGIES = {\n        AUTO_SCALE: \"auto_scale\",\n        TRUNCATE: \"truncate\",\n        ALLOW_OVERFLOW: \"allow_overflow\",\n        PRECISE_FIT: \"precise_fit\",\n        COMPRESS_LINES: \"compress_lines\"\n    };\n    // Configuration - you can change this based on your preference\n    const [textFittingStrategy, setTextFittingStrategy] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(TEXT_FITTING_STRATEGIES.PRECISE_FIT);\n    const getOptimalTextStyles = function(baseStyles, textMetrics, containerWidth, containerHeight) {\n        let strategy = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : textFittingStrategy;\n        if (!textMetrics.willOverflow) {\n            return {\n                styles: baseStyles,\n                wasAdjusted: false,\n                adjustmentDetails: null\n            };\n        }\n        const fontSize = parseFloat(baseStyles.fontSize);\n        const lineHeight = parseFloat(baseStyles.lineHeight);\n        switch(strategy){\n            case TEXT_FITTING_STRATEGIES.AUTO_SCALE:\n                {\n                    // Progressive font size reduction\n                    const maxReduction = textMetrics.overflowSeverity === \"severe\" ? 0.7 : textMetrics.overflowSeverity === \"moderate\" ? 0.8 : 0.9;\n                    const scaleFactor = Math.max(maxReduction, 1 / textMetrics.overfillRatio);\n                    return {\n                        styles: {\n                            ...baseStyles,\n                            fontSize: \"\".concat(Math.max(8, fontSize * scaleFactor), \"px\"),\n                            lineHeight: Math.max(0.9, lineHeight * scaleFactor),\n                            overflow: \"hidden\"\n                        },\n                        wasAdjusted: true,\n                        adjustmentDetails: {\n                            type: \"font_scaled\",\n                            scaleFactor: scaleFactor,\n                            originalSize: fontSize,\n                            newSize: fontSize * scaleFactor\n                        }\n                    };\n                }\n            case TEXT_FITTING_STRATEGIES.TRUNCATE:\n                {\n                    // Calculate how many lines can fit\n                    const availableLines = Math.floor(textMetrics.availableHeight / textMetrics.lineHeightPx);\n                    const truncateAtLine = Math.max(1, availableLines);\n                    return {\n                        styles: {\n                            ...baseStyles,\n                            overflow: \"hidden\",\n                            textOverflow: \"ellipsis\",\n                            display: \"-webkit-box\",\n                            WebkitLineClamp: truncateAtLine,\n                            WebkitBoxOrient: \"vertical\",\n                            lineHeight: baseStyles.lineHeight\n                        },\n                        wasAdjusted: true,\n                        adjustmentDetails: {\n                            type: \"text_truncated\",\n                            visibleLines: truncateAtLine,\n                            totalLines: textMetrics.estimatedLines\n                        }\n                    };\n                }\n            case TEXT_FITTING_STRATEGIES.COMPRESS_LINES:\n                {\n                    // First try reducing line height, then font size if needed\n                    const targetHeight = textMetrics.availableHeight;\n                    const currentHeight = textMetrics.estimatedTextHeight;\n                    const compressionRatio = targetHeight / currentHeight;\n                    if (compressionRatio > 0.8) {\n                        // Just compress line height\n                        return {\n                            styles: {\n                                ...baseStyles,\n                                lineHeight: Math.max(0.8, lineHeight * compressionRatio),\n                                overflow: \"hidden\"\n                            },\n                            wasAdjusted: true,\n                            adjustmentDetails: {\n                                type: \"line_height_compressed\",\n                                originalLineHeight: lineHeight,\n                                newLineHeight: lineHeight * compressionRatio\n                            }\n                        };\n                    } else {\n                        // Compress both line height and font size\n                        const fontReduction = Math.max(0.8, compressionRatio);\n                        return {\n                            styles: {\n                                ...baseStyles,\n                                fontSize: \"\".concat(fontSize * fontReduction, \"px\"),\n                                lineHeight: Math.max(0.8, lineHeight * compressionRatio),\n                                overflow: \"hidden\"\n                            },\n                            wasAdjusted: true,\n                            adjustmentDetails: {\n                                type: \"full_compression\",\n                                fontReduction: fontReduction,\n                                lineHeightReduction: compressionRatio\n                            }\n                        };\n                    }\n                }\n            case TEXT_FITTING_STRATEGIES.PRECISE_FIT:\n                {\n                    // ENHANCED: More nuanced fitting approach\n                    const compressionNeeded = textMetrics.availableHeight / textMetrics.estimatedTextHeight;\n                    if (compressionNeeded >= 0.95) {\n                        // Text fits well, just ensure no overflow\n                        return {\n                            styles: {\n                                ...baseStyles,\n                                overflow: \"hidden\"\n                            },\n                            wasAdjusted: false,\n                            adjustmentDetails: {\n                                type: \"no_adjustment_needed\"\n                            }\n                        };\n                    } else if (compressionNeeded > 0.85) {\n                        // Minor adjustment - just reduce line height slightly\n                        const lineHeightReduction = Math.max(0.9, compressionNeeded * 1.05);\n                        return {\n                            styles: {\n                                ...baseStyles,\n                                lineHeight: Math.max(0.9, parseFloat(baseStyles.lineHeight) * lineHeightReduction),\n                                overflow: \"hidden\"\n                            },\n                            wasAdjusted: true,\n                            adjustmentDetails: {\n                                type: \"minor_line_height_adjustment\",\n                                lineHeightReduction,\n                                originalLineHeight: baseStyles.lineHeight\n                            }\n                        };\n                    } else if (compressionNeeded > 0.7) {\n                        // Moderate adjustment - compress both font and line height proportionally\n                        const fontScale = Math.max(0.9, Math.sqrt(compressionNeeded)); // Less aggressive font scaling\n                        const lineScale = Math.max(0.85, compressionNeeded / fontScale);\n                        return {\n                            styles: {\n                                ...baseStyles,\n                                fontSize: \"\".concat(fontSize * fontScale, \"px\"),\n                                lineHeight: Math.max(0.85, parseFloat(baseStyles.lineHeight) * lineScale),\n                                overflow: \"hidden\"\n                            },\n                            wasAdjusted: true,\n                            adjustmentDetails: {\n                                type: \"moderate_dual_adjustment\",\n                                fontScale,\n                                lineScale,\n                                compressionNeeded\n                            }\n                        };\n                    } else {\n                        // Major adjustment - apply reasonable compression then allow slight overflow\n                        const maxFontScale = 0.85; // Less aggressive than before\n                        const maxLineScale = 0.8; // Less aggressive than before\n                        return {\n                            styles: {\n                                ...baseStyles,\n                                fontSize: \"\".concat(fontSize * maxFontScale, \"px\"),\n                                lineHeight: Math.max(0.8, parseFloat(baseStyles.lineHeight) * maxLineScale),\n                                overflow: \"hidden\",\n                                // Allow some overflow rather than harsh truncation\n                                maxHeight: \"\".concat(textMetrics.availableHeight, \"px\")\n                            },\n                            wasAdjusted: true,\n                            adjustmentDetails: {\n                                type: \"major_adjustment_with_overflow\",\n                                fontScale: maxFontScale,\n                                lineScale: maxLineScale,\n                                allowedOverflow: true\n                            }\n                        };\n                    }\n                }\n            case TEXT_FITTING_STRATEGIES.ALLOW_OVERFLOW:\n            default:\n                {\n                    return {\n                        styles: {\n                            ...baseStyles,\n                            overflow: \"visible\"\n                        },\n                        wasAdjusted: false,\n                        adjustmentDetails: {\n                            type: \"overflow_allowed\"\n                        }\n                    };\n                }\n        }\n    };\n    const renderFormattedText = function(story) {\n        let containerHeight = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, adjustedFontSize = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n        if (!story.formattedContent || !Array.isArray(story.formattedContent)) {\n            console.log(\"Text value:\", story.text); // Debug: check actual value before rendering\n            // Use CSS to preserve all whitespace and newlines\n            if (typeof story.text === \"string\") {\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    style: {\n                        whiteSpace: \"pre-line\",\n                        display: \"block\"\n                    },\n                    children: story.text\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                    lineNumber: 1037,\n                    columnNumber: 11\n                }, _this);\n            }\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                children: story.text\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                lineNumber: 1047,\n                columnNumber: 14\n            }, _this);\n        }\n        // DEBUG: Count line breaks in formatted content\n        const lineBreakCount = story.formattedContent.filter((item)=>{\n            var _item_formatting;\n            return (_item_formatting = item.formatting) === null || _item_formatting === void 0 ? void 0 : _item_formatting.isBreak;\n        }).length;\n        const consecutiveBreaks = [];\n        let currentBreakGroup = [];\n        story.formattedContent.forEach((item, index)=>{\n            var _item_formatting;\n            if ((_item_formatting = item.formatting) === null || _item_formatting === void 0 ? void 0 : _item_formatting.isBreak) {\n                currentBreakGroup.push({\n                    index,\n                    source: item.formatting.source,\n                    breakType: item.formatting.breakType\n                });\n            } else if (currentBreakGroup.length > 0) {\n                if (currentBreakGroup.length > 1) {\n                    consecutiveBreaks.push(currentBreakGroup);\n                }\n                currentBreakGroup = [];\n            }\n        });\n        if (currentBreakGroup.length > 1) {\n            consecutiveBreaks.push(currentBreakGroup);\n        }\n        console.log(\"\\uD83C\\uDFA8 Rendering formatted text with \".concat(lineBreakCount, \" total line breaks\"));\n        if (consecutiveBreaks.length > 0) {\n            console.log(\"\\uD83C\\uDFA8 Found \".concat(consecutiveBreaks.length, \" groups of consecutive line breaks:\"), consecutiveBreaks);\n        }\n        return story.formattedContent.map((content, index)=>{\n            var _content_formatting, _story_styling, _story_styling1, _nextContent_formatting, _nextContent_text;\n            // FIXED: Render ALL line breaks to preserve user's intended spacing\n            if ((_content_formatting = content.formatting) === null || _content_formatting === void 0 ? void 0 : _content_formatting.isBreak) {\n                // Render any type of line break - don't filter based on source\n                console.log(\"\\uD83C\\uDFA8 Rendering line break \".concat(index, \": source=\").concat(content.formatting.source, \", type=\").concat(content.formatting.breakType));\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, index, false, {\n                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                    lineNumber: 1094,\n                    columnNumber: 18\n                }, _this);\n            }\n            const formatting = content.formatting || {};\n            // CRITICAL FIX: Use adjusted font size if overflow prevention was applied\n            const originalFontSize = formatting.fontSize || ((_story_styling = story.styling) === null || _story_styling === void 0 ? void 0 : _story_styling.fontSize) || 12;\n            const fontSize = adjustedFontSize || originalFontSize;\n            // DEBUG: Log style resolution for any text with formatting applied (generic check)\n            const hasFormatting = formatting.fontStyle || formatting.characterStyle || formatting.paragraphStyle;\n            const finalFontStyle = getFontStyle(formatting.fontStyle);\n            if (hasFormatting || finalFontStyle === \"italic\") {\n                var _content_text, _story_styling2;\n                console.log(\"\\uD83C\\uDFA8 Style resolution for text:\", JSON.stringify(((_content_text = content.text) === null || _content_text === void 0 ? void 0 : _content_text.substring(0, 20)) + \"...\"), {\n                    rawFormatting: formatting,\n                    resolvedFontStyle: formatting.fontStyle,\n                    storyDefaultStyle: (_story_styling2 = story.styling) === null || _story_styling2 === void 0 ? void 0 : _story_styling2.fontStyle,\n                    finalFontStyle: finalFontStyle,\n                    characterStyle: formatting.characterStyle,\n                    paragraphStyle: formatting.paragraphStyle\n                });\n                // WARN: Alert if italic is being applied when it shouldn't be\n                if (finalFontStyle === \"italic\" && (!formatting.fontStyle || formatting.fontStyle === \"Regular\")) {\n                    console.warn(\"⚠️  UNEXPECTED ITALIC: Text is being styled as italic but fontStyle is:\", formatting.fontStyle);\n                }\n            }\n            // IMPROVED: More generous line height calculation for individual spans\n            let lineHeight = \"inherit\"; // Inherit from parent container\n            if (formatting.effectiveLineHeight) {\n                lineHeight = formatting.effectiveLineHeight;\n            } else if (formatting.leading !== undefined) {\n                if (formatting.leading === \"auto\") {\n                    lineHeight = \"inherit\";\n                } else if (typeof formatting.leading === \"number\") {\n                    // IMPROVED: More generous line height range to prevent text chopping\n                    const ratio = formatting.leading / fontSize;\n                    lineHeight = Math.max(1.1, Math.min(2.5, ratio)); // More generous range\n                }\n            }\n            // ENHANCED: Use complete character styles if available\n            const completeStyles = formatting.completeStyles || {};\n            const style = {\n                fontSize: \"\".concat(fontSize, \"px\"),\n                fontFamily: formatting.fontFamily || ((_story_styling1 = story.styling) === null || _story_styling1 === void 0 ? void 0 : _story_styling1.fontFamily) || \"Arial, sans-serif\",\n                // ENHANCED: Use complete style analysis for proper font weight/style\n                fontWeight: completeStyles.fontWeight || getFontWeight(formatting.fontStyle) || \"400\",\n                fontStyle: completeStyles.fontStyle || getFontStyle(formatting.fontStyle) || \"normal\",\n                color: convertColor(formatting.fillColor) || \"black\",\n                textAlign: getTextAlign(formatting.alignment),\n                lineHeight: lineHeight,\n                letterSpacing: formatting.tracking ? \"\".concat(formatting.tracking / 1000, \"em\") : \"normal\",\n                // ENHANCED: Complete text decoration support\n                textDecoration: completeStyles.textDecoration || extractTextDecorations(formatting),\n                // ENHANCED: Text effects\n                textTransform: completeStyles.textTransform || \"none\",\n                textShadow: completeStyles.textShadow || \"none\",\n                // FIXED: Remove margins that could cause spacing issues\n                margin: 0,\n                padding: 0,\n                // Only apply indentation if explicitly specified\n                ...formatting.leftIndent && {\n                    marginLeft: \"\".concat(formatting.leftIndent, \"px\")\n                },\n                ...formatting.rightIndent && {\n                    marginRight: \"\".concat(formatting.rightIndent, \"px\")\n                },\n                ...formatting.firstLineIndent && {\n                    textIndent: \"\".concat(formatting.firstLineIndent, \"px\")\n                },\n                ...formatting.spaceBefore && {\n                    marginTop: \"\".concat(formatting.spaceBefore, \"px\")\n                },\n                ...formatting.spaceAfter && {\n                    marginBottom: \"\".concat(formatting.spaceAfter, \"px\")\n                },\n                // ENHANCED: Advanced InDesign properties\n                ...completeStyles.baselineShift && {\n                    verticalAlign: \"\".concat(completeStyles.baselineShift, \"px\")\n                },\n                ...completeStyles.horizontalScale && completeStyles.horizontalScale !== 100 && {\n                    transform: \"scaleX(\".concat(completeStyles.horizontalScale / 100, \")\")\n                }\n            };\n            // CRITICAL FIX: Add space after span if needed to prevent word joining\n            const currentText = content.text || \"\";\n            const nextContent = story.formattedContent[index + 1];\n            const needsSpaceAfter = nextContent && !((_nextContent_formatting = nextContent.formatting) === null || _nextContent_formatting === void 0 ? void 0 : _nextContent_formatting.isBreak) && !currentText.endsWith(\" \") && !currentText.endsWith(\"\\n\") && nextContent.text && !nextContent.text.startsWith(\" \") && !nextContent.text.startsWith(\"\\n\");\n            // DEBUG: Log space insertion for problematic text\n            if (currentText.includes(\"pa\") && (nextContent === null || nextContent === void 0 ? void 0 : (_nextContent_text = nextContent.text) === null || _nextContent_text === void 0 ? void 0 : _nextContent_text.includes(\"voluptusda\")) || currentText.includes(\"voluptusda\") && index > 0) {\n                var _nextContent_text1;\n                console.log(\"\\uD83D\\uDD27 Space insertion check [\".concat(index, \"]:\"), {\n                    currentText: JSON.stringify(currentText),\n                    nextText: nextContent ? JSON.stringify(nextContent.text) : \"none\",\n                    needsSpaceAfter,\n                    currentEndsWithSpace: currentText.endsWith(\" \"),\n                    nextStartsWithSpace: nextContent === null || nextContent === void 0 ? void 0 : (_nextContent_text1 = nextContent.text) === null || _nextContent_text1 === void 0 ? void 0 : _nextContent_text1.startsWith(\" \")\n                });\n            }\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        style: style,\n                        children: content.text\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1246,\n                        columnNumber: 13\n                    }, _this),\n                    needsSpaceAfter && \" \"\n                ]\n            }, index, true, {\n                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                lineNumber: 1245,\n                columnNumber: 11\n            }, _this);\n        }).filter(Boolean); // Remove null entries from skipped line breaks\n    };\n    const getStoryStyles = function(story) {\n        let containerHeight = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, containerWidth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n        const styling = story.styling || {};\n        const fontSize = styling.fontSize || 12;\n        // IMPROVED: More generous line height calculation to prevent text chopping\n        let lineHeight = \"1.3\"; // More generous default CSS line-height\n        if (styling.effectiveLineHeight) {\n            lineHeight = styling.effectiveLineHeight;\n        } else if (styling.leading !== undefined) {\n            if (styling.leading === \"auto\") {\n                lineHeight = \"1.3\"; // More generous auto line height\n            } else if (typeof styling.leading === \"number\") {\n                // Convert InDesign points to CSS line-height ratio, more generous range\n                const ratio = styling.leading / fontSize;\n                lineHeight = Math.max(1.1, Math.min(2.5, ratio)).toString(); // More generous range\n            }\n        }\n        return {\n            fontSize: \"\".concat(fontSize, \"px\"),\n            fontFamily: styling.fontFamily || \"Arial, sans-serif\",\n            fontWeight: getFontWeight(styling.fontStyle),\n            fontStyle: getFontStyle(styling.fontStyle),\n            color: convertColor(styling.fillColor) || \"black\",\n            textAlign: getTextAlign(styling.alignment),\n            lineHeight: lineHeight,\n            letterSpacing: styling.tracking ? \"\".concat(styling.tracking / 1000, \"em\") : \"normal\",\n            // IMPROVED: Minimal padding to prevent container size conflicts\n            padding: \"1px 2px\",\n            margin: 0,\n            // FIXED: Use full container size, let CSS handle overflow properly\n            height: \"100%\",\n            width: \"100%\",\n            minHeight: \"\".concat(fontSize * 1.4, \"px\"),\n            wordWrap: \"break-word\",\n            overflow: \"visible\",\n            boxSizing: \"border-box\",\n            // IMPROVED: Better text layout handling\n            display: \"block\",\n            whiteSpace: \"pre-wrap\",\n            wordBreak: \"break-word\",\n            overflowWrap: \"break-word\",\n            // IMPROVED: Allow text to flow naturally\n            textOverflow: \"visible\",\n            lineClamp: \"none\"\n        };\n    };\n    // ENHANCED: Extract InDesign-accurate formatting for precise text measurement\n    const getInDesignAccurateFormatting = (story)=>{\n        var _story_formattedContent;\n        const styling = story.styling || {};\n        const firstFormatted = (_story_formattedContent = story.formattedContent) === null || _story_formattedContent === void 0 ? void 0 : _story_formattedContent.find((item)=>item.formatting && !item.formatting.isBreak);\n        const formatting = (firstFormatted === null || firstFormatted === void 0 ? void 0 : firstFormatted.formatting) || styling;\n        return {\n            fontSize: formatting.fontSize || styling.fontSize || 12,\n            fontFamily: formatting.fontFamily || styling.fontFamily || \"Arial, sans-serif\",\n            fontWeight: getFontWeight(formatting.fontStyle || styling.fontStyle),\n            fontStyle: getFontStyle(formatting.fontStyle || styling.fontStyle),\n            color: convertColor(formatting.fillColor || styling.fillColor) || \"black\",\n            textAlign: getTextAlign(formatting.alignment || styling.alignment),\n            // InDesign-specific properties for precise measurement\n            leading: formatting.leading || styling.leading || \"auto\",\n            leadingType: formatting.leadingType || styling.leadingType || \"auto\",\n            tracking: formatting.tracking || styling.tracking || 0,\n            baselineShift: formatting.baselineShift || 0,\n            // Text frame properties\n            firstBaselineOffset: formatting.firstBaselineOffset || \"AscentOffset\",\n            verticalJustification: formatting.verticalJustification || \"TopAlign\"\n        };\n    };\n    if (loading) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            style: {\n                padding: \"20px\"\n            },\n            children: \"Loading document...\"\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n            lineNumber: 1347,\n            columnNumber: 12\n        }, this);\n    }\n    if (!documentData) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            style: {\n                padding: \"20px\"\n            },\n            children: \"Error loading document\"\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n            lineNumber: 1351,\n            columnNumber: 12\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            display: \"flex\",\n            height: \"100vh\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    width: \"400px\",\n                    backgroundColor: \"#f5f5f5\",\n                    padding: \"20px\",\n                    overflowY: \"auto\"\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            backgroundColor: \"#e3f2fd\",\n                            padding: \"12px\",\n                            borderRadius: \"6px\",\n                            marginBottom: \"16px\",\n                            border: \"1px solid #2196f3\"\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                style: {\n                                    margin: \"0 0 8px 0\",\n                                    color: \"#1976d2\",\n                                    fontSize: \"14px\"\n                                },\n                                children: \"\\uD83C\\uDFAF Text Fitting Strategy\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1375,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                value: textFittingStrategy,\n                                onChange: (e)=>setTextFittingStrategy(e.target.value),\n                                style: {\n                                    width: \"100%\",\n                                    padding: \"6px\",\n                                    borderRadius: \"4px\",\n                                    border: \"1px solid #ccc\",\n                                    fontSize: \"12px\"\n                                },\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: TEXT_FITTING_STRATEGIES.PRECISE_FIT,\n                                        children: \"\\uD83C\\uDFAF Precise Fit (InDesign-style)\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1391,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: TEXT_FITTING_STRATEGIES.AUTO_SCALE,\n                                        children: \"\\uD83D\\uDCCF Auto Scale Font\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1394,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: TEXT_FITTING_STRATEGIES.TRUNCATE,\n                                        children: \"✂️ Truncate with Ellipsis\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1397,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: TEXT_FITTING_STRATEGIES.COMPRESS_LINES,\n                                        children: \"\\uD83D\\uDCCA Compress Line Height\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1400,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: TEXT_FITTING_STRATEGIES.ALLOW_OVERFLOW,\n                                        children: \"\\uD83C\\uDF0A Allow Overflow\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1403,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1380,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    fontSize: \"10px\",\n                                    color: \"#666\",\n                                    marginTop: \"4px\"\n                                },\n                                children: [\n                                    textFittingStrategy === TEXT_FITTING_STRATEGIES.PRECISE_FIT && \"Smart font & line height adjustment with truncation fallback\",\n                                    textFittingStrategy === TEXT_FITTING_STRATEGIES.AUTO_SCALE && \"Reduce font size proportionally to fit container\",\n                                    textFittingStrategy === TEXT_FITTING_STRATEGIES.TRUNCATE && \"Cut off text with ellipsis when it overflows\",\n                                    textFittingStrategy === TEXT_FITTING_STRATEGIES.COMPRESS_LINES && \"Reduce line height first, then font size\",\n                                    textFittingStrategy === TEXT_FITTING_STRATEGIES.ALLOW_OVERFLOW && \"Let text overflow naturally (original behavior)\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1407,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1366,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            backgroundColor: \"#fff3e0\",\n                            padding: \"12px\",\n                            borderRadius: \"6px\",\n                            marginBottom: \"16px\",\n                            border: \"1px solid #ff9800\"\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                style: {\n                                    margin: \"0 0 8px 0\",\n                                    color: \"#f57700\",\n                                    fontSize: \"14px\"\n                                },\n                                children: \"\\uD83C\\uDFA8 Background Color\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1431,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                value: backgroundConfig.mode,\n                                onChange: (e)=>setBackgroundConfig({\n                                        ...backgroundConfig,\n                                        mode: e.target.value\n                                    }),\n                                style: {\n                                    width: \"100%\",\n                                    padding: \"6px\",\n                                    borderRadius: \"4px\",\n                                    border: \"1px solid #ccc\",\n                                    fontSize: \"12px\",\n                                    marginBottom: \"8px\"\n                                },\n                                children: backgroundModes.map((mode)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: mode.value,\n                                        children: mode.label\n                                    }, mode.value, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1453,\n                                        columnNumber: 15\n                                    }, this))\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1438,\n                                columnNumber: 11\n                            }, this),\n                            backgroundConfig.mode === \"custom\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    marginBottom: \"8px\"\n                                },\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        style: {\n                                            fontSize: \"11px\",\n                                            color: \"#666\",\n                                            display: \"block\",\n                                            marginBottom: \"4px\"\n                                        },\n                                        children: \"Custom Color:\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1462,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                        type: \"color\",\n                                        value: backgroundConfig.customColor,\n                                        onChange: (e)=>setBackgroundConfig({\n                                                ...backgroundConfig,\n                                                customColor: e.target.value\n                                            }),\n                                        style: {\n                                            width: \"100%\",\n                                            height: \"30px\",\n                                            border: \"1px solid #ccc\",\n                                            borderRadius: \"4px\"\n                                        }\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1472,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1461,\n                                columnNumber: 13\n                            }, this),\n                            backgroundConfig.mode === \"auto\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    fontSize: \"11px\",\n                                    marginTop: \"8px\"\n                                },\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            marginBottom: \"4px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                                type: \"checkbox\",\n                                                checked: backgroundConfig.preferPaperColor,\n                                                onChange: (e)=>setBackgroundConfig({\n                                                        ...backgroundConfig,\n                                                        preferPaperColor: e.target.checked\n                                                    }),\n                                                style: {\n                                                    marginRight: \"6px\"\n                                                }\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1501,\n                                                columnNumber: 17\n                                            }, this),\n                                            \"Prefer Paper color\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1494,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            marginBottom: \"4px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                                type: \"checkbox\",\n                                                checked: backgroundConfig.allowColorAnalysis,\n                                                onChange: (e)=>setBackgroundConfig({\n                                                        ...backgroundConfig,\n                                                        allowColorAnalysis: e.target.checked\n                                                    }),\n                                                style: {\n                                                    marginRight: \"6px\"\n                                                }\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1521,\n                                                columnNumber: 17\n                                            }, this),\n                                            \"Allow color analysis\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1514,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                                type: \"checkbox\",\n                                                checked: backgroundConfig.fallbackToWhite,\n                                                onChange: (e)=>setBackgroundConfig({\n                                                        ...backgroundConfig,\n                                                        fallbackToWhite: e.target.checked\n                                                    }),\n                                                style: {\n                                                    marginRight: \"6px\"\n                                                }\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1535,\n                                                columnNumber: 17\n                                            }, this),\n                                            \"Fallback to white\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1534,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1493,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    marginTop: \"8px\",\n                                    padding: \"6px\",\n                                    backgroundColor: \"#f5f5f5\",\n                                    borderRadius: \"3px\",\n                                    fontSize: \"11px\"\n                                },\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                        children: \"Current:\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1561,\n                                        columnNumber: 13\n                                    }, this),\n                                    \" \",\n                                    documentData ? getDocumentBackgroundColor(documentData) : \"Loading...\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1552,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1422,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            backgroundColor: \"#f0f8ff\",\n                            padding: \"12px\",\n                            borderRadius: \"4px\",\n                            marginBottom: \"16px\"\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                style: {\n                                    margin: \"0 0 8px 0\",\n                                    fontSize: \"14px\",\n                                    color: \"#333\"\n                                },\n                                children: \"\\uD83D\\uDD27 View Controls\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1577,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    display: \"flex\",\n                                    flexDirection: \"column\",\n                                    gap: \"8px\"\n                                },\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            fontSize: \"12px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                                type: \"checkbox\",\n                                                checked: showMargins,\n                                                onChange: (e)=>setShowMargins(e.target.checked),\n                                                style: {\n                                                    marginRight: \"8px\"\n                                                }\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1589,\n                                                columnNumber: 15\n                                            }, this),\n                                            \"Show Page Margins (dotted lines)\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1582,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            fontSize: \"12px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                                type: \"checkbox\",\n                                                checked: showDebugInfo,\n                                                onChange: (e)=>setShowDebugInfo(e.target.checked),\n                                                style: {\n                                                    marginRight: \"8px\"\n                                                }\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1605,\n                                                columnNumber: 15\n                                            }, this),\n                                            \"Show Debug Information\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1598,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1581,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1569,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            backgroundColor: \"#f9f9f9\",\n                            padding: \"8px\",\n                            borderRadius: \"4px\",\n                            marginBottom: \"16px\",\n                            fontSize: \"11px\"\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    fontWeight: \"bold\",\n                                    marginBottom: \"6px\"\n                                },\n                                children: \"\\uD83D\\uDCCA Status Indicators:\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1626,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    display: \"flex\",\n                                    flexWrap: \"wrap\",\n                                    gap: \"8px\"\n                                },\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            gap: \"2px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                style: {\n                                                    backgroundColor: \"#4caf50\",\n                                                    color: \"white\",\n                                                    padding: \"1px 3px\",\n                                                    borderRadius: \"2px\"\n                                                },\n                                                children: \"\\uD83C\\uDFAF\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1631,\n                                                columnNumber: 15\n                                            }, this),\n                                            \"Precise Fit\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1630,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            gap: \"2px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                style: {\n                                                    backgroundColor: \"#2196f3\",\n                                                    color: \"white\",\n                                                    padding: \"1px 3px\",\n                                                    borderRadius: \"2px\"\n                                                },\n                                                children: \"\\uD83D\\uDCCF\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1644,\n                                                columnNumber: 15\n                                            }, this),\n                                            \"Font Scaled\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1643,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            gap: \"2px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                style: {\n                                                    backgroundColor: \"#ff9800\",\n                                                    color: \"white\",\n                                                    padding: \"1px 3px\",\n                                                    borderRadius: \"2px\"\n                                                },\n                                                children: \"✂️\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1657,\n                                                columnNumber: 15\n                                            }, this),\n                                            \"Truncated\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1656,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1629,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    display: \"flex\",\n                                    flexWrap: \"wrap\",\n                                    gap: \"8px\",\n                                    marginTop: \"4px\"\n                                },\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            gap: \"2px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                style: {\n                                                    backgroundColor: \"#f44336\",\n                                                    color: \"white\",\n                                                    padding: \"1px 2px\",\n                                                    borderRadius: \"1px\",\n                                                    fontSize: \"9px\"\n                                                },\n                                                children: \"S\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1679,\n                                                columnNumber: 15\n                                            }, this),\n                                            \"Severe overflow\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1678,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            gap: \"2px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                style: {\n                                                    backgroundColor: \"#ff9800\",\n                                                    color: \"white\",\n                                                    padding: \"1px 2px\",\n                                                    borderRadius: \"1px\",\n                                                    fontSize: \"9px\"\n                                                },\n                                                children: \"M\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1693,\n                                                columnNumber: 15\n                                            }, this),\n                                            \"Moderate\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1692,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            gap: \"2px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                style: {\n                                                    backgroundColor: \"#ffeb3b\",\n                                                    color: \"black\",\n                                                    padding: \"1px 2px\",\n                                                    borderRadius: \"1px\",\n                                                    fontSize: \"9px\"\n                                                },\n                                                children: \"L\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1707,\n                                                columnNumber: 15\n                                            }, this),\n                                            \"Light\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1706,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1670,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1617,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        children: \"Document Info\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1723,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        children: [\n                            \"Version: \",\n                            (_documentData_document = documentData.document) === null || _documentData_document === void 0 ? void 0 : _documentData_document.version\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1724,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        children: [\n                            \"Pages: \",\n                            (_documentData_document1 = documentData.document) === null || _documentData_document1 === void 0 ? void 0 : _documentData_document1.pageCount\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1725,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        children: [\n                            \"Size:\",\n                            \" \",\n                            Math.round(((_documentData_pageInfo = documentData.pageInfo) === null || _documentData_pageInfo === void 0 ? void 0 : (_documentData_pageInfo_dimensions = _documentData_pageInfo.dimensions) === null || _documentData_pageInfo_dimensions === void 0 ? void 0 : (_documentData_pageInfo_dimensions_pixelDimensions = _documentData_pageInfo_dimensions.pixelDimensions) === null || _documentData_pageInfo_dimensions_pixelDimensions === void 0 ? void 0 : _documentData_pageInfo_dimensions_pixelDimensions.width) || ((_documentData_pageInfo1 = documentData.pageInfo) === null || _documentData_pageInfo1 === void 0 ? void 0 : (_documentData_pageInfo_dimensions1 = _documentData_pageInfo1.dimensions) === null || _documentData_pageInfo_dimensions1 === void 0 ? void 0 : _documentData_pageInfo_dimensions1.width) || 0),\n                            \" \",\n                            \"\\xd7\",\n                            \" \",\n                            Math.round(((_documentData_pageInfo2 = documentData.pageInfo) === null || _documentData_pageInfo2 === void 0 ? void 0 : (_documentData_pageInfo_dimensions2 = _documentData_pageInfo2.dimensions) === null || _documentData_pageInfo_dimensions2 === void 0 ? void 0 : (_documentData_pageInfo_dimensions_pixelDimensions1 = _documentData_pageInfo_dimensions2.pixelDimensions) === null || _documentData_pageInfo_dimensions_pixelDimensions1 === void 0 ? void 0 : _documentData_pageInfo_dimensions_pixelDimensions1.height) || ((_documentData_pageInfo3 = documentData.pageInfo) === null || _documentData_pageInfo3 === void 0 ? void 0 : (_documentData_pageInfo_dimensions3 = _documentData_pageInfo3.dimensions) === null || _documentData_pageInfo_dimensions3 === void 0 ? void 0 : _documentData_pageInfo_dimensions3.height) || 0),\n                            \"px\",\n                            ((_documentData_pageInfo4 = documentData.pageInfo) === null || _documentData_pageInfo4 === void 0 ? void 0 : (_documentData_pageInfo_dimensions4 = _documentData_pageInfo4.dimensions) === null || _documentData_pageInfo_dimensions4 === void 0 ? void 0 : _documentData_pageInfo_dimensions4.pixelDimensions) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                style: {\n                                    fontSize: \"12px\",\n                                    color: \"#666\",\n                                    display: \"block\"\n                                },\n                                children: [\n                                    \"(Original: \",\n                                    Math.round(documentData.pageInfo.dimensions.width),\n                                    \" \\xd7\",\n                                    \" \",\n                                    Math.round(documentData.pageInfo.dimensions.height),\n                                    \" \",\n                                    documentData.pageInfo.dimensions.units,\n                                    \")\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1741,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1726,\n                        columnNumber: 9\n                    }, this),\n                    documentData.unitConversion && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            marginTop: \"10px\",\n                            padding: \"8px\",\n                            backgroundColor: \"#e8f4fd\",\n                            borderRadius: \"4px\",\n                            fontSize: \"12px\"\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                children: \"\\uD83D\\uDCD0 Unit Conversion:\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1760,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1761,\n                                columnNumber: 13\n                            }, this),\n                            \"Status:\",\n                            \" \",\n                            documentData.unitConversion.enabled ? \"✅ Enabled\" : \"❌ Disabled\",\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1764,\n                                columnNumber: 13\n                            }, this),\n                            \"DPI: \",\n                            documentData.unitConversion.dpi,\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1766,\n                                columnNumber: 13\n                            }, this),\n                            \"Original: \",\n                            documentData.unitConversion.originalUnits,\n                            \" → Pixels\",\n                            documentData.unitConversion.convertedToPixels && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                style: {\n                                    color: \"#28a745\",\n                                    fontWeight: \"bold\"\n                                },\n                                children: \" ✅\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1769,\n                                columnNumber: 15\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1751,\n                        columnNumber: 11\n                    }, this),\n                    ((_documentData_pageInfo5 = documentData.pageInfo) === null || _documentData_pageInfo5 === void 0 ? void 0 : _documentData_pageInfo5.margins) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            marginTop: \"10px\",\n                            padding: \"8px\",\n                            backgroundColor: \"#fff3cd\",\n                            borderRadius: \"4px\",\n                            fontSize: \"11px\"\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                children: \"\\uD83D\\uDCCF Positioning Debug:\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1785,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1786,\n                                columnNumber: 13\n                            }, this),\n                            \"Page:\",\n                            \" \",\n                            Math.round(((_documentData_pageInfo_dimensions5 = documentData.pageInfo.dimensions) === null || _documentData_pageInfo_dimensions5 === void 0 ? void 0 : (_documentData_pageInfo_dimensions_pixelDimensions2 = _documentData_pageInfo_dimensions5.pixelDimensions) === null || _documentData_pageInfo_dimensions_pixelDimensions2 === void 0 ? void 0 : _documentData_pageInfo_dimensions_pixelDimensions2.width) || ((_documentData_pageInfo_dimensions6 = documentData.pageInfo.dimensions) === null || _documentData_pageInfo_dimensions6 === void 0 ? void 0 : _documentData_pageInfo_dimensions6.width) || 0),\n                            \" \",\n                            \"\\xd7\",\n                            \" \",\n                            Math.round(((_documentData_pageInfo_dimensions7 = documentData.pageInfo.dimensions) === null || _documentData_pageInfo_dimensions7 === void 0 ? void 0 : (_documentData_pageInfo_dimensions_pixelDimensions3 = _documentData_pageInfo_dimensions7.pixelDimensions) === null || _documentData_pageInfo_dimensions_pixelDimensions3 === void 0 ? void 0 : _documentData_pageInfo_dimensions_pixelDimensions3.height) || ((_documentData_pageInfo_dimensions8 = documentData.pageInfo.dimensions) === null || _documentData_pageInfo_dimensions8 === void 0 ? void 0 : _documentData_pageInfo_dimensions8.height) || 0),\n                            \"px\",\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1800,\n                                columnNumber: 13\n                            }, this),\n                            \"Margins (px): T:\",\n                            ((_documentData_pageInfo_margins_pixelMargins = documentData.pageInfo.margins.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins.top) || documentData.pageInfo.margins.top || 0,\n                            \"R:\",\n                            ((_documentData_pageInfo_margins_pixelMargins1 = documentData.pageInfo.margins.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins1 === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins1.right) || documentData.pageInfo.margins.right || 0,\n                            \"B:\",\n                            ((_documentData_pageInfo_margins_pixelMargins2 = documentData.pageInfo.margins.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins2 === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins2.bottom) || documentData.pageInfo.margins.bottom || 0,\n                            \"L:\",\n                            ((_documentData_pageInfo_margins_pixelMargins3 = documentData.pageInfo.margins.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins3 === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins3.left) || documentData.pageInfo.margins.left || 0,\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1817,\n                                columnNumber: 13\n                            }, this),\n                            \"Content Area:\",\n                            \" \",\n                            Math.round((((_documentData_pageInfo_dimensions9 = documentData.pageInfo.dimensions) === null || _documentData_pageInfo_dimensions9 === void 0 ? void 0 : (_documentData_pageInfo_dimensions_pixelDimensions4 = _documentData_pageInfo_dimensions9.pixelDimensions) === null || _documentData_pageInfo_dimensions_pixelDimensions4 === void 0 ? void 0 : _documentData_pageInfo_dimensions_pixelDimensions4.width) || ((_documentData_pageInfo_dimensions10 = documentData.pageInfo.dimensions) === null || _documentData_pageInfo_dimensions10 === void 0 ? void 0 : _documentData_pageInfo_dimensions10.width) || 0) - (((_documentData_pageInfo_margins_pixelMargins4 = documentData.pageInfo.margins.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins4 === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins4.left) || documentData.pageInfo.margins.left || 0) - (((_documentData_pageInfo_margins_pixelMargins5 = documentData.pageInfo.margins.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins5 === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins5.right) || documentData.pageInfo.margins.right || 0)),\n                            \" \",\n                            \"\\xd7\",\n                            \" \",\n                            Math.round((((_documentData_pageInfo_dimensions11 = documentData.pageInfo.dimensions) === null || _documentData_pageInfo_dimensions11 === void 0 ? void 0 : (_documentData_pageInfo_dimensions_pixelDimensions5 = _documentData_pageInfo_dimensions11.pixelDimensions) === null || _documentData_pageInfo_dimensions_pixelDimensions5 === void 0 ? void 0 : _documentData_pageInfo_dimensions_pixelDimensions5.height) || ((_documentData_pageInfo_dimensions12 = documentData.pageInfo.dimensions) === null || _documentData_pageInfo_dimensions12 === void 0 ? void 0 : _documentData_pageInfo_dimensions12.height) || 0) - (((_documentData_pageInfo_margins_pixelMargins6 = documentData.pageInfo.margins.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins6 === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins6.top) || documentData.pageInfo.margins.top || 0) - (((_documentData_pageInfo_margins_pixelMargins7 = documentData.pageInfo.margins.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins7 === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins7.bottom) || documentData.pageInfo.margins.bottom || 0)),\n                            \"px\"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1776,\n                        columnNumber: 11\n                    }, this),\n                    documentData.packageInfo && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            marginTop: \"10px\",\n                            padding: \"8px\",\n                            backgroundColor: \"#e9ecef\",\n                            borderRadius: \"4px\"\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                children: \"Package Info:\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1856,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1857,\n                                columnNumber: 13\n                            }, this),\n                            \"Links: \",\n                            documentData.packageInfo.linksCount,\n                            \" \",\n                            documentData.packageInfo.hasLinks ? \"✅\" : \"❌\",\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1860,\n                                columnNumber: 13\n                            }, this),\n                            \"Fonts: \",\n                            documentData.packageInfo.fontsCount,\n                            \" \",\n                            documentData.packageInfo.hasFonts ? \"✅\" : \"❌\"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1848,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        style: {\n                            marginTop: \"20px\"\n                        },\n                        children: [\n                            \"Elements (\",\n                            ((_documentData_elements = documentData.elements) === null || _documentData_elements === void 0 ? void 0 : _documentData_elements.length) || 0,\n                            \")\"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1866,\n                        columnNumber: 9\n                    }, this),\n                    (documentData.elements || []).map((element, index)=>{\n                        var _element_placedContent_transform;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            onClick: ()=>setSelectedElement(element),\n                            style: {\n                                padding: \"8px\",\n                                margin: \"4px 0\",\n                                backgroundColor: (selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.id) === element.id ? \"#007bff\" : \"white\",\n                                color: (selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.id) === element.id ? \"white\" : \"black\",\n                                border: \"1px solid #ddd\",\n                                cursor: \"pointer\",\n                                fontSize: \"12px\"\n                            },\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: element.type\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1884,\n                                    columnNumber: 13\n                                }, this),\n                                \" (\",\n                                element.id,\n                                \")\",\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1885,\n                                    columnNumber: 13\n                                }, this),\n                                element.name !== \"$ID/\" ? element.name : \"\".concat(element.type, \"_\").concat(element.id),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1889,\n                                    columnNumber: 13\n                                }, this),\n                                \"Pos: (\",\n                                Math.round((element.pixelPosition || element.position).x),\n                                \", \",\n                                Math.round((element.pixelPosition || element.position).y),\n                                \")px\",\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1893,\n                                    columnNumber: 13\n                                }, this),\n                                \"Size:\",\n                                \" \",\n                                Math.round((element.pixelPosition || element.position).width),\n                                \" \\xd7\",\n                                \" \",\n                                Math.round((element.pixelPosition || element.position).height),\n                                \"px\",\n                                element.isContentFrame && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1901,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            style: {\n                                                color: \"#ffc107\"\n                                            },\n                                            children: \"\\uD83D\\uDDBC️ Content Frame\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1902,\n                                            columnNumber: 17\n                                        }, this),\n                                        element.placedContent && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 1905,\n                                                    columnNumber: 21\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                    style: {\n                                                        fontSize: \"10px\",\n                                                        color: \"#6c757d\"\n                                                    },\n                                                    children: [\n                                                        \"Type: \",\n                                                        element.placedContent.imageTypeName,\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                            lineNumber: 1908,\n                                                            columnNumber: 23\n                                                        }, this),\n                                                        \"PPI: \",\n                                                        element.placedContent.actualPpi,\n                                                        \" →\",\n                                                        \" \",\n                                                        element.placedContent.effectivePpi,\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                            lineNumber: 1911,\n                                                            columnNumber: 23\n                                                        }, this),\n                                                        \"Scale:\",\n                                                        \" \",\n                                                        Math.round((((_element_placedContent_transform = element.placedContent.transform) === null || _element_placedContent_transform === void 0 ? void 0 : _element_placedContent_transform.a) || 1) * 100),\n                                                        \"%\"\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 1906,\n                                                    columnNumber: 21\n                                                }, this)\n                                            ]\n                                        }, void 0, true)\n                                    ]\n                                }, void 0, true),\n                                element.parentStory && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1924,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            style: {\n                                                color: \"#17a2b8\"\n                                            },\n                                            children: [\n                                                \"\\uD83D\\uDCDD Story: \",\n                                                element.parentStory\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1925,\n                                            columnNumber: 17\n                                        }, this)\n                                    ]\n                                }, void 0, true)\n                            ]\n                        }, element.id, true, {\n                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                            lineNumber: 1870,\n                            columnNumber: 11\n                        }, this);\n                    }),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        style: {\n                            marginTop: \"20px\"\n                        },\n                        children: \"Stories & Formatting\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1933,\n                        columnNumber: 9\n                    }, this),\n                    Object.keys(documentData.stories || {}).map((storyId)=>{\n                        var _story_text;\n                        const story = documentData.stories[storyId];\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                padding: \"8px\",\n                                margin: \"4px 0\",\n                                backgroundColor: \"red\",\n                                border: \"1px solid #ddd\",\n                                fontSize: \"12px\"\n                            },\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: storyId\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1947,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1948,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: \"Text:\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1949,\n                                    columnNumber: 15\n                                }, this),\n                                ' \"',\n                                ((_story_text = story.text) === null || _story_text === void 0 ? void 0 : _story_text.substring(0, 50)) || \"\",\n                                '...\"',\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1950,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: \"Words:\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1951,\n                                    columnNumber: 15\n                                }, this),\n                                \" \",\n                                story.wordCount,\n                                \" |\",\n                                \" \",\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: \"Chars:\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1952,\n                                    columnNumber: 15\n                                }, this),\n                                \" \",\n                                story.characterCount,\n                                story.styling && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    style: {\n                                        marginTop: \"8px\",\n                                        padding: \"4px\",\n                                        backgroundColor: \"#f8f9fa\",\n                                        borderRadius: \"2px\"\n                                    },\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"Styling:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1963,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1964,\n                                            columnNumber: 19\n                                        }, this),\n                                        \"Font: \",\n                                        story.styling.fontFamily,\n                                        \" \",\n                                        story.styling.fontStyle,\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1966,\n                                            columnNumber: 19\n                                        }, this),\n                                        \"Size: \",\n                                        story.styling.fontSize,\n                                        \"px\",\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1968,\n                                            columnNumber: 19\n                                        }, this),\n                                        \"Align: \",\n                                        story.styling.alignment,\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1970,\n                                            columnNumber: 19\n                                        }, this),\n                                        \"Color:\",\n                                        \" \",\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            style: {\n                                                backgroundColor: convertColor(story.styling.fillColor),\n                                                padding: \"2px 4px\",\n                                                color: \"white\",\n                                                fontSize: \"10px\",\n                                                borderRadius: \"2px\"\n                                            },\n                                            children: story.styling.fillColor\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1972,\n                                            columnNumber: 19\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1955,\n                                    columnNumber: 17\n                                }, this),\n                                story.formattedContent && story.formattedContent.length > 1 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    style: {\n                                        marginTop: \"8px\",\n                                        padding: \"4px\",\n                                        backgroundColor: \"#fff3cd\",\n                                        borderRadius: \"2px\"\n                                    },\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"Rich Formatting:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1995,\n                                            columnNumber: 19\n                                        }, this),\n                                        \" \",\n                                        story.formattedContent.length,\n                                        \" segments\",\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1997,\n                                            columnNumber: 19\n                                        }, this),\n                                        \"Line Breaks: \",\n                                        story.lineBreakCount\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1987,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, storyId, true, {\n                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                            lineNumber: 1937,\n                            columnNumber: 13\n                        }, this);\n                    })\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                lineNumber: 1357,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    display: \"flex\",\n                    flex: 1,\n                    justifyContent: \"center\",\n                    alignItems: \"flex-start\",\n                    padding: \"20px\",\n                    overflow: \"auto\",\n                    backgroundColor: \"#e9ecef\"\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    style: {\n                        position: \"relative\",\n                        width: (((_documentData_pageInfo6 = documentData.pageInfo) === null || _documentData_pageInfo6 === void 0 ? void 0 : (_documentData_pageInfo_dimensions13 = _documentData_pageInfo6.dimensions) === null || _documentData_pageInfo_dimensions13 === void 0 ? void 0 : (_documentData_pageInfo_dimensions_pixelDimensions6 = _documentData_pageInfo_dimensions13.pixelDimensions) === null || _documentData_pageInfo_dimensions_pixelDimensions6 === void 0 ? void 0 : _documentData_pageInfo_dimensions_pixelDimensions6.width) || ((_documentData_pageInfo7 = documentData.pageInfo) === null || _documentData_pageInfo7 === void 0 ? void 0 : (_documentData_pageInfo_dimensions14 = _documentData_pageInfo7.dimensions) === null || _documentData_pageInfo_dimensions14 === void 0 ? void 0 : _documentData_pageInfo_dimensions14.width) || 612) + \"px\",\n                        height: (((_documentData_pageInfo8 = documentData.pageInfo) === null || _documentData_pageInfo8 === void 0 ? void 0 : (_documentData_pageInfo_dimensions15 = _documentData_pageInfo8.dimensions) === null || _documentData_pageInfo_dimensions15 === void 0 ? void 0 : (_documentData_pageInfo_dimensions_pixelDimensions7 = _documentData_pageInfo_dimensions15.pixelDimensions) === null || _documentData_pageInfo_dimensions_pixelDimensions7 === void 0 ? void 0 : _documentData_pageInfo_dimensions_pixelDimensions7.height) || ((_documentData_pageInfo9 = documentData.pageInfo) === null || _documentData_pageInfo9 === void 0 ? void 0 : (_documentData_pageInfo_dimensions16 = _documentData_pageInfo9.dimensions) === null || _documentData_pageInfo_dimensions16 === void 0 ? void 0 : _documentData_pageInfo_dimensions16.height) || 792) + \"px\",\n                        backgroundColor: (()=>{\n                            const bgColor = getDocumentBackgroundColor(documentData);\n                            console.log(\"\\uD83C\\uDFA8 Final background color being applied to DOCUMENT CANVAS only:\", bgColor);\n                            return bgColor;\n                        })(),\n                        margin: \"0 auto\",\n                        border: \"1px solid #ccc\",\n                        boxShadow: \"0 4px 8px rgba(0,0,0,0.1)\",\n                        overflow: \"hidden\",\n                        // FIXED: Ensure this container is clearly distinct from the outer background\n                        borderRadius: \"2px\"\n                    },\n                    children: [\n                        (()=>{\n                            var _documentData_pageInfo_dimensions_pixelDimensions, _documentData_pageInfo_dimensions, _documentData_pageInfo, _documentData_pageInfo_dimensions1, _documentData_pageInfo1, _documentData_pageInfo_dimensions_pixelDimensions1, _documentData_pageInfo_dimensions2, _documentData_pageInfo2, _documentData_pageInfo_dimensions3, _documentData_pageInfo3, _documentData_pageInfo_margins_pixelMargins, _documentData_pageInfo_margins, _documentData_pageInfo4, _documentData_pageInfo_margins1, _documentData_pageInfo5, _documentData_pageInfo_margins_pixelMargins1, _documentData_pageInfo_margins2, _documentData_pageInfo6, _documentData_pageInfo_margins3, _documentData_pageInfo7, _documentData_pageInfo_margins_pixelMargins2, _documentData_pageInfo_margins4, _documentData_pageInfo8, _documentData_pageInfo_margins5, _documentData_pageInfo9, _documentData_pageInfo_margins_pixelMargins3, _documentData_pageInfo_margins6, _documentData_pageInfo10, _documentData_pageInfo_margins7, _documentData_pageInfo11;\n                            // DEBUG: Log page dimensions and margins\n                            const pageWidth = ((_documentData_pageInfo = documentData.pageInfo) === null || _documentData_pageInfo === void 0 ? void 0 : (_documentData_pageInfo_dimensions = _documentData_pageInfo.dimensions) === null || _documentData_pageInfo_dimensions === void 0 ? void 0 : (_documentData_pageInfo_dimensions_pixelDimensions = _documentData_pageInfo_dimensions.pixelDimensions) === null || _documentData_pageInfo_dimensions_pixelDimensions === void 0 ? void 0 : _documentData_pageInfo_dimensions_pixelDimensions.width) || ((_documentData_pageInfo1 = documentData.pageInfo) === null || _documentData_pageInfo1 === void 0 ? void 0 : (_documentData_pageInfo_dimensions1 = _documentData_pageInfo1.dimensions) === null || _documentData_pageInfo_dimensions1 === void 0 ? void 0 : _documentData_pageInfo_dimensions1.width) || 612;\n                            const pageHeight = ((_documentData_pageInfo2 = documentData.pageInfo) === null || _documentData_pageInfo2 === void 0 ? void 0 : (_documentData_pageInfo_dimensions2 = _documentData_pageInfo2.dimensions) === null || _documentData_pageInfo_dimensions2 === void 0 ? void 0 : (_documentData_pageInfo_dimensions_pixelDimensions1 = _documentData_pageInfo_dimensions2.pixelDimensions) === null || _documentData_pageInfo_dimensions_pixelDimensions1 === void 0 ? void 0 : _documentData_pageInfo_dimensions_pixelDimensions1.height) || ((_documentData_pageInfo3 = documentData.pageInfo) === null || _documentData_pageInfo3 === void 0 ? void 0 : (_documentData_pageInfo_dimensions3 = _documentData_pageInfo3.dimensions) === null || _documentData_pageInfo_dimensions3 === void 0 ? void 0 : _documentData_pageInfo_dimensions3.height) || 792;\n                            const marginLeft = ((_documentData_pageInfo4 = documentData.pageInfo) === null || _documentData_pageInfo4 === void 0 ? void 0 : (_documentData_pageInfo_margins = _documentData_pageInfo4.margins) === null || _documentData_pageInfo_margins === void 0 ? void 0 : (_documentData_pageInfo_margins_pixelMargins = _documentData_pageInfo_margins.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins.left) || ((_documentData_pageInfo5 = documentData.pageInfo) === null || _documentData_pageInfo5 === void 0 ? void 0 : (_documentData_pageInfo_margins1 = _documentData_pageInfo5.margins) === null || _documentData_pageInfo_margins1 === void 0 ? void 0 : _documentData_pageInfo_margins1.left) || 0;\n                            const marginTop = ((_documentData_pageInfo6 = documentData.pageInfo) === null || _documentData_pageInfo6 === void 0 ? void 0 : (_documentData_pageInfo_margins2 = _documentData_pageInfo6.margins) === null || _documentData_pageInfo_margins2 === void 0 ? void 0 : (_documentData_pageInfo_margins_pixelMargins1 = _documentData_pageInfo_margins2.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins1 === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins1.top) || ((_documentData_pageInfo7 = documentData.pageInfo) === null || _documentData_pageInfo7 === void 0 ? void 0 : (_documentData_pageInfo_margins3 = _documentData_pageInfo7.margins) === null || _documentData_pageInfo_margins3 === void 0 ? void 0 : _documentData_pageInfo_margins3.top) || 0;\n                            const marginRight = ((_documentData_pageInfo8 = documentData.pageInfo) === null || _documentData_pageInfo8 === void 0 ? void 0 : (_documentData_pageInfo_margins4 = _documentData_pageInfo8.margins) === null || _documentData_pageInfo_margins4 === void 0 ? void 0 : (_documentData_pageInfo_margins_pixelMargins2 = _documentData_pageInfo_margins4.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins2 === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins2.right) || ((_documentData_pageInfo9 = documentData.pageInfo) === null || _documentData_pageInfo9 === void 0 ? void 0 : (_documentData_pageInfo_margins5 = _documentData_pageInfo9.margins) === null || _documentData_pageInfo_margins5 === void 0 ? void 0 : _documentData_pageInfo_margins5.right) || 0;\n                            const marginBottom = ((_documentData_pageInfo10 = documentData.pageInfo) === null || _documentData_pageInfo10 === void 0 ? void 0 : (_documentData_pageInfo_margins6 = _documentData_pageInfo10.margins) === null || _documentData_pageInfo_margins6 === void 0 ? void 0 : (_documentData_pageInfo_margins_pixelMargins3 = _documentData_pageInfo_margins6.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins3 === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins3.bottom) || ((_documentData_pageInfo11 = documentData.pageInfo) === null || _documentData_pageInfo11 === void 0 ? void 0 : (_documentData_pageInfo_margins7 = _documentData_pageInfo11.margins) === null || _documentData_pageInfo_margins7 === void 0 ? void 0 : _documentData_pageInfo_margins7.bottom) || 0;\n                            if (showDebugInfo) {\n                                console.log(\"\\uD83D\\uDCD0 PAGE DIMENSIONS DEBUG:\");\n                                console.log(\"   \\uD83D\\uDCCF Page size: \".concat(pageWidth, \" \\xd7 \").concat(pageHeight, \"px\"));\n                                console.log(\"   \\uD83D\\uDCCF Margins: top=\".concat(marginTop, \", right=\").concat(marginRight, \", bottom=\").concat(marginBottom, \", left=\").concat(marginLeft));\n                                console.log(\"   \\uD83D\\uDCCF Content area: \".concat(pageWidth - marginLeft - marginRight, \" \\xd7 \").concat(pageHeight - marginTop - marginBottom, \"px\"));\n                                console.log(\"   \\uD83D\\uDCCF Dotted border position: top=\".concat(marginTop, \", left=\").concat(marginLeft, \", right=\").concat(marginRight, \", bottom=\").concat(marginBottom));\n                            }\n                            return null; // This is just for debugging, return nothing\n                        })(),\n                        showMargins && ((_documentData_pageInfo10 = documentData.pageInfo) === null || _documentData_pageInfo10 === void 0 ? void 0 : _documentData_pageInfo10.margins) && (()=>{\n                            var _documentData_pageInfo_margins_pixelMargins, _documentData_pageInfo_margins_pixelMargins1, _documentData_pageInfo_margins_pixelMargins2, _documentData_pageInfo_margins_pixelMargins3;\n                            const visualMarginTop = ((_documentData_pageInfo_margins_pixelMargins = documentData.pageInfo.margins.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins.top) || documentData.pageInfo.margins.top || 0;\n                            const visualMarginLeft = ((_documentData_pageInfo_margins_pixelMargins1 = documentData.pageInfo.margins.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins1 === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins1.left) || documentData.pageInfo.margins.left || 0;\n                            const visualMarginRight = ((_documentData_pageInfo_margins_pixelMargins2 = documentData.pageInfo.margins.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins2 === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins2.right) || documentData.pageInfo.margins.right || 0;\n                            const visualMarginBottom = ((_documentData_pageInfo_margins_pixelMargins3 = documentData.pageInfo.margins.pixelMargins) === null || _documentData_pageInfo_margins_pixelMargins3 === void 0 ? void 0 : _documentData_pageInfo_margins_pixelMargins3.bottom) || documentData.pageInfo.margins.bottom || 0;\n                            if (showDebugInfo) {\n                                console.log(\"\\uD83D\\uDCD0 MARGIN VISUALIZATION:\", {\n                                    top: visualMarginTop,\n                                    left: visualMarginLeft,\n                                    right: visualMarginRight,\n                                    bottom: visualMarginBottom\n                                });\n                            }\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    position: \"absolute\",\n                                    top: visualMarginTop + \"px\",\n                                    left: visualMarginLeft + \"px\",\n                                    right: visualMarginRight + \"px\",\n                                    bottom: visualMarginBottom + \"px\",\n                                    border: \"3px dashed rgba(255, 0, 0, 0.4)\",\n                                    pointerEvents: \"none\",\n                                    zIndex: 100\n                                }\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 2122,\n                                columnNumber: 17\n                            }, this);\n                        })(),\n                        (documentData.elements || []).map((element, index)=>{\n                            var _element_placedContent, _element_linkedImage, _element_linkedImage1, _element_linkedImage2, _element_placedContent_transform, _element_placedContent1, _element_placedContent_transform1, _element_placedContent2, _element_placedContent_transform2, _element_placedContent3, _element_placedContent_transform3, _element_placedContent4, _element_linkedImage3, _element_placedContent5, _element_linkedImage4, _element_placedContent_transform4, _element_placedContent6, _element_placedContent_transform5, _element_placedContent7, _element_placedContent_transform6, _element_placedContent8, _element_placedContent_transform7, _element_placedContent9, _element_placedContent_transform8, _element_placedContent10, _element_placedContent_transform9, _element_placedContent11, _element_placedContent_transform10, _element_placedContent12, _element_placedContent_transform11, _element_placedContent13, _element_placedContent14, _element_placedContent15, _element_placedContent_transform12, _element_placedContent16, _element_placedContent_transform13, _element_placedContent17, _element_placedContent_transform14, _element_placedContent18, _element_placedContent_transform15, _element_placedContent19, _element_linkedImage5;\n                            // ENFORCED: Only use pixelPosition (in pixels) for rendering\n                            if (!element.pixelPosition) {\n                                console.warn(\"⚠️ Skipping element \".concat(element.id, \" because pixelPosition is missing!\"));\n                                return null;\n                            }\n                            const elementPosition = element.pixelPosition;\n                            const isContentFrame = element.isContentFrame || element.hasPlacedContent;\n                            const hasPlacedContent = element.placedContent;\n                            // FIXED: Remove margin application - margins are for visual guidelines only\n                            // Element positions should be exactly as calculated from IDML coordinates\n                            // Margins in the UI are just dotted lines showing the content area\n                            if (showDebugInfo) {\n                                var _element_position;\n                                console.log(\"\\uD83E\\uDDF1 Element positioning:\", element.id, \"Type:\", element.type, \"Position source:\", element.pixelPosition ? \"pixelPosition\" : \"position\", \"Final coords:\", {\n                                    x: elementPosition.x,\n                                    y: elementPosition.y,\n                                    width: elementPosition.width,\n                                    height: elementPosition.height\n                                }, \"Conversion info:\", (_element_position = element.position) === null || _element_position === void 0 ? void 0 : _element_position._conversionInfo);\n                            }\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                onClick: ()=>setSelectedElement(element),\n                                style: {\n                                    position: \"absolute\",\n                                    // FIXED: Use element position directly without any margin offsets\n                                    // This ensures pixel-perfect positioning matching InDesign layout\n                                    left: elementPosition.x + \"px\",\n                                    top: elementPosition.y + \"px\",\n                                    width: elementPosition.width + \"px\",\n                                    height: elementPosition.height + \"px\",\n                                    backgroundColor: element.fill ? convertColor(element.fill) : \"transparent\",\n                                    border: (selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.id) === element.id ? \"2px solid #007bff\" : isContentFrame ? \"2px solid #00aaff\" : element.type === \"TextFrame\" ? \"1px solid #ff6b6b\" : \"1px dashed rgba(0,0,0,0.3)\",\n                                    cursor: \"pointer\",\n                                    overflow: \"visible\",\n                                    transform: elementPosition.rotation ? \"rotate(\".concat(elementPosition.rotation, \"deg)\") : undefined,\n                                    transformOrigin: \"center center\",\n                                    zIndex: index,\n                                    boxSizing: \"border-box\",\n                                    boxShadow: isContentFrame ? \"0 0 0 1px rgba(0, 170, 255, 0.3)\" : \"none\"\n                                },\n                                title: \"\".concat(element.type, \" (\").concat(element.id, \")\").concat(isContentFrame ? \" - Content Frame\" : \"\", \"$[PIXEL ONLY]\"),\n                                children: [\n                                    showDebugInfo && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        style: {\n                                            position: \"absolute\",\n                                            top: \"-20px\",\n                                            left: \"0px\",\n                                            fontSize: \"10px\",\n                                            background: \"rgba(255, 255, 0, 0.8)\",\n                                            padding: \"2px 4px\",\n                                            borderRadius: \"2px\",\n                                            pointerEvents: \"none\",\n                                            zIndex: 1000,\n                                            whiteSpace: \"nowrap\"\n                                        },\n                                        children: [\n                                            element.id,\n                                            \": (\",\n                                            Math.round(elementPosition.x),\n                                            \",\",\n                                            \" \",\n                                            Math.round(elementPosition.y),\n                                            \")\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 2214,\n                                        columnNumber: 19\n                                    }, this),\n                                    (hasPlacedContent && ((_element_placedContent = element.placedContent) === null || _element_placedContent === void 0 ? void 0 : _element_placedContent.type) === \"Image\" || element.linkedImage) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        style: {\n                                            position: \"absolute\",\n                                            width: \"100%\",\n                                            height: \"100%\",\n                                            overflow: \"hidden\"\n                                        },\n                                        children: [\n                                            ((_element_linkedImage = element.linkedImage) === null || _element_linkedImage === void 0 ? void 0 : _element_linkedImage.isEmbedded) && ((_element_linkedImage1 = element.linkedImage) === null || _element_linkedImage1 === void 0 ? void 0 : _element_linkedImage1.isExtracted) ? // Handle extracted embedded images\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                                src: element.linkedImage.url,\n                                                alt: \"Extracted embedded content\",\n                                                style: {\n                                                    position: \"absolute\",\n                                                    left: \"0px\",\n                                                    top: \"0px\",\n                                                    width: \"100%\",\n                                                    height: \"100%\",\n                                                    objectFit: \"cover\",\n                                                    transformOrigin: \"center center\"\n                                                },\n                                                onError: (e)=>{\n                                                    console.error(\"Error loading extracted image:\", e);\n                                                    e.target.style.display = \"none\";\n                                                    e.target.nextSibling.style.display = \"flex\";\n                                                }\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 2248,\n                                                columnNumber: 23\n                                            }, this) : ((_element_linkedImage2 = element.linkedImage) === null || _element_linkedImage2 === void 0 ? void 0 : _element_linkedImage2.isEmbedded) ? // Handle embedded placeholder when no extracted image\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                style: {\n                                                    position: \"absolute\",\n                                                    left: ((_element_placedContent1 = element.placedContent) === null || _element_placedContent1 === void 0 ? void 0 : (_element_placedContent_transform = _element_placedContent1.transform) === null || _element_placedContent_transform === void 0 ? void 0 : _element_placedContent_transform.tx) + \"px\" || 0,\n                                                    top: ((_element_placedContent2 = element.placedContent) === null || _element_placedContent2 === void 0 ? void 0 : (_element_placedContent_transform1 = _element_placedContent2.transform) === null || _element_placedContent_transform1 === void 0 ? void 0 : _element_placedContent_transform1.ty) + \"px\" || 0,\n                                                    transform: \"scale(\".concat(((_element_placedContent3 = element.placedContent) === null || _element_placedContent3 === void 0 ? void 0 : (_element_placedContent_transform2 = _element_placedContent3.transform) === null || _element_placedContent_transform2 === void 0 ? void 0 : _element_placedContent_transform2.a) || 1, \", \").concat(((_element_placedContent4 = element.placedContent) === null || _element_placedContent4 === void 0 ? void 0 : (_element_placedContent_transform3 = _element_placedContent4.transform) === null || _element_placedContent_transform3 === void 0 ? void 0 : _element_placedContent_transform3.d) || 1, \")\"),\n                                                    transformOrigin: \"top left\",\n                                                    width: \"200px\",\n                                                    height: \"200px\",\n                                                    backgroundColor: \"#f0f0f0\",\n                                                    border: \"2px solid #007bff\",\n                                                    display: \"flex\",\n                                                    alignItems: \"center\",\n                                                    justifyContent: \"center\",\n                                                    fontSize: \"12px\",\n                                                    color: \"#007bff\",\n                                                    flexDirection: \"column\"\n                                                },\n                                                children: [\n                                                    \"\\uD83D\\uDDBC️ Embedded Image\",\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                        lineNumber: 2294,\n                                                        columnNumber: 25\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                        style: {\n                                                            fontSize: \"10px\"\n                                                        },\n                                                        children: (_element_linkedImage3 = element.linkedImage) === null || _element_linkedImage3 === void 0 ? void 0 : _element_linkedImage3.embeddedType\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                        lineNumber: 2295,\n                                                        columnNumber: 25\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                        lineNumber: 2298,\n                                                        columnNumber: 25\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                        style: {\n                                                            fontSize: \"10px\"\n                                                        },\n                                                        children: [\n                                                            \"PPI: \",\n                                                            (_element_placedContent5 = element.placedContent) === null || _element_placedContent5 === void 0 ? void 0 : _element_placedContent5.actualPpi\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                        lineNumber: 2299,\n                                                        columnNumber: 25\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 2268,\n                                                columnNumber: 23\n                                            }, this) : ((_element_linkedImage4 = element.linkedImage) === null || _element_linkedImage4 === void 0 ? void 0 : _element_linkedImage4.url) ? // Handle external images\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                                src: element.linkedImage.url,\n                                                alt: \"External linked content\",\n                                                style: {\n                                                    position: \"absolute\",\n                                                    left: ((_element_placedContent6 = element.placedContent) === null || _element_placedContent6 === void 0 ? void 0 : (_element_placedContent_transform4 = _element_placedContent6.transform) === null || _element_placedContent_transform4 === void 0 ? void 0 : _element_placedContent_transform4.tx) + \"px\" || 0,\n                                                    top: ((_element_placedContent7 = element.placedContent) === null || _element_placedContent7 === void 0 ? void 0 : (_element_placedContent_transform5 = _element_placedContent7.transform) === null || _element_placedContent_transform5 === void 0 ? void 0 : _element_placedContent_transform5.ty) + \"px\" || 0,\n                                                    transform: \"scale(\".concat(((_element_placedContent8 = element.placedContent) === null || _element_placedContent8 === void 0 ? void 0 : (_element_placedContent_transform6 = _element_placedContent8.transform) === null || _element_placedContent_transform6 === void 0 ? void 0 : _element_placedContent_transform6.a) || 1, \", \").concat(((_element_placedContent9 = element.placedContent) === null || _element_placedContent9 === void 0 ? void 0 : (_element_placedContent_transform7 = _element_placedContent9.transform) === null || _element_placedContent_transform7 === void 0 ? void 0 : _element_placedContent_transform7.d) || 1, \")\"),\n                                                    transformOrigin: \"top left\",\n                                                    width: \"100%\",\n                                                    height: \"100%\",\n                                                    objectFit: \"cover\"\n                                                }\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 2305,\n                                                columnNumber: 23\n                                            }, this) : // Fallback placeholder\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                style: {\n                                                    position: \"absolute\",\n                                                    left: ((_element_placedContent10 = element.placedContent) === null || _element_placedContent10 === void 0 ? void 0 : (_element_placedContent_transform8 = _element_placedContent10.transform) === null || _element_placedContent_transform8 === void 0 ? void 0 : _element_placedContent_transform8.tx) + \"px\",\n                                                    top: ((_element_placedContent11 = element.placedContent) === null || _element_placedContent11 === void 0 ? void 0 : (_element_placedContent_transform9 = _element_placedContent11.transform) === null || _element_placedContent_transform9 === void 0 ? void 0 : _element_placedContent_transform9.ty) + \"px\",\n                                                    transform: \"scale(\".concat(((_element_placedContent12 = element.placedContent) === null || _element_placedContent12 === void 0 ? void 0 : (_element_placedContent_transform10 = _element_placedContent12.transform) === null || _element_placedContent_transform10 === void 0 ? void 0 : _element_placedContent_transform10.a) || 1, \", \").concat(((_element_placedContent13 = element.placedContent) === null || _element_placedContent13 === void 0 ? void 0 : (_element_placedContent_transform11 = _element_placedContent13.transform) === null || _element_placedContent_transform11 === void 0 ? void 0 : _element_placedContent_transform11.d) || 1, \")\"),\n                                                    transformOrigin: \"top left\",\n                                                    width: \"200px\",\n                                                    height: \"200px\",\n                                                    backgroundColor: \"#f0f0f0\",\n                                                    border: \"1px solid #ccc\",\n                                                    display: \"flex\",\n                                                    alignItems: \"center\",\n                                                    justifyContent: \"center\",\n                                                    fontSize: \"10px\",\n                                                    color: \"#666\"\n                                                },\n                                                children: [\n                                                    \"\\uD83D\\uDCF7 \",\n                                                    (_element_placedContent14 = element.placedContent) === null || _element_placedContent14 === void 0 ? void 0 : _element_placedContent14.imageTypeName,\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                        lineNumber: 2348,\n                                                        columnNumber: 25\n                                                    }, this),\n                                                    (_element_placedContent15 = element.placedContent) === null || _element_placedContent15 === void 0 ? void 0 : _element_placedContent15.actualPpi\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 2327,\n                                                columnNumber: 23\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                style: {\n                                                    position: \"absolute\",\n                                                    left: ((_element_placedContent16 = element.placedContent) === null || _element_placedContent16 === void 0 ? void 0 : (_element_placedContent_transform12 = _element_placedContent16.transform) === null || _element_placedContent_transform12 === void 0 ? void 0 : _element_placedContent_transform12.tx) + \"px\" || 0,\n                                                    top: ((_element_placedContent17 = element.placedContent) === null || _element_placedContent17 === void 0 ? void 0 : (_element_placedContent_transform13 = _element_placedContent17.transform) === null || _element_placedContent_transform13 === void 0 ? void 0 : _element_placedContent_transform13.ty) + \"px\" || 0,\n                                                    transform: \"scale(\".concat(((_element_placedContent18 = element.placedContent) === null || _element_placedContent18 === void 0 ? void 0 : (_element_placedContent_transform14 = _element_placedContent18.transform) === null || _element_placedContent_transform14 === void 0 ? void 0 : _element_placedContent_transform14.a) || 1, \", \").concat(((_element_placedContent19 = element.placedContent) === null || _element_placedContent19 === void 0 ? void 0 : (_element_placedContent_transform15 = _element_placedContent19.transform) === null || _element_placedContent_transform15 === void 0 ? void 0 : _element_placedContent_transform15.d) || 1, \")\"),\n                                                    transformOrigin: \"top left\",\n                                                    width: \"200px\",\n                                                    height: \"200px\",\n                                                    backgroundColor: \"#ffeeee\",\n                                                    border: \"2px solid #ff6b6b\",\n                                                    display: \"none\",\n                                                    alignItems: \"center\",\n                                                    justifyContent: \"center\",\n                                                    fontSize: \"12px\",\n                                                    color: \"#ff6b6b\",\n                                                    flexDirection: \"column\"\n                                                },\n                                                children: \"❌ Image Load Error\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 2354,\n                                                columnNumber: 21\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 2237,\n                                        columnNumber: 19\n                                    }, this),\n                                    element.type === \"TextFrame\" && element.parentStory && documentData.stories[element.parentStory] && (()=>{\n                                        const story = documentData.stories[element.parentStory];\n                                        // ENHANCED: Calculate precise text frame metrics using InDesign-compatible system\n                                        const frameMetrics = _lib_index_js__WEBPACK_IMPORTED_MODULE_3__.InDesignTextMetrics.calculateTextFrameInsets(element, element.textFramePreferences);\n                                        // Get story formatting with InDesign-accurate properties\n                                        const storyFormatting = getInDesignAccurateFormatting(story);\n                                        // Clean text to remove excessive line breaks that could cause overflow\n                                        const cleanText = (story.text || \"\").replace(/\\n\\s*\\n/g, \"\\n\").trim();\n                                        // ENHANCED: Use InDesign-accurate text measurement\n                                        const textMeasurement = _lib_index_js__WEBPACK_IMPORTED_MODULE_3__.InDesignTextMetrics.measureTextPrecisely(cleanText, storyFormatting, frameMetrics);\n                                        // IMPROVED: Generate CSS styles with full container dimensions\n                                        let finalStyles = getStoryStyles(story, element.position.height, element.position.width);\n                                        let wasAdjusted = false;\n                                        let adjustmentDetails = null;\n                                        // IMPROVED: Use full container dimensions for overflow detection (in pixels)\n                                        const containerWidth = elementPosition.width; // Use full width in pixels\n                                        const containerHeight = elementPosition.height; // Use full height in pixels // Use full height\n                                        // TEMPORARILY DISABLED: Apply overflow prevention if needed (may be causing text chopping)\n                                        if (false) {}\n                                        // Extract adjusted font size for text spans\n                                        const adjustedFontSize = wasAdjusted && adjustmentDetails ? adjustmentDetails.newFontSize : null;\n                                        const createTooltip = ()=>{\n                                            const baseInfo = \"Story: \".concat(element.parentStory, \"\\nFrame: \").concat(element.position.width, \"\\xd7\").concat(element.position.height, \"px\\nContent: \").concat(frameMetrics.contentArea.width, \"\\xd7\").concat(frameMetrics.contentArea.height, \"px\");\n                                            if (!wasAdjusted) {\n                                                return \"\".concat(baseInfo, \"\\nText fits perfectly! ✅\");\n                                            }\n                                            return \"\".concat(baseInfo, \"\\nAdjusted: \").concat(adjustmentDetails.adjustmentType, \"\\nFont: \").concat(adjustmentDetails.originalFontSize, \"px → \").concat(adjustmentDetails.newFontSize, \"px\\nScale: \").concat((adjustmentDetails.scaleFactor * 100).toFixed(1), \"%\");\n                                        };\n                                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            style: {\n                                                // HYBRID APPROACH: Use full frame size but apply insets as padding\n                                                position: \"absolute\",\n                                                top: \"0px\",\n                                                left: \"0px\",\n                                                width: \"\".concat(elementPosition.width, \"px\"),\n                                                height: \"\".concat(elementPosition.height, \"px\"),\n                                                // HYBRID: Apply insets as padding to create visual spacing without reducing text area too much\n                                                padding: \"\".concat(frameMetrics.insets.top, \"px \").concat(frameMetrics.insets.right, \"px \").concat(frameMetrics.insets.bottom, \"px \").concat(frameMetrics.insets.left, \"px\"),\n                                                // Text styling from story\n                                                fontSize: \"\".concat(finalStyles.fontSize),\n                                                fontFamily: finalStyles.fontFamily,\n                                                fontWeight: finalStyles.fontWeight,\n                                                fontStyle: finalStyles.fontStyle,\n                                                color: finalStyles.color,\n                                                textAlign: finalStyles.textAlign,\n                                                lineHeight: finalStyles.lineHeight,\n                                                letterSpacing: finalStyles.letterSpacing,\n                                                margin: 0,\n                                                // Text layout - allow overflow to prevent chopping\n                                                display: \"block\",\n                                                whiteSpace: \"pre-wrap\",\n                                                wordBreak: \"break-word\",\n                                                overflowWrap: \"break-word\",\n                                                overflow: \"visible\",\n                                                boxSizing: \"border-box\"\n                                            },\n                                            title: createTooltip(),\n                                            children: [\n                                                renderFormattedText(story, element.position.height, adjustedFontSize),\n                                                wasAdjusted && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    style: {\n                                                        position: \"absolute\",\n                                                        top: \"-2px\",\n                                                        left: \"-2px\",\n                                                        backgroundColor: (adjustmentDetails === null || adjustmentDetails === void 0 ? void 0 : adjustmentDetails.stillOverflows) ? \"#ff5722\" : \"#4caf50\",\n                                                        color: \"white\",\n                                                        fontSize: \"8px\",\n                                                        padding: \"1px 3px\",\n                                                        borderRadius: \"2px\",\n                                                        zIndex: 1000,\n                                                        pointerEvents: \"none\",\n                                                        fontFamily: \"monospace\"\n                                                    },\n                                                    children: (adjustmentDetails === null || adjustmentDetails === void 0 ? void 0 : adjustmentDetails.stillOverflows) ? \"⚠️\" : \"\\uD83C\\uDFAF\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2520,\n                                                    columnNumber: 27\n                                                }, this),\n                                                !wasAdjusted && !textMeasurement.willOverflow && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    style: {\n                                                        position: \"absolute\",\n                                                        top: \"-2px\",\n                                                        right: \"-2px\",\n                                                        backgroundColor: \"#2e7d32\",\n                                                        color: \"white\",\n                                                        fontSize: \"8px\",\n                                                        padding: \"1px 3px\",\n                                                        borderRadius: \"2px\",\n                                                        zIndex: 1000,\n                                                        pointerEvents: \"none\",\n                                                        fontFamily: \"monospace\"\n                                                    },\n                                                    children: \"✅\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2543,\n                                                    columnNumber: 27\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2478,\n                                            columnNumber: 23\n                                        }, this);\n                                    })(),\n                                    isContentFrame && !hasPlacedContent && !((_element_linkedImage5 = element.linkedImage) === null || _element_linkedImage5 === void 0 ? void 0 : _element_linkedImage5.isEmbedded) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            justifyContent: \"center\",\n                                            height: \"100%\",\n                                            fontSize: \"12px\",\n                                            color: \"#666\",\n                                            backgroundColor: \"rgba(0, 170, 255, 0.1)\",\n                                            flexDirection: \"column\"\n                                        },\n                                        children: [\n                                            \"\\uD83D\\uDDBC️ Content Frame\",\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 2583,\n                                                columnNumber: 23\n                                            }, this),\n                                            Math.round(elementPosition.width),\n                                            \"\\xd7\",\n                                            Math.round(elementPosition.height),\n                                            \"px\",\n                                            element.name && element.name !== \"$ID/\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                        lineNumber: 2588,\n                                                        columnNumber: 27\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                        style: {\n                                                            fontSize: \"10px\",\n                                                            fontStyle: \"italic\"\n                                                        },\n                                                        children: element.name\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                        lineNumber: 2589,\n                                                        columnNumber: 27\n                                                    }, this)\n                                                ]\n                                            }, void 0, true)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 2570,\n                                        columnNumber: 21\n                                    }, this),\n                                    !hasPlacedContent && element.type !== \"TextFrame\" && !isContentFrame && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        style: {\n                                            padding: \"4px\",\n                                            fontSize: \"10px\",\n                                            color: \"#999\",\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            justifyContent: \"center\",\n                                            height: \"100%\",\n                                            textAlign: \"center\"\n                                        },\n                                        children: [\n                                            element.type,\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 2616,\n                                                columnNumber: 23\n                                            }, this),\n                                            Math.round(elementPosition.width),\n                                            \"\\xd7\",\n                                            Math.round(elementPosition.height),\n                                            \"px\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 2603,\n                                        columnNumber: 21\n                                    }, this)\n                                ]\n                            }, element.id, true, {\n                                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 2174,\n                                columnNumber: 15\n                            }, this);\n                        }),\n                        selectedElement && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                position: \"absolute\",\n                                top: \"10px\",\n                                right: \"10px\",\n                                backgroundColor: \"rgba(0, 123, 255, 0.95)\",\n                                color: \"white\",\n                                padding: \"12px\",\n                                borderRadius: \"6px\",\n                                fontSize: \"12px\",\n                                maxWidth: \"300px\",\n                                lineHeight: \"1.4\"\n                            },\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: selectedElement.type\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 2640,\n                                    columnNumber: 15\n                                }, this),\n                                \" (\",\n                                selectedElement.id,\n                                \")\",\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 2641,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: \"Position:\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 2642,\n                                    columnNumber: 15\n                                }, this),\n                                \" (\",\n                                Math.round((selectedElement.pixelPosition || selectedElement.position).x),\n                                \",\",\n                                \" \",\n                                Math.round((selectedElement.pixelPosition || selectedElement.position).y),\n                                \")px\",\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 2651,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: \"Size:\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 2652,\n                                    columnNumber: 15\n                                }, this),\n                                \" \",\n                                Math.round((selectedElement.pixelPosition || selectedElement.position).width),\n                                \" \",\n                                \"\\xd7\",\n                                \" \",\n                                Math.round((selectedElement.pixelPosition || selectedElement.position).height),\n                                \"px\",\n                                selectedElement.isContentFrame && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2665,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"\\uD83D\\uDDBC️ Content Frame\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2666,\n                                            columnNumber: 19\n                                        }, this),\n                                        selectedElement.placedContent && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2669,\n                                                    columnNumber: 23\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                                    children: \"Content:\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2670,\n                                                    columnNumber: 23\n                                                }, this),\n                                                \" \",\n                                                selectedElement.placedContent.imageTypeName,\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2672,\n                                                    columnNumber: 23\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                                    children: \"PPI:\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2673,\n                                                    columnNumber: 23\n                                                }, this),\n                                                \" \",\n                                                selectedElement.placedContent.actualPpi,\n                                                \" →\",\n                                                \" \",\n                                                selectedElement.placedContent.effectivePpi,\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2676,\n                                                    columnNumber: 23\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                                    children: \"Scale:\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2677,\n                                                    columnNumber: 23\n                                                }, this),\n                                                \" \",\n                                                Math.round((((_selectedElement_placedContent_transform = selectedElement.placedContent.transform) === null || _selectedElement_placedContent_transform === void 0 ? void 0 : _selectedElement_placedContent_transform.a) || 1) * 100),\n                                                \"% \\xd7\",\n                                                \" \",\n                                                Math.round((((_selectedElement_placedContent_transform1 = selectedElement.placedContent.transform) === null || _selectedElement_placedContent_transform1 === void 0 ? void 0 : _selectedElement_placedContent_transform1.d) || 1) * 100),\n                                                \"%\"\n                                            ]\n                                        }, void 0, true)\n                                    ]\n                                }, void 0, true),\n                                selectedElement.parentStory && documentData.stories[selectedElement.parentStory] && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2693,\n                                            columnNumber: 21\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"\\uD83D\\uDCDD Text Story:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2694,\n                                            columnNumber: 21\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2695,\n                                            columnNumber: 21\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"Font:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2696,\n                                            columnNumber: 21\n                                        }, this),\n                                        \" \",\n                                        (_documentData_stories_selectedElement_parentStory_styling = documentData.stories[selectedElement.parentStory].styling) === null || _documentData_stories_selectedElement_parentStory_styling === void 0 ? void 0 : _documentData_stories_selectedElement_parentStory_styling.fontFamily,\n                                        \" \",\n                                        (_documentData_stories_selectedElement_parentStory_styling1 = documentData.stories[selectedElement.parentStory].styling) === null || _documentData_stories_selectedElement_parentStory_styling1 === void 0 ? void 0 : _documentData_stories_selectedElement_parentStory_styling1.fontStyle,\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2705,\n                                            columnNumber: 21\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"Size:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2706,\n                                            columnNumber: 21\n                                        }, this),\n                                        \" \",\n                                        (_documentData_stories_selectedElement_parentStory_styling2 = documentData.stories[selectedElement.parentStory].styling) === null || _documentData_stories_selectedElement_parentStory_styling2 === void 0 ? void 0 : _documentData_stories_selectedElement_parentStory_styling2.fontSize,\n                                        \"px\",\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2712,\n                                            columnNumber: 21\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"Words:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2713,\n                                            columnNumber: 21\n                                        }, this),\n                                        \" \",\n                                        documentData.stories[selectedElement.parentStory].wordCount\n                                    ]\n                                }, void 0, true),\n                                ((_selectedElement_linkedImage = selectedElement.linkedImage) === null || _selectedElement_linkedImage === void 0 ? void 0 : _selectedElement_linkedImage.isEmbedded) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2722,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"\\uD83D\\uDCCE Embedded Image:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2723,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2724,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"Type:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2725,\n                                            columnNumber: 19\n                                        }, this),\n                                        \" \",\n                                        selectedElement.linkedImage.embeddedType,\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2727,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"Data:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2728,\n                                            columnNumber: 19\n                                        }, this),\n                                        \" \",\n                                        selectedElement.linkedImage.embeddedData\n                                    ]\n                                }, void 0, true),\n                                ((_selectedElement_linkedImage1 = selectedElement.linkedImage) === null || _selectedElement_linkedImage1 === void 0 ? void 0 : _selectedElement_linkedImage1.isPlaceholder) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2734,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"\\uD83D\\uDCCB Image Placeholder\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2735,\n                                            columnNumber: 19\n                                        }, this)\n                                    ]\n                                }, void 0, true)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                            lineNumber: 2626,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                    lineNumber: 2019,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                lineNumber: 2007,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\Muhmmad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n        lineNumber: 1355,\n        columnNumber: 5\n    }, this);\n}\n_s(Viewer, \"gtYl4t4OM7Fy8qEiCoonRjP0jNs=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter\n    ];\n});\n_c = Viewer;\nvar _c;\n$RefreshReg$(_c, \"Viewer\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/view/[uploadId].js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/assert/assert.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/compiled/assert/assert.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n(function(){var e={992:function(e){e.exports=function(e,r,n){if(e.filter)return e.filter(r,n);if(void 0===e||null===e)throw new TypeError;if(\"function\"!=typeof r)throw new TypeError;var o=[];for(var i=0;i<e.length;i++){if(!t.call(e,i))continue;var a=e[i];if(r.call(n,a,i,e))o.push(a)}return o};var t=Object.prototype.hasOwnProperty},167:function(e,t,r){\"use strict\";function _typeof(e){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(e){return typeof e}}else{_typeof=function _typeof(e){return e&&typeof Symbol===\"function\"&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e}}return _typeof(e)}function _classCallCheck(e,t){if(!(e instanceof t)){throw new TypeError(\"Cannot call a class as a function\")}}var n=r(23),o=n.codes,i=o.ERR_AMBIGUOUS_ARGUMENT,a=o.ERR_INVALID_ARG_TYPE,c=o.ERR_INVALID_ARG_VALUE,u=o.ERR_INVALID_RETURN_VALUE,f=o.ERR_MISSING_ARGS;var s=r(545);var l=r(177),p=l.inspect;var y=r(177).types,g=y.isPromise,v=y.isRegExp;var d=Object.assign?Object.assign:r(604).assign;var b=Object.is?Object.is:r(208);var h=new Map;var m;var S;var A;var E;var O;function lazyLoadComparison(){var e=r(176);m=e.isDeepEqual;S=e.isDeepStrictEqual}var w=/[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f]/g;var j=null&&0;var P=function escapeFn(e){return j[e.charCodeAt(0)]};var _=false;var x=e.exports=ok;var k={};function innerFail(e){if(e.message instanceof Error)throw e.message;throw new s(e)}function fail(e,t,r,n,o){var i=arguments.length;var a;if(i===0){a=\"Failed\"}else if(i===1){r=e;e=undefined}else{if(_===false){_=true;var c=process.emitWarning?process.emitWarning:console.warn.bind(console);c(\"assert.fail() with more than one argument is deprecated. \"+\"Please use assert.strictEqual() instead or only pass a message.\",\"DeprecationWarning\",\"DEP0094\")}if(i===2)n=\"!=\"}if(r instanceof Error)throw r;var u={actual:e,expected:t,operator:n===undefined?\"fail\":n,stackStartFn:o||fail};if(r!==undefined){u.message=r}var f=new s(u);if(a){f.message=a;f.generatedMessage=true}throw f}x.fail=fail;x.AssertionError=s;function innerOk(e,t,r,n){if(!r){var o=false;if(t===0){o=true;n=\"No value argument passed to `assert.ok()`\"}else if(n instanceof Error){throw n}var i=new s({actual:r,expected:true,message:n,operator:\"==\",stackStartFn:e});i.generatedMessage=o;throw i}}function ok(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++){t[r]=arguments[r]}innerOk.apply(void 0,[ok,t.length].concat(t))}x.ok=ok;x.equal=function equal(e,t,r){if(arguments.length<2){throw new f(\"actual\",\"expected\")}if(e!=t){innerFail({actual:e,expected:t,message:r,operator:\"==\",stackStartFn:equal})}};x.notEqual=function notEqual(e,t,r){if(arguments.length<2){throw new f(\"actual\",\"expected\")}if(e==t){innerFail({actual:e,expected:t,message:r,operator:\"!=\",stackStartFn:notEqual})}};x.deepEqual=function deepEqual(e,t,r){if(arguments.length<2){throw new f(\"actual\",\"expected\")}if(m===undefined)lazyLoadComparison();if(!m(e,t)){innerFail({actual:e,expected:t,message:r,operator:\"deepEqual\",stackStartFn:deepEqual})}};x.notDeepEqual=function notDeepEqual(e,t,r){if(arguments.length<2){throw new f(\"actual\",\"expected\")}if(m===undefined)lazyLoadComparison();if(m(e,t)){innerFail({actual:e,expected:t,message:r,operator:\"notDeepEqual\",stackStartFn:notDeepEqual})}};x.deepStrictEqual=function deepStrictEqual(e,t,r){if(arguments.length<2){throw new f(\"actual\",\"expected\")}if(m===undefined)lazyLoadComparison();if(!S(e,t)){innerFail({actual:e,expected:t,message:r,operator:\"deepStrictEqual\",stackStartFn:deepStrictEqual})}};x.notDeepStrictEqual=notDeepStrictEqual;function notDeepStrictEqual(e,t,r){if(arguments.length<2){throw new f(\"actual\",\"expected\")}if(m===undefined)lazyLoadComparison();if(S(e,t)){innerFail({actual:e,expected:t,message:r,operator:\"notDeepStrictEqual\",stackStartFn:notDeepStrictEqual})}}x.strictEqual=function strictEqual(e,t,r){if(arguments.length<2){throw new f(\"actual\",\"expected\")}if(!b(e,t)){innerFail({actual:e,expected:t,message:r,operator:\"strictEqual\",stackStartFn:strictEqual})}};x.notStrictEqual=function notStrictEqual(e,t,r){if(arguments.length<2){throw new f(\"actual\",\"expected\")}if(b(e,t)){innerFail({actual:e,expected:t,message:r,operator:\"notStrictEqual\",stackStartFn:notStrictEqual})}};var I=function Comparison(e,t,r){var n=this;_classCallCheck(this,Comparison);t.forEach((function(t){if(t in e){if(r!==undefined&&typeof r[t]===\"string\"&&v(e[t])&&e[t].test(r[t])){n[t]=r[t]}else{n[t]=e[t]}}}))};function compareExceptionKey(e,t,r,n,o,i){if(!(r in e)||!S(e[r],t[r])){if(!n){var a=new I(e,o);var c=new I(t,o,e);var u=new s({actual:a,expected:c,operator:\"deepStrictEqual\",stackStartFn:i});u.actual=e;u.expected=t;u.operator=i.name;throw u}innerFail({actual:e,expected:t,message:n,operator:i.name,stackStartFn:i})}}function expectedException(e,t,r,n){if(typeof t!==\"function\"){if(v(t))return t.test(e);if(arguments.length===2){throw new a(\"expected\",[\"Function\",\"RegExp\"],t)}if(_typeof(e)!==\"object\"||e===null){var o=new s({actual:e,expected:t,message:r,operator:\"deepStrictEqual\",stackStartFn:n});o.operator=n.name;throw o}var i=Object.keys(t);if(t instanceof Error){i.push(\"name\",\"message\")}else if(i.length===0){throw new c(\"error\",t,\"may not be an empty object\")}if(m===undefined)lazyLoadComparison();i.forEach((function(o){if(typeof e[o]===\"string\"&&v(t[o])&&t[o].test(e[o])){return}compareExceptionKey(e,t,o,r,i,n)}));return true}if(t.prototype!==undefined&&e instanceof t){return true}if(Error.isPrototypeOf(t)){return false}return t.call({},e)===true}function getActual(e){if(typeof e!==\"function\"){throw new a(\"fn\",\"Function\",e)}try{e()}catch(e){return e}return k}function checkIsPromise(e){return g(e)||e!==null&&_typeof(e)===\"object\"&&typeof e.then===\"function\"&&typeof e.catch===\"function\"}function waitForActual(e){return Promise.resolve().then((function(){var t;if(typeof e===\"function\"){t=e();if(!checkIsPromise(t)){throw new u(\"instance of Promise\",\"promiseFn\",t)}}else if(checkIsPromise(e)){t=e}else{throw new a(\"promiseFn\",[\"Function\",\"Promise\"],e)}return Promise.resolve().then((function(){return t})).then((function(){return k})).catch((function(e){return e}))}))}function expectsError(e,t,r,n){if(typeof r===\"string\"){if(arguments.length===4){throw new a(\"error\",[\"Object\",\"Error\",\"Function\",\"RegExp\"],r)}if(_typeof(t)===\"object\"&&t!==null){if(t.message===r){throw new i(\"error/message\",'The error message \"'.concat(t.message,'\" is identical to the message.'))}}else if(t===r){throw new i(\"error/message\",'The error \"'.concat(t,'\" is identical to the message.'))}n=r;r=undefined}else if(r!=null&&_typeof(r)!==\"object\"&&typeof r!==\"function\"){throw new a(\"error\",[\"Object\",\"Error\",\"Function\",\"RegExp\"],r)}if(t===k){var o=\"\";if(r&&r.name){o+=\" (\".concat(r.name,\")\")}o+=n?\": \".concat(n):\".\";var c=e.name===\"rejects\"?\"rejection\":\"exception\";innerFail({actual:undefined,expected:r,operator:e.name,message:\"Missing expected \".concat(c).concat(o),stackStartFn:e})}if(r&&!expectedException(t,r,n,e)){throw t}}function expectsNoError(e,t,r,n){if(t===k)return;if(typeof r===\"string\"){n=r;r=undefined}if(!r||expectedException(t,r)){var o=n?\": \".concat(n):\".\";var i=e.name===\"doesNotReject\"?\"rejection\":\"exception\";innerFail({actual:t,expected:r,operator:e.name,message:\"Got unwanted \".concat(i).concat(o,\"\\n\")+'Actual message: \"'.concat(t&&t.message,'\"'),stackStartFn:e})}throw t}x.throws=function throws(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++){r[n-1]=arguments[n]}expectsError.apply(void 0,[throws,getActual(e)].concat(r))};x.rejects=function rejects(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++){r[n-1]=arguments[n]}return waitForActual(e).then((function(e){return expectsError.apply(void 0,[rejects,e].concat(r))}))};x.doesNotThrow=function doesNotThrow(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++){r[n-1]=arguments[n]}expectsNoError.apply(void 0,[doesNotThrow,getActual(e)].concat(r))};x.doesNotReject=function doesNotReject(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++){r[n-1]=arguments[n]}return waitForActual(e).then((function(e){return expectsNoError.apply(void 0,[doesNotReject,e].concat(r))}))};x.ifError=function ifError(e){if(e!==null&&e!==undefined){var t=\"ifError got unwanted exception: \";if(_typeof(e)===\"object\"&&typeof e.message===\"string\"){if(e.message.length===0&&e.constructor){t+=e.constructor.name}else{t+=e.message}}else{t+=p(e)}var r=new s({actual:e,expected:null,operator:\"ifError\",message:t,stackStartFn:ifError});var n=e.stack;if(typeof n===\"string\"){var o=n.split(\"\\n\");o.shift();var i=r.stack.split(\"\\n\");for(var a=0;a<o.length;a++){var c=i.indexOf(o[a]);if(c!==-1){i=i.slice(0,c);break}}r.stack=\"\".concat(i.join(\"\\n\"),\"\\n\").concat(o.join(\"\\n\"))}throw r}};function strict(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++){t[r]=arguments[r]}innerOk.apply(void 0,[strict,t.length].concat(t))}x.strict=d(strict,x,{equal:x.strictEqual,deepEqual:x.deepStrictEqual,notEqual:x.notStrictEqual,notDeepEqual:x.notDeepStrictEqual});x.strict.strict=x.strict},545:function(e,t,r){\"use strict\";function _objectSpread(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{};var n=Object.keys(r);if(typeof Object.getOwnPropertySymbols===\"function\"){n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))}n.forEach((function(t){_defineProperty(e,t,r[t])}))}return e}function _defineProperty(e,t,r){if(t in e){Object.defineProperty(e,t,{value:r,enumerable:true,configurable:true,writable:true})}else{e[t]=r}return e}function _classCallCheck(e,t){if(!(e instanceof t)){throw new TypeError(\"Cannot call a class as a function\")}}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||false;n.configurable=true;if(\"value\"in n)n.writable=true;Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){if(t)_defineProperties(e.prototype,t);if(r)_defineProperties(e,r);return e}function _possibleConstructorReturn(e,t){if(t&&(_typeof(t)===\"object\"||typeof t===\"function\")){return t}return _assertThisInitialized(e)}function _assertThisInitialized(e){if(e===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\")}return e}function _inherits(e,t){if(typeof t!==\"function\"&&t!==null){throw new TypeError(\"Super expression must either be null or a function\")}e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:true,configurable:true}});if(t)_setPrototypeOf(e,t)}function _wrapNativeSuper(e){var t=typeof Map===\"function\"?new Map:undefined;_wrapNativeSuper=function _wrapNativeSuper(e){if(e===null||!_isNativeFunction(e))return e;if(typeof e!==\"function\"){throw new TypeError(\"Super expression must either be null or a function\")}if(typeof t!==\"undefined\"){if(t.has(e))return t.get(e);t.set(e,Wrapper)}function Wrapper(){return _construct(e,arguments,_getPrototypeOf(this).constructor)}Wrapper.prototype=Object.create(e.prototype,{constructor:{value:Wrapper,enumerable:false,writable:true,configurable:true}});return _setPrototypeOf(Wrapper,e)};return _wrapNativeSuper(e)}function isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],(function(){})));return true}catch(e){return false}}function _construct(e,t,r){if(isNativeReflectConstruct()){_construct=Reflect.construct}else{_construct=function _construct(e,t,r){var n=[null];n.push.apply(n,t);var o=Function.bind.apply(e,n);var i=new o;if(r)_setPrototypeOf(i,r.prototype);return i}}return _construct.apply(null,arguments)}function _isNativeFunction(e){return Function.toString.call(e).indexOf(\"[native code]\")!==-1}function _setPrototypeOf(e,t){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(e,t){e.__proto__=t;return e};return _setPrototypeOf(e,t)}function _getPrototypeOf(e){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(e){return e.__proto__||Object.getPrototypeOf(e)};return _getPrototypeOf(e)}function _typeof(e){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(e){return typeof e}}else{_typeof=function _typeof(e){return e&&typeof Symbol===\"function\"&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e}}return _typeof(e)}var n=r(177),o=n.inspect;var i=r(23),a=i.codes.ERR_INVALID_ARG_TYPE;function endsWith(e,t,r){if(r===undefined||r>e.length){r=e.length}return e.substring(r-t.length,r)===t}function repeat(e,t){t=Math.floor(t);if(e.length==0||t==0)return\"\";var r=e.length*t;t=Math.floor(Math.log(t)/Math.log(2));while(t){e+=e;t--}e+=e.substring(0,r-e.length);return e}var c=\"\";var u=\"\";var f=\"\";var s=\"\";var l={deepStrictEqual:\"Expected values to be strictly deep-equal:\",strictEqual:\"Expected values to be strictly equal:\",strictEqualObject:'Expected \"actual\" to be reference-equal to \"expected\":',deepEqual:\"Expected values to be loosely deep-equal:\",equal:\"Expected values to be loosely equal:\",notDeepStrictEqual:'Expected \"actual\" not to be strictly deep-equal to:',notStrictEqual:'Expected \"actual\" to be strictly unequal to:',notStrictEqualObject:'Expected \"actual\" not to be reference-equal to \"expected\":',notDeepEqual:'Expected \"actual\" not to be loosely deep-equal to:',notEqual:'Expected \"actual\" to be loosely unequal to:',notIdentical:\"Values identical but not reference-equal:\"};var p=10;function copyError(e){var t=Object.keys(e);var r=Object.create(Object.getPrototypeOf(e));t.forEach((function(t){r[t]=e[t]}));Object.defineProperty(r,\"message\",{value:e.message});return r}function inspectValue(e){return o(e,{compact:false,customInspect:false,depth:1e3,maxArrayLength:Infinity,showHidden:false,breakLength:Infinity,showProxy:false,sorted:true,getters:true})}function createErrDiff(e,t,r){var n=\"\";var o=\"\";var i=0;var a=\"\";var y=false;var g=inspectValue(e);var v=g.split(\"\\n\");var d=inspectValue(t).split(\"\\n\");var b=0;var h=\"\";if(r===\"strictEqual\"&&_typeof(e)===\"object\"&&_typeof(t)===\"object\"&&e!==null&&t!==null){r=\"strictEqualObject\"}if(v.length===1&&d.length===1&&v[0]!==d[0]){var m=v[0].length+d[0].length;if(m<=p){if((_typeof(e)!==\"object\"||e===null)&&(_typeof(t)!==\"object\"||t===null)&&(e!==0||t!==0)){return\"\".concat(l[r],\"\\n\\n\")+\"\".concat(v[0],\" !== \").concat(d[0],\"\\n\")}}else if(r!==\"strictEqualObject\"){var S=process.stderr&&process.stderr.isTTY?process.stderr.columns:80;if(m<S){while(v[0][b]===d[0][b]){b++}if(b>2){h=\"\\n  \".concat(repeat(\" \",b),\"^\");b=0}}}}var A=v[v.length-1];var E=d[d.length-1];while(A===E){if(b++<2){a=\"\\n  \".concat(A).concat(a)}else{n=A}v.pop();d.pop();if(v.length===0||d.length===0)break;A=v[v.length-1];E=d[d.length-1]}var O=Math.max(v.length,d.length);if(O===0){var w=g.split(\"\\n\");if(w.length>30){w[26]=\"\".concat(c,\"...\").concat(s);while(w.length>27){w.pop()}}return\"\".concat(l.notIdentical,\"\\n\\n\").concat(w.join(\"\\n\"),\"\\n\")}if(b>3){a=\"\\n\".concat(c,\"...\").concat(s).concat(a);y=true}if(n!==\"\"){a=\"\\n  \".concat(n).concat(a);n=\"\"}var j=0;var P=l[r]+\"\\n\".concat(u,\"+ actual\").concat(s,\" \").concat(f,\"- expected\").concat(s);var _=\" \".concat(c,\"...\").concat(s,\" Lines skipped\");for(b=0;b<O;b++){var x=b-i;if(v.length<b+1){if(x>1&&b>2){if(x>4){o+=\"\\n\".concat(c,\"...\").concat(s);y=true}else if(x>3){o+=\"\\n  \".concat(d[b-2]);j++}o+=\"\\n  \".concat(d[b-1]);j++}i=b;n+=\"\\n\".concat(f,\"-\").concat(s,\" \").concat(d[b]);j++}else if(d.length<b+1){if(x>1&&b>2){if(x>4){o+=\"\\n\".concat(c,\"...\").concat(s);y=true}else if(x>3){o+=\"\\n  \".concat(v[b-2]);j++}o+=\"\\n  \".concat(v[b-1]);j++}i=b;o+=\"\\n\".concat(u,\"+\").concat(s,\" \").concat(v[b]);j++}else{var k=d[b];var I=v[b];var F=I!==k&&(!endsWith(I,\",\")||I.slice(0,-1)!==k);if(F&&endsWith(k,\",\")&&k.slice(0,-1)===I){F=false;I+=\",\"}if(F){if(x>1&&b>2){if(x>4){o+=\"\\n\".concat(c,\"...\").concat(s);y=true}else if(x>3){o+=\"\\n  \".concat(v[b-2]);j++}o+=\"\\n  \".concat(v[b-1]);j++}i=b;o+=\"\\n\".concat(u,\"+\").concat(s,\" \").concat(I);n+=\"\\n\".concat(f,\"-\").concat(s,\" \").concat(k);j+=2}else{o+=n;n=\"\";if(x===1||b===0){o+=\"\\n  \".concat(I);j++}}}if(j>20&&b<O-2){return\"\".concat(P).concat(_,\"\\n\").concat(o,\"\\n\").concat(c,\"...\").concat(s).concat(n,\"\\n\")+\"\".concat(c,\"...\").concat(s)}}return\"\".concat(P).concat(y?_:\"\",\"\\n\").concat(o).concat(n).concat(a).concat(h)}var y=function(e){_inherits(AssertionError,e);function AssertionError(e){var t;_classCallCheck(this,AssertionError);if(_typeof(e)!==\"object\"||e===null){throw new a(\"options\",\"Object\",e)}var r=e.message,n=e.operator,o=e.stackStartFn;var i=e.actual,p=e.expected;var y=Error.stackTraceLimit;Error.stackTraceLimit=0;if(r!=null){t=_possibleConstructorReturn(this,_getPrototypeOf(AssertionError).call(this,String(r)))}else{if(process.stderr&&process.stderr.isTTY){if(process.stderr&&process.stderr.getColorDepth&&process.stderr.getColorDepth()!==1){c=\"\u001b[34m\";u=\"\u001b[32m\";s=\"\u001b[39m\";f=\"\u001b[31m\"}else{c=\"\";u=\"\";s=\"\";f=\"\"}}if(_typeof(i)===\"object\"&&i!==null&&_typeof(p)===\"object\"&&p!==null&&\"stack\"in i&&i instanceof Error&&\"stack\"in p&&p instanceof Error){i=copyError(i);p=copyError(p)}if(n===\"deepStrictEqual\"||n===\"strictEqual\"){t=_possibleConstructorReturn(this,_getPrototypeOf(AssertionError).call(this,createErrDiff(i,p,n)))}else if(n===\"notDeepStrictEqual\"||n===\"notStrictEqual\"){var g=l[n];var v=inspectValue(i).split(\"\\n\");if(n===\"notStrictEqual\"&&_typeof(i)===\"object\"&&i!==null){g=l.notStrictEqualObject}if(v.length>30){v[26]=\"\".concat(c,\"...\").concat(s);while(v.length>27){v.pop()}}if(v.length===1){t=_possibleConstructorReturn(this,_getPrototypeOf(AssertionError).call(this,\"\".concat(g,\" \").concat(v[0])))}else{t=_possibleConstructorReturn(this,_getPrototypeOf(AssertionError).call(this,\"\".concat(g,\"\\n\\n\").concat(v.join(\"\\n\"),\"\\n\")))}}else{var d=inspectValue(i);var b=\"\";var h=l[n];if(n===\"notDeepEqual\"||n===\"notEqual\"){d=\"\".concat(l[n],\"\\n\\n\").concat(d);if(d.length>1024){d=\"\".concat(d.slice(0,1021),\"...\")}}else{b=\"\".concat(inspectValue(p));if(d.length>512){d=\"\".concat(d.slice(0,509),\"...\")}if(b.length>512){b=\"\".concat(b.slice(0,509),\"...\")}if(n===\"deepEqual\"||n===\"equal\"){d=\"\".concat(h,\"\\n\\n\").concat(d,\"\\n\\nshould equal\\n\\n\")}else{b=\" \".concat(n,\" \").concat(b)}}t=_possibleConstructorReturn(this,_getPrototypeOf(AssertionError).call(this,\"\".concat(d).concat(b)))}}Error.stackTraceLimit=y;t.generatedMessage=!r;Object.defineProperty(_assertThisInitialized(t),\"name\",{value:\"AssertionError [ERR_ASSERTION]\",enumerable:false,writable:true,configurable:true});t.code=\"ERR_ASSERTION\";t.actual=i;t.expected=p;t.operator=n;if(Error.captureStackTrace){Error.captureStackTrace(_assertThisInitialized(t),o)}t.stack;t.name=\"AssertionError\";return _possibleConstructorReturn(t)}_createClass(AssertionError,[{key:\"toString\",value:function toString(){return\"\".concat(this.name,\" [\").concat(this.code,\"]: \").concat(this.message)}},{key:o.custom,value:function value(e,t){return o(this,_objectSpread({},t,{customInspect:false,depth:0}))}}]);return AssertionError}(_wrapNativeSuper(Error));e.exports=y},23:function(e,t,r){\"use strict\";function _typeof(e){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(e){return typeof e}}else{_typeof=function _typeof(e){return e&&typeof Symbol===\"function\"&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e}}return _typeof(e)}function _classCallCheck(e,t){if(!(e instanceof t)){throw new TypeError(\"Cannot call a class as a function\")}}function _possibleConstructorReturn(e,t){if(t&&(_typeof(t)===\"object\"||typeof t===\"function\")){return t}return _assertThisInitialized(e)}function _assertThisInitialized(e){if(e===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\")}return e}function _getPrototypeOf(e){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(e){return e.__proto__||Object.getPrototypeOf(e)};return _getPrototypeOf(e)}function _inherits(e,t){if(typeof t!==\"function\"&&t!==null){throw new TypeError(\"Super expression must either be null or a function\")}e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:true,configurable:true}});if(t)_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(e,t){e.__proto__=t;return e};return _setPrototypeOf(e,t)}var n={};var o;var i;function createErrorType(e,t,r){if(!r){r=Error}function getMessage(e,r,n){if(typeof t===\"string\"){return t}else{return t(e,r,n)}}var o=function(t){_inherits(NodeError,t);function NodeError(t,r,n){var o;_classCallCheck(this,NodeError);o=_possibleConstructorReturn(this,_getPrototypeOf(NodeError).call(this,getMessage(t,r,n)));o.code=e;return o}return NodeError}(r);n[e]=o}function oneOf(e,t){if(Array.isArray(e)){var r=e.length;e=e.map((function(e){return String(e)}));if(r>2){return\"one of \".concat(t,\" \").concat(e.slice(0,r-1).join(\", \"),\", or \")+e[r-1]}else if(r===2){return\"one of \".concat(t,\" \").concat(e[0],\" or \").concat(e[1])}else{return\"of \".concat(t,\" \").concat(e[0])}}else{return\"of \".concat(t,\" \").concat(String(e))}}function startsWith(e,t,r){return e.substr(!r||r<0?0:+r,t.length)===t}function endsWith(e,t,r){if(r===undefined||r>e.length){r=e.length}return e.substring(r-t.length,r)===t}function includes(e,t,r){if(typeof r!==\"number\"){r=0}if(r+t.length>e.length){return false}else{return e.indexOf(t,r)!==-1}}createErrorType(\"ERR_AMBIGUOUS_ARGUMENT\",'The \"%s\" argument is ambiguous. %s',TypeError);createErrorType(\"ERR_INVALID_ARG_TYPE\",(function(e,t,n){if(o===undefined)o=r(167);o(typeof e===\"string\",\"'name' must be a string\");var i;if(typeof t===\"string\"&&startsWith(t,\"not \")){i=\"must not be\";t=t.replace(/^not /,\"\")}else{i=\"must be\"}var a;if(endsWith(e,\" argument\")){a=\"The \".concat(e,\" \").concat(i,\" \").concat(oneOf(t,\"type\"))}else{var c=includes(e,\".\")?\"property\":\"argument\";a='The \"'.concat(e,'\" ').concat(c,\" \").concat(i,\" \").concat(oneOf(t,\"type\"))}a+=\". Received type \".concat(_typeof(n));return a}),TypeError);createErrorType(\"ERR_INVALID_ARG_VALUE\",(function(e,t){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"is invalid\";if(i===undefined)i=r(177);var o=i.inspect(t);if(o.length>128){o=\"\".concat(o.slice(0,128),\"...\")}return\"The argument '\".concat(e,\"' \").concat(n,\". Received \").concat(o)}),TypeError,RangeError);createErrorType(\"ERR_INVALID_RETURN_VALUE\",(function(e,t,r){var n;if(r&&r.constructor&&r.constructor.name){n=\"instance of \".concat(r.constructor.name)}else{n=\"type \".concat(_typeof(r))}return\"Expected \".concat(e,' to be returned from the \"').concat(t,'\"')+\" function but got \".concat(n,\".\")}),TypeError);createErrorType(\"ERR_MISSING_ARGS\",(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++){t[n]=arguments[n]}if(o===undefined)o=r(167);o(t.length>0,\"At least one arg needs to be specified\");var i=\"The \";var a=t.length;t=t.map((function(e){return'\"'.concat(e,'\"')}));switch(a){case 1:i+=\"\".concat(t[0],\" argument\");break;case 2:i+=\"\".concat(t[0],\" and \").concat(t[1],\" arguments\");break;default:i+=t.slice(0,a-1).join(\", \");i+=\", and \".concat(t[a-1],\" arguments\");break}return\"\".concat(i,\" must be specified\")}),TypeError);e.exports.codes=n},176:function(e,t,r){\"use strict\";function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}function _iterableToArrayLimit(e,t){var r=[];var n=true;var o=false;var i=undefined;try{for(var a=e[Symbol.iterator](),c;!(n=(c=a.next()).done);n=true){r.push(c.value);if(t&&r.length===t)break}}catch(e){o=true;i=e}finally{try{if(!n&&a[\"return\"]!=null)a[\"return\"]()}finally{if(o)throw i}}return r}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _typeof(e){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(e){return typeof e}}else{_typeof=function _typeof(e){return e&&typeof Symbol===\"function\"&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e}}return _typeof(e)}var n=/a/g.flags!==undefined;var o=function arrayFromSet(e){var t=[];e.forEach((function(e){return t.push(e)}));return t};var i=function arrayFromMap(e){var t=[];e.forEach((function(e,r){return t.push([r,e])}));return t};var a=Object.is?Object.is:r(208);var c=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]};var u=Number.isNaN?Number.isNaN:r(718);function uncurryThis(e){return e.call.bind(e)}var f=uncurryThis(Object.prototype.hasOwnProperty);var s=uncurryThis(Object.prototype.propertyIsEnumerable);var l=uncurryThis(Object.prototype.toString);var p=r(177).types,y=p.isAnyArrayBuffer,g=p.isArrayBufferView,v=p.isDate,d=p.isMap,b=p.isRegExp,h=p.isSet,m=p.isNativeError,S=p.isBoxedPrimitive,A=p.isNumberObject,E=p.isStringObject,O=p.isBooleanObject,w=p.isBigIntObject,j=p.isSymbolObject,P=p.isFloat32Array,_=p.isFloat64Array;function isNonIndex(e){if(e.length===0||e.length>10)return true;for(var t=0;t<e.length;t++){var r=e.charCodeAt(t);if(r<48||r>57)return true}return e.length===10&&e>=Math.pow(2,32)}function getOwnNonIndexProperties(e){return Object.keys(e).filter(isNonIndex).concat(c(e).filter(Object.prototype.propertyIsEnumerable.bind(e)))}\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */function compare(e,t){if(e===t){return 0}var r=e.length;var n=t.length;for(var o=0,i=Math.min(r,n);o<i;++o){if(e[o]!==t[o]){r=e[o];n=t[o];break}}if(r<n){return-1}if(n<r){return 1}return 0}var x=undefined;var k=true;var I=false;var F=0;var T=1;var R=2;var N=3;function areSimilarRegExps(e,t){return n?e.source===t.source&&e.flags===t.flags:RegExp.prototype.toString.call(e)===RegExp.prototype.toString.call(t)}function areSimilarFloatArrays(e,t){if(e.byteLength!==t.byteLength){return false}for(var r=0;r<e.byteLength;r++){if(e[r]!==t[r]){return false}}return true}function areSimilarTypedArrays(e,t){if(e.byteLength!==t.byteLength){return false}return compare(new Uint8Array(e.buffer,e.byteOffset,e.byteLength),new Uint8Array(t.buffer,t.byteOffset,t.byteLength))===0}function areEqualArrayBuffers(e,t){return e.byteLength===t.byteLength&&compare(new Uint8Array(e),new Uint8Array(t))===0}function isEqualBoxedPrimitive(e,t){if(A(e)){return A(t)&&a(Number.prototype.valueOf.call(e),Number.prototype.valueOf.call(t))}if(E(e)){return E(t)&&String.prototype.valueOf.call(e)===String.prototype.valueOf.call(t)}if(O(e)){return O(t)&&Boolean.prototype.valueOf.call(e)===Boolean.prototype.valueOf.call(t)}if(w(e)){return w(t)&&BigInt.prototype.valueOf.call(e)===BigInt.prototype.valueOf.call(t)}return j(t)&&Symbol.prototype.valueOf.call(e)===Symbol.prototype.valueOf.call(t)}function innerDeepEqual(e,t,r,n){if(e===t){if(e!==0)return true;return r?a(e,t):true}if(r){if(_typeof(e)!==\"object\"){return typeof e===\"number\"&&u(e)&&u(t)}if(_typeof(t)!==\"object\"||e===null||t===null){return false}if(Object.getPrototypeOf(e)!==Object.getPrototypeOf(t)){return false}}else{if(e===null||_typeof(e)!==\"object\"){if(t===null||_typeof(t)!==\"object\"){return e==t}return false}if(t===null||_typeof(t)!==\"object\"){return false}}var o=l(e);var i=l(t);if(o!==i){return false}if(Array.isArray(e)){if(e.length!==t.length){return false}var c=getOwnNonIndexProperties(e,x);var f=getOwnNonIndexProperties(t,x);if(c.length!==f.length){return false}return keyCheck(e,t,r,n,T,c)}if(o===\"[object Object]\"){if(!d(e)&&d(t)||!h(e)&&h(t)){return false}}if(v(e)){if(!v(t)||Date.prototype.getTime.call(e)!==Date.prototype.getTime.call(t)){return false}}else if(b(e)){if(!b(t)||!areSimilarRegExps(e,t)){return false}}else if(m(e)||e instanceof Error){if(e.message!==t.message||e.name!==t.name){return false}}else if(g(e)){if(!r&&(P(e)||_(e))){if(!areSimilarFloatArrays(e,t)){return false}}else if(!areSimilarTypedArrays(e,t)){return false}var s=getOwnNonIndexProperties(e,x);var p=getOwnNonIndexProperties(t,x);if(s.length!==p.length){return false}return keyCheck(e,t,r,n,F,s)}else if(h(e)){if(!h(t)||e.size!==t.size){return false}return keyCheck(e,t,r,n,R)}else if(d(e)){if(!d(t)||e.size!==t.size){return false}return keyCheck(e,t,r,n,N)}else if(y(e)){if(!areEqualArrayBuffers(e,t)){return false}}else if(S(e)&&!isEqualBoxedPrimitive(e,t)){return false}return keyCheck(e,t,r,n,F)}function getEnumerables(e,t){return t.filter((function(t){return s(e,t)}))}function keyCheck(e,t,r,n,o,i){if(arguments.length===5){i=Object.keys(e);var a=Object.keys(t);if(i.length!==a.length){return false}}var u=0;for(;u<i.length;u++){if(!f(t,i[u])){return false}}if(r&&arguments.length===5){var l=c(e);if(l.length!==0){var p=0;for(u=0;u<l.length;u++){var y=l[u];if(s(e,y)){if(!s(t,y)){return false}i.push(y);p++}else if(s(t,y)){return false}}var g=c(t);if(l.length!==g.length&&getEnumerables(t,g).length!==p){return false}}else{var v=c(t);if(v.length!==0&&getEnumerables(t,v).length!==0){return false}}}if(i.length===0&&(o===F||o===T&&e.length===0||e.size===0)){return true}if(n===undefined){n={val1:new Map,val2:new Map,position:0}}else{var d=n.val1.get(e);if(d!==undefined){var b=n.val2.get(t);if(b!==undefined){return d===b}}n.position++}n.val1.set(e,n.position);n.val2.set(t,n.position);var h=objEquiv(e,t,r,i,n,o);n.val1.delete(e);n.val2.delete(t);return h}function setHasEqualElement(e,t,r,n){var i=o(e);for(var a=0;a<i.length;a++){var c=i[a];if(innerDeepEqual(t,c,r,n)){e.delete(c);return true}}return false}function findLooseMatchingPrimitives(e){switch(_typeof(e)){case\"undefined\":return null;case\"object\":return undefined;case\"symbol\":return false;case\"string\":e=+e;case\"number\":if(u(e)){return false}}return true}function setMightHaveLoosePrim(e,t,r){var n=findLooseMatchingPrimitives(r);if(n!=null)return n;return t.has(n)&&!e.has(n)}function mapMightHaveLoosePrim(e,t,r,n,o){var i=findLooseMatchingPrimitives(r);if(i!=null){return i}var a=t.get(i);if(a===undefined&&!t.has(i)||!innerDeepEqual(n,a,false,o)){return false}return!e.has(i)&&innerDeepEqual(n,a,false,o)}function setEquiv(e,t,r,n){var i=null;var a=o(e);for(var c=0;c<a.length;c++){var u=a[c];if(_typeof(u)===\"object\"&&u!==null){if(i===null){i=new Set}i.add(u)}else if(!t.has(u)){if(r)return false;if(!setMightHaveLoosePrim(e,t,u)){return false}if(i===null){i=new Set}i.add(u)}}if(i!==null){var f=o(t);for(var s=0;s<f.length;s++){var l=f[s];if(_typeof(l)===\"object\"&&l!==null){if(!setHasEqualElement(i,l,r,n))return false}else if(!r&&!e.has(l)&&!setHasEqualElement(i,l,r,n)){return false}}return i.size===0}return true}function mapHasEqualEntry(e,t,r,n,i,a){var c=o(e);for(var u=0;u<c.length;u++){var f=c[u];if(innerDeepEqual(r,f,i,a)&&innerDeepEqual(n,t.get(f),i,a)){e.delete(f);return true}}return false}function mapEquiv(e,t,r,n){var o=null;var a=i(e);for(var c=0;c<a.length;c++){var u=_slicedToArray(a[c],2),f=u[0],s=u[1];if(_typeof(f)===\"object\"&&f!==null){if(o===null){o=new Set}o.add(f)}else{var l=t.get(f);if(l===undefined&&!t.has(f)||!innerDeepEqual(s,l,r,n)){if(r)return false;if(!mapMightHaveLoosePrim(e,t,f,s,n))return false;if(o===null){o=new Set}o.add(f)}}}if(o!==null){var p=i(t);for(var y=0;y<p.length;y++){var g=_slicedToArray(p[y],2),f=g[0],v=g[1];if(_typeof(f)===\"object\"&&f!==null){if(!mapHasEqualEntry(o,e,f,v,r,n))return false}else if(!r&&(!e.has(f)||!innerDeepEqual(e.get(f),v,false,n))&&!mapHasEqualEntry(o,e,f,v,false,n)){return false}}return o.size===0}return true}function objEquiv(e,t,r,n,o,i){var a=0;if(i===R){if(!setEquiv(e,t,r,o)){return false}}else if(i===N){if(!mapEquiv(e,t,r,o)){return false}}else if(i===T){for(;a<e.length;a++){if(f(e,a)){if(!f(t,a)||!innerDeepEqual(e[a],t[a],r,o)){return false}}else if(f(t,a)){return false}else{var c=Object.keys(e);for(;a<c.length;a++){var u=c[a];if(!f(t,u)||!innerDeepEqual(e[u],t[u],r,o)){return false}}if(c.length!==Object.keys(t).length){return false}return true}}}for(a=0;a<n.length;a++){var s=n[a];if(!innerDeepEqual(e[s],t[s],r,o)){return false}}return true}function isDeepEqual(e,t){return innerDeepEqual(e,t,I)}function isDeepStrictEqual(e,t){return innerDeepEqual(e,t,k)}e.exports={isDeepEqual:isDeepEqual,isDeepStrictEqual:isDeepStrictEqual}},256:function(e,t,r){\"use strict\";var n=r(925);var o=r(139);var i=o(n(\"String.prototype.indexOf\"));e.exports=function callBoundIntrinsic(e,t){var r=n(e,!!t);if(typeof r===\"function\"&&i(e,\".prototype.\")>-1){return o(r)}return r}},139:function(e,t,r){\"use strict\";var n=r(174);var o=r(925);var i=o(\"%Function.prototype.apply%\");var a=o(\"%Function.prototype.call%\");var c=o(\"%Reflect.apply%\",true)||n.call(a,i);var u=o(\"%Object.getOwnPropertyDescriptor%\",true);var f=o(\"%Object.defineProperty%\",true);var s=o(\"%Math.max%\");if(f){try{f({},\"a\",{value:1})}catch(e){f=null}}e.exports=function callBind(e){var t=c(n,a,arguments);if(u&&f){var r=u(t,\"length\");if(r.configurable){f(t,\"length\",{value:1+s(0,e.length-(arguments.length-1))})}}return t};var l=function applyBind(){return c(n,i,arguments)};if(f){f(e.exports,\"apply\",{value:l})}else{e.exports.apply=l}},69:function(e,t,r){\"use strict\";var n=r(935);var o=typeof Symbol===\"function\"&&typeof Symbol(\"foo\")===\"symbol\";var i=Object.prototype.toString;var a=Array.prototype.concat;var c=Object.defineProperty;var isFunction=function(e){return typeof e===\"function\"&&i.call(e)===\"[object Function]\"};var arePropertyDescriptorsSupported=function(){var e={};try{c(e,\"x\",{enumerable:false,value:e});for(var t in e){return false}return e.x===e}catch(e){return false}};var u=c&&arePropertyDescriptorsSupported();var defineProperty=function(e,t,r,n){if(t in e&&(!isFunction(n)||!n())){return}if(u){c(e,t,{configurable:true,enumerable:false,value:r,writable:true})}else{e[t]=r}};var defineProperties=function(e,t){var r=arguments.length>2?arguments[2]:{};var i=n(t);if(o){i=a.call(i,Object.getOwnPropertySymbols(t))}for(var c=0;c<i.length;c+=1){defineProperty(e,i[c],t[i[c]],r[i[c]])}};defineProperties.supportsDescriptors=!!u;e.exports=defineProperties},604:function(e){\"use strict\";function assign(e,t){if(e===undefined||e===null){throw new TypeError(\"Cannot convert first argument to object\")}var r=Object(e);for(var n=1;n<arguments.length;n++){var o=arguments[n];if(o===undefined||o===null){continue}var i=Object.keys(Object(o));for(var a=0,c=i.length;a<c;a++){var u=i[a];var f=Object.getOwnPropertyDescriptor(o,u);if(f!==undefined&&f.enumerable){r[u]=o[u]}}}return r}function polyfill(){if(!Object.assign){Object.defineProperty(Object,\"assign\",{enumerable:false,configurable:true,writable:true,value:assign})}}e.exports={assign:assign,polyfill:polyfill}},144:function(e){var t=Object.prototype.hasOwnProperty;var r=Object.prototype.toString;e.exports=function forEach(e,n,o){if(r.call(n)!==\"[object Function]\"){throw new TypeError(\"iterator must be a function\")}var i=e.length;if(i===+i){for(var a=0;a<i;a++){n.call(o,e[a],a,e)}}else{for(var c in e){if(t.call(e,c)){n.call(o,e[c],c,e)}}}}},426:function(e){\"use strict\";var t=\"Function.prototype.bind called on incompatible \";var r=Array.prototype.slice;var n=Object.prototype.toString;var o=\"[object Function]\";e.exports=function bind(e){var i=this;if(typeof i!==\"function\"||n.call(i)!==o){throw new TypeError(t+i)}var a=r.call(arguments,1);var c;var binder=function(){if(this instanceof c){var t=i.apply(this,a.concat(r.call(arguments)));if(Object(t)===t){return t}return this}else{return i.apply(e,a.concat(r.call(arguments)))}};var u=Math.max(0,i.length-a.length);var f=[];for(var s=0;s<u;s++){f.push(\"$\"+s)}c=Function(\"binder\",\"return function (\"+f.join(\",\")+\"){ return binder.apply(this,arguments); }\")(binder);if(i.prototype){var l=function Empty(){};l.prototype=i.prototype;c.prototype=new l;l.prototype=null}return c}},174:function(e,t,r){\"use strict\";var n=r(426);e.exports=Function.prototype.bind||n},500:function(e,t,r){\"use strict\";var n;var o=SyntaxError;var i=Function;var a=TypeError;var getEvalledConstructor=function(e){try{return i('\"use strict\"; return ('+e+\").constructor;\")()}catch(e){}};var c=Object.getOwnPropertyDescriptor;if(c){try{c({},\"\")}catch(e){c=null}}var throwTypeError=function(){throw new a};var u=c?function(){try{arguments.callee;return throwTypeError}catch(e){try{return c(arguments,\"callee\").get}catch(e){return throwTypeError}}}():throwTypeError;var f=r(115)();var s=Object.getPrototypeOf||function(e){return e.__proto__};var l={};var p=typeof Uint8Array===\"undefined\"?n:s(Uint8Array);var y={\"%AggregateError%\":typeof AggregateError===\"undefined\"?n:AggregateError,\"%Array%\":Array,\"%ArrayBuffer%\":typeof ArrayBuffer===\"undefined\"?n:ArrayBuffer,\"%ArrayIteratorPrototype%\":f?s([][Symbol.iterator]()):n,\"%AsyncFromSyncIteratorPrototype%\":n,\"%AsyncFunction%\":l,\"%AsyncGenerator%\":l,\"%AsyncGeneratorFunction%\":l,\"%AsyncIteratorPrototype%\":l,\"%Atomics%\":typeof Atomics===\"undefined\"?n:Atomics,\"%BigInt%\":typeof BigInt===\"undefined\"?n:BigInt,\"%Boolean%\":Boolean,\"%DataView%\":typeof DataView===\"undefined\"?n:DataView,\"%Date%\":Date,\"%decodeURI%\":decodeURI,\"%decodeURIComponent%\":decodeURIComponent,\"%encodeURI%\":encodeURI,\"%encodeURIComponent%\":encodeURIComponent,\"%Error%\":Error,\"%eval%\":eval,\"%EvalError%\":EvalError,\"%Float32Array%\":typeof Float32Array===\"undefined\"?n:Float32Array,\"%Float64Array%\":typeof Float64Array===\"undefined\"?n:Float64Array,\"%FinalizationRegistry%\":typeof FinalizationRegistry===\"undefined\"?n:FinalizationRegistry,\"%Function%\":i,\"%GeneratorFunction%\":l,\"%Int8Array%\":typeof Int8Array===\"undefined\"?n:Int8Array,\"%Int16Array%\":typeof Int16Array===\"undefined\"?n:Int16Array,\"%Int32Array%\":typeof Int32Array===\"undefined\"?n:Int32Array,\"%isFinite%\":isFinite,\"%isNaN%\":isNaN,\"%IteratorPrototype%\":f?s(s([][Symbol.iterator]())):n,\"%JSON%\":typeof JSON===\"object\"?JSON:n,\"%Map%\":typeof Map===\"undefined\"?n:Map,\"%MapIteratorPrototype%\":typeof Map===\"undefined\"||!f?n:s((new Map)[Symbol.iterator]()),\"%Math%\":Math,\"%Number%\":Number,\"%Object%\":Object,\"%parseFloat%\":parseFloat,\"%parseInt%\":parseInt,\"%Promise%\":typeof Promise===\"undefined\"?n:Promise,\"%Proxy%\":typeof Proxy===\"undefined\"?n:Proxy,\"%RangeError%\":RangeError,\"%ReferenceError%\":ReferenceError,\"%Reflect%\":typeof Reflect===\"undefined\"?n:Reflect,\"%RegExp%\":RegExp,\"%Set%\":typeof Set===\"undefined\"?n:Set,\"%SetIteratorPrototype%\":typeof Set===\"undefined\"||!f?n:s((new Set)[Symbol.iterator]()),\"%SharedArrayBuffer%\":typeof SharedArrayBuffer===\"undefined\"?n:SharedArrayBuffer,\"%String%\":String,\"%StringIteratorPrototype%\":f?s(\"\"[Symbol.iterator]()):n,\"%Symbol%\":f?Symbol:n,\"%SyntaxError%\":o,\"%ThrowTypeError%\":u,\"%TypedArray%\":p,\"%TypeError%\":a,\"%Uint8Array%\":typeof Uint8Array===\"undefined\"?n:Uint8Array,\"%Uint8ClampedArray%\":typeof Uint8ClampedArray===\"undefined\"?n:Uint8ClampedArray,\"%Uint16Array%\":typeof Uint16Array===\"undefined\"?n:Uint16Array,\"%Uint32Array%\":typeof Uint32Array===\"undefined\"?n:Uint32Array,\"%URIError%\":URIError,\"%WeakMap%\":typeof WeakMap===\"undefined\"?n:WeakMap,\"%WeakRef%\":typeof WeakRef===\"undefined\"?n:WeakRef,\"%WeakSet%\":typeof WeakSet===\"undefined\"?n:WeakSet};var g=function doEval(e){var t;if(e===\"%AsyncFunction%\"){t=getEvalledConstructor(\"async function () {}\")}else if(e===\"%GeneratorFunction%\"){t=getEvalledConstructor(\"function* () {}\")}else if(e===\"%AsyncGeneratorFunction%\"){t=getEvalledConstructor(\"async function* () {}\")}else if(e===\"%AsyncGenerator%\"){var r=doEval(\"%AsyncGeneratorFunction%\");if(r){t=r.prototype}}else if(e===\"%AsyncIteratorPrototype%\"){var n=doEval(\"%AsyncGenerator%\");if(n){t=s(n.prototype)}}y[e]=t;return t};var v={\"%ArrayBufferPrototype%\":[\"ArrayBuffer\",\"prototype\"],\"%ArrayPrototype%\":[\"Array\",\"prototype\"],\"%ArrayProto_entries%\":[\"Array\",\"prototype\",\"entries\"],\"%ArrayProto_forEach%\":[\"Array\",\"prototype\",\"forEach\"],\"%ArrayProto_keys%\":[\"Array\",\"prototype\",\"keys\"],\"%ArrayProto_values%\":[\"Array\",\"prototype\",\"values\"],\"%AsyncFunctionPrototype%\":[\"AsyncFunction\",\"prototype\"],\"%AsyncGenerator%\":[\"AsyncGeneratorFunction\",\"prototype\"],\"%AsyncGeneratorPrototype%\":[\"AsyncGeneratorFunction\",\"prototype\",\"prototype\"],\"%BooleanPrototype%\":[\"Boolean\",\"prototype\"],\"%DataViewPrototype%\":[\"DataView\",\"prototype\"],\"%DatePrototype%\":[\"Date\",\"prototype\"],\"%ErrorPrototype%\":[\"Error\",\"prototype\"],\"%EvalErrorPrototype%\":[\"EvalError\",\"prototype\"],\"%Float32ArrayPrototype%\":[\"Float32Array\",\"prototype\"],\"%Float64ArrayPrototype%\":[\"Float64Array\",\"prototype\"],\"%FunctionPrototype%\":[\"Function\",\"prototype\"],\"%Generator%\":[\"GeneratorFunction\",\"prototype\"],\"%GeneratorPrototype%\":[\"GeneratorFunction\",\"prototype\",\"prototype\"],\"%Int8ArrayPrototype%\":[\"Int8Array\",\"prototype\"],\"%Int16ArrayPrototype%\":[\"Int16Array\",\"prototype\"],\"%Int32ArrayPrototype%\":[\"Int32Array\",\"prototype\"],\"%JSONParse%\":[\"JSON\",\"parse\"],\"%JSONStringify%\":[\"JSON\",\"stringify\"],\"%MapPrototype%\":[\"Map\",\"prototype\"],\"%NumberPrototype%\":[\"Number\",\"prototype\"],\"%ObjectPrototype%\":[\"Object\",\"prototype\"],\"%ObjProto_toString%\":[\"Object\",\"prototype\",\"toString\"],\"%ObjProto_valueOf%\":[\"Object\",\"prototype\",\"valueOf\"],\"%PromisePrototype%\":[\"Promise\",\"prototype\"],\"%PromiseProto_then%\":[\"Promise\",\"prototype\",\"then\"],\"%Promise_all%\":[\"Promise\",\"all\"],\"%Promise_reject%\":[\"Promise\",\"reject\"],\"%Promise_resolve%\":[\"Promise\",\"resolve\"],\"%RangeErrorPrototype%\":[\"RangeError\",\"prototype\"],\"%ReferenceErrorPrototype%\":[\"ReferenceError\",\"prototype\"],\"%RegExpPrototype%\":[\"RegExp\",\"prototype\"],\"%SetPrototype%\":[\"Set\",\"prototype\"],\"%SharedArrayBufferPrototype%\":[\"SharedArrayBuffer\",\"prototype\"],\"%StringPrototype%\":[\"String\",\"prototype\"],\"%SymbolPrototype%\":[\"Symbol\",\"prototype\"],\"%SyntaxErrorPrototype%\":[\"SyntaxError\",\"prototype\"],\"%TypedArrayPrototype%\":[\"TypedArray\",\"prototype\"],\"%TypeErrorPrototype%\":[\"TypeError\",\"prototype\"],\"%Uint8ArrayPrototype%\":[\"Uint8Array\",\"prototype\"],\"%Uint8ClampedArrayPrototype%\":[\"Uint8ClampedArray\",\"prototype\"],\"%Uint16ArrayPrototype%\":[\"Uint16Array\",\"prototype\"],\"%Uint32ArrayPrototype%\":[\"Uint32Array\",\"prototype\"],\"%URIErrorPrototype%\":[\"URIError\",\"prototype\"],\"%WeakMapPrototype%\":[\"WeakMap\",\"prototype\"],\"%WeakSetPrototype%\":[\"WeakSet\",\"prototype\"]};var d=r(174);var b=r(101);var h=d.call(Function.call,Array.prototype.concat);var m=d.call(Function.apply,Array.prototype.splice);var S=d.call(Function.call,String.prototype.replace);var A=d.call(Function.call,String.prototype.slice);var E=d.call(Function.call,RegExp.prototype.exec);var O=/[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;var w=/\\\\(\\\\)?/g;var j=function stringToPath(e){var t=A(e,0,1);var r=A(e,-1);if(t===\"%\"&&r!==\"%\"){throw new o(\"invalid intrinsic syntax, expected closing `%`\")}else if(r===\"%\"&&t!==\"%\"){throw new o(\"invalid intrinsic syntax, expected opening `%`\")}var n=[];S(e,O,(function(e,t,r,o){n[n.length]=r?S(o,w,\"$1\"):t||e}));return n};var P=function getBaseIntrinsic(e,t){var r=e;var n;if(b(v,r)){n=v[r];r=\"%\"+n[0]+\"%\"}if(b(y,r)){var i=y[r];if(i===l){i=g(r)}if(typeof i===\"undefined\"&&!t){throw new a(\"intrinsic \"+e+\" exists, but is not available. Please file an issue!\")}return{alias:n,name:r,value:i}}throw new o(\"intrinsic \"+e+\" does not exist!\")};e.exports=function GetIntrinsic(e,t){if(typeof e!==\"string\"||e.length===0){throw new a(\"intrinsic name must be a non-empty string\")}if(arguments.length>1&&typeof t!==\"boolean\"){throw new a('\"allowMissing\" argument must be a boolean')}if(E(/^%?[^%]*%?$/g,e)===null){throw new o(\"`%` may not be present anywhere but at the beginning and end of the intrinsic name\")}var r=j(e);var i=r.length>0?r[0]:\"\";var u=P(\"%\"+i+\"%\",t);var f=u.name;var s=u.value;var l=false;var p=u.alias;if(p){i=p[0];m(r,h([0,1],p))}for(var g=1,v=true;g<r.length;g+=1){var d=r[g];var S=A(d,0,1);var O=A(d,-1);if((S==='\"'||S===\"'\"||S===\"`\"||(O==='\"'||O===\"'\"||O===\"`\"))&&S!==O){throw new o(\"property names with quotes must have matching quotes\")}if(d===\"constructor\"||!v){l=true}i+=\".\"+d;f=\"%\"+i+\"%\";if(b(y,f)){s=y[f]}else if(s!=null){if(!(d in s)){if(!t){throw new a(\"base intrinsic for \"+e+\" exists, but the property is not available.\")}return void n}if(c&&g+1>=r.length){var w=c(s,d);v=!!w;if(v&&\"get\"in w&&!(\"originalValue\"in w.get)){s=w.get}else{s=s[d]}}else{v=b(s,d);s=s[d]}if(v&&!l){y[f]=s}}}return s}},925:function(e,t,r){\"use strict\";var n;var o=SyntaxError;var i=Function;var a=TypeError;var getEvalledConstructor=function(e){try{return i('\"use strict\"; return ('+e+\").constructor;\")()}catch(e){}};var c=Object.getOwnPropertyDescriptor;if(c){try{c({},\"\")}catch(e){c=null}}var throwTypeError=function(){throw new a};var u=c?function(){try{arguments.callee;return throwTypeError}catch(e){try{return c(arguments,\"callee\").get}catch(e){return throwTypeError}}}():throwTypeError;var f=r(115)();var s=r(504)();var l=Object.getPrototypeOf||(s?function(e){return e.__proto__}:null);var p={};var y=typeof Uint8Array===\"undefined\"||!l?n:l(Uint8Array);var g={\"%AggregateError%\":typeof AggregateError===\"undefined\"?n:AggregateError,\"%Array%\":Array,\"%ArrayBuffer%\":typeof ArrayBuffer===\"undefined\"?n:ArrayBuffer,\"%ArrayIteratorPrototype%\":f&&l?l([][Symbol.iterator]()):n,\"%AsyncFromSyncIteratorPrototype%\":n,\"%AsyncFunction%\":p,\"%AsyncGenerator%\":p,\"%AsyncGeneratorFunction%\":p,\"%AsyncIteratorPrototype%\":p,\"%Atomics%\":typeof Atomics===\"undefined\"?n:Atomics,\"%BigInt%\":typeof BigInt===\"undefined\"?n:BigInt,\"%BigInt64Array%\":typeof BigInt64Array===\"undefined\"?n:BigInt64Array,\"%BigUint64Array%\":typeof BigUint64Array===\"undefined\"?n:BigUint64Array,\"%Boolean%\":Boolean,\"%DataView%\":typeof DataView===\"undefined\"?n:DataView,\"%Date%\":Date,\"%decodeURI%\":decodeURI,\"%decodeURIComponent%\":decodeURIComponent,\"%encodeURI%\":encodeURI,\"%encodeURIComponent%\":encodeURIComponent,\"%Error%\":Error,\"%eval%\":eval,\"%EvalError%\":EvalError,\"%Float32Array%\":typeof Float32Array===\"undefined\"?n:Float32Array,\"%Float64Array%\":typeof Float64Array===\"undefined\"?n:Float64Array,\"%FinalizationRegistry%\":typeof FinalizationRegistry===\"undefined\"?n:FinalizationRegistry,\"%Function%\":i,\"%GeneratorFunction%\":p,\"%Int8Array%\":typeof Int8Array===\"undefined\"?n:Int8Array,\"%Int16Array%\":typeof Int16Array===\"undefined\"?n:Int16Array,\"%Int32Array%\":typeof Int32Array===\"undefined\"?n:Int32Array,\"%isFinite%\":isFinite,\"%isNaN%\":isNaN,\"%IteratorPrototype%\":f&&l?l(l([][Symbol.iterator]())):n,\"%JSON%\":typeof JSON===\"object\"?JSON:n,\"%Map%\":typeof Map===\"undefined\"?n:Map,\"%MapIteratorPrototype%\":typeof Map===\"undefined\"||!f||!l?n:l((new Map)[Symbol.iterator]()),\"%Math%\":Math,\"%Number%\":Number,\"%Object%\":Object,\"%parseFloat%\":parseFloat,\"%parseInt%\":parseInt,\"%Promise%\":typeof Promise===\"undefined\"?n:Promise,\"%Proxy%\":typeof Proxy===\"undefined\"?n:Proxy,\"%RangeError%\":RangeError,\"%ReferenceError%\":ReferenceError,\"%Reflect%\":typeof Reflect===\"undefined\"?n:Reflect,\"%RegExp%\":RegExp,\"%Set%\":typeof Set===\"undefined\"?n:Set,\"%SetIteratorPrototype%\":typeof Set===\"undefined\"||!f||!l?n:l((new Set)[Symbol.iterator]()),\"%SharedArrayBuffer%\":typeof SharedArrayBuffer===\"undefined\"?n:SharedArrayBuffer,\"%String%\":String,\"%StringIteratorPrototype%\":f&&l?l(\"\"[Symbol.iterator]()):n,\"%Symbol%\":f?Symbol:n,\"%SyntaxError%\":o,\"%ThrowTypeError%\":u,\"%TypedArray%\":y,\"%TypeError%\":a,\"%Uint8Array%\":typeof Uint8Array===\"undefined\"?n:Uint8Array,\"%Uint8ClampedArray%\":typeof Uint8ClampedArray===\"undefined\"?n:Uint8ClampedArray,\"%Uint16Array%\":typeof Uint16Array===\"undefined\"?n:Uint16Array,\"%Uint32Array%\":typeof Uint32Array===\"undefined\"?n:Uint32Array,\"%URIError%\":URIError,\"%WeakMap%\":typeof WeakMap===\"undefined\"?n:WeakMap,\"%WeakRef%\":typeof WeakRef===\"undefined\"?n:WeakRef,\"%WeakSet%\":typeof WeakSet===\"undefined\"?n:WeakSet};if(l){try{null.error}catch(e){var v=l(l(e));g[\"%Error.prototype%\"]=v}}var d=function doEval(e){var t;if(e===\"%AsyncFunction%\"){t=getEvalledConstructor(\"async function () {}\")}else if(e===\"%GeneratorFunction%\"){t=getEvalledConstructor(\"function* () {}\")}else if(e===\"%AsyncGeneratorFunction%\"){t=getEvalledConstructor(\"async function* () {}\")}else if(e===\"%AsyncGenerator%\"){var r=doEval(\"%AsyncGeneratorFunction%\");if(r){t=r.prototype}}else if(e===\"%AsyncIteratorPrototype%\"){var n=doEval(\"%AsyncGenerator%\");if(n&&l){t=l(n.prototype)}}g[e]=t;return t};var b={\"%ArrayBufferPrototype%\":[\"ArrayBuffer\",\"prototype\"],\"%ArrayPrototype%\":[\"Array\",\"prototype\"],\"%ArrayProto_entries%\":[\"Array\",\"prototype\",\"entries\"],\"%ArrayProto_forEach%\":[\"Array\",\"prototype\",\"forEach\"],\"%ArrayProto_keys%\":[\"Array\",\"prototype\",\"keys\"],\"%ArrayProto_values%\":[\"Array\",\"prototype\",\"values\"],\"%AsyncFunctionPrototype%\":[\"AsyncFunction\",\"prototype\"],\"%AsyncGenerator%\":[\"AsyncGeneratorFunction\",\"prototype\"],\"%AsyncGeneratorPrototype%\":[\"AsyncGeneratorFunction\",\"prototype\",\"prototype\"],\"%BooleanPrototype%\":[\"Boolean\",\"prototype\"],\"%DataViewPrototype%\":[\"DataView\",\"prototype\"],\"%DatePrototype%\":[\"Date\",\"prototype\"],\"%ErrorPrototype%\":[\"Error\",\"prototype\"],\"%EvalErrorPrototype%\":[\"EvalError\",\"prototype\"],\"%Float32ArrayPrototype%\":[\"Float32Array\",\"prototype\"],\"%Float64ArrayPrototype%\":[\"Float64Array\",\"prototype\"],\"%FunctionPrototype%\":[\"Function\",\"prototype\"],\"%Generator%\":[\"GeneratorFunction\",\"prototype\"],\"%GeneratorPrototype%\":[\"GeneratorFunction\",\"prototype\",\"prototype\"],\"%Int8ArrayPrototype%\":[\"Int8Array\",\"prototype\"],\"%Int16ArrayPrototype%\":[\"Int16Array\",\"prototype\"],\"%Int32ArrayPrototype%\":[\"Int32Array\",\"prototype\"],\"%JSONParse%\":[\"JSON\",\"parse\"],\"%JSONStringify%\":[\"JSON\",\"stringify\"],\"%MapPrototype%\":[\"Map\",\"prototype\"],\"%NumberPrototype%\":[\"Number\",\"prototype\"],\"%ObjectPrototype%\":[\"Object\",\"prototype\"],\"%ObjProto_toString%\":[\"Object\",\"prototype\",\"toString\"],\"%ObjProto_valueOf%\":[\"Object\",\"prototype\",\"valueOf\"],\"%PromisePrototype%\":[\"Promise\",\"prototype\"],\"%PromiseProto_then%\":[\"Promise\",\"prototype\",\"then\"],\"%Promise_all%\":[\"Promise\",\"all\"],\"%Promise_reject%\":[\"Promise\",\"reject\"],\"%Promise_resolve%\":[\"Promise\",\"resolve\"],\"%RangeErrorPrototype%\":[\"RangeError\",\"prototype\"],\"%ReferenceErrorPrototype%\":[\"ReferenceError\",\"prototype\"],\"%RegExpPrototype%\":[\"RegExp\",\"prototype\"],\"%SetPrototype%\":[\"Set\",\"prototype\"],\"%SharedArrayBufferPrototype%\":[\"SharedArrayBuffer\",\"prototype\"],\"%StringPrototype%\":[\"String\",\"prototype\"],\"%SymbolPrototype%\":[\"Symbol\",\"prototype\"],\"%SyntaxErrorPrototype%\":[\"SyntaxError\",\"prototype\"],\"%TypedArrayPrototype%\":[\"TypedArray\",\"prototype\"],\"%TypeErrorPrototype%\":[\"TypeError\",\"prototype\"],\"%Uint8ArrayPrototype%\":[\"Uint8Array\",\"prototype\"],\"%Uint8ClampedArrayPrototype%\":[\"Uint8ClampedArray\",\"prototype\"],\"%Uint16ArrayPrototype%\":[\"Uint16Array\",\"prototype\"],\"%Uint32ArrayPrototype%\":[\"Uint32Array\",\"prototype\"],\"%URIErrorPrototype%\":[\"URIError\",\"prototype\"],\"%WeakMapPrototype%\":[\"WeakMap\",\"prototype\"],\"%WeakSetPrototype%\":[\"WeakSet\",\"prototype\"]};var h=r(174);var m=r(101);var S=h.call(Function.call,Array.prototype.concat);var A=h.call(Function.apply,Array.prototype.splice);var E=h.call(Function.call,String.prototype.replace);var O=h.call(Function.call,String.prototype.slice);var w=h.call(Function.call,RegExp.prototype.exec);var j=/[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;var P=/\\\\(\\\\)?/g;var _=function stringToPath(e){var t=O(e,0,1);var r=O(e,-1);if(t===\"%\"&&r!==\"%\"){throw new o(\"invalid intrinsic syntax, expected closing `%`\")}else if(r===\"%\"&&t!==\"%\"){throw new o(\"invalid intrinsic syntax, expected opening `%`\")}var n=[];E(e,j,(function(e,t,r,o){n[n.length]=r?E(o,P,\"$1\"):t||e}));return n};var x=function getBaseIntrinsic(e,t){var r=e;var n;if(m(b,r)){n=b[r];r=\"%\"+n[0]+\"%\"}if(m(g,r)){var i=g[r];if(i===p){i=d(r)}if(typeof i===\"undefined\"&&!t){throw new a(\"intrinsic \"+e+\" exists, but is not available. Please file an issue!\")}return{alias:n,name:r,value:i}}throw new o(\"intrinsic \"+e+\" does not exist!\")};e.exports=function GetIntrinsic(e,t){if(typeof e!==\"string\"||e.length===0){throw new a(\"intrinsic name must be a non-empty string\")}if(arguments.length>1&&typeof t!==\"boolean\"){throw new a('\"allowMissing\" argument must be a boolean')}if(w(/^%?[^%]*%?$/,e)===null){throw new o(\"`%` may not be present anywhere but at the beginning and end of the intrinsic name\")}var r=_(e);var i=r.length>0?r[0]:\"\";var u=x(\"%\"+i+\"%\",t);var f=u.name;var s=u.value;var l=false;var p=u.alias;if(p){i=p[0];A(r,S([0,1],p))}for(var y=1,v=true;y<r.length;y+=1){var d=r[y];var b=O(d,0,1);var h=O(d,-1);if((b==='\"'||b===\"'\"||b===\"`\"||(h==='\"'||h===\"'\"||h===\"`\"))&&b!==h){throw new o(\"property names with quotes must have matching quotes\")}if(d===\"constructor\"||!v){l=true}i+=\".\"+d;f=\"%\"+i+\"%\";if(m(g,f)){s=g[f]}else if(s!=null){if(!(d in s)){if(!t){throw new a(\"base intrinsic for \"+e+\" exists, but the property is not available.\")}return void n}if(c&&y+1>=r.length){var E=c(s,d);v=!!E;if(v&&\"get\"in E&&!(\"originalValue\"in E.get)){s=E.get}else{s=s[d]}}else{v=m(s,d);s=s[d]}if(v&&!l){g[f]=s}}}return s}},504:function(e){\"use strict\";var t={foo:{}};var r=Object;e.exports=function hasProto(){return{__proto__:t}.foo===t.foo&&!({__proto__:null}instanceof r)}},942:function(e,t,r){\"use strict\";var n=typeof Symbol!==\"undefined\"&&Symbol;var o=r(773);e.exports=function hasNativeSymbols(){if(typeof n!==\"function\"){return false}if(typeof Symbol!==\"function\"){return false}if(typeof n(\"foo\")!==\"symbol\"){return false}if(typeof Symbol(\"bar\")!==\"symbol\"){return false}return o()}},773:function(e){\"use strict\";e.exports=function hasSymbols(){if(typeof Symbol!==\"function\"||typeof Object.getOwnPropertySymbols!==\"function\"){return false}if(typeof Symbol.iterator===\"symbol\"){return true}var e={};var t=Symbol(\"test\");var r=Object(t);if(typeof t===\"string\"){return false}if(Object.prototype.toString.call(t)!==\"[object Symbol]\"){return false}if(Object.prototype.toString.call(r)!==\"[object Symbol]\"){return false}var n=42;e[t]=n;for(t in e){return false}if(typeof Object.keys===\"function\"&&Object.keys(e).length!==0){return false}if(typeof Object.getOwnPropertyNames===\"function\"&&Object.getOwnPropertyNames(e).length!==0){return false}var o=Object.getOwnPropertySymbols(e);if(o.length!==1||o[0]!==t){return false}if(!Object.prototype.propertyIsEnumerable.call(e,t)){return false}if(typeof Object.getOwnPropertyDescriptor===\"function\"){var i=Object.getOwnPropertyDescriptor(e,t);if(i.value!==n||i.enumerable!==true){return false}}return true}},115:function(e,t,r){\"use strict\";var n=typeof Symbol!==\"undefined\"&&Symbol;var o=r(832);e.exports=function hasNativeSymbols(){if(typeof n!==\"function\"){return false}if(typeof Symbol!==\"function\"){return false}if(typeof n(\"foo\")!==\"symbol\"){return false}if(typeof Symbol(\"bar\")!==\"symbol\"){return false}return o()}},832:function(e){\"use strict\";e.exports=function hasSymbols(){if(typeof Symbol!==\"function\"||typeof Object.getOwnPropertySymbols!==\"function\"){return false}if(typeof Symbol.iterator===\"symbol\"){return true}var e={};var t=Symbol(\"test\");var r=Object(t);if(typeof t===\"string\"){return false}if(Object.prototype.toString.call(t)!==\"[object Symbol]\"){return false}if(Object.prototype.toString.call(r)!==\"[object Symbol]\"){return false}var n=42;e[t]=n;for(t in e){return false}if(typeof Object.keys===\"function\"&&Object.keys(e).length!==0){return false}if(typeof Object.getOwnPropertyNames===\"function\"&&Object.getOwnPropertyNames(e).length!==0){return false}var o=Object.getOwnPropertySymbols(e);if(o.length!==1||o[0]!==t){return false}if(!Object.prototype.propertyIsEnumerable.call(e,t)){return false}if(typeof Object.getOwnPropertyDescriptor===\"function\"){var i=Object.getOwnPropertyDescriptor(e,t);if(i.value!==n||i.enumerable!==true){return false}}return true}},101:function(e,t,r){\"use strict\";var n=r(174);e.exports=n.call(Function.call,Object.prototype.hasOwnProperty)},782:function(e){if(typeof Object.create===\"function\"){e.exports=function inherits(e,t){if(t){e.super_=t;e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:false,writable:true,configurable:true}})}}}else{e.exports=function inherits(e,t){if(t){e.super_=t;var TempCtor=function(){};TempCtor.prototype=t.prototype;e.prototype=new TempCtor;e.prototype.constructor=e}}}},157:function(e){\"use strict\";var t=typeof Symbol===\"function\"&&typeof Symbol.toStringTag===\"symbol\";var r=Object.prototype.toString;var n=function isArguments(e){if(t&&e&&typeof e===\"object\"&&Symbol.toStringTag in e){return false}return r.call(e)===\"[object Arguments]\"};var o=function isArguments(e){if(n(e)){return true}return e!==null&&typeof e===\"object\"&&typeof e.length===\"number\"&&e.length>=0&&r.call(e)!==\"[object Array]\"&&r.call(e.callee)===\"[object Function]\"};var i=function(){return n(arguments)}();n.isLegacyArguments=o;e.exports=i?n:o},391:function(e){\"use strict\";var t=Object.prototype.toString;var r=Function.prototype.toString;var n=/^\\s*(?:function)?\\*/;var o=typeof Symbol===\"function\"&&typeof Symbol.toStringTag===\"symbol\";var i=Object.getPrototypeOf;var getGeneratorFunc=function(){if(!o){return false}try{return Function(\"return function*() {}\")()}catch(e){}};var a=getGeneratorFunc();var c=a?i(a):{};e.exports=function isGeneratorFunction(e){if(typeof e!==\"function\"){return false}if(n.test(r.call(e))){return true}if(!o){var a=t.call(e);return a===\"[object GeneratorFunction]\"}return i(e)===c}},460:function(e){\"use strict\";e.exports=function isNaN(e){return e!==e}},718:function(e,t,r){\"use strict\";var n=r(139);var o=r(69);var i=r(460);var a=r(625);var c=r(171);var u=n(a(),Number);o(u,{getPolyfill:a,implementation:i,shim:c});e.exports=u},625:function(e,t,r){\"use strict\";var n=r(460);e.exports=function getPolyfill(){if(Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN(\"a\")){return Number.isNaN}return n}},171:function(e,t,r){\"use strict\";var n=r(69);var o=r(625);e.exports=function shimNumberIsNaN(){var e=o();n(Number,{isNaN:e},{isNaN:function testIsNaN(){return Number.isNaN!==e}});return e}},994:function(e,t,r){\"use strict\";var n=r(144);var o=r(349);var i=r(256);var a=i(\"Object.prototype.toString\");var c=r(942)();var u=c&&typeof Symbol.toStringTag===\"symbol\";var f=o();var s=i(\"Array.prototype.indexOf\",true)||function indexOf(e,t){for(var r=0;r<e.length;r+=1){if(e[r]===t){return r}}return-1};var l=i(\"String.prototype.slice\");var p={};var y=r(24);var g=Object.getPrototypeOf;if(u&&y&&g){n(f,(function(e){var t=new __webpack_require__.g[e];if(!(Symbol.toStringTag in t)){throw new EvalError(\"this engine has support for Symbol.toStringTag, but \"+e+\" does not have the property! Please report this.\")}var r=g(t);var n=y(r,Symbol.toStringTag);if(!n){var o=g(r);n=y(o,Symbol.toStringTag)}p[e]=n.get}))}var v=function tryAllTypedArrays(e){var t=false;n(p,(function(r,n){if(!t){try{t=r.call(e)===n}catch(e){}}}));return t};e.exports=function isTypedArray(e){if(!e||typeof e!==\"object\"){return false}if(!u){var t=l(a(e),8,-1);return s(f,t)>-1}if(!y){return false}return v(e)}},208:function(e){\"use strict\";var numberIsNaN=function(e){return e!==e};e.exports=function is(e,t){if(e===0&&t===0){return 1/e===1/t}if(e===t){return true}if(numberIsNaN(e)&&numberIsNaN(t)){return true}return false}},579:function(e,t,r){\"use strict\";var n;if(!Object.keys){var o=Object.prototype.hasOwnProperty;var i=Object.prototype.toString;var a=r(412);var c=Object.prototype.propertyIsEnumerable;var u=!c.call({toString:null},\"toString\");var f=c.call((function(){}),\"prototype\");var s=[\"toString\",\"toLocaleString\",\"valueOf\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"constructor\"];var equalsConstructorPrototype=function(e){var t=e.constructor;return t&&t.prototype===e};var l={$applicationCache:true,$console:true,$external:true,$frame:true,$frameElement:true,$frames:true,$innerHeight:true,$innerWidth:true,$onmozfullscreenchange:true,$onmozfullscreenerror:true,$outerHeight:true,$outerWidth:true,$pageXOffset:true,$pageYOffset:true,$parent:true,$scrollLeft:true,$scrollTop:true,$scrollX:true,$scrollY:true,$self:true,$webkitIndexedDB:true,$webkitStorageInfo:true,$window:true};var p=function(){if(typeof window===\"undefined\"){return false}for(var e in window){try{if(!l[\"$\"+e]&&o.call(window,e)&&window[e]!==null&&typeof window[e]===\"object\"){try{equalsConstructorPrototype(window[e])}catch(e){return true}}}catch(e){return true}}return false}();var equalsConstructorPrototypeIfNotBuggy=function(e){if(typeof window===\"undefined\"||!p){return equalsConstructorPrototype(e)}try{return equalsConstructorPrototype(e)}catch(e){return false}};n=function keys(e){var t=e!==null&&typeof e===\"object\";var r=i.call(e)===\"[object Function]\";var n=a(e);var c=t&&i.call(e)===\"[object String]\";var l=[];if(!t&&!r&&!n){throw new TypeError(\"Object.keys called on a non-object\")}var p=f&&r;if(c&&e.length>0&&!o.call(e,0)){for(var y=0;y<e.length;++y){l.push(String(y))}}if(n&&e.length>0){for(var g=0;g<e.length;++g){l.push(String(g))}}else{for(var v in e){if(!(p&&v===\"prototype\")&&o.call(e,v)){l.push(String(v))}}}if(u){var d=equalsConstructorPrototypeIfNotBuggy(e);for(var b=0;b<s.length;++b){if(!(d&&s[b]===\"constructor\")&&o.call(e,s[b])){l.push(s[b])}}}return l}}e.exports=n},935:function(e,t,r){\"use strict\";var n=Array.prototype.slice;var o=r(412);var i=Object.keys;var a=i?function keys(e){return i(e)}:r(579);var c=Object.keys;a.shim=function shimObjectKeys(){if(Object.keys){var e=function(){var e=Object.keys(arguments);return e&&e.length===arguments.length}(1,2);if(!e){Object.keys=function keys(e){if(o(e)){return c(n.call(e))}return c(e)}}}else{Object.keys=a}return Object.keys||a};e.exports=a},412:function(e){\"use strict\";var t=Object.prototype.toString;e.exports=function isArguments(e){var r=t.call(e);var n=r===\"[object Arguments]\";if(!n){n=r!==\"[object Array]\"&&e!==null&&typeof e===\"object\"&&typeof e.length===\"number\"&&e.length>=0&&t.call(e.callee)===\"[object Function]\"}return n}},369:function(e){e.exports=function isBuffer(e){return e instanceof Buffer}},584:function(e,t,r){\"use strict\";var n=r(157);var o=r(391);var i=r(490);var a=r(994);function uncurryThis(e){return e.call.bind(e)}var c=typeof BigInt!==\"undefined\";var u=typeof Symbol!==\"undefined\";var f=uncurryThis(Object.prototype.toString);var s=uncurryThis(Number.prototype.valueOf);var l=uncurryThis(String.prototype.valueOf);var p=uncurryThis(Boolean.prototype.valueOf);if(c){var y=uncurryThis(BigInt.prototype.valueOf)}if(u){var g=uncurryThis(Symbol.prototype.valueOf)}function checkBoxedPrimitive(e,t){if(typeof e!==\"object\"){return false}try{t(e);return true}catch(e){return false}}t.isArgumentsObject=n;t.isGeneratorFunction=o;t.isTypedArray=a;function isPromise(e){return typeof Promise!==\"undefined\"&&e instanceof Promise||e!==null&&typeof e===\"object\"&&typeof e.then===\"function\"&&typeof e.catch===\"function\"}t.isPromise=isPromise;function isArrayBufferView(e){if(typeof ArrayBuffer!==\"undefined\"&&ArrayBuffer.isView){return ArrayBuffer.isView(e)}return a(e)||isDataView(e)}t.isArrayBufferView=isArrayBufferView;function isUint8Array(e){return i(e)===\"Uint8Array\"}t.isUint8Array=isUint8Array;function isUint8ClampedArray(e){return i(e)===\"Uint8ClampedArray\"}t.isUint8ClampedArray=isUint8ClampedArray;function isUint16Array(e){return i(e)===\"Uint16Array\"}t.isUint16Array=isUint16Array;function isUint32Array(e){return i(e)===\"Uint32Array\"}t.isUint32Array=isUint32Array;function isInt8Array(e){return i(e)===\"Int8Array\"}t.isInt8Array=isInt8Array;function isInt16Array(e){return i(e)===\"Int16Array\"}t.isInt16Array=isInt16Array;function isInt32Array(e){return i(e)===\"Int32Array\"}t.isInt32Array=isInt32Array;function isFloat32Array(e){return i(e)===\"Float32Array\"}t.isFloat32Array=isFloat32Array;function isFloat64Array(e){return i(e)===\"Float64Array\"}t.isFloat64Array=isFloat64Array;function isBigInt64Array(e){return i(e)===\"BigInt64Array\"}t.isBigInt64Array=isBigInt64Array;function isBigUint64Array(e){return i(e)===\"BigUint64Array\"}t.isBigUint64Array=isBigUint64Array;function isMapToString(e){return f(e)===\"[object Map]\"}isMapToString.working=typeof Map!==\"undefined\"&&isMapToString(new Map);function isMap(e){if(typeof Map===\"undefined\"){return false}return isMapToString.working?isMapToString(e):e instanceof Map}t.isMap=isMap;function isSetToString(e){return f(e)===\"[object Set]\"}isSetToString.working=typeof Set!==\"undefined\"&&isSetToString(new Set);function isSet(e){if(typeof Set===\"undefined\"){return false}return isSetToString.working?isSetToString(e):e instanceof Set}t.isSet=isSet;function isWeakMapToString(e){return f(e)===\"[object WeakMap]\"}isWeakMapToString.working=typeof WeakMap!==\"undefined\"&&isWeakMapToString(new WeakMap);function isWeakMap(e){if(typeof WeakMap===\"undefined\"){return false}return isWeakMapToString.working?isWeakMapToString(e):e instanceof WeakMap}t.isWeakMap=isWeakMap;function isWeakSetToString(e){return f(e)===\"[object WeakSet]\"}isWeakSetToString.working=typeof WeakSet!==\"undefined\"&&isWeakSetToString(new WeakSet);function isWeakSet(e){return isWeakSetToString(e)}t.isWeakSet=isWeakSet;function isArrayBufferToString(e){return f(e)===\"[object ArrayBuffer]\"}isArrayBufferToString.working=typeof ArrayBuffer!==\"undefined\"&&isArrayBufferToString(new ArrayBuffer);function isArrayBuffer(e){if(typeof ArrayBuffer===\"undefined\"){return false}return isArrayBufferToString.working?isArrayBufferToString(e):e instanceof ArrayBuffer}t.isArrayBuffer=isArrayBuffer;function isDataViewToString(e){return f(e)===\"[object DataView]\"}isDataViewToString.working=typeof ArrayBuffer!==\"undefined\"&&typeof DataView!==\"undefined\"&&isDataViewToString(new DataView(new ArrayBuffer(1),0,1));function isDataView(e){if(typeof DataView===\"undefined\"){return false}return isDataViewToString.working?isDataViewToString(e):e instanceof DataView}t.isDataView=isDataView;var v=typeof SharedArrayBuffer!==\"undefined\"?SharedArrayBuffer:undefined;function isSharedArrayBufferToString(e){return f(e)===\"[object SharedArrayBuffer]\"}function isSharedArrayBuffer(e){if(typeof v===\"undefined\"){return false}if(typeof isSharedArrayBufferToString.working===\"undefined\"){isSharedArrayBufferToString.working=isSharedArrayBufferToString(new v)}return isSharedArrayBufferToString.working?isSharedArrayBufferToString(e):e instanceof v}t.isSharedArrayBuffer=isSharedArrayBuffer;function isAsyncFunction(e){return f(e)===\"[object AsyncFunction]\"}t.isAsyncFunction=isAsyncFunction;function isMapIterator(e){return f(e)===\"[object Map Iterator]\"}t.isMapIterator=isMapIterator;function isSetIterator(e){return f(e)===\"[object Set Iterator]\"}t.isSetIterator=isSetIterator;function isGeneratorObject(e){return f(e)===\"[object Generator]\"}t.isGeneratorObject=isGeneratorObject;function isWebAssemblyCompiledModule(e){return f(e)===\"[object WebAssembly.Module]\"}t.isWebAssemblyCompiledModule=isWebAssemblyCompiledModule;function isNumberObject(e){return checkBoxedPrimitive(e,s)}t.isNumberObject=isNumberObject;function isStringObject(e){return checkBoxedPrimitive(e,l)}t.isStringObject=isStringObject;function isBooleanObject(e){return checkBoxedPrimitive(e,p)}t.isBooleanObject=isBooleanObject;function isBigIntObject(e){return c&&checkBoxedPrimitive(e,y)}t.isBigIntObject=isBigIntObject;function isSymbolObject(e){return u&&checkBoxedPrimitive(e,g)}t.isSymbolObject=isSymbolObject;function isBoxedPrimitive(e){return isNumberObject(e)||isStringObject(e)||isBooleanObject(e)||isBigIntObject(e)||isSymbolObject(e)}t.isBoxedPrimitive=isBoxedPrimitive;function isAnyArrayBuffer(e){return typeof Uint8Array!==\"undefined\"&&(isArrayBuffer(e)||isSharedArrayBuffer(e))}t.isAnyArrayBuffer=isAnyArrayBuffer;[\"isProxy\",\"isExternal\",\"isModuleNamespaceObject\"].forEach((function(e){Object.defineProperty(t,e,{enumerable:false,value:function(){throw new Error(e+\" is not supported in userland\")}})}))},177:function(e,t,r){var n=Object.getOwnPropertyDescriptors||function getOwnPropertyDescriptors(e){var t=Object.keys(e);var r={};for(var n=0;n<t.length;n++){r[t[n]]=Object.getOwnPropertyDescriptor(e,t[n])}return r};var o=/%[sdj%]/g;t.format=function(e){if(!isString(e)){var t=[];for(var r=0;r<arguments.length;r++){t.push(inspect(arguments[r]))}return t.join(\" \")}var r=1;var n=arguments;var i=n.length;var a=String(e).replace(o,(function(e){if(e===\"%%\")return\"%\";if(r>=i)return e;switch(e){case\"%s\":return String(n[r++]);case\"%d\":return Number(n[r++]);case\"%j\":try{return JSON.stringify(n[r++])}catch(e){return\"[Circular]\"}default:return e}}));for(var c=n[r];r<i;c=n[++r]){if(isNull(c)||!isObject(c)){a+=\" \"+c}else{a+=\" \"+inspect(c)}}return a};t.deprecate=function(e,r){if(typeof process!==\"undefined\"&&process.noDeprecation===true){return e}if(typeof process===\"undefined\"){return function(){return t.deprecate(e,r).apply(this,arguments)}}var n=false;function deprecated(){if(!n){if(process.throwDeprecation){throw new Error(r)}else if(process.traceDeprecation){console.trace(r)}else{console.error(r)}n=true}return e.apply(this,arguments)}return deprecated};var i={};var a=/^$/;if(process.env.NODE_DEBUG){var c=process.env.NODE_DEBUG;c=c.replace(/[|\\\\{}()[\\]^$+?.]/g,\"\\\\$&\").replace(/\\*/g,\".*\").replace(/,/g,\"$|^\").toUpperCase();a=new RegExp(\"^\"+c+\"$\",\"i\")}t.debuglog=function(e){e=e.toUpperCase();if(!i[e]){if(a.test(e)){var r=process.pid;i[e]=function(){var n=t.format.apply(t,arguments);console.error(\"%s %d: %s\",e,r,n)}}else{i[e]=function(){}}}return i[e]};function inspect(e,r){var n={seen:[],stylize:stylizeNoColor};if(arguments.length>=3)n.depth=arguments[2];if(arguments.length>=4)n.colors=arguments[3];if(isBoolean(r)){n.showHidden=r}else if(r){t._extend(n,r)}if(isUndefined(n.showHidden))n.showHidden=false;if(isUndefined(n.depth))n.depth=2;if(isUndefined(n.colors))n.colors=false;if(isUndefined(n.customInspect))n.customInspect=true;if(n.colors)n.stylize=stylizeWithColor;return formatValue(n,e,n.depth)}t.inspect=inspect;inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]};inspect.styles={special:\"cyan\",number:\"yellow\",boolean:\"yellow\",undefined:\"grey\",null:\"bold\",string:\"green\",date:\"magenta\",regexp:\"red\"};function stylizeWithColor(e,t){var r=inspect.styles[t];if(r){return\"\u001b[\"+inspect.colors[r][0]+\"m\"+e+\"\u001b[\"+inspect.colors[r][1]+\"m\"}else{return e}}function stylizeNoColor(e,t){return e}function arrayToHash(e){var t={};e.forEach((function(e,r){t[e]=true}));return t}function formatValue(e,r,n){if(e.customInspect&&r&&isFunction(r.inspect)&&r.inspect!==t.inspect&&!(r.constructor&&r.constructor.prototype===r)){var o=r.inspect(n,e);if(!isString(o)){o=formatValue(e,o,n)}return o}var i=formatPrimitive(e,r);if(i){return i}var a=Object.keys(r);var c=arrayToHash(a);if(e.showHidden){a=Object.getOwnPropertyNames(r)}if(isError(r)&&(a.indexOf(\"message\")>=0||a.indexOf(\"description\")>=0)){return formatError(r)}if(a.length===0){if(isFunction(r)){var u=r.name?\": \"+r.name:\"\";return e.stylize(\"[Function\"+u+\"]\",\"special\")}if(isRegExp(r)){return e.stylize(RegExp.prototype.toString.call(r),\"regexp\")}if(isDate(r)){return e.stylize(Date.prototype.toString.call(r),\"date\")}if(isError(r)){return formatError(r)}}var f=\"\",s=false,l=[\"{\",\"}\"];if(isArray(r)){s=true;l=[\"[\",\"]\"]}if(isFunction(r)){var p=r.name?\": \"+r.name:\"\";f=\" [Function\"+p+\"]\"}if(isRegExp(r)){f=\" \"+RegExp.prototype.toString.call(r)}if(isDate(r)){f=\" \"+Date.prototype.toUTCString.call(r)}if(isError(r)){f=\" \"+formatError(r)}if(a.length===0&&(!s||r.length==0)){return l[0]+f+l[1]}if(n<0){if(isRegExp(r)){return e.stylize(RegExp.prototype.toString.call(r),\"regexp\")}else{return e.stylize(\"[Object]\",\"special\")}}e.seen.push(r);var y;if(s){y=formatArray(e,r,n,c,a)}else{y=a.map((function(t){return formatProperty(e,r,n,c,t,s)}))}e.seen.pop();return reduceToSingleString(y,f,l)}function formatPrimitive(e,t){if(isUndefined(t))return e.stylize(\"undefined\",\"undefined\");if(isString(t)){var r=\"'\"+JSON.stringify(t).replace(/^\"|\"$/g,\"\").replace(/'/g,\"\\\\'\").replace(/\\\\\"/g,'\"')+\"'\";return e.stylize(r,\"string\")}if(isNumber(t))return e.stylize(\"\"+t,\"number\");if(isBoolean(t))return e.stylize(\"\"+t,\"boolean\");if(isNull(t))return e.stylize(\"null\",\"null\")}function formatError(e){return\"[\"+Error.prototype.toString.call(e)+\"]\"}function formatArray(e,t,r,n,o){var i=[];for(var a=0,c=t.length;a<c;++a){if(hasOwnProperty(t,String(a))){i.push(formatProperty(e,t,r,n,String(a),true))}else{i.push(\"\")}}o.forEach((function(o){if(!o.match(/^\\d+$/)){i.push(formatProperty(e,t,r,n,o,true))}}));return i}function formatProperty(e,t,r,n,o,i){var a,c,u;u=Object.getOwnPropertyDescriptor(t,o)||{value:t[o]};if(u.get){if(u.set){c=e.stylize(\"[Getter/Setter]\",\"special\")}else{c=e.stylize(\"[Getter]\",\"special\")}}else{if(u.set){c=e.stylize(\"[Setter]\",\"special\")}}if(!hasOwnProperty(n,o)){a=\"[\"+o+\"]\"}if(!c){if(e.seen.indexOf(u.value)<0){if(isNull(r)){c=formatValue(e,u.value,null)}else{c=formatValue(e,u.value,r-1)}if(c.indexOf(\"\\n\")>-1){if(i){c=c.split(\"\\n\").map((function(e){return\"  \"+e})).join(\"\\n\").substr(2)}else{c=\"\\n\"+c.split(\"\\n\").map((function(e){return\"   \"+e})).join(\"\\n\")}}}else{c=e.stylize(\"[Circular]\",\"special\")}}if(isUndefined(a)){if(i&&o.match(/^\\d+$/)){return c}a=JSON.stringify(\"\"+o);if(a.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)){a=a.substr(1,a.length-2);a=e.stylize(a,\"name\")}else{a=a.replace(/'/g,\"\\\\'\").replace(/\\\\\"/g,'\"').replace(/(^\"|\"$)/g,\"'\");a=e.stylize(a,\"string\")}}return a+\": \"+c}function reduceToSingleString(e,t,r){var n=0;var o=e.reduce((function(e,t){n++;if(t.indexOf(\"\\n\")>=0)n++;return e+t.replace(/\\u001b\\[\\d\\d?m/g,\"\").length+1}),0);if(o>60){return r[0]+(t===\"\"?\"\":t+\"\\n \")+\" \"+e.join(\",\\n  \")+\" \"+r[1]}return r[0]+t+\" \"+e.join(\", \")+\" \"+r[1]}t.types=r(584);function isArray(e){return Array.isArray(e)}t.isArray=isArray;function isBoolean(e){return typeof e===\"boolean\"}t.isBoolean=isBoolean;function isNull(e){return e===null}t.isNull=isNull;function isNullOrUndefined(e){return e==null}t.isNullOrUndefined=isNullOrUndefined;function isNumber(e){return typeof e===\"number\"}t.isNumber=isNumber;function isString(e){return typeof e===\"string\"}t.isString=isString;function isSymbol(e){return typeof e===\"symbol\"}t.isSymbol=isSymbol;function isUndefined(e){return e===void 0}t.isUndefined=isUndefined;function isRegExp(e){return isObject(e)&&objectToString(e)===\"[object RegExp]\"}t.isRegExp=isRegExp;t.types.isRegExp=isRegExp;function isObject(e){return typeof e===\"object\"&&e!==null}t.isObject=isObject;function isDate(e){return isObject(e)&&objectToString(e)===\"[object Date]\"}t.isDate=isDate;t.types.isDate=isDate;function isError(e){return isObject(e)&&(objectToString(e)===\"[object Error]\"||e instanceof Error)}t.isError=isError;t.types.isNativeError=isError;function isFunction(e){return typeof e===\"function\"}t.isFunction=isFunction;function isPrimitive(e){return e===null||typeof e===\"boolean\"||typeof e===\"number\"||typeof e===\"string\"||typeof e===\"symbol\"||typeof e===\"undefined\"}t.isPrimitive=isPrimitive;t.isBuffer=r(369);function objectToString(e){return Object.prototype.toString.call(e)}function pad(e){return e<10?\"0\"+e.toString(10):e.toString(10)}var u=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];function timestamp(){var e=new Date;var t=[pad(e.getHours()),pad(e.getMinutes()),pad(e.getSeconds())].join(\":\");return[e.getDate(),u[e.getMonth()],t].join(\" \")}t.log=function(){console.log(\"%s - %s\",timestamp(),t.format.apply(t,arguments))};t.inherits=r(782);t._extend=function(e,t){if(!t||!isObject(t))return e;var r=Object.keys(t);var n=r.length;while(n--){e[r[n]]=t[r[n]]}return e};function hasOwnProperty(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var f=typeof Symbol!==\"undefined\"?Symbol(\"util.promisify.custom\"):undefined;t.promisify=function promisify(e){if(typeof e!==\"function\")throw new TypeError('The \"original\" argument must be of type Function');if(f&&e[f]){var t=e[f];if(typeof t!==\"function\"){throw new TypeError('The \"util.promisify.custom\" argument must be of type Function')}Object.defineProperty(t,f,{value:t,enumerable:false,writable:false,configurable:true});return t}function t(){var t,r;var n=new Promise((function(e,n){t=e;r=n}));var o=[];for(var i=0;i<arguments.length;i++){o.push(arguments[i])}o.push((function(e,n){if(e){r(e)}else{t(n)}}));try{e.apply(this,o)}catch(e){r(e)}return n}Object.setPrototypeOf(t,Object.getPrototypeOf(e));if(f)Object.defineProperty(t,f,{value:t,enumerable:false,writable:false,configurable:true});return Object.defineProperties(t,n(e))};t.promisify.custom=f;function callbackifyOnRejected(e,t){if(!e){var r=new Error(\"Promise was rejected with a falsy value\");r.reason=e;e=r}return t(e)}function callbackify(e){if(typeof e!==\"function\"){throw new TypeError('The \"original\" argument must be of type Function')}function callbackified(){var t=[];for(var r=0;r<arguments.length;r++){t.push(arguments[r])}var n=t.pop();if(typeof n!==\"function\"){throw new TypeError(\"The last argument must be of type Function\")}var o=this;var cb=function(){return n.apply(o,arguments)};e.apply(this,t).then((function(e){process.nextTick(cb.bind(null,null,e))}),(function(e){process.nextTick(callbackifyOnRejected.bind(null,e,cb))}))}Object.setPrototypeOf(callbackified,Object.getPrototypeOf(e));Object.defineProperties(callbackified,n(e));return callbackified}t.callbackify=callbackify},490:function(e,t,r){\"use strict\";var n=r(144);var o=r(349);var i=r(256);var a=i(\"Object.prototype.toString\");var c=r(942)();var u=c&&typeof Symbol.toStringTag===\"symbol\";var f=o();var s=i(\"String.prototype.slice\");var l={};var p=r(24);var y=Object.getPrototypeOf;if(u&&p&&y){n(f,(function(e){if(typeof __webpack_require__.g[e]===\"function\"){var t=new __webpack_require__.g[e];if(!(Symbol.toStringTag in t)){throw new EvalError(\"this engine has support for Symbol.toStringTag, but \"+e+\" does not have the property! Please report this.\")}var r=y(t);var n=p(r,Symbol.toStringTag);if(!n){var o=y(r);n=p(o,Symbol.toStringTag)}l[e]=n.get}}))}var g=function tryAllTypedArrays(e){var t=false;n(l,(function(r,n){if(!t){try{var o=r.call(e);if(o===n){t=o}}catch(e){}}}));return t};var v=r(994);e.exports=function whichTypedArray(e){if(!v(e)){return false}if(!u){return s(a(e),8,-1)}return g(e)}},349:function(e,t,r){\"use strict\";var n=r(992);e.exports=function availableTypedArrays(){return n([\"BigInt64Array\",\"BigUint64Array\",\"Float32Array\",\"Float64Array\",\"Int16Array\",\"Int32Array\",\"Int8Array\",\"Uint16Array\",\"Uint32Array\",\"Uint8Array\",\"Uint8ClampedArray\"],(function(e){return typeof __webpack_require__.g[e]===\"function\"}))}},24:function(e,t,r){\"use strict\";var n=r(500);var o=n(\"%Object.getOwnPropertyDescriptor%\",true);if(o){try{o([],\"length\")}catch(e){o=null}}e.exports=o}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var o=t[r]={exports:{}};var i=true;try{e[r](o,o.exports,__nccwpck_require__);i=false}finally{if(i)delete t[r]}return o.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(167);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/assert/assert.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/browserify-zlib/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/browserify-zlib/index.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n(function(){\"use strict\";var e={742:function(e,t,i){var a=i(491);var r=i(562);var n=i(450);var s=i(324);var l=i(320);for(var f in l){t[f]=l[f]}t.NONE=0;t.DEFLATE=1;t.INFLATE=2;t.GZIP=3;t.GUNZIP=4;t.DEFLATERAW=5;t.INFLATERAW=6;t.UNZIP=7;var o=31;var h=139;function Zlib(e){if(typeof e!==\"number\"||e<t.DEFLATE||e>t.UNZIP){throw new TypeError(\"Bad argument\")}this.dictionary=null;this.err=0;this.flush=0;this.init_done=false;this.level=0;this.memLevel=0;this.mode=e;this.strategy=0;this.windowBits=0;this.write_in_progress=false;this.pending_close=false;this.gzip_id_bytes_read=0}Zlib.prototype.close=function(){if(this.write_in_progress){this.pending_close=true;return}this.pending_close=false;a(this.init_done,\"close before init\");a(this.mode<=t.UNZIP);if(this.mode===t.DEFLATE||this.mode===t.GZIP||this.mode===t.DEFLATERAW){n.deflateEnd(this.strm)}else if(this.mode===t.INFLATE||this.mode===t.GUNZIP||this.mode===t.INFLATERAW||this.mode===t.UNZIP){s.inflateEnd(this.strm)}this.mode=t.NONE;this.dictionary=null};Zlib.prototype.write=function(e,t,i,a,r,n,s){return this._write(true,e,t,i,a,r,n,s)};Zlib.prototype.writeSync=function(e,t,i,a,r,n,s){return this._write(false,e,t,i,a,r,n,s)};Zlib.prototype._write=function(e,i,r,n,s,l,f,o){a.equal(arguments.length,8);a(this.init_done,\"write before init\");a(this.mode!==t.NONE,\"already finalized\");a.equal(false,this.write_in_progress,\"write already in progress\");a.equal(false,this.pending_close,\"close is pending\");this.write_in_progress=true;a.equal(false,i===undefined,\"must provide flush value\");this.write_in_progress=true;if(i!==t.Z_NO_FLUSH&&i!==t.Z_PARTIAL_FLUSH&&i!==t.Z_SYNC_FLUSH&&i!==t.Z_FULL_FLUSH&&i!==t.Z_FINISH&&i!==t.Z_BLOCK){throw new Error(\"Invalid flush value\")}if(r==null){r=Buffer.alloc(0);s=0;n=0}this.strm.avail_in=s;this.strm.input=r;this.strm.next_in=n;this.strm.avail_out=o;this.strm.output=l;this.strm.next_out=f;this.flush=i;if(!e){this._process();if(this._checkError()){return this._afterSync()}return}var h=this;process.nextTick((function(){h._process();h._after()}));return this};Zlib.prototype._afterSync=function(){var e=this.strm.avail_out;var t=this.strm.avail_in;this.write_in_progress=false;return[t,e]};Zlib.prototype._process=function(){var e=null;switch(this.mode){case t.DEFLATE:case t.GZIP:case t.DEFLATERAW:this.err=n.deflate(this.strm,this.flush);break;case t.UNZIP:if(this.strm.avail_in>0){e=this.strm.next_in}switch(this.gzip_id_bytes_read){case 0:if(e===null){break}if(this.strm.input[e]===o){this.gzip_id_bytes_read=1;e++;if(this.strm.avail_in===1){break}}else{this.mode=t.INFLATE;break}case 1:if(e===null){break}if(this.strm.input[e]===h){this.gzip_id_bytes_read=2;this.mode=t.GUNZIP}else{this.mode=t.INFLATE}break;default:throw new Error(\"invalid number of gzip magic number bytes read\")}case t.INFLATE:case t.GUNZIP:case t.INFLATERAW:this.err=s.inflate(this.strm,this.flush);if(this.err===t.Z_NEED_DICT&&this.dictionary){this.err=s.inflateSetDictionary(this.strm,this.dictionary);if(this.err===t.Z_OK){this.err=s.inflate(this.strm,this.flush)}else if(this.err===t.Z_DATA_ERROR){this.err=t.Z_NEED_DICT}}while(this.strm.avail_in>0&&this.mode===t.GUNZIP&&this.err===t.Z_STREAM_END&&this.strm.next_in[0]!==0){this.reset();this.err=s.inflate(this.strm,this.flush)}break;default:throw new Error(\"Unknown mode \"+this.mode)}};Zlib.prototype._checkError=function(){switch(this.err){case t.Z_OK:case t.Z_BUF_ERROR:if(this.strm.avail_out!==0&&this.flush===t.Z_FINISH){this._error(\"unexpected end of file\");return false}break;case t.Z_STREAM_END:break;case t.Z_NEED_DICT:if(this.dictionary==null){this._error(\"Missing dictionary\")}else{this._error(\"Bad dictionary\")}return false;default:this._error(\"Zlib error\");return false}return true};Zlib.prototype._after=function(){if(!this._checkError()){return}var e=this.strm.avail_out;var t=this.strm.avail_in;this.write_in_progress=false;this.callback(t,e);if(this.pending_close){this.close()}};Zlib.prototype._error=function(e){if(this.strm.msg){e=this.strm.msg}this.onerror(e,this.err);this.write_in_progress=false;if(this.pending_close){this.close()}};Zlib.prototype.init=function(e,i,r,n,s){a(arguments.length===4||arguments.length===5,\"init(windowBits, level, memLevel, strategy, [dictionary])\");a(e>=8&&e<=15,\"invalid windowBits\");a(i>=-1&&i<=9,\"invalid compression level\");a(r>=1&&r<=9,\"invalid memlevel\");a(n===t.Z_FILTERED||n===t.Z_HUFFMAN_ONLY||n===t.Z_RLE||n===t.Z_FIXED||n===t.Z_DEFAULT_STRATEGY,\"invalid strategy\");this._init(i,e,r,n,s);this._setDictionary()};Zlib.prototype.params=function(){throw new Error(\"deflateParams Not supported\")};Zlib.prototype.reset=function(){this._reset();this._setDictionary()};Zlib.prototype._init=function(e,i,a,l,f){this.level=e;this.windowBits=i;this.memLevel=a;this.strategy=l;this.flush=t.Z_NO_FLUSH;this.err=t.Z_OK;if(this.mode===t.GZIP||this.mode===t.GUNZIP){this.windowBits+=16}if(this.mode===t.UNZIP){this.windowBits+=32}if(this.mode===t.DEFLATERAW||this.mode===t.INFLATERAW){this.windowBits=-1*this.windowBits}this.strm=new r;switch(this.mode){case t.DEFLATE:case t.GZIP:case t.DEFLATERAW:this.err=n.deflateInit2(this.strm,this.level,t.Z_DEFLATED,this.windowBits,this.memLevel,this.strategy);break;case t.INFLATE:case t.GUNZIP:case t.INFLATERAW:case t.UNZIP:this.err=s.inflateInit2(this.strm,this.windowBits);break;default:throw new Error(\"Unknown mode \"+this.mode)}if(this.err!==t.Z_OK){this._error(\"Init error\")}this.dictionary=f;this.write_in_progress=false;this.init_done=true};Zlib.prototype._setDictionary=function(){if(this.dictionary==null){return}this.err=t.Z_OK;switch(this.mode){case t.DEFLATE:case t.DEFLATERAW:this.err=n.deflateSetDictionary(this.strm,this.dictionary);break;default:break}if(this.err!==t.Z_OK){this._error(\"Failed to set dictionary\")}};Zlib.prototype._reset=function(){this.err=t.Z_OK;switch(this.mode){case t.DEFLATE:case t.DEFLATERAW:case t.GZIP:this.err=n.deflateReset(this.strm);break;case t.INFLATE:case t.INFLATERAW:case t.GUNZIP:this.err=s.inflateReset(this.strm);break;default:break}if(this.err!==t.Z_OK){this._error(\"Failed to reset stream\")}};t.Zlib=Zlib},23:function(e,t,i){var a=i(300).Buffer;var r=i(781).Transform;var n=i(742);var s=i(837);var l=i(491).ok;var f=i(300).kMaxLength;var o=\"Cannot create final Buffer. It would be larger \"+\"than 0x\"+f.toString(16)+\" bytes\";n.Z_MIN_WINDOWBITS=8;n.Z_MAX_WINDOWBITS=15;n.Z_DEFAULT_WINDOWBITS=15;n.Z_MIN_CHUNK=64;n.Z_MAX_CHUNK=Infinity;n.Z_DEFAULT_CHUNK=16*1024;n.Z_MIN_MEMLEVEL=1;n.Z_MAX_MEMLEVEL=9;n.Z_DEFAULT_MEMLEVEL=8;n.Z_MIN_LEVEL=-1;n.Z_MAX_LEVEL=9;n.Z_DEFAULT_LEVEL=n.Z_DEFAULT_COMPRESSION;var h=Object.keys(n);for(var _=0;_<h.length;_++){var d=h[_];if(d.match(/^Z/)){Object.defineProperty(t,d,{enumerable:true,value:n[d],writable:false})}}var u={Z_OK:n.Z_OK,Z_STREAM_END:n.Z_STREAM_END,Z_NEED_DICT:n.Z_NEED_DICT,Z_ERRNO:n.Z_ERRNO,Z_STREAM_ERROR:n.Z_STREAM_ERROR,Z_DATA_ERROR:n.Z_DATA_ERROR,Z_MEM_ERROR:n.Z_MEM_ERROR,Z_BUF_ERROR:n.Z_BUF_ERROR,Z_VERSION_ERROR:n.Z_VERSION_ERROR};var c=Object.keys(u);for(var v=0;v<c.length;v++){var b=c[v];u[u[b]]=b}Object.defineProperty(t,\"codes\",{enumerable:true,value:Object.freeze(u),writable:false});t.Deflate=Deflate;t.Inflate=Inflate;t.Gzip=Gzip;t.Gunzip=Gunzip;t.DeflateRaw=DeflateRaw;t.InflateRaw=InflateRaw;t.Unzip=Unzip;t.createDeflate=function(e){return new Deflate(e)};t.createInflate=function(e){return new Inflate(e)};t.createDeflateRaw=function(e){return new DeflateRaw(e)};t.createInflateRaw=function(e){return new InflateRaw(e)};t.createGzip=function(e){return new Gzip(e)};t.createGunzip=function(e){return new Gunzip(e)};t.createUnzip=function(e){return new Unzip(e)};t.deflate=function(e,t,i){if(typeof t===\"function\"){i=t;t={}}return zlibBuffer(new Deflate(t),e,i)};t.deflateSync=function(e,t){return zlibBufferSync(new Deflate(t),e)};t.gzip=function(e,t,i){if(typeof t===\"function\"){i=t;t={}}return zlibBuffer(new Gzip(t),e,i)};t.gzipSync=function(e,t){return zlibBufferSync(new Gzip(t),e)};t.deflateRaw=function(e,t,i){if(typeof t===\"function\"){i=t;t={}}return zlibBuffer(new DeflateRaw(t),e,i)};t.deflateRawSync=function(e,t){return zlibBufferSync(new DeflateRaw(t),e)};t.unzip=function(e,t,i){if(typeof t===\"function\"){i=t;t={}}return zlibBuffer(new Unzip(t),e,i)};t.unzipSync=function(e,t){return zlibBufferSync(new Unzip(t),e)};t.inflate=function(e,t,i){if(typeof t===\"function\"){i=t;t={}}return zlibBuffer(new Inflate(t),e,i)};t.inflateSync=function(e,t){return zlibBufferSync(new Inflate(t),e)};t.gunzip=function(e,t,i){if(typeof t===\"function\"){i=t;t={}}return zlibBuffer(new Gunzip(t),e,i)};t.gunzipSync=function(e,t){return zlibBufferSync(new Gunzip(t),e)};t.inflateRaw=function(e,t,i){if(typeof t===\"function\"){i=t;t={}}return zlibBuffer(new InflateRaw(t),e,i)};t.inflateRawSync=function(e,t){return zlibBufferSync(new InflateRaw(t),e)};function zlibBuffer(e,t,i){var r=[];var n=0;e.on(\"error\",onError);e.on(\"end\",onEnd);e.end(t);flow();function flow(){var t;while(null!==(t=e.read())){r.push(t);n+=t.length}e.once(\"readable\",flow)}function onError(t){e.removeListener(\"end\",onEnd);e.removeListener(\"readable\",flow);i(t)}function onEnd(){var t;var s=null;if(n>=f){s=new RangeError(o)}else{t=a.concat(r,n)}r=[];e.close();i(s,t)}}function zlibBufferSync(e,t){if(typeof t===\"string\")t=a.from(t);if(!a.isBuffer(t))throw new TypeError(\"Not a string or buffer\");var i=e._finishFlushFlag;return e._processChunk(t,i)}function Deflate(e){if(!(this instanceof Deflate))return new Deflate(e);Zlib.call(this,e,n.DEFLATE)}function Inflate(e){if(!(this instanceof Inflate))return new Inflate(e);Zlib.call(this,e,n.INFLATE)}function Gzip(e){if(!(this instanceof Gzip))return new Gzip(e);Zlib.call(this,e,n.GZIP)}function Gunzip(e){if(!(this instanceof Gunzip))return new Gunzip(e);Zlib.call(this,e,n.GUNZIP)}function DeflateRaw(e){if(!(this instanceof DeflateRaw))return new DeflateRaw(e);Zlib.call(this,e,n.DEFLATERAW)}function InflateRaw(e){if(!(this instanceof InflateRaw))return new InflateRaw(e);Zlib.call(this,e,n.INFLATERAW)}function Unzip(e){if(!(this instanceof Unzip))return new Unzip(e);Zlib.call(this,e,n.UNZIP)}function isValidFlushFlag(e){return e===n.Z_NO_FLUSH||e===n.Z_PARTIAL_FLUSH||e===n.Z_SYNC_FLUSH||e===n.Z_FULL_FLUSH||e===n.Z_FINISH||e===n.Z_BLOCK}function Zlib(e,i){var s=this;this._opts=e=e||{};this._chunkSize=e.chunkSize||t.Z_DEFAULT_CHUNK;r.call(this,e);if(e.flush&&!isValidFlushFlag(e.flush)){throw new Error(\"Invalid flush flag: \"+e.flush)}if(e.finishFlush&&!isValidFlushFlag(e.finishFlush)){throw new Error(\"Invalid flush flag: \"+e.finishFlush)}this._flushFlag=e.flush||n.Z_NO_FLUSH;this._finishFlushFlag=typeof e.finishFlush!==\"undefined\"?e.finishFlush:n.Z_FINISH;if(e.chunkSize){if(e.chunkSize<t.Z_MIN_CHUNK||e.chunkSize>t.Z_MAX_CHUNK){throw new Error(\"Invalid chunk size: \"+e.chunkSize)}}if(e.windowBits){if(e.windowBits<t.Z_MIN_WINDOWBITS||e.windowBits>t.Z_MAX_WINDOWBITS){throw new Error(\"Invalid windowBits: \"+e.windowBits)}}if(e.level){if(e.level<t.Z_MIN_LEVEL||e.level>t.Z_MAX_LEVEL){throw new Error(\"Invalid compression level: \"+e.level)}}if(e.memLevel){if(e.memLevel<t.Z_MIN_MEMLEVEL||e.memLevel>t.Z_MAX_MEMLEVEL){throw new Error(\"Invalid memLevel: \"+e.memLevel)}}if(e.strategy){if(e.strategy!=t.Z_FILTERED&&e.strategy!=t.Z_HUFFMAN_ONLY&&e.strategy!=t.Z_RLE&&e.strategy!=t.Z_FIXED&&e.strategy!=t.Z_DEFAULT_STRATEGY){throw new Error(\"Invalid strategy: \"+e.strategy)}}if(e.dictionary){if(!a.isBuffer(e.dictionary)){throw new Error(\"Invalid dictionary: it should be a Buffer instance\")}}this._handle=new n.Zlib(i);var l=this;this._hadError=false;this._handle.onerror=function(e,i){_close(l);l._hadError=true;var a=new Error(e);a.errno=i;a.code=t.codes[i];l.emit(\"error\",a)};var f=t.Z_DEFAULT_COMPRESSION;if(typeof e.level===\"number\")f=e.level;var o=t.Z_DEFAULT_STRATEGY;if(typeof e.strategy===\"number\")o=e.strategy;this._handle.init(e.windowBits||t.Z_DEFAULT_WINDOWBITS,f,e.memLevel||t.Z_DEFAULT_MEMLEVEL,o,e.dictionary);this._buffer=a.allocUnsafe(this._chunkSize);this._offset=0;this._level=f;this._strategy=o;this.once(\"end\",this.close);Object.defineProperty(this,\"_closed\",{get:function(){return!s._handle},configurable:true,enumerable:true})}s.inherits(Zlib,r);Zlib.prototype.params=function(e,i,a){if(e<t.Z_MIN_LEVEL||e>t.Z_MAX_LEVEL){throw new RangeError(\"Invalid compression level: \"+e)}if(i!=t.Z_FILTERED&&i!=t.Z_HUFFMAN_ONLY&&i!=t.Z_RLE&&i!=t.Z_FIXED&&i!=t.Z_DEFAULT_STRATEGY){throw new TypeError(\"Invalid strategy: \"+i)}if(this._level!==e||this._strategy!==i){var r=this;this.flush(n.Z_SYNC_FLUSH,(function(){l(r._handle,\"zlib binding closed\");r._handle.params(e,i);if(!r._hadError){r._level=e;r._strategy=i;if(a)a()}}))}else{process.nextTick(a)}};Zlib.prototype.reset=function(){l(this._handle,\"zlib binding closed\");return this._handle.reset()};Zlib.prototype._flush=function(e){this._transform(a.alloc(0),\"\",e)};Zlib.prototype.flush=function(e,t){var i=this;var r=this._writableState;if(typeof e===\"function\"||e===undefined&&!t){t=e;e=n.Z_FULL_FLUSH}if(r.ended){if(t)process.nextTick(t)}else if(r.ending){if(t)this.once(\"end\",t)}else if(r.needDrain){if(t){this.once(\"drain\",(function(){return i.flush(e,t)}))}}else{this._flushFlag=e;this.write(a.alloc(0),\"\",t)}};Zlib.prototype.close=function(e){_close(this,e);process.nextTick(emitCloseNT,this)};function _close(e,t){if(t)process.nextTick(t);if(!e._handle)return;e._handle.close();e._handle=null}function emitCloseNT(e){e.emit(\"close\")}Zlib.prototype._transform=function(e,t,i){var r;var s=this._writableState;var l=s.ending||s.ended;var f=l&&(!e||s.length===e.length);if(e!==null&&!a.isBuffer(e))return i(new Error(\"invalid input\"));if(!this._handle)return i(new Error(\"zlib binding closed\"));if(f)r=this._finishFlushFlag;else{r=this._flushFlag;if(e.length>=s.length){this._flushFlag=this._opts.flush||n.Z_NO_FLUSH}}this._processChunk(e,r,i)};Zlib.prototype._processChunk=function(e,t,i){var r=e&&e.length;var n=this._chunkSize-this._offset;var s=0;var h=this;var _=typeof i===\"function\";if(!_){var d=[];var u=0;var c;this.on(\"error\",(function(e){c=e}));l(this._handle,\"zlib binding closed\");do{var v=this._handle.writeSync(t,e,s,r,this._buffer,this._offset,n)}while(!this._hadError&&callback(v[0],v[1]));if(this._hadError){throw c}if(u>=f){_close(this);throw new RangeError(o)}var b=a.concat(d,u);_close(this);return b}l(this._handle,\"zlib binding closed\");var w=this._handle.write(t,e,s,r,this._buffer,this._offset,n);w.buffer=e;w.callback=callback;function callback(f,o){if(this){this.buffer=null;this.callback=null}if(h._hadError)return;var c=n-o;l(c>=0,\"have should not go down\");if(c>0){var v=h._buffer.slice(h._offset,h._offset+c);h._offset+=c;if(_){h.push(v)}else{d.push(v);u+=v.length}}if(o===0||h._offset>=h._chunkSize){n=h._chunkSize;h._offset=0;h._buffer=a.allocUnsafe(h._chunkSize)}if(o===0){s+=r-f;r=f;if(!_)return true;var b=h._handle.write(t,e,s,r,h._buffer,h._offset,h._chunkSize);b.callback=callback;b.buffer=e;return}if(!_)return false;i()}};s.inherits(Deflate,Zlib);s.inherits(Inflate,Zlib);s.inherits(Gzip,Zlib);s.inherits(Gunzip,Zlib);s.inherits(DeflateRaw,Zlib);s.inherits(InflateRaw,Zlib);s.inherits(Unzip,Zlib)},380:function(e,t){var i=typeof Uint8Array!==\"undefined\"&&typeof Uint16Array!==\"undefined\"&&typeof Int32Array!==\"undefined\";function _has(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.assign=function(e){var t=Array.prototype.slice.call(arguments,1);while(t.length){var i=t.shift();if(!i){continue}if(typeof i!==\"object\"){throw new TypeError(i+\"must be non-object\")}for(var a in i){if(_has(i,a)){e[a]=i[a]}}}return e};t.shrinkBuf=function(e,t){if(e.length===t){return e}if(e.subarray){return e.subarray(0,t)}e.length=t;return e};var a={arraySet:function(e,t,i,a,r){if(t.subarray&&e.subarray){e.set(t.subarray(i,i+a),r);return}for(var n=0;n<a;n++){e[r+n]=t[i+n]}},flattenChunks:function(e){var t,i,a,r,n,s;a=0;for(t=0,i=e.length;t<i;t++){a+=e[t].length}s=new Uint8Array(a);r=0;for(t=0,i=e.length;t<i;t++){n=e[t];s.set(n,r);r+=n.length}return s}};var r={arraySet:function(e,t,i,a,r){for(var n=0;n<a;n++){e[r+n]=t[i+n]}},flattenChunks:function(e){return[].concat.apply([],e)}};t.setTyped=function(e){if(e){t.Buf8=Uint8Array;t.Buf16=Uint16Array;t.Buf32=Int32Array;t.assign(t,a)}else{t.Buf8=Array;t.Buf16=Array;t.Buf32=Array;t.assign(t,r)}};t.setTyped(i)},496:function(e){function adler32(e,t,i,a){var r=e&65535|0,n=e>>>16&65535|0,s=0;while(i!==0){s=i>2e3?2e3:i;i-=s;do{r=r+t[a++]|0;n=n+r|0}while(--s);r%=65521;n%=65521}return r|n<<16|0}e.exports=adler32},320:function(e){e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},307:function(e){function makeTable(){var e,t=[];for(var i=0;i<256;i++){e=i;for(var a=0;a<8;a++){e=e&1?3988292384^e>>>1:e>>>1}t[i]=e}return t}var t=makeTable();function crc32(e,i,a,r){var n=t,s=r+a;e^=-1;for(var l=r;l<s;l++){e=e>>>8^n[(e^i[l])&255]}return e^-1}e.exports=crc32},450:function(e,t,i){var a=i(380);var r=i(842);var n=i(496);var s=i(307);var l=i(31);var f=0;var o=1;var h=3;var _=4;var d=5;var u=0;var c=1;var v=-2;var b=-3;var w=-5;var p=-1;var g=1;var m=2;var k=3;var y=4;var E=0;var z=2;var Z=8;var x=9;var I=15;var R=8;var S=29;var L=256;var A=L+1+S;var T=30;var F=19;var N=2*A+1;var D=15;var B=3;var U=258;var O=U+B+1;var M=32;var C=42;var G=69;var H=73;var P=91;var K=103;var W=113;var V=666;var q=1;var X=2;var Y=3;var j=4;var J=3;function err(e,t){e.msg=l[t];return t}function rank(e){return(e<<1)-(e>4?9:0)}function zero(e){var t=e.length;while(--t>=0){e[t]=0}}function flush_pending(e){var t=e.state;var i=t.pending;if(i>e.avail_out){i=e.avail_out}if(i===0){return}a.arraySet(e.output,t.pending_buf,t.pending_out,i,e.next_out);e.next_out+=i;t.pending_out+=i;e.total_out+=i;e.avail_out-=i;t.pending-=i;if(t.pending===0){t.pending_out=0}}function flush_block_only(e,t){r._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t);e.block_start=e.strstart;flush_pending(e.strm)}function put_byte(e,t){e.pending_buf[e.pending++]=t}function putShortMSB(e,t){e.pending_buf[e.pending++]=t>>>8&255;e.pending_buf[e.pending++]=t&255}function read_buf(e,t,i,r){var l=e.avail_in;if(l>r){l=r}if(l===0){return 0}e.avail_in-=l;a.arraySet(t,e.input,e.next_in,l,i);if(e.state.wrap===1){e.adler=n(e.adler,t,l,i)}else if(e.state.wrap===2){e.adler=s(e.adler,t,l,i)}e.next_in+=l;e.total_in+=l;return l}function longest_match(e,t){var i=e.max_chain_length;var a=e.strstart;var r;var n;var s=e.prev_length;var l=e.nice_match;var f=e.strstart>e.w_size-O?e.strstart-(e.w_size-O):0;var o=e.window;var h=e.w_mask;var _=e.prev;var d=e.strstart+U;var u=o[a+s-1];var c=o[a+s];if(e.prev_length>=e.good_match){i>>=2}if(l>e.lookahead){l=e.lookahead}do{r=t;if(o[r+s]!==c||o[r+s-1]!==u||o[r]!==o[a]||o[++r]!==o[a+1]){continue}a+=2;r++;do{}while(o[++a]===o[++r]&&o[++a]===o[++r]&&o[++a]===o[++r]&&o[++a]===o[++r]&&o[++a]===o[++r]&&o[++a]===o[++r]&&o[++a]===o[++r]&&o[++a]===o[++r]&&a<d);n=U-(d-a);a=d-U;if(n>s){e.match_start=t;s=n;if(n>=l){break}u=o[a+s-1];c=o[a+s]}}while((t=_[t&h])>f&&--i!==0);if(s<=e.lookahead){return s}return e.lookahead}function fill_window(e){var t=e.w_size;var i,r,n,s,l;do{s=e.window_size-e.lookahead-e.strstart;if(e.strstart>=t+(t-O)){a.arraySet(e.window,e.window,t,t,0);e.match_start-=t;e.strstart-=t;e.block_start-=t;r=e.hash_size;i=r;do{n=e.head[--i];e.head[i]=n>=t?n-t:0}while(--r);r=t;i=r;do{n=e.prev[--i];e.prev[i]=n>=t?n-t:0}while(--r);s+=t}if(e.strm.avail_in===0){break}r=read_buf(e.strm,e.window,e.strstart+e.lookahead,s);e.lookahead+=r;if(e.lookahead+e.insert>=B){l=e.strstart-e.insert;e.ins_h=e.window[l];e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+1])&e.hash_mask;while(e.insert){e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+B-1])&e.hash_mask;e.prev[l&e.w_mask]=e.head[e.ins_h];e.head[e.ins_h]=l;l++;e.insert--;if(e.lookahead+e.insert<B){break}}}}while(e.lookahead<O&&e.strm.avail_in!==0)}function deflate_stored(e,t){var i=65535;if(i>e.pending_buf_size-5){i=e.pending_buf_size-5}for(;;){if(e.lookahead<=1){fill_window(e);if(e.lookahead===0&&t===f){return q}if(e.lookahead===0){break}}e.strstart+=e.lookahead;e.lookahead=0;var a=e.block_start+i;if(e.strstart===0||e.strstart>=a){e.lookahead=e.strstart-a;e.strstart=a;flush_block_only(e,false);if(e.strm.avail_out===0){return q}}if(e.strstart-e.block_start>=e.w_size-O){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}}e.insert=0;if(t===_){flush_block_only(e,true);if(e.strm.avail_out===0){return Y}return j}if(e.strstart>e.block_start){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}return q}function deflate_fast(e,t){var i;var a;for(;;){if(e.lookahead<O){fill_window(e);if(e.lookahead<O&&t===f){return q}if(e.lookahead===0){break}}i=0;if(e.lookahead>=B){e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+B-1])&e.hash_mask;i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h];e.head[e.ins_h]=e.strstart}if(i!==0&&e.strstart-i<=e.w_size-O){e.match_length=longest_match(e,i)}if(e.match_length>=B){a=r._tr_tally(e,e.strstart-e.match_start,e.match_length-B);e.lookahead-=e.match_length;if(e.match_length<=e.max_lazy_match&&e.lookahead>=B){e.match_length--;do{e.strstart++;e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+B-1])&e.hash_mask;i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h];e.head[e.ins_h]=e.strstart}while(--e.match_length!==0);e.strstart++}else{e.strstart+=e.match_length;e.match_length=0;e.ins_h=e.window[e.strstart];e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask}}else{a=r._tr_tally(e,0,e.window[e.strstart]);e.lookahead--;e.strstart++}if(a){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}}e.insert=e.strstart<B-1?e.strstart:B-1;if(t===_){flush_block_only(e,true);if(e.strm.avail_out===0){return Y}return j}if(e.last_lit){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}return X}function deflate_slow(e,t){var i;var a;var n;for(;;){if(e.lookahead<O){fill_window(e);if(e.lookahead<O&&t===f){return q}if(e.lookahead===0){break}}i=0;if(e.lookahead>=B){e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+B-1])&e.hash_mask;i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h];e.head[e.ins_h]=e.strstart}e.prev_length=e.match_length;e.prev_match=e.match_start;e.match_length=B-1;if(i!==0&&e.prev_length<e.max_lazy_match&&e.strstart-i<=e.w_size-O){e.match_length=longest_match(e,i);if(e.match_length<=5&&(e.strategy===g||e.match_length===B&&e.strstart-e.match_start>4096)){e.match_length=B-1}}if(e.prev_length>=B&&e.match_length<=e.prev_length){n=e.strstart+e.lookahead-B;a=r._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-B);e.lookahead-=e.prev_length-1;e.prev_length-=2;do{if(++e.strstart<=n){e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+B-1])&e.hash_mask;i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h];e.head[e.ins_h]=e.strstart}}while(--e.prev_length!==0);e.match_available=0;e.match_length=B-1;e.strstart++;if(a){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}}else if(e.match_available){a=r._tr_tally(e,0,e.window[e.strstart-1]);if(a){flush_block_only(e,false)}e.strstart++;e.lookahead--;if(e.strm.avail_out===0){return q}}else{e.match_available=1;e.strstart++;e.lookahead--}}if(e.match_available){a=r._tr_tally(e,0,e.window[e.strstart-1]);e.match_available=0}e.insert=e.strstart<B-1?e.strstart:B-1;if(t===_){flush_block_only(e,true);if(e.strm.avail_out===0){return Y}return j}if(e.last_lit){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}return X}function deflate_rle(e,t){var i;var a;var n,s;var l=e.window;for(;;){if(e.lookahead<=U){fill_window(e);if(e.lookahead<=U&&t===f){return q}if(e.lookahead===0){break}}e.match_length=0;if(e.lookahead>=B&&e.strstart>0){n=e.strstart-1;a=l[n];if(a===l[++n]&&a===l[++n]&&a===l[++n]){s=e.strstart+U;do{}while(a===l[++n]&&a===l[++n]&&a===l[++n]&&a===l[++n]&&a===l[++n]&&a===l[++n]&&a===l[++n]&&a===l[++n]&&n<s);e.match_length=U-(s-n);if(e.match_length>e.lookahead){e.match_length=e.lookahead}}}if(e.match_length>=B){i=r._tr_tally(e,1,e.match_length-B);e.lookahead-=e.match_length;e.strstart+=e.match_length;e.match_length=0}else{i=r._tr_tally(e,0,e.window[e.strstart]);e.lookahead--;e.strstart++}if(i){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}}e.insert=0;if(t===_){flush_block_only(e,true);if(e.strm.avail_out===0){return Y}return j}if(e.last_lit){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}return X}function deflate_huff(e,t){var i;for(;;){if(e.lookahead===0){fill_window(e);if(e.lookahead===0){if(t===f){return q}break}}e.match_length=0;i=r._tr_tally(e,0,e.window[e.strstart]);e.lookahead--;e.strstart++;if(i){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}}e.insert=0;if(t===_){flush_block_only(e,true);if(e.strm.avail_out===0){return Y}return j}if(e.last_lit){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}return X}function Config(e,t,i,a,r){this.good_length=e;this.max_lazy=t;this.nice_length=i;this.max_chain=a;this.func=r}var Q;Q=[new Config(0,0,0,0,deflate_stored),new Config(4,4,8,4,deflate_fast),new Config(4,5,16,8,deflate_fast),new Config(4,6,32,32,deflate_fast),new Config(4,4,16,16,deflate_slow),new Config(8,16,32,32,deflate_slow),new Config(8,16,128,128,deflate_slow),new Config(8,32,128,256,deflate_slow),new Config(32,128,258,1024,deflate_slow),new Config(32,258,258,4096,deflate_slow)];function lm_init(e){e.window_size=2*e.w_size;zero(e.head);e.max_lazy_match=Q[e.level].max_lazy;e.good_match=Q[e.level].good_length;e.nice_match=Q[e.level].nice_length;e.max_chain_length=Q[e.level].max_chain;e.strstart=0;e.block_start=0;e.lookahead=0;e.insert=0;e.match_length=e.prev_length=B-1;e.match_available=0;e.ins_h=0}function DeflateState(){this.strm=null;this.status=0;this.pending_buf=null;this.pending_buf_size=0;this.pending_out=0;this.pending=0;this.wrap=0;this.gzhead=null;this.gzindex=0;this.method=Z;this.last_flush=-1;this.w_size=0;this.w_bits=0;this.w_mask=0;this.window=null;this.window_size=0;this.prev=null;this.head=null;this.ins_h=0;this.hash_size=0;this.hash_bits=0;this.hash_mask=0;this.hash_shift=0;this.block_start=0;this.match_length=0;this.prev_match=0;this.match_available=0;this.strstart=0;this.match_start=0;this.lookahead=0;this.prev_length=0;this.max_chain_length=0;this.max_lazy_match=0;this.level=0;this.strategy=0;this.good_match=0;this.nice_match=0;this.dyn_ltree=new a.Buf16(N*2);this.dyn_dtree=new a.Buf16((2*T+1)*2);this.bl_tree=new a.Buf16((2*F+1)*2);zero(this.dyn_ltree);zero(this.dyn_dtree);zero(this.bl_tree);this.l_desc=null;this.d_desc=null;this.bl_desc=null;this.bl_count=new a.Buf16(D+1);this.heap=new a.Buf16(2*A+1);zero(this.heap);this.heap_len=0;this.heap_max=0;this.depth=new a.Buf16(2*A+1);zero(this.depth);this.l_buf=0;this.lit_bufsize=0;this.last_lit=0;this.d_buf=0;this.opt_len=0;this.static_len=0;this.matches=0;this.insert=0;this.bi_buf=0;this.bi_valid=0}function deflateResetKeep(e){var t;if(!e||!e.state){return err(e,v)}e.total_in=e.total_out=0;e.data_type=z;t=e.state;t.pending=0;t.pending_out=0;if(t.wrap<0){t.wrap=-t.wrap}t.status=t.wrap?C:W;e.adler=t.wrap===2?0:1;t.last_flush=f;r._tr_init(t);return u}function deflateReset(e){var t=deflateResetKeep(e);if(t===u){lm_init(e.state)}return t}function deflateSetHeader(e,t){if(!e||!e.state){return v}if(e.state.wrap!==2){return v}e.state.gzhead=t;return u}function deflateInit2(e,t,i,r,n,s){if(!e){return v}var l=1;if(t===p){t=6}if(r<0){l=0;r=-r}else if(r>15){l=2;r-=16}if(n<1||n>x||i!==Z||r<8||r>15||t<0||t>9||s<0||s>y){return err(e,v)}if(r===8){r=9}var f=new DeflateState;e.state=f;f.strm=e;f.wrap=l;f.gzhead=null;f.w_bits=r;f.w_size=1<<f.w_bits;f.w_mask=f.w_size-1;f.hash_bits=n+7;f.hash_size=1<<f.hash_bits;f.hash_mask=f.hash_size-1;f.hash_shift=~~((f.hash_bits+B-1)/B);f.window=new a.Buf8(f.w_size*2);f.head=new a.Buf16(f.hash_size);f.prev=new a.Buf16(f.w_size);f.lit_bufsize=1<<n+6;f.pending_buf_size=f.lit_bufsize*4;f.pending_buf=new a.Buf8(f.pending_buf_size);f.d_buf=1*f.lit_bufsize;f.l_buf=(1+2)*f.lit_bufsize;f.level=t;f.strategy=s;f.method=i;return deflateReset(e)}function deflateInit(e,t){return deflateInit2(e,t,Z,I,R,E)}function deflate(e,t){var i,a;var n,l;if(!e||!e.state||t>d||t<0){return e?err(e,v):v}a=e.state;if(!e.output||!e.input&&e.avail_in!==0||a.status===V&&t!==_){return err(e,e.avail_out===0?w:v)}a.strm=e;i=a.last_flush;a.last_flush=t;if(a.status===C){if(a.wrap===2){e.adler=0;put_byte(a,31);put_byte(a,139);put_byte(a,8);if(!a.gzhead){put_byte(a,0);put_byte(a,0);put_byte(a,0);put_byte(a,0);put_byte(a,0);put_byte(a,a.level===9?2:a.strategy>=m||a.level<2?4:0);put_byte(a,J);a.status=W}else{put_byte(a,(a.gzhead.text?1:0)+(a.gzhead.hcrc?2:0)+(!a.gzhead.extra?0:4)+(!a.gzhead.name?0:8)+(!a.gzhead.comment?0:16));put_byte(a,a.gzhead.time&255);put_byte(a,a.gzhead.time>>8&255);put_byte(a,a.gzhead.time>>16&255);put_byte(a,a.gzhead.time>>24&255);put_byte(a,a.level===9?2:a.strategy>=m||a.level<2?4:0);put_byte(a,a.gzhead.os&255);if(a.gzhead.extra&&a.gzhead.extra.length){put_byte(a,a.gzhead.extra.length&255);put_byte(a,a.gzhead.extra.length>>8&255)}if(a.gzhead.hcrc){e.adler=s(e.adler,a.pending_buf,a.pending,0)}a.gzindex=0;a.status=G}}else{var b=Z+(a.w_bits-8<<4)<<8;var p=-1;if(a.strategy>=m||a.level<2){p=0}else if(a.level<6){p=1}else if(a.level===6){p=2}else{p=3}b|=p<<6;if(a.strstart!==0){b|=M}b+=31-b%31;a.status=W;putShortMSB(a,b);if(a.strstart!==0){putShortMSB(a,e.adler>>>16);putShortMSB(a,e.adler&65535)}e.adler=1}}if(a.status===G){if(a.gzhead.extra){n=a.pending;while(a.gzindex<(a.gzhead.extra.length&65535)){if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>n){e.adler=s(e.adler,a.pending_buf,a.pending-n,n)}flush_pending(e);n=a.pending;if(a.pending===a.pending_buf_size){break}}put_byte(a,a.gzhead.extra[a.gzindex]&255);a.gzindex++}if(a.gzhead.hcrc&&a.pending>n){e.adler=s(e.adler,a.pending_buf,a.pending-n,n)}if(a.gzindex===a.gzhead.extra.length){a.gzindex=0;a.status=H}}else{a.status=H}}if(a.status===H){if(a.gzhead.name){n=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>n){e.adler=s(e.adler,a.pending_buf,a.pending-n,n)}flush_pending(e);n=a.pending;if(a.pending===a.pending_buf_size){l=1;break}}if(a.gzindex<a.gzhead.name.length){l=a.gzhead.name.charCodeAt(a.gzindex++)&255}else{l=0}put_byte(a,l)}while(l!==0);if(a.gzhead.hcrc&&a.pending>n){e.adler=s(e.adler,a.pending_buf,a.pending-n,n)}if(l===0){a.gzindex=0;a.status=P}}else{a.status=P}}if(a.status===P){if(a.gzhead.comment){n=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>n){e.adler=s(e.adler,a.pending_buf,a.pending-n,n)}flush_pending(e);n=a.pending;if(a.pending===a.pending_buf_size){l=1;break}}if(a.gzindex<a.gzhead.comment.length){l=a.gzhead.comment.charCodeAt(a.gzindex++)&255}else{l=0}put_byte(a,l)}while(l!==0);if(a.gzhead.hcrc&&a.pending>n){e.adler=s(e.adler,a.pending_buf,a.pending-n,n)}if(l===0){a.status=K}}else{a.status=K}}if(a.status===K){if(a.gzhead.hcrc){if(a.pending+2>a.pending_buf_size){flush_pending(e)}if(a.pending+2<=a.pending_buf_size){put_byte(a,e.adler&255);put_byte(a,e.adler>>8&255);e.adler=0;a.status=W}}else{a.status=W}}if(a.pending!==0){flush_pending(e);if(e.avail_out===0){a.last_flush=-1;return u}}else if(e.avail_in===0&&rank(t)<=rank(i)&&t!==_){return err(e,w)}if(a.status===V&&e.avail_in!==0){return err(e,w)}if(e.avail_in!==0||a.lookahead!==0||t!==f&&a.status!==V){var g=a.strategy===m?deflate_huff(a,t):a.strategy===k?deflate_rle(a,t):Q[a.level].func(a,t);if(g===Y||g===j){a.status=V}if(g===q||g===Y){if(e.avail_out===0){a.last_flush=-1}return u}if(g===X){if(t===o){r._tr_align(a)}else if(t!==d){r._tr_stored_block(a,0,0,false);if(t===h){zero(a.head);if(a.lookahead===0){a.strstart=0;a.block_start=0;a.insert=0}}}flush_pending(e);if(e.avail_out===0){a.last_flush=-1;return u}}}if(t!==_){return u}if(a.wrap<=0){return c}if(a.wrap===2){put_byte(a,e.adler&255);put_byte(a,e.adler>>8&255);put_byte(a,e.adler>>16&255);put_byte(a,e.adler>>24&255);put_byte(a,e.total_in&255);put_byte(a,e.total_in>>8&255);put_byte(a,e.total_in>>16&255);put_byte(a,e.total_in>>24&255)}else{putShortMSB(a,e.adler>>>16);putShortMSB(a,e.adler&65535)}flush_pending(e);if(a.wrap>0){a.wrap=-a.wrap}return a.pending!==0?u:c}function deflateEnd(e){var t;if(!e||!e.state){return v}t=e.state.status;if(t!==C&&t!==G&&t!==H&&t!==P&&t!==K&&t!==W&&t!==V){return err(e,v)}e.state=null;return t===W?err(e,b):u}function deflateSetDictionary(e,t){var i=t.length;var r;var s,l;var f;var o;var h;var _;var d;if(!e||!e.state){return v}r=e.state;f=r.wrap;if(f===2||f===1&&r.status!==C||r.lookahead){return v}if(f===1){e.adler=n(e.adler,t,i,0)}r.wrap=0;if(i>=r.w_size){if(f===0){zero(r.head);r.strstart=0;r.block_start=0;r.insert=0}d=new a.Buf8(r.w_size);a.arraySet(d,t,i-r.w_size,r.w_size,0);t=d;i=r.w_size}o=e.avail_in;h=e.next_in;_=e.input;e.avail_in=i;e.next_in=0;e.input=t;fill_window(r);while(r.lookahead>=B){s=r.strstart;l=r.lookahead-(B-1);do{r.ins_h=(r.ins_h<<r.hash_shift^r.window[s+B-1])&r.hash_mask;r.prev[s&r.w_mask]=r.head[r.ins_h];r.head[r.ins_h]=s;s++}while(--l);r.strstart=s;r.lookahead=B-1;fill_window(r)}r.strstart+=r.lookahead;r.block_start=r.strstart;r.insert=r.lookahead;r.lookahead=0;r.match_length=r.prev_length=B-1;r.match_available=0;e.next_in=h;e.input=_;e.avail_in=o;r.wrap=f;return u}t.deflateInit=deflateInit;t.deflateInit2=deflateInit2;t.deflateReset=deflateReset;t.deflateResetKeep=deflateResetKeep;t.deflateSetHeader=deflateSetHeader;t.deflate=deflate;t.deflateEnd=deflateEnd;t.deflateSetDictionary=deflateSetDictionary;t.deflateInfo=\"pako deflate (from Nodeca project)\"},333:function(e){var t=30;var i=12;e.exports=function inflate_fast(e,a){var r;var n;var s;var l;var f;var o;var h;var _;var d;var u;var c;var v;var b;var w;var p;var g;var m;var k;var y;var E;var z;var Z;var x;var I,R;r=e.state;n=e.next_in;I=e.input;s=n+(e.avail_in-5);l=e.next_out;R=e.output;f=l-(a-e.avail_out);o=l+(e.avail_out-257);h=r.dmax;_=r.wsize;d=r.whave;u=r.wnext;c=r.window;v=r.hold;b=r.bits;w=r.lencode;p=r.distcode;g=(1<<r.lenbits)-1;m=(1<<r.distbits)-1;e:do{if(b<15){v+=I[n++]<<b;b+=8;v+=I[n++]<<b;b+=8}k=w[v&g];t:for(;;){y=k>>>24;v>>>=y;b-=y;y=k>>>16&255;if(y===0){R[l++]=k&65535}else if(y&16){E=k&65535;y&=15;if(y){if(b<y){v+=I[n++]<<b;b+=8}E+=v&(1<<y)-1;v>>>=y;b-=y}if(b<15){v+=I[n++]<<b;b+=8;v+=I[n++]<<b;b+=8}k=p[v&m];i:for(;;){y=k>>>24;v>>>=y;b-=y;y=k>>>16&255;if(y&16){z=k&65535;y&=15;if(b<y){v+=I[n++]<<b;b+=8;if(b<y){v+=I[n++]<<b;b+=8}}z+=v&(1<<y)-1;if(z>h){e.msg=\"invalid distance too far back\";r.mode=t;break e}v>>>=y;b-=y;y=l-f;if(z>y){y=z-y;if(y>d){if(r.sane){e.msg=\"invalid distance too far back\";r.mode=t;break e}}Z=0;x=c;if(u===0){Z+=_-y;if(y<E){E-=y;do{R[l++]=c[Z++]}while(--y);Z=l-z;x=R}}else if(u<y){Z+=_+u-y;y-=u;if(y<E){E-=y;do{R[l++]=c[Z++]}while(--y);Z=0;if(u<E){y=u;E-=y;do{R[l++]=c[Z++]}while(--y);Z=l-z;x=R}}}else{Z+=u-y;if(y<E){E-=y;do{R[l++]=c[Z++]}while(--y);Z=l-z;x=R}}while(E>2){R[l++]=x[Z++];R[l++]=x[Z++];R[l++]=x[Z++];E-=3}if(E){R[l++]=x[Z++];if(E>1){R[l++]=x[Z++]}}}else{Z=l-z;do{R[l++]=R[Z++];R[l++]=R[Z++];R[l++]=R[Z++];E-=3}while(E>2);if(E){R[l++]=R[Z++];if(E>1){R[l++]=R[Z++]}}}}else if((y&64)===0){k=p[(k&65535)+(v&(1<<y)-1)];continue i}else{e.msg=\"invalid distance code\";r.mode=t;break e}break}}else if((y&64)===0){k=w[(k&65535)+(v&(1<<y)-1)];continue t}else if(y&32){r.mode=i;break e}else{e.msg=\"invalid literal/length code\";r.mode=t;break e}break}}while(n<s&&l<o);E=b>>3;n-=E;b-=E<<3;v&=(1<<b)-1;e.next_in=n;e.next_out=l;e.avail_in=n<s?5+(s-n):5-(n-s);e.avail_out=l<o?257+(o-l):257-(l-o);r.hold=v;r.bits=b;return}},324:function(e,t,i){var a=i(380);var r=i(496);var n=i(307);var s=i(333);var l=i(19);var f=0;var o=1;var h=2;var _=4;var d=5;var u=6;var c=0;var v=1;var b=2;var w=-2;var p=-3;var g=-4;var m=-5;var k=8;var y=1;var E=2;var z=3;var Z=4;var x=5;var I=6;var R=7;var S=8;var L=9;var A=10;var T=11;var F=12;var N=13;var D=14;var B=15;var U=16;var O=17;var M=18;var C=19;var G=20;var H=21;var P=22;var K=23;var W=24;var V=25;var q=26;var X=27;var Y=28;var j=29;var J=30;var Q=31;var $=32;var ee=852;var te=592;var ie=15;var ae=ie;function zswap32(e){return(e>>>24&255)+(e>>>8&65280)+((e&65280)<<8)+((e&255)<<24)}function InflateState(){this.mode=0;this.last=false;this.wrap=0;this.havedict=false;this.flags=0;this.dmax=0;this.check=0;this.total=0;this.head=null;this.wbits=0;this.wsize=0;this.whave=0;this.wnext=0;this.window=null;this.hold=0;this.bits=0;this.length=0;this.offset=0;this.extra=0;this.lencode=null;this.distcode=null;this.lenbits=0;this.distbits=0;this.ncode=0;this.nlen=0;this.ndist=0;this.have=0;this.next=null;this.lens=new a.Buf16(320);this.work=new a.Buf16(288);this.lendyn=null;this.distdyn=null;this.sane=0;this.back=0;this.was=0}function inflateResetKeep(e){var t;if(!e||!e.state){return w}t=e.state;e.total_in=e.total_out=t.total=0;e.msg=\"\";if(t.wrap){e.adler=t.wrap&1}t.mode=y;t.last=0;t.havedict=0;t.dmax=32768;t.head=null;t.hold=0;t.bits=0;t.lencode=t.lendyn=new a.Buf32(ee);t.distcode=t.distdyn=new a.Buf32(te);t.sane=1;t.back=-1;return c}function inflateReset(e){var t;if(!e||!e.state){return w}t=e.state;t.wsize=0;t.whave=0;t.wnext=0;return inflateResetKeep(e)}function inflateReset2(e,t){var i;var a;if(!e||!e.state){return w}a=e.state;if(t<0){i=0;t=-t}else{i=(t>>4)+1;if(t<48){t&=15}}if(t&&(t<8||t>15)){return w}if(a.window!==null&&a.wbits!==t){a.window=null}a.wrap=i;a.wbits=t;return inflateReset(e)}function inflateInit2(e,t){var i;var a;if(!e){return w}a=new InflateState;e.state=a;a.window=null;i=inflateReset2(e,t);if(i!==c){e.state=null}return i}function inflateInit(e){return inflateInit2(e,ae)}var re=true;var ne,se;function fixedtables(e){if(re){var t;ne=new a.Buf32(512);se=new a.Buf32(32);t=0;while(t<144){e.lens[t++]=8}while(t<256){e.lens[t++]=9}while(t<280){e.lens[t++]=7}while(t<288){e.lens[t++]=8}l(o,e.lens,0,288,ne,0,e.work,{bits:9});t=0;while(t<32){e.lens[t++]=5}l(h,e.lens,0,32,se,0,e.work,{bits:5});re=false}e.lencode=ne;e.lenbits=9;e.distcode=se;e.distbits=5}function updatewindow(e,t,i,r){var n;var s=e.state;if(s.window===null){s.wsize=1<<s.wbits;s.wnext=0;s.whave=0;s.window=new a.Buf8(s.wsize)}if(r>=s.wsize){a.arraySet(s.window,t,i-s.wsize,s.wsize,0);s.wnext=0;s.whave=s.wsize}else{n=s.wsize-s.wnext;if(n>r){n=r}a.arraySet(s.window,t,i-r,n,s.wnext);r-=n;if(r){a.arraySet(s.window,t,i-r,r,0);s.wnext=r;s.whave=s.wsize}else{s.wnext+=n;if(s.wnext===s.wsize){s.wnext=0}if(s.whave<s.wsize){s.whave+=n}}}return 0}function inflate(e,t){var i;var ee,te;var ie;var ae;var re,ne;var se;var le;var fe,oe;var he;var _e;var de;var ue=0;var ce,ve,be;var we,pe,ge;var me;var ke;var ye=new a.Buf8(4);var Ee;var ze;var Ze=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&e.avail_in!==0){return w}i=e.state;if(i.mode===F){i.mode=N}ae=e.next_out;te=e.output;ne=e.avail_out;ie=e.next_in;ee=e.input;re=e.avail_in;se=i.hold;le=i.bits;fe=re;oe=ne;ke=c;e:for(;;){switch(i.mode){case y:if(i.wrap===0){i.mode=N;break}while(le<16){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if(i.wrap&2&&se===35615){i.check=0;ye[0]=se&255;ye[1]=se>>>8&255;i.check=n(i.check,ye,2,0);se=0;le=0;i.mode=E;break}i.flags=0;if(i.head){i.head.done=false}if(!(i.wrap&1)||(((se&255)<<8)+(se>>8))%31){e.msg=\"incorrect header check\";i.mode=J;break}if((se&15)!==k){e.msg=\"unknown compression method\";i.mode=J;break}se>>>=4;le-=4;me=(se&15)+8;if(i.wbits===0){i.wbits=me}else if(me>i.wbits){e.msg=\"invalid window size\";i.mode=J;break}i.dmax=1<<me;e.adler=i.check=1;i.mode=se&512?A:F;se=0;le=0;break;case E:while(le<16){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}i.flags=se;if((i.flags&255)!==k){e.msg=\"unknown compression method\";i.mode=J;break}if(i.flags&57344){e.msg=\"unknown header flags set\";i.mode=J;break}if(i.head){i.head.text=se>>8&1}if(i.flags&512){ye[0]=se&255;ye[1]=se>>>8&255;i.check=n(i.check,ye,2,0)}se=0;le=0;i.mode=z;case z:while(le<32){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if(i.head){i.head.time=se}if(i.flags&512){ye[0]=se&255;ye[1]=se>>>8&255;ye[2]=se>>>16&255;ye[3]=se>>>24&255;i.check=n(i.check,ye,4,0)}se=0;le=0;i.mode=Z;case Z:while(le<16){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if(i.head){i.head.xflags=se&255;i.head.os=se>>8}if(i.flags&512){ye[0]=se&255;ye[1]=se>>>8&255;i.check=n(i.check,ye,2,0)}se=0;le=0;i.mode=x;case x:if(i.flags&1024){while(le<16){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}i.length=se;if(i.head){i.head.extra_len=se}if(i.flags&512){ye[0]=se&255;ye[1]=se>>>8&255;i.check=n(i.check,ye,2,0)}se=0;le=0}else if(i.head){i.head.extra=null}i.mode=I;case I:if(i.flags&1024){he=i.length;if(he>re){he=re}if(he){if(i.head){me=i.head.extra_len-i.length;if(!i.head.extra){i.head.extra=new Array(i.head.extra_len)}a.arraySet(i.head.extra,ee,ie,he,me)}if(i.flags&512){i.check=n(i.check,ee,he,ie)}re-=he;ie+=he;i.length-=he}if(i.length){break e}}i.length=0;i.mode=R;case R:if(i.flags&2048){if(re===0){break e}he=0;do{me=ee[ie+he++];if(i.head&&me&&i.length<65536){i.head.name+=String.fromCharCode(me)}}while(me&&he<re);if(i.flags&512){i.check=n(i.check,ee,he,ie)}re-=he;ie+=he;if(me){break e}}else if(i.head){i.head.name=null}i.length=0;i.mode=S;case S:if(i.flags&4096){if(re===0){break e}he=0;do{me=ee[ie+he++];if(i.head&&me&&i.length<65536){i.head.comment+=String.fromCharCode(me)}}while(me&&he<re);if(i.flags&512){i.check=n(i.check,ee,he,ie)}re-=he;ie+=he;if(me){break e}}else if(i.head){i.head.comment=null}i.mode=L;case L:if(i.flags&512){while(le<16){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if(se!==(i.check&65535)){e.msg=\"header crc mismatch\";i.mode=J;break}se=0;le=0}if(i.head){i.head.hcrc=i.flags>>9&1;i.head.done=true}e.adler=i.check=0;i.mode=F;break;case A:while(le<32){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}e.adler=i.check=zswap32(se);se=0;le=0;i.mode=T;case T:if(i.havedict===0){e.next_out=ae;e.avail_out=ne;e.next_in=ie;e.avail_in=re;i.hold=se;i.bits=le;return b}e.adler=i.check=1;i.mode=F;case F:if(t===d||t===u){break e}case N:if(i.last){se>>>=le&7;le-=le&7;i.mode=X;break}while(le<3){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}i.last=se&1;se>>>=1;le-=1;switch(se&3){case 0:i.mode=D;break;case 1:fixedtables(i);i.mode=G;if(t===u){se>>>=2;le-=2;break e}break;case 2:i.mode=O;break;case 3:e.msg=\"invalid block type\";i.mode=J}se>>>=2;le-=2;break;case D:se>>>=le&7;le-=le&7;while(le<32){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if((se&65535)!==(se>>>16^65535)){e.msg=\"invalid stored block lengths\";i.mode=J;break}i.length=se&65535;se=0;le=0;i.mode=B;if(t===u){break e}case B:i.mode=U;case U:he=i.length;if(he){if(he>re){he=re}if(he>ne){he=ne}if(he===0){break e}a.arraySet(te,ee,ie,he,ae);re-=he;ie+=he;ne-=he;ae+=he;i.length-=he;break}i.mode=F;break;case O:while(le<14){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}i.nlen=(se&31)+257;se>>>=5;le-=5;i.ndist=(se&31)+1;se>>>=5;le-=5;i.ncode=(se&15)+4;se>>>=4;le-=4;if(i.nlen>286||i.ndist>30){e.msg=\"too many length or distance symbols\";i.mode=J;break}i.have=0;i.mode=M;case M:while(i.have<i.ncode){while(le<3){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}i.lens[Ze[i.have++]]=se&7;se>>>=3;le-=3}while(i.have<19){i.lens[Ze[i.have++]]=0}i.lencode=i.lendyn;i.lenbits=7;Ee={bits:i.lenbits};ke=l(f,i.lens,0,19,i.lencode,0,i.work,Ee);i.lenbits=Ee.bits;if(ke){e.msg=\"invalid code lengths set\";i.mode=J;break}i.have=0;i.mode=C;case C:while(i.have<i.nlen+i.ndist){for(;;){ue=i.lencode[se&(1<<i.lenbits)-1];ce=ue>>>24;ve=ue>>>16&255;be=ue&65535;if(ce<=le){break}if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if(be<16){se>>>=ce;le-=ce;i.lens[i.have++]=be}else{if(be===16){ze=ce+2;while(le<ze){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}se>>>=ce;le-=ce;if(i.have===0){e.msg=\"invalid bit length repeat\";i.mode=J;break}me=i.lens[i.have-1];he=3+(se&3);se>>>=2;le-=2}else if(be===17){ze=ce+3;while(le<ze){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}se>>>=ce;le-=ce;me=0;he=3+(se&7);se>>>=3;le-=3}else{ze=ce+7;while(le<ze){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}se>>>=ce;le-=ce;me=0;he=11+(se&127);se>>>=7;le-=7}if(i.have+he>i.nlen+i.ndist){e.msg=\"invalid bit length repeat\";i.mode=J;break}while(he--){i.lens[i.have++]=me}}}if(i.mode===J){break}if(i.lens[256]===0){e.msg=\"invalid code -- missing end-of-block\";i.mode=J;break}i.lenbits=9;Ee={bits:i.lenbits};ke=l(o,i.lens,0,i.nlen,i.lencode,0,i.work,Ee);i.lenbits=Ee.bits;if(ke){e.msg=\"invalid literal/lengths set\";i.mode=J;break}i.distbits=6;i.distcode=i.distdyn;Ee={bits:i.distbits};ke=l(h,i.lens,i.nlen,i.ndist,i.distcode,0,i.work,Ee);i.distbits=Ee.bits;if(ke){e.msg=\"invalid distances set\";i.mode=J;break}i.mode=G;if(t===u){break e}case G:i.mode=H;case H:if(re>=6&&ne>=258){e.next_out=ae;e.avail_out=ne;e.next_in=ie;e.avail_in=re;i.hold=se;i.bits=le;s(e,oe);ae=e.next_out;te=e.output;ne=e.avail_out;ie=e.next_in;ee=e.input;re=e.avail_in;se=i.hold;le=i.bits;if(i.mode===F){i.back=-1}break}i.back=0;for(;;){ue=i.lencode[se&(1<<i.lenbits)-1];ce=ue>>>24;ve=ue>>>16&255;be=ue&65535;if(ce<=le){break}if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if(ve&&(ve&240)===0){we=ce;pe=ve;ge=be;for(;;){ue=i.lencode[ge+((se&(1<<we+pe)-1)>>we)];ce=ue>>>24;ve=ue>>>16&255;be=ue&65535;if(we+ce<=le){break}if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}se>>>=we;le-=we;i.back+=we}se>>>=ce;le-=ce;i.back+=ce;i.length=be;if(ve===0){i.mode=q;break}if(ve&32){i.back=-1;i.mode=F;break}if(ve&64){e.msg=\"invalid literal/length code\";i.mode=J;break}i.extra=ve&15;i.mode=P;case P:if(i.extra){ze=i.extra;while(le<ze){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}i.length+=se&(1<<i.extra)-1;se>>>=i.extra;le-=i.extra;i.back+=i.extra}i.was=i.length;i.mode=K;case K:for(;;){ue=i.distcode[se&(1<<i.distbits)-1];ce=ue>>>24;ve=ue>>>16&255;be=ue&65535;if(ce<=le){break}if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if((ve&240)===0){we=ce;pe=ve;ge=be;for(;;){ue=i.distcode[ge+((se&(1<<we+pe)-1)>>we)];ce=ue>>>24;ve=ue>>>16&255;be=ue&65535;if(we+ce<=le){break}if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}se>>>=we;le-=we;i.back+=we}se>>>=ce;le-=ce;i.back+=ce;if(ve&64){e.msg=\"invalid distance code\";i.mode=J;break}i.offset=be;i.extra=ve&15;i.mode=W;case W:if(i.extra){ze=i.extra;while(le<ze){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}i.offset+=se&(1<<i.extra)-1;se>>>=i.extra;le-=i.extra;i.back+=i.extra}if(i.offset>i.dmax){e.msg=\"invalid distance too far back\";i.mode=J;break}i.mode=V;case V:if(ne===0){break e}he=oe-ne;if(i.offset>he){he=i.offset-he;if(he>i.whave){if(i.sane){e.msg=\"invalid distance too far back\";i.mode=J;break}}if(he>i.wnext){he-=i.wnext;_e=i.wsize-he}else{_e=i.wnext-he}if(he>i.length){he=i.length}de=i.window}else{de=te;_e=ae-i.offset;he=i.length}if(he>ne){he=ne}ne-=he;i.length-=he;do{te[ae++]=de[_e++]}while(--he);if(i.length===0){i.mode=H}break;case q:if(ne===0){break e}te[ae++]=i.length;ne--;i.mode=H;break;case X:if(i.wrap){while(le<32){if(re===0){break e}re--;se|=ee[ie++]<<le;le+=8}oe-=ne;e.total_out+=oe;i.total+=oe;if(oe){e.adler=i.check=i.flags?n(i.check,te,oe,ae-oe):r(i.check,te,oe,ae-oe)}oe=ne;if((i.flags?se:zswap32(se))!==i.check){e.msg=\"incorrect data check\";i.mode=J;break}se=0;le=0}i.mode=Y;case Y:if(i.wrap&&i.flags){while(le<32){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if(se!==(i.total&4294967295)){e.msg=\"incorrect length check\";i.mode=J;break}se=0;le=0}i.mode=j;case j:ke=v;break e;case J:ke=p;break e;case Q:return g;case $:default:return w}}e.next_out=ae;e.avail_out=ne;e.next_in=ie;e.avail_in=re;i.hold=se;i.bits=le;if(i.wsize||oe!==e.avail_out&&i.mode<J&&(i.mode<X||t!==_)){if(updatewindow(e,e.output,e.next_out,oe-e.avail_out)){i.mode=Q;return g}}fe-=e.avail_in;oe-=e.avail_out;e.total_in+=fe;e.total_out+=oe;i.total+=oe;if(i.wrap&&oe){e.adler=i.check=i.flags?n(i.check,te,oe,e.next_out-oe):r(i.check,te,oe,e.next_out-oe)}e.data_type=i.bits+(i.last?64:0)+(i.mode===F?128:0)+(i.mode===G||i.mode===B?256:0);if((fe===0&&oe===0||t===_)&&ke===c){ke=m}return ke}function inflateEnd(e){if(!e||!e.state){return w}var t=e.state;if(t.window){t.window=null}e.state=null;return c}function inflateGetHeader(e,t){var i;if(!e||!e.state){return w}i=e.state;if((i.wrap&2)===0){return w}i.head=t;t.done=false;return c}function inflateSetDictionary(e,t){var i=t.length;var a;var n;var s;if(!e||!e.state){return w}a=e.state;if(a.wrap!==0&&a.mode!==T){return w}if(a.mode===T){n=1;n=r(n,t,i,0);if(n!==a.check){return p}}s=updatewindow(e,t,i,i);if(s){a.mode=Q;return g}a.havedict=1;return c}t.inflateReset=inflateReset;t.inflateReset2=inflateReset2;t.inflateResetKeep=inflateResetKeep;t.inflateInit=inflateInit;t.inflateInit2=inflateInit2;t.inflate=inflate;t.inflateEnd=inflateEnd;t.inflateGetHeader=inflateGetHeader;t.inflateSetDictionary=inflateSetDictionary;t.inflateInfo=\"pako inflate (from Nodeca project)\"},19:function(e,t,i){var a=i(380);var r=15;var n=852;var s=592;var l=0;var f=1;var o=2;var h=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0];var _=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78];var d=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0];var u=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function inflate_table(e,t,i,c,v,b,w,p){var g=p.bits;var m=0;var k=0;var y=0,E=0;var z=0;var Z=0;var x=0;var I=0;var R=0;var S=0;var L;var A;var T;var F;var N;var D=null;var B=0;var U;var O=new a.Buf16(r+1);var M=new a.Buf16(r+1);var C=null;var G=0;var H,P,K;for(m=0;m<=r;m++){O[m]=0}for(k=0;k<c;k++){O[t[i+k]]++}z=g;for(E=r;E>=1;E--){if(O[E]!==0){break}}if(z>E){z=E}if(E===0){v[b++]=1<<24|64<<16|0;v[b++]=1<<24|64<<16|0;p.bits=1;return 0}for(y=1;y<E;y++){if(O[y]!==0){break}}if(z<y){z=y}I=1;for(m=1;m<=r;m++){I<<=1;I-=O[m];if(I<0){return-1}}if(I>0&&(e===l||E!==1)){return-1}M[1]=0;for(m=1;m<r;m++){M[m+1]=M[m]+O[m]}for(k=0;k<c;k++){if(t[i+k]!==0){w[M[t[i+k]]++]=k}}if(e===l){D=C=w;U=19}else if(e===f){D=h;B-=257;C=_;G-=257;U=256}else{D=d;C=u;U=-1}S=0;k=0;m=y;N=b;Z=z;x=0;T=-1;R=1<<z;F=R-1;if(e===f&&R>n||e===o&&R>s){return 1}for(;;){H=m-x;if(w[k]<U){P=0;K=w[k]}else if(w[k]>U){P=C[G+w[k]];K=D[B+w[k]]}else{P=32+64;K=0}L=1<<m-x;A=1<<Z;y=A;do{A-=L;v[N+(S>>x)+A]=H<<24|P<<16|K|0}while(A!==0);L=1<<m-1;while(S&L){L>>=1}if(L!==0){S&=L-1;S+=L}else{S=0}k++;if(--O[m]===0){if(m===E){break}m=t[i+w[k]]}if(m>z&&(S&F)!==T){if(x===0){x=z}N+=y;Z=m-x;I=1<<Z;while(Z+x<E){I-=O[Z+x];if(I<=0){break}Z++;I<<=1}R+=1<<Z;if(e===f&&R>n||e===o&&R>s){return 1}T=S&F;v[T]=z<<24|Z<<16|N-b|0}}if(S!==0){v[N+S]=m-x<<24|64<<16|0}p.bits=z;return 0}},31:function(e){e.exports={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"}},842:function(e,t,i){var a=i(380);var r=4;var n=0;var s=1;var l=2;function zero(e){var t=e.length;while(--t>=0){e[t]=0}}var f=0;var o=1;var h=2;var _=3;var d=258;var u=29;var c=256;var v=c+1+u;var b=30;var w=19;var p=2*v+1;var g=15;var m=16;var k=7;var y=256;var E=16;var z=17;var Z=18;var x=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];var I=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];var R=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];var S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];var L=512;var A=new Array((v+2)*2);zero(A);var T=new Array(b*2);zero(T);var F=new Array(L);zero(F);var N=new Array(d-_+1);zero(N);var D=new Array(u);zero(D);var B=new Array(b);zero(B);function StaticTreeDesc(e,t,i,a,r){this.static_tree=e;this.extra_bits=t;this.extra_base=i;this.elems=a;this.max_length=r;this.has_stree=e&&e.length}var U;var O;var M;function TreeDesc(e,t){this.dyn_tree=e;this.max_code=0;this.stat_desc=t}function d_code(e){return e<256?F[e]:F[256+(e>>>7)]}function put_short(e,t){e.pending_buf[e.pending++]=t&255;e.pending_buf[e.pending++]=t>>>8&255}function send_bits(e,t,i){if(e.bi_valid>m-i){e.bi_buf|=t<<e.bi_valid&65535;put_short(e,e.bi_buf);e.bi_buf=t>>m-e.bi_valid;e.bi_valid+=i-m}else{e.bi_buf|=t<<e.bi_valid&65535;e.bi_valid+=i}}function send_code(e,t,i){send_bits(e,i[t*2],i[t*2+1])}function bi_reverse(e,t){var i=0;do{i|=e&1;e>>>=1;i<<=1}while(--t>0);return i>>>1}function bi_flush(e){if(e.bi_valid===16){put_short(e,e.bi_buf);e.bi_buf=0;e.bi_valid=0}else if(e.bi_valid>=8){e.pending_buf[e.pending++]=e.bi_buf&255;e.bi_buf>>=8;e.bi_valid-=8}}function gen_bitlen(e,t){var i=t.dyn_tree;var a=t.max_code;var r=t.stat_desc.static_tree;var n=t.stat_desc.has_stree;var s=t.stat_desc.extra_bits;var l=t.stat_desc.extra_base;var f=t.stat_desc.max_length;var o;var h,_;var d;var u;var c;var v=0;for(d=0;d<=g;d++){e.bl_count[d]=0}i[e.heap[e.heap_max]*2+1]=0;for(o=e.heap_max+1;o<p;o++){h=e.heap[o];d=i[i[h*2+1]*2+1]+1;if(d>f){d=f;v++}i[h*2+1]=d;if(h>a){continue}e.bl_count[d]++;u=0;if(h>=l){u=s[h-l]}c=i[h*2];e.opt_len+=c*(d+u);if(n){e.static_len+=c*(r[h*2+1]+u)}}if(v===0){return}do{d=f-1;while(e.bl_count[d]===0){d--}e.bl_count[d]--;e.bl_count[d+1]+=2;e.bl_count[f]--;v-=2}while(v>0);for(d=f;d!==0;d--){h=e.bl_count[d];while(h!==0){_=e.heap[--o];if(_>a){continue}if(i[_*2+1]!==d){e.opt_len+=(d-i[_*2+1])*i[_*2];i[_*2+1]=d}h--}}}function gen_codes(e,t,i){var a=new Array(g+1);var r=0;var n;var s;for(n=1;n<=g;n++){a[n]=r=r+i[n-1]<<1}for(s=0;s<=t;s++){var l=e[s*2+1];if(l===0){continue}e[s*2]=bi_reverse(a[l]++,l)}}function tr_static_init(){var e;var t;var i;var a;var r;var n=new Array(g+1);i=0;for(a=0;a<u-1;a++){D[a]=i;for(e=0;e<1<<x[a];e++){N[i++]=a}}N[i-1]=a;r=0;for(a=0;a<16;a++){B[a]=r;for(e=0;e<1<<I[a];e++){F[r++]=a}}r>>=7;for(;a<b;a++){B[a]=r<<7;for(e=0;e<1<<I[a]-7;e++){F[256+r++]=a}}for(t=0;t<=g;t++){n[t]=0}e=0;while(e<=143){A[e*2+1]=8;e++;n[8]++}while(e<=255){A[e*2+1]=9;e++;n[9]++}while(e<=279){A[e*2+1]=7;e++;n[7]++}while(e<=287){A[e*2+1]=8;e++;n[8]++}gen_codes(A,v+1,n);for(e=0;e<b;e++){T[e*2+1]=5;T[e*2]=bi_reverse(e,5)}U=new StaticTreeDesc(A,x,c+1,v,g);O=new StaticTreeDesc(T,I,0,b,g);M=new StaticTreeDesc(new Array(0),R,0,w,k)}function init_block(e){var t;for(t=0;t<v;t++){e.dyn_ltree[t*2]=0}for(t=0;t<b;t++){e.dyn_dtree[t*2]=0}for(t=0;t<w;t++){e.bl_tree[t*2]=0}e.dyn_ltree[y*2]=1;e.opt_len=e.static_len=0;e.last_lit=e.matches=0}function bi_windup(e){if(e.bi_valid>8){put_short(e,e.bi_buf)}else if(e.bi_valid>0){e.pending_buf[e.pending++]=e.bi_buf}e.bi_buf=0;e.bi_valid=0}function copy_block(e,t,i,r){bi_windup(e);if(r){put_short(e,i);put_short(e,~i)}a.arraySet(e.pending_buf,e.window,t,i,e.pending);e.pending+=i}function smaller(e,t,i,a){var r=t*2;var n=i*2;return e[r]<e[n]||e[r]===e[n]&&a[t]<=a[i]}function pqdownheap(e,t,i){var a=e.heap[i];var r=i<<1;while(r<=e.heap_len){if(r<e.heap_len&&smaller(t,e.heap[r+1],e.heap[r],e.depth)){r++}if(smaller(t,a,e.heap[r],e.depth)){break}e.heap[i]=e.heap[r];i=r;r<<=1}e.heap[i]=a}function compress_block(e,t,i){var a;var r;var n=0;var s;var l;if(e.last_lit!==0){do{a=e.pending_buf[e.d_buf+n*2]<<8|e.pending_buf[e.d_buf+n*2+1];r=e.pending_buf[e.l_buf+n];n++;if(a===0){send_code(e,r,t)}else{s=N[r];send_code(e,s+c+1,t);l=x[s];if(l!==0){r-=D[s];send_bits(e,r,l)}a--;s=d_code(a);send_code(e,s,i);l=I[s];if(l!==0){a-=B[s];send_bits(e,a,l)}}}while(n<e.last_lit)}send_code(e,y,t)}function build_tree(e,t){var i=t.dyn_tree;var a=t.stat_desc.static_tree;var r=t.stat_desc.has_stree;var n=t.stat_desc.elems;var s,l;var f=-1;var o;e.heap_len=0;e.heap_max=p;for(s=0;s<n;s++){if(i[s*2]!==0){e.heap[++e.heap_len]=f=s;e.depth[s]=0}else{i[s*2+1]=0}}while(e.heap_len<2){o=e.heap[++e.heap_len]=f<2?++f:0;i[o*2]=1;e.depth[o]=0;e.opt_len--;if(r){e.static_len-=a[o*2+1]}}t.max_code=f;for(s=e.heap_len>>1;s>=1;s--){pqdownheap(e,i,s)}o=n;do{s=e.heap[1];e.heap[1]=e.heap[e.heap_len--];pqdownheap(e,i,1);l=e.heap[1];e.heap[--e.heap_max]=s;e.heap[--e.heap_max]=l;i[o*2]=i[s*2]+i[l*2];e.depth[o]=(e.depth[s]>=e.depth[l]?e.depth[s]:e.depth[l])+1;i[s*2+1]=i[l*2+1]=o;e.heap[1]=o++;pqdownheap(e,i,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1];gen_bitlen(e,t);gen_codes(i,f,e.bl_count)}function scan_tree(e,t,i){var a;var r=-1;var n;var s=t[0*2+1];var l=0;var f=7;var o=4;if(s===0){f=138;o=3}t[(i+1)*2+1]=65535;for(a=0;a<=i;a++){n=s;s=t[(a+1)*2+1];if(++l<f&&n===s){continue}else if(l<o){e.bl_tree[n*2]+=l}else if(n!==0){if(n!==r){e.bl_tree[n*2]++}e.bl_tree[E*2]++}else if(l<=10){e.bl_tree[z*2]++}else{e.bl_tree[Z*2]++}l=0;r=n;if(s===0){f=138;o=3}else if(n===s){f=6;o=3}else{f=7;o=4}}}function send_tree(e,t,i){var a;var r=-1;var n;var s=t[0*2+1];var l=0;var f=7;var o=4;if(s===0){f=138;o=3}for(a=0;a<=i;a++){n=s;s=t[(a+1)*2+1];if(++l<f&&n===s){continue}else if(l<o){do{send_code(e,n,e.bl_tree)}while(--l!==0)}else if(n!==0){if(n!==r){send_code(e,n,e.bl_tree);l--}send_code(e,E,e.bl_tree);send_bits(e,l-3,2)}else if(l<=10){send_code(e,z,e.bl_tree);send_bits(e,l-3,3)}else{send_code(e,Z,e.bl_tree);send_bits(e,l-11,7)}l=0;r=n;if(s===0){f=138;o=3}else if(n===s){f=6;o=3}else{f=7;o=4}}}function build_bl_tree(e){var t;scan_tree(e,e.dyn_ltree,e.l_desc.max_code);scan_tree(e,e.dyn_dtree,e.d_desc.max_code);build_tree(e,e.bl_desc);for(t=w-1;t>=3;t--){if(e.bl_tree[S[t]*2+1]!==0){break}}e.opt_len+=3*(t+1)+5+5+4;return t}function send_all_trees(e,t,i,a){var r;send_bits(e,t-257,5);send_bits(e,i-1,5);send_bits(e,a-4,4);for(r=0;r<a;r++){send_bits(e,e.bl_tree[S[r]*2+1],3)}send_tree(e,e.dyn_ltree,t-1);send_tree(e,e.dyn_dtree,i-1)}function detect_data_type(e){var t=4093624447;var i;for(i=0;i<=31;i++,t>>>=1){if(t&1&&e.dyn_ltree[i*2]!==0){return n}}if(e.dyn_ltree[9*2]!==0||e.dyn_ltree[10*2]!==0||e.dyn_ltree[13*2]!==0){return s}for(i=32;i<c;i++){if(e.dyn_ltree[i*2]!==0){return s}}return n}var C=false;function _tr_init(e){if(!C){tr_static_init();C=true}e.l_desc=new TreeDesc(e.dyn_ltree,U);e.d_desc=new TreeDesc(e.dyn_dtree,O);e.bl_desc=new TreeDesc(e.bl_tree,M);e.bi_buf=0;e.bi_valid=0;init_block(e)}function _tr_stored_block(e,t,i,a){send_bits(e,(f<<1)+(a?1:0),3);copy_block(e,t,i,true)}function _tr_align(e){send_bits(e,o<<1,3);send_code(e,y,A);bi_flush(e)}function _tr_flush_block(e,t,i,a){var n,s;var f=0;if(e.level>0){if(e.strm.data_type===l){e.strm.data_type=detect_data_type(e)}build_tree(e,e.l_desc);build_tree(e,e.d_desc);f=build_bl_tree(e);n=e.opt_len+3+7>>>3;s=e.static_len+3+7>>>3;if(s<=n){n=s}}else{n=s=i+5}if(i+4<=n&&t!==-1){_tr_stored_block(e,t,i,a)}else if(e.strategy===r||s===n){send_bits(e,(o<<1)+(a?1:0),3);compress_block(e,A,T)}else{send_bits(e,(h<<1)+(a?1:0),3);send_all_trees(e,e.l_desc.max_code+1,e.d_desc.max_code+1,f+1);compress_block(e,e.dyn_ltree,e.dyn_dtree)}init_block(e);if(a){bi_windup(e)}}function _tr_tally(e,t,i){e.pending_buf[e.d_buf+e.last_lit*2]=t>>>8&255;e.pending_buf[e.d_buf+e.last_lit*2+1]=t&255;e.pending_buf[e.l_buf+e.last_lit]=i&255;e.last_lit++;if(t===0){e.dyn_ltree[i*2]++}else{e.matches++;t--;e.dyn_ltree[(N[i]+c+1)*2]++;e.dyn_dtree[d_code(t)*2]++}return e.last_lit===e.lit_bufsize-1}t._tr_init=_tr_init;t._tr_stored_block=_tr_stored_block;t._tr_flush_block=_tr_flush_block;t._tr_tally=_tr_tally;t._tr_align=_tr_align},562:function(e){function ZStream(){this.input=null;this.next_in=0;this.avail_in=0;this.total_in=0;this.output=null;this.next_out=0;this.avail_out=0;this.total_out=0;this.msg=\"\";this.state=null;this.data_type=2;this.adler=0}e.exports=ZStream},491:function(e){e.exports=__webpack_require__(/*! assert */ \"./node_modules/next/dist/compiled/assert/assert.js\")},300:function(e){e.exports=__webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")},781:function(e){e.exports=__webpack_require__(/*! stream */ \"./node_modules/next/dist/compiled/stream-browserify/index.js\")},837:function(e){e.exports=__webpack_require__(/*! util */ \"./node_modules/next/dist/compiled/util/util.js\")}};var t={};function __nccwpck_require__(i){var a=t[i];if(a!==undefined){return a.exports}var r=t[i]={exports:{}};var n=true;try{e[i](r,r.exports,__nccwpck_require__);n=false}finally{if(n)delete t[i]}return r.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var i=__nccwpck_require__(23);module.exports=i})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/browserify-zlib/index.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/buffer/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/compiled/buffer/index.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={675:function(e,r){\"use strict\";r.byteLength=byteLength;r.toByteArray=toByteArray;r.fromByteArray=fromByteArray;var t=[];var f=[];var n=typeof Uint8Array!==\"undefined\"?Uint8Array:Array;var i=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";for(var o=0,u=i.length;o<u;++o){t[o]=i[o];f[i.charCodeAt(o)]=o}f[\"-\".charCodeAt(0)]=62;f[\"_\".charCodeAt(0)]=63;function getLens(e){var r=e.length;if(r%4>0){throw new Error(\"Invalid string. Length must be a multiple of 4\")}var t=e.indexOf(\"=\");if(t===-1)t=r;var f=t===r?0:4-t%4;return[t,f]}function byteLength(e){var r=getLens(e);var t=r[0];var f=r[1];return(t+f)*3/4-f}function _byteLength(e,r,t){return(r+t)*3/4-t}function toByteArray(e){var r;var t=getLens(e);var i=t[0];var o=t[1];var u=new n(_byteLength(e,i,o));var a=0;var s=o>0?i-4:i;var h;for(h=0;h<s;h+=4){r=f[e.charCodeAt(h)]<<18|f[e.charCodeAt(h+1)]<<12|f[e.charCodeAt(h+2)]<<6|f[e.charCodeAt(h+3)];u[a++]=r>>16&255;u[a++]=r>>8&255;u[a++]=r&255}if(o===2){r=f[e.charCodeAt(h)]<<2|f[e.charCodeAt(h+1)]>>4;u[a++]=r&255}if(o===1){r=f[e.charCodeAt(h)]<<10|f[e.charCodeAt(h+1)]<<4|f[e.charCodeAt(h+2)]>>2;u[a++]=r>>8&255;u[a++]=r&255}return u}function tripletToBase64(e){return t[e>>18&63]+t[e>>12&63]+t[e>>6&63]+t[e&63]}function encodeChunk(e,r,t){var f;var n=[];for(var i=r;i<t;i+=3){f=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(e[i+2]&255);n.push(tripletToBase64(f))}return n.join(\"\")}function fromByteArray(e){var r;var f=e.length;var n=f%3;var i=[];var o=16383;for(var u=0,a=f-n;u<a;u+=o){i.push(encodeChunk(e,u,u+o>a?a:u+o))}if(n===1){r=e[f-1];i.push(t[r>>2]+t[r<<4&63]+\"==\")}else if(n===2){r=(e[f-2]<<8)+e[f-1];i.push(t[r>>10]+t[r>>4&63]+t[r<<2&63]+\"=\")}return i.join(\"\")}},72:function(e,r,t){\"use strict\";\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */var f=t(675);var n=t(783);var i=typeof Symbol===\"function\"&&typeof Symbol.for===\"function\"?Symbol.for(\"nodejs.util.inspect.custom\"):null;r.Buffer=Buffer;r.SlowBuffer=SlowBuffer;r.INSPECT_MAX_BYTES=50;var o=2147483647;r.kMaxLength=o;Buffer.TYPED_ARRAY_SUPPORT=typedArraySupport();if(!Buffer.TYPED_ARRAY_SUPPORT&&typeof console!==\"undefined\"&&typeof console.error===\"function\"){console.error(\"This browser lacks typed array (Uint8Array) support which is required by \"+\"`buffer` v5.x. Use `buffer` v4.x if you require old browser support.\")}function typedArraySupport(){try{var e=new Uint8Array(1);var r={foo:function(){return 42}};Object.setPrototypeOf(r,Uint8Array.prototype);Object.setPrototypeOf(e,r);return e.foo()===42}catch(e){return false}}Object.defineProperty(Buffer.prototype,\"parent\",{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.buffer}});Object.defineProperty(Buffer.prototype,\"offset\",{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.byteOffset}});function createBuffer(e){if(e>o){throw new RangeError('The value \"'+e+'\" is invalid for option \"size\"')}var r=new Uint8Array(e);Object.setPrototypeOf(r,Buffer.prototype);return r}function Buffer(e,r,t){if(typeof e===\"number\"){if(typeof r===\"string\"){throw new TypeError('The \"string\" argument must be of type string. Received type number')}return allocUnsafe(e)}return from(e,r,t)}Buffer.poolSize=8192;function from(e,r,t){if(typeof e===\"string\"){return fromString(e,r)}if(ArrayBuffer.isView(e)){return fromArrayLike(e)}if(e==null){throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \"+\"or Array-like Object. Received type \"+typeof e)}if(isInstance(e,ArrayBuffer)||e&&isInstance(e.buffer,ArrayBuffer)){return fromArrayBuffer(e,r,t)}if(typeof SharedArrayBuffer!==\"undefined\"&&(isInstance(e,SharedArrayBuffer)||e&&isInstance(e.buffer,SharedArrayBuffer))){return fromArrayBuffer(e,r,t)}if(typeof e===\"number\"){throw new TypeError('The \"value\" argument must not be of type number. Received type number')}var f=e.valueOf&&e.valueOf();if(f!=null&&f!==e){return Buffer.from(f,r,t)}var n=fromObject(e);if(n)return n;if(typeof Symbol!==\"undefined\"&&Symbol.toPrimitive!=null&&typeof e[Symbol.toPrimitive]===\"function\"){return Buffer.from(e[Symbol.toPrimitive](\"string\"),r,t)}throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \"+\"or Array-like Object. Received type \"+typeof e)}Buffer.from=function(e,r,t){return from(e,r,t)};Object.setPrototypeOf(Buffer.prototype,Uint8Array.prototype);Object.setPrototypeOf(Buffer,Uint8Array);function assertSize(e){if(typeof e!==\"number\"){throw new TypeError('\"size\" argument must be of type number')}else if(e<0){throw new RangeError('The value \"'+e+'\" is invalid for option \"size\"')}}function alloc(e,r,t){assertSize(e);if(e<=0){return createBuffer(e)}if(r!==undefined){return typeof t===\"string\"?createBuffer(e).fill(r,t):createBuffer(e).fill(r)}return createBuffer(e)}Buffer.alloc=function(e,r,t){return alloc(e,r,t)};function allocUnsafe(e){assertSize(e);return createBuffer(e<0?0:checked(e)|0)}Buffer.allocUnsafe=function(e){return allocUnsafe(e)};Buffer.allocUnsafeSlow=function(e){return allocUnsafe(e)};function fromString(e,r){if(typeof r!==\"string\"||r===\"\"){r=\"utf8\"}if(!Buffer.isEncoding(r)){throw new TypeError(\"Unknown encoding: \"+r)}var t=byteLength(e,r)|0;var f=createBuffer(t);var n=f.write(e,r);if(n!==t){f=f.slice(0,n)}return f}function fromArrayLike(e){var r=e.length<0?0:checked(e.length)|0;var t=createBuffer(r);for(var f=0;f<r;f+=1){t[f]=e[f]&255}return t}function fromArrayBuffer(e,r,t){if(r<0||e.byteLength<r){throw new RangeError('\"offset\" is outside of buffer bounds')}if(e.byteLength<r+(t||0)){throw new RangeError('\"length\" is outside of buffer bounds')}var f;if(r===undefined&&t===undefined){f=new Uint8Array(e)}else if(t===undefined){f=new Uint8Array(e,r)}else{f=new Uint8Array(e,r,t)}Object.setPrototypeOf(f,Buffer.prototype);return f}function fromObject(e){if(Buffer.isBuffer(e)){var r=checked(e.length)|0;var t=createBuffer(r);if(t.length===0){return t}e.copy(t,0,0,r);return t}if(e.length!==undefined){if(typeof e.length!==\"number\"||numberIsNaN(e.length)){return createBuffer(0)}return fromArrayLike(e)}if(e.type===\"Buffer\"&&Array.isArray(e.data)){return fromArrayLike(e.data)}}function checked(e){if(e>=o){throw new RangeError(\"Attempt to allocate Buffer larger than maximum \"+\"size: 0x\"+o.toString(16)+\" bytes\")}return e|0}function SlowBuffer(e){if(+e!=e){e=0}return Buffer.alloc(+e)}Buffer.isBuffer=function isBuffer(e){return e!=null&&e._isBuffer===true&&e!==Buffer.prototype};Buffer.compare=function compare(e,r){if(isInstance(e,Uint8Array))e=Buffer.from(e,e.offset,e.byteLength);if(isInstance(r,Uint8Array))r=Buffer.from(r,r.offset,r.byteLength);if(!Buffer.isBuffer(e)||!Buffer.isBuffer(r)){throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array')}if(e===r)return 0;var t=e.length;var f=r.length;for(var n=0,i=Math.min(t,f);n<i;++n){if(e[n]!==r[n]){t=e[n];f=r[n];break}}if(t<f)return-1;if(f<t)return 1;return 0};Buffer.isEncoding=function isEncoding(e){switch(String(e).toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"latin1\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return true;default:return false}};Buffer.concat=function concat(e,r){if(!Array.isArray(e)){throw new TypeError('\"list\" argument must be an Array of Buffers')}if(e.length===0){return Buffer.alloc(0)}var t;if(r===undefined){r=0;for(t=0;t<e.length;++t){r+=e[t].length}}var f=Buffer.allocUnsafe(r);var n=0;for(t=0;t<e.length;++t){var i=e[t];if(isInstance(i,Uint8Array)){i=Buffer.from(i)}if(!Buffer.isBuffer(i)){throw new TypeError('\"list\" argument must be an Array of Buffers')}i.copy(f,n);n+=i.length}return f};function byteLength(e,r){if(Buffer.isBuffer(e)){return e.length}if(ArrayBuffer.isView(e)||isInstance(e,ArrayBuffer)){return e.byteLength}if(typeof e!==\"string\"){throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. '+\"Received type \"+typeof e)}var t=e.length;var f=arguments.length>2&&arguments[2]===true;if(!f&&t===0)return 0;var n=false;for(;;){switch(r){case\"ascii\":case\"latin1\":case\"binary\":return t;case\"utf8\":case\"utf-8\":return utf8ToBytes(e).length;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return t*2;case\"hex\":return t>>>1;case\"base64\":return base64ToBytes(e).length;default:if(n){return f?-1:utf8ToBytes(e).length}r=(\"\"+r).toLowerCase();n=true}}}Buffer.byteLength=byteLength;function slowToString(e,r,t){var f=false;if(r===undefined||r<0){r=0}if(r>this.length){return\"\"}if(t===undefined||t>this.length){t=this.length}if(t<=0){return\"\"}t>>>=0;r>>>=0;if(t<=r){return\"\"}if(!e)e=\"utf8\";while(true){switch(e){case\"hex\":return hexSlice(this,r,t);case\"utf8\":case\"utf-8\":return utf8Slice(this,r,t);case\"ascii\":return asciiSlice(this,r,t);case\"latin1\":case\"binary\":return latin1Slice(this,r,t);case\"base64\":return base64Slice(this,r,t);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return utf16leSlice(this,r,t);default:if(f)throw new TypeError(\"Unknown encoding: \"+e);e=(e+\"\").toLowerCase();f=true}}}Buffer.prototype._isBuffer=true;function swap(e,r,t){var f=e[r];e[r]=e[t];e[t]=f}Buffer.prototype.swap16=function swap16(){var e=this.length;if(e%2!==0){throw new RangeError(\"Buffer size must be a multiple of 16-bits\")}for(var r=0;r<e;r+=2){swap(this,r,r+1)}return this};Buffer.prototype.swap32=function swap32(){var e=this.length;if(e%4!==0){throw new RangeError(\"Buffer size must be a multiple of 32-bits\")}for(var r=0;r<e;r+=4){swap(this,r,r+3);swap(this,r+1,r+2)}return this};Buffer.prototype.swap64=function swap64(){var e=this.length;if(e%8!==0){throw new RangeError(\"Buffer size must be a multiple of 64-bits\")}for(var r=0;r<e;r+=8){swap(this,r,r+7);swap(this,r+1,r+6);swap(this,r+2,r+5);swap(this,r+3,r+4)}return this};Buffer.prototype.toString=function toString(){var e=this.length;if(e===0)return\"\";if(arguments.length===0)return utf8Slice(this,0,e);return slowToString.apply(this,arguments)};Buffer.prototype.toLocaleString=Buffer.prototype.toString;Buffer.prototype.equals=function equals(e){if(!Buffer.isBuffer(e))throw new TypeError(\"Argument must be a Buffer\");if(this===e)return true;return Buffer.compare(this,e)===0};Buffer.prototype.inspect=function inspect(){var e=\"\";var t=r.INSPECT_MAX_BYTES;e=this.toString(\"hex\",0,t).replace(/(.{2})/g,\"$1 \").trim();if(this.length>t)e+=\" ... \";return\"<Buffer \"+e+\">\"};if(i){Buffer.prototype[i]=Buffer.prototype.inspect}Buffer.prototype.compare=function compare(e,r,t,f,n){if(isInstance(e,Uint8Array)){e=Buffer.from(e,e.offset,e.byteLength)}if(!Buffer.isBuffer(e)){throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. '+\"Received type \"+typeof e)}if(r===undefined){r=0}if(t===undefined){t=e?e.length:0}if(f===undefined){f=0}if(n===undefined){n=this.length}if(r<0||t>e.length||f<0||n>this.length){throw new RangeError(\"out of range index\")}if(f>=n&&r>=t){return 0}if(f>=n){return-1}if(r>=t){return 1}r>>>=0;t>>>=0;f>>>=0;n>>>=0;if(this===e)return 0;var i=n-f;var o=t-r;var u=Math.min(i,o);var a=this.slice(f,n);var s=e.slice(r,t);for(var h=0;h<u;++h){if(a[h]!==s[h]){i=a[h];o=s[h];break}}if(i<o)return-1;if(o<i)return 1;return 0};function bidirectionalIndexOf(e,r,t,f,n){if(e.length===0)return-1;if(typeof t===\"string\"){f=t;t=0}else if(t>2147483647){t=2147483647}else if(t<-2147483648){t=-2147483648}t=+t;if(numberIsNaN(t)){t=n?0:e.length-1}if(t<0)t=e.length+t;if(t>=e.length){if(n)return-1;else t=e.length-1}else if(t<0){if(n)t=0;else return-1}if(typeof r===\"string\"){r=Buffer.from(r,f)}if(Buffer.isBuffer(r)){if(r.length===0){return-1}return arrayIndexOf(e,r,t,f,n)}else if(typeof r===\"number\"){r=r&255;if(typeof Uint8Array.prototype.indexOf===\"function\"){if(n){return Uint8Array.prototype.indexOf.call(e,r,t)}else{return Uint8Array.prototype.lastIndexOf.call(e,r,t)}}return arrayIndexOf(e,[r],t,f,n)}throw new TypeError(\"val must be string, number or Buffer\")}function arrayIndexOf(e,r,t,f,n){var i=1;var o=e.length;var u=r.length;if(f!==undefined){f=String(f).toLowerCase();if(f===\"ucs2\"||f===\"ucs-2\"||f===\"utf16le\"||f===\"utf-16le\"){if(e.length<2||r.length<2){return-1}i=2;o/=2;u/=2;t/=2}}function read(e,r){if(i===1){return e[r]}else{return e.readUInt16BE(r*i)}}var a;if(n){var s=-1;for(a=t;a<o;a++){if(read(e,a)===read(r,s===-1?0:a-s)){if(s===-1)s=a;if(a-s+1===u)return s*i}else{if(s!==-1)a-=a-s;s=-1}}}else{if(t+u>o)t=o-u;for(a=t;a>=0;a--){var h=true;for(var c=0;c<u;c++){if(read(e,a+c)!==read(r,c)){h=false;break}}if(h)return a}}return-1}Buffer.prototype.includes=function includes(e,r,t){return this.indexOf(e,r,t)!==-1};Buffer.prototype.indexOf=function indexOf(e,r,t){return bidirectionalIndexOf(this,e,r,t,true)};Buffer.prototype.lastIndexOf=function lastIndexOf(e,r,t){return bidirectionalIndexOf(this,e,r,t,false)};function hexWrite(e,r,t,f){t=Number(t)||0;var n=e.length-t;if(!f){f=n}else{f=Number(f);if(f>n){f=n}}var i=r.length;if(f>i/2){f=i/2}for(var o=0;o<f;++o){var u=parseInt(r.substr(o*2,2),16);if(numberIsNaN(u))return o;e[t+o]=u}return o}function utf8Write(e,r,t,f){return blitBuffer(utf8ToBytes(r,e.length-t),e,t,f)}function asciiWrite(e,r,t,f){return blitBuffer(asciiToBytes(r),e,t,f)}function latin1Write(e,r,t,f){return asciiWrite(e,r,t,f)}function base64Write(e,r,t,f){return blitBuffer(base64ToBytes(r),e,t,f)}function ucs2Write(e,r,t,f){return blitBuffer(utf16leToBytes(r,e.length-t),e,t,f)}Buffer.prototype.write=function write(e,r,t,f){if(r===undefined){f=\"utf8\";t=this.length;r=0}else if(t===undefined&&typeof r===\"string\"){f=r;t=this.length;r=0}else if(isFinite(r)){r=r>>>0;if(isFinite(t)){t=t>>>0;if(f===undefined)f=\"utf8\"}else{f=t;t=undefined}}else{throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\")}var n=this.length-r;if(t===undefined||t>n)t=n;if(e.length>0&&(t<0||r<0)||r>this.length){throw new RangeError(\"Attempt to write outside buffer bounds\")}if(!f)f=\"utf8\";var i=false;for(;;){switch(f){case\"hex\":return hexWrite(this,e,r,t);case\"utf8\":case\"utf-8\":return utf8Write(this,e,r,t);case\"ascii\":return asciiWrite(this,e,r,t);case\"latin1\":case\"binary\":return latin1Write(this,e,r,t);case\"base64\":return base64Write(this,e,r,t);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return ucs2Write(this,e,r,t);default:if(i)throw new TypeError(\"Unknown encoding: \"+f);f=(\"\"+f).toLowerCase();i=true}}};Buffer.prototype.toJSON=function toJSON(){return{type:\"Buffer\",data:Array.prototype.slice.call(this._arr||this,0)}};function base64Slice(e,r,t){if(r===0&&t===e.length){return f.fromByteArray(e)}else{return f.fromByteArray(e.slice(r,t))}}function utf8Slice(e,r,t){t=Math.min(e.length,t);var f=[];var n=r;while(n<t){var i=e[n];var o=null;var u=i>239?4:i>223?3:i>191?2:1;if(n+u<=t){var a,s,h,c;switch(u){case 1:if(i<128){o=i}break;case 2:a=e[n+1];if((a&192)===128){c=(i&31)<<6|a&63;if(c>127){o=c}}break;case 3:a=e[n+1];s=e[n+2];if((a&192)===128&&(s&192)===128){c=(i&15)<<12|(a&63)<<6|s&63;if(c>2047&&(c<55296||c>57343)){o=c}}break;case 4:a=e[n+1];s=e[n+2];h=e[n+3];if((a&192)===128&&(s&192)===128&&(h&192)===128){c=(i&15)<<18|(a&63)<<12|(s&63)<<6|h&63;if(c>65535&&c<1114112){o=c}}}}if(o===null){o=65533;u=1}else if(o>65535){o-=65536;f.push(o>>>10&1023|55296);o=56320|o&1023}f.push(o);n+=u}return decodeCodePointsArray(f)}var u=4096;function decodeCodePointsArray(e){var r=e.length;if(r<=u){return String.fromCharCode.apply(String,e)}var t=\"\";var f=0;while(f<r){t+=String.fromCharCode.apply(String,e.slice(f,f+=u))}return t}function asciiSlice(e,r,t){var f=\"\";t=Math.min(e.length,t);for(var n=r;n<t;++n){f+=String.fromCharCode(e[n]&127)}return f}function latin1Slice(e,r,t){var f=\"\";t=Math.min(e.length,t);for(var n=r;n<t;++n){f+=String.fromCharCode(e[n])}return f}function hexSlice(e,r,t){var f=e.length;if(!r||r<0)r=0;if(!t||t<0||t>f)t=f;var n=\"\";for(var i=r;i<t;++i){n+=s[e[i]]}return n}function utf16leSlice(e,r,t){var f=e.slice(r,t);var n=\"\";for(var i=0;i<f.length;i+=2){n+=String.fromCharCode(f[i]+f[i+1]*256)}return n}Buffer.prototype.slice=function slice(e,r){var t=this.length;e=~~e;r=r===undefined?t:~~r;if(e<0){e+=t;if(e<0)e=0}else if(e>t){e=t}if(r<0){r+=t;if(r<0)r=0}else if(r>t){r=t}if(r<e)r=e;var f=this.subarray(e,r);Object.setPrototypeOf(f,Buffer.prototype);return f};function checkOffset(e,r,t){if(e%1!==0||e<0)throw new RangeError(\"offset is not uint\");if(e+r>t)throw new RangeError(\"Trying to access beyond buffer length\")}Buffer.prototype.readUIntLE=function readUIntLE(e,r,t){e=e>>>0;r=r>>>0;if(!t)checkOffset(e,r,this.length);var f=this[e];var n=1;var i=0;while(++i<r&&(n*=256)){f+=this[e+i]*n}return f};Buffer.prototype.readUIntBE=function readUIntBE(e,r,t){e=e>>>0;r=r>>>0;if(!t){checkOffset(e,r,this.length)}var f=this[e+--r];var n=1;while(r>0&&(n*=256)){f+=this[e+--r]*n}return f};Buffer.prototype.readUInt8=function readUInt8(e,r){e=e>>>0;if(!r)checkOffset(e,1,this.length);return this[e]};Buffer.prototype.readUInt16LE=function readUInt16LE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);return this[e]|this[e+1]<<8};Buffer.prototype.readUInt16BE=function readUInt16BE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);return this[e]<<8|this[e+1]};Buffer.prototype.readUInt32LE=function readUInt32LE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return(this[e]|this[e+1]<<8|this[e+2]<<16)+this[e+3]*16777216};Buffer.prototype.readUInt32BE=function readUInt32BE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return this[e]*16777216+(this[e+1]<<16|this[e+2]<<8|this[e+3])};Buffer.prototype.readIntLE=function readIntLE(e,r,t){e=e>>>0;r=r>>>0;if(!t)checkOffset(e,r,this.length);var f=this[e];var n=1;var i=0;while(++i<r&&(n*=256)){f+=this[e+i]*n}n*=128;if(f>=n)f-=Math.pow(2,8*r);return f};Buffer.prototype.readIntBE=function readIntBE(e,r,t){e=e>>>0;r=r>>>0;if(!t)checkOffset(e,r,this.length);var f=r;var n=1;var i=this[e+--f];while(f>0&&(n*=256)){i+=this[e+--f]*n}n*=128;if(i>=n)i-=Math.pow(2,8*r);return i};Buffer.prototype.readInt8=function readInt8(e,r){e=e>>>0;if(!r)checkOffset(e,1,this.length);if(!(this[e]&128))return this[e];return(255-this[e]+1)*-1};Buffer.prototype.readInt16LE=function readInt16LE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);var t=this[e]|this[e+1]<<8;return t&32768?t|4294901760:t};Buffer.prototype.readInt16BE=function readInt16BE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);var t=this[e+1]|this[e]<<8;return t&32768?t|4294901760:t};Buffer.prototype.readInt32LE=function readInt32LE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24};Buffer.prototype.readInt32BE=function readInt32BE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]};Buffer.prototype.readFloatLE=function readFloatLE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return n.read(this,e,true,23,4)};Buffer.prototype.readFloatBE=function readFloatBE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return n.read(this,e,false,23,4)};Buffer.prototype.readDoubleLE=function readDoubleLE(e,r){e=e>>>0;if(!r)checkOffset(e,8,this.length);return n.read(this,e,true,52,8)};Buffer.prototype.readDoubleBE=function readDoubleBE(e,r){e=e>>>0;if(!r)checkOffset(e,8,this.length);return n.read(this,e,false,52,8)};function checkInt(e,r,t,f,n,i){if(!Buffer.isBuffer(e))throw new TypeError('\"buffer\" argument must be a Buffer instance');if(r>n||r<i)throw new RangeError('\"value\" argument is out of bounds');if(t+f>e.length)throw new RangeError(\"Index out of range\")}Buffer.prototype.writeUIntLE=function writeUIntLE(e,r,t,f){e=+e;r=r>>>0;t=t>>>0;if(!f){var n=Math.pow(2,8*t)-1;checkInt(this,e,r,t,n,0)}var i=1;var o=0;this[r]=e&255;while(++o<t&&(i*=256)){this[r+o]=e/i&255}return r+t};Buffer.prototype.writeUIntBE=function writeUIntBE(e,r,t,f){e=+e;r=r>>>0;t=t>>>0;if(!f){var n=Math.pow(2,8*t)-1;checkInt(this,e,r,t,n,0)}var i=t-1;var o=1;this[r+i]=e&255;while(--i>=0&&(o*=256)){this[r+i]=e/o&255}return r+t};Buffer.prototype.writeUInt8=function writeUInt8(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,1,255,0);this[r]=e&255;return r+1};Buffer.prototype.writeUInt16LE=function writeUInt16LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,65535,0);this[r]=e&255;this[r+1]=e>>>8;return r+2};Buffer.prototype.writeUInt16BE=function writeUInt16BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,65535,0);this[r]=e>>>8;this[r+1]=e&255;return r+2};Buffer.prototype.writeUInt32LE=function writeUInt32LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,4294967295,0);this[r+3]=e>>>24;this[r+2]=e>>>16;this[r+1]=e>>>8;this[r]=e&255;return r+4};Buffer.prototype.writeUInt32BE=function writeUInt32BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,4294967295,0);this[r]=e>>>24;this[r+1]=e>>>16;this[r+2]=e>>>8;this[r+3]=e&255;return r+4};Buffer.prototype.writeIntLE=function writeIntLE(e,r,t,f){e=+e;r=r>>>0;if(!f){var n=Math.pow(2,8*t-1);checkInt(this,e,r,t,n-1,-n)}var i=0;var o=1;var u=0;this[r]=e&255;while(++i<t&&(o*=256)){if(e<0&&u===0&&this[r+i-1]!==0){u=1}this[r+i]=(e/o>>0)-u&255}return r+t};Buffer.prototype.writeIntBE=function writeIntBE(e,r,t,f){e=+e;r=r>>>0;if(!f){var n=Math.pow(2,8*t-1);checkInt(this,e,r,t,n-1,-n)}var i=t-1;var o=1;var u=0;this[r+i]=e&255;while(--i>=0&&(o*=256)){if(e<0&&u===0&&this[r+i+1]!==0){u=1}this[r+i]=(e/o>>0)-u&255}return r+t};Buffer.prototype.writeInt8=function writeInt8(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,1,127,-128);if(e<0)e=255+e+1;this[r]=e&255;return r+1};Buffer.prototype.writeInt16LE=function writeInt16LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,32767,-32768);this[r]=e&255;this[r+1]=e>>>8;return r+2};Buffer.prototype.writeInt16BE=function writeInt16BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,32767,-32768);this[r]=e>>>8;this[r+1]=e&255;return r+2};Buffer.prototype.writeInt32LE=function writeInt32LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,2147483647,-2147483648);this[r]=e&255;this[r+1]=e>>>8;this[r+2]=e>>>16;this[r+3]=e>>>24;return r+4};Buffer.prototype.writeInt32BE=function writeInt32BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,2147483647,-2147483648);if(e<0)e=4294967295+e+1;this[r]=e>>>24;this[r+1]=e>>>16;this[r+2]=e>>>8;this[r+3]=e&255;return r+4};function checkIEEE754(e,r,t,f,n,i){if(t+f>e.length)throw new RangeError(\"Index out of range\");if(t<0)throw new RangeError(\"Index out of range\")}function writeFloat(e,r,t,f,i){r=+r;t=t>>>0;if(!i){checkIEEE754(e,r,t,4,34028234663852886e22,-34028234663852886e22)}n.write(e,r,t,f,23,4);return t+4}Buffer.prototype.writeFloatLE=function writeFloatLE(e,r,t){return writeFloat(this,e,r,true,t)};Buffer.prototype.writeFloatBE=function writeFloatBE(e,r,t){return writeFloat(this,e,r,false,t)};function writeDouble(e,r,t,f,i){r=+r;t=t>>>0;if(!i){checkIEEE754(e,r,t,8,17976931348623157e292,-17976931348623157e292)}n.write(e,r,t,f,52,8);return t+8}Buffer.prototype.writeDoubleLE=function writeDoubleLE(e,r,t){return writeDouble(this,e,r,true,t)};Buffer.prototype.writeDoubleBE=function writeDoubleBE(e,r,t){return writeDouble(this,e,r,false,t)};Buffer.prototype.copy=function copy(e,r,t,f){if(!Buffer.isBuffer(e))throw new TypeError(\"argument should be a Buffer\");if(!t)t=0;if(!f&&f!==0)f=this.length;if(r>=e.length)r=e.length;if(!r)r=0;if(f>0&&f<t)f=t;if(f===t)return 0;if(e.length===0||this.length===0)return 0;if(r<0){throw new RangeError(\"targetStart out of bounds\")}if(t<0||t>=this.length)throw new RangeError(\"Index out of range\");if(f<0)throw new RangeError(\"sourceEnd out of bounds\");if(f>this.length)f=this.length;if(e.length-r<f-t){f=e.length-r+t}var n=f-t;if(this===e&&typeof Uint8Array.prototype.copyWithin===\"function\"){this.copyWithin(r,t,f)}else if(this===e&&t<r&&r<f){for(var i=n-1;i>=0;--i){e[i+r]=this[i+t]}}else{Uint8Array.prototype.set.call(e,this.subarray(t,f),r)}return n};Buffer.prototype.fill=function fill(e,r,t,f){if(typeof e===\"string\"){if(typeof r===\"string\"){f=r;r=0;t=this.length}else if(typeof t===\"string\"){f=t;t=this.length}if(f!==undefined&&typeof f!==\"string\"){throw new TypeError(\"encoding must be a string\")}if(typeof f===\"string\"&&!Buffer.isEncoding(f)){throw new TypeError(\"Unknown encoding: \"+f)}if(e.length===1){var n=e.charCodeAt(0);if(f===\"utf8\"&&n<128||f===\"latin1\"){e=n}}}else if(typeof e===\"number\"){e=e&255}else if(typeof e===\"boolean\"){e=Number(e)}if(r<0||this.length<r||this.length<t){throw new RangeError(\"Out of range index\")}if(t<=r){return this}r=r>>>0;t=t===undefined?this.length:t>>>0;if(!e)e=0;var i;if(typeof e===\"number\"){for(i=r;i<t;++i){this[i]=e}}else{var o=Buffer.isBuffer(e)?e:Buffer.from(e,f);var u=o.length;if(u===0){throw new TypeError('The value \"'+e+'\" is invalid for argument \"value\"')}for(i=0;i<t-r;++i){this[i+r]=o[i%u]}}return this};var a=/[^+/0-9A-Za-z-_]/g;function base64clean(e){e=e.split(\"=\")[0];e=e.trim().replace(a,\"\");if(e.length<2)return\"\";while(e.length%4!==0){e=e+\"=\"}return e}function utf8ToBytes(e,r){r=r||Infinity;var t;var f=e.length;var n=null;var i=[];for(var o=0;o<f;++o){t=e.charCodeAt(o);if(t>55295&&t<57344){if(!n){if(t>56319){if((r-=3)>-1)i.push(239,191,189);continue}else if(o+1===f){if((r-=3)>-1)i.push(239,191,189);continue}n=t;continue}if(t<56320){if((r-=3)>-1)i.push(239,191,189);n=t;continue}t=(n-55296<<10|t-56320)+65536}else if(n){if((r-=3)>-1)i.push(239,191,189)}n=null;if(t<128){if((r-=1)<0)break;i.push(t)}else if(t<2048){if((r-=2)<0)break;i.push(t>>6|192,t&63|128)}else if(t<65536){if((r-=3)<0)break;i.push(t>>12|224,t>>6&63|128,t&63|128)}else if(t<1114112){if((r-=4)<0)break;i.push(t>>18|240,t>>12&63|128,t>>6&63|128,t&63|128)}else{throw new Error(\"Invalid code point\")}}return i}function asciiToBytes(e){var r=[];for(var t=0;t<e.length;++t){r.push(e.charCodeAt(t)&255)}return r}function utf16leToBytes(e,r){var t,f,n;var i=[];for(var o=0;o<e.length;++o){if((r-=2)<0)break;t=e.charCodeAt(o);f=t>>8;n=t%256;i.push(n);i.push(f)}return i}function base64ToBytes(e){return f.toByteArray(base64clean(e))}function blitBuffer(e,r,t,f){for(var n=0;n<f;++n){if(n+t>=r.length||n>=e.length)break;r[n+t]=e[n]}return n}function isInstance(e,r){return e instanceof r||e!=null&&e.constructor!=null&&e.constructor.name!=null&&e.constructor.name===r.name}function numberIsNaN(e){return e!==e}var s=function(){var e=\"0123456789abcdef\";var r=new Array(256);for(var t=0;t<16;++t){var f=t*16;for(var n=0;n<16;++n){r[f+n]=e[t]+e[n]}}return r}()},783:function(e,r){\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nr.read=function(e,r,t,f,n){var i,o;var u=n*8-f-1;var a=(1<<u)-1;var s=a>>1;var h=-7;var c=t?n-1:0;var l=t?-1:1;var p=e[r+c];c+=l;i=p&(1<<-h)-1;p>>=-h;h+=u;for(;h>0;i=i*256+e[r+c],c+=l,h-=8){}o=i&(1<<-h)-1;i>>=-h;h+=f;for(;h>0;o=o*256+e[r+c],c+=l,h-=8){}if(i===0){i=1-s}else if(i===a){return o?NaN:(p?-1:1)*Infinity}else{o=o+Math.pow(2,f);i=i-s}return(p?-1:1)*o*Math.pow(2,i-f)};r.write=function(e,r,t,f,n,i){var o,u,a;var s=i*8-n-1;var h=(1<<s)-1;var c=h>>1;var l=n===23?Math.pow(2,-24)-Math.pow(2,-77):0;var p=f?0:i-1;var y=f?1:-1;var g=r<0||r===0&&1/r<0?1:0;r=Math.abs(r);if(isNaN(r)||r===Infinity){u=isNaN(r)?1:0;o=h}else{o=Math.floor(Math.log(r)/Math.LN2);if(r*(a=Math.pow(2,-o))<1){o--;a*=2}if(o+c>=1){r+=l/a}else{r+=l*Math.pow(2,1-c)}if(r*a>=2){o++;a/=2}if(o+c>=h){u=0;o=h}else if(o+c>=1){u=(r*a-1)*Math.pow(2,n);o=o+c}else{u=r*Math.pow(2,c-1)*Math.pow(2,n);o=0}}for(;n>=8;e[t+p]=u&255,p+=y,u/=256,n-=8){}o=o<<n|u;s+=n;for(;s>0;e[t+p]=o&255,p+=y,o/=256,s-=8){}e[t+p-y]|=g*128}}};var r={};function __nccwpck_require__(t){var f=r[t];if(f!==undefined){return f.exports}var n=r[t]={exports:{}};var i=true;try{e[t](n,n.exports,__nccwpck_require__);i=false}finally{if(i)delete r[t]}return n.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(72);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/buffer/index.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/events/events.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/compiled/events/events.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){\"use strict\";var e={864:function(e){var t=typeof Reflect===\"object\"?Reflect:null;var n=t&&typeof t.apply===\"function\"?t.apply:function ReflectApply(e,t,n){return Function.prototype.apply.call(e,t,n)};var r;if(t&&typeof t.ownKeys===\"function\"){r=t.ownKeys}else if(Object.getOwnPropertySymbols){r=function ReflectOwnKeys(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}}else{r=function ReflectOwnKeys(e){return Object.getOwnPropertyNames(e)}}function ProcessEmitWarning(e){if(console&&console.warn)console.warn(e)}var i=Number.isNaN||function NumberIsNaN(e){return e!==e};function EventEmitter(){EventEmitter.init.call(this)}e.exports=EventEmitter;e.exports.once=once;EventEmitter.EventEmitter=EventEmitter;EventEmitter.prototype._events=undefined;EventEmitter.prototype._eventsCount=0;EventEmitter.prototype._maxListeners=undefined;var s=10;function checkListener(e){if(typeof e!==\"function\"){throw new TypeError('The \"listener\" argument must be of type Function. Received type '+typeof e)}}Object.defineProperty(EventEmitter,\"defaultMaxListeners\",{enumerable:true,get:function(){return s},set:function(e){if(typeof e!==\"number\"||e<0||i(e)){throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received '+e+\".\")}s=e}});EventEmitter.init=function(){if(this._events===undefined||this._events===Object.getPrototypeOf(this)._events){this._events=Object.create(null);this._eventsCount=0}this._maxListeners=this._maxListeners||undefined};EventEmitter.prototype.setMaxListeners=function setMaxListeners(e){if(typeof e!==\"number\"||e<0||i(e)){throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received '+e+\".\")}this._maxListeners=e;return this};function _getMaxListeners(e){if(e._maxListeners===undefined)return EventEmitter.defaultMaxListeners;return e._maxListeners}EventEmitter.prototype.getMaxListeners=function getMaxListeners(){return _getMaxListeners(this)};EventEmitter.prototype.emit=function emit(e){var t=[];for(var r=1;r<arguments.length;r++)t.push(arguments[r]);var i=e===\"error\";var s=this._events;if(s!==undefined)i=i&&s.error===undefined;else if(!i)return false;if(i){var o;if(t.length>0)o=t[0];if(o instanceof Error){throw o}var f=new Error(\"Unhandled error.\"+(o?\" (\"+o.message+\")\":\"\"));f.context=o;throw f}var u=s[e];if(u===undefined)return false;if(typeof u===\"function\"){n(u,this,t)}else{var a=u.length;var c=arrayClone(u,a);for(var r=0;r<a;++r)n(c[r],this,t)}return true};function _addListener(e,t,n,r){var i;var s;var o;checkListener(n);s=e._events;if(s===undefined){s=e._events=Object.create(null);e._eventsCount=0}else{if(s.newListener!==undefined){e.emit(\"newListener\",t,n.listener?n.listener:n);s=e._events}o=s[t]}if(o===undefined){o=s[t]=n;++e._eventsCount}else{if(typeof o===\"function\"){o=s[t]=r?[n,o]:[o,n]}else if(r){o.unshift(n)}else{o.push(n)}i=_getMaxListeners(e);if(i>0&&o.length>i&&!o.warned){o.warned=true;var f=new Error(\"Possible EventEmitter memory leak detected. \"+o.length+\" \"+String(t)+\" listeners \"+\"added. Use emitter.setMaxListeners() to \"+\"increase limit\");f.name=\"MaxListenersExceededWarning\";f.emitter=e;f.type=t;f.count=o.length;ProcessEmitWarning(f)}}return e}EventEmitter.prototype.addListener=function addListener(e,t){return _addListener(this,e,t,false)};EventEmitter.prototype.on=EventEmitter.prototype.addListener;EventEmitter.prototype.prependListener=function prependListener(e,t){return _addListener(this,e,t,true)};function onceWrapper(){if(!this.fired){this.target.removeListener(this.type,this.wrapFn);this.fired=true;if(arguments.length===0)return this.listener.call(this.target);return this.listener.apply(this.target,arguments)}}function _onceWrap(e,t,n){var r={fired:false,wrapFn:undefined,target:e,type:t,listener:n};var i=onceWrapper.bind(r);i.listener=n;r.wrapFn=i;return i}EventEmitter.prototype.once=function once(e,t){checkListener(t);this.on(e,_onceWrap(this,e,t));return this};EventEmitter.prototype.prependOnceListener=function prependOnceListener(e,t){checkListener(t);this.prependListener(e,_onceWrap(this,e,t));return this};EventEmitter.prototype.removeListener=function removeListener(e,t){var n,r,i,s,o;checkListener(t);r=this._events;if(r===undefined)return this;n=r[e];if(n===undefined)return this;if(n===t||n.listener===t){if(--this._eventsCount===0)this._events=Object.create(null);else{delete r[e];if(r.removeListener)this.emit(\"removeListener\",e,n.listener||t)}}else if(typeof n!==\"function\"){i=-1;for(s=n.length-1;s>=0;s--){if(n[s]===t||n[s].listener===t){o=n[s].listener;i=s;break}}if(i<0)return this;if(i===0)n.shift();else{spliceOne(n,i)}if(n.length===1)r[e]=n[0];if(r.removeListener!==undefined)this.emit(\"removeListener\",e,o||t)}return this};EventEmitter.prototype.off=EventEmitter.prototype.removeListener;EventEmitter.prototype.removeAllListeners=function removeAllListeners(e){var t,n,r;n=this._events;if(n===undefined)return this;if(n.removeListener===undefined){if(arguments.length===0){this._events=Object.create(null);this._eventsCount=0}else if(n[e]!==undefined){if(--this._eventsCount===0)this._events=Object.create(null);else delete n[e]}return this}if(arguments.length===0){var i=Object.keys(n);var s;for(r=0;r<i.length;++r){s=i[r];if(s===\"removeListener\")continue;this.removeAllListeners(s)}this.removeAllListeners(\"removeListener\");this._events=Object.create(null);this._eventsCount=0;return this}t=n[e];if(typeof t===\"function\"){this.removeListener(e,t)}else if(t!==undefined){for(r=t.length-1;r>=0;r--){this.removeListener(e,t[r])}}return this};function _listeners(e,t,n){var r=e._events;if(r===undefined)return[];var i=r[t];if(i===undefined)return[];if(typeof i===\"function\")return n?[i.listener||i]:[i];return n?unwrapListeners(i):arrayClone(i,i.length)}EventEmitter.prototype.listeners=function listeners(e){return _listeners(this,e,true)};EventEmitter.prototype.rawListeners=function rawListeners(e){return _listeners(this,e,false)};EventEmitter.listenerCount=function(e,t){if(typeof e.listenerCount===\"function\"){return e.listenerCount(t)}else{return listenerCount.call(e,t)}};EventEmitter.prototype.listenerCount=listenerCount;function listenerCount(e){var t=this._events;if(t!==undefined){var n=t[e];if(typeof n===\"function\"){return 1}else if(n!==undefined){return n.length}}return 0}EventEmitter.prototype.eventNames=function eventNames(){return this._eventsCount>0?r(this._events):[]};function arrayClone(e,t){var n=new Array(t);for(var r=0;r<t;++r)n[r]=e[r];return n}function spliceOne(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}function unwrapListeners(e){var t=new Array(e.length);for(var n=0;n<t.length;++n){t[n]=e[n].listener||e[n]}return t}function once(e,t){return new Promise((function(n,r){function errorListener(n){e.removeListener(t,resolver);r(n)}function resolver(){if(typeof e.removeListener===\"function\"){e.removeListener(\"error\",errorListener)}n([].slice.call(arguments))}eventTargetAgnosticAddListener(e,t,resolver,{once:true});if(t!==\"error\"){addErrorHandlerIfEventEmitter(e,errorListener,{once:true})}}))}function addErrorHandlerIfEventEmitter(e,t,n){if(typeof e.on===\"function\"){eventTargetAgnosticAddListener(e,\"error\",t,n)}}function eventTargetAgnosticAddListener(e,t,n,r){if(typeof e.on===\"function\"){if(r.once){e.once(t,n)}else{e.on(t,n)}}else if(typeof e.addEventListener===\"function\"){e.addEventListener(t,(function wrapListener(i){if(r.once){e.removeEventListener(t,wrapListener)}n(i)}))}else{throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type '+typeof e)}}}};var t={};function __nccwpck_require__(n){var r=t[n];if(r!==undefined){return r.exports}var i=t[n]={exports:{}};var s=true;try{e[n](i,i.exports,__nccwpck_require__);s=false}finally{if(s)delete t[n]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var n=__nccwpck_require__(864);module.exports=n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL2V2ZW50cy9ldmVudHMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVksYUFBYSxPQUFPLGdCQUFnQiw2Q0FBNkMsMEVBQTBFLDZDQUE2QyxNQUFNLHFDQUFxQyxZQUFZLHNDQUFzQyw2QkFBNkIsOEVBQThFLEtBQUssNkJBQTZCLHNDQUFzQywrQkFBK0IseUNBQXlDLDRDQUE0QyxjQUFjLHdCQUF3Qiw2QkFBNkIsdUJBQXVCLG9CQUFvQix1Q0FBdUMseUNBQXlDLHNDQUFzQywrQ0FBK0MsU0FBUywwQkFBMEIsMEJBQTBCLGtHQUFrRywwREFBMEQsK0JBQStCLFNBQVMsaUJBQWlCLG1DQUFtQyw4SEFBOEgsS0FBSyxFQUFFLDZCQUE2QixpRkFBaUYsaUNBQWlDLG9CQUFvQixrREFBa0QsbUVBQW1FLG1DQUFtQyw0R0FBNEcscUJBQXFCLGFBQWEsNkJBQTZCLHVFQUF1RSx1QkFBdUIsa0VBQWtFLCtCQUErQiw2Q0FBNkMsU0FBUyxZQUFZLG1CQUFtQix5QkFBeUIsa0JBQWtCLG1CQUFtQiwwQ0FBMEMsd0JBQXdCLE1BQU0sTUFBTSxxQkFBcUIsdUJBQXVCLFFBQVEsOERBQThELFlBQVksUUFBUSxXQUFXLDhCQUE4QiwwQkFBMEIsWUFBWSxLQUFLLGVBQWUsc0JBQXNCLFlBQVksSUFBSSxtQkFBbUIsYUFBYSwrQkFBK0IsTUFBTSxNQUFNLE1BQU0saUJBQWlCLFlBQVksa0JBQWtCLGdDQUFnQyxpQkFBaUIsS0FBSyw4QkFBOEIsZ0RBQWdELFlBQVksT0FBTyxrQkFBa0IsU0FBUyxpQkFBaUIsS0FBSywwQkFBMEIscUJBQXFCLFdBQVcsYUFBYSxLQUFLLFVBQVUsc0JBQXNCLCtCQUErQixjQUFjLGlLQUFpSyxxQ0FBcUMsWUFBWSxTQUFTLGlCQUFpQix1QkFBdUIsU0FBUyw2REFBNkQscUNBQXFDLDZEQUE2RCxxRUFBcUUsb0NBQW9DLHVCQUF1QixnQkFBZ0Isa0RBQWtELGdCQUFnQiwrREFBK0QsbURBQW1ELDBCQUEwQixPQUFPLHlEQUF5RCwwQkFBMEIsYUFBYSxXQUFXLFNBQVMsK0NBQStDLGlCQUFpQiwrQkFBK0IsYUFBYSw2RUFBNkUsaUJBQWlCLDRDQUE0QyxhQUFhLG1FQUFtRSxjQUFjLGlCQUFpQixlQUFlLDZCQUE2QixPQUFPLDZCQUE2QiwwQkFBMEIsNERBQTRELEtBQUssWUFBWSxpRUFBaUUsK0JBQStCLEtBQUssaUJBQWlCLEtBQUssS0FBSyxnQ0FBZ0MsZ0JBQWdCLElBQUksT0FBTyxtQkFBbUIsbUJBQW1CLEtBQUssZUFBZSwwQkFBMEIsbUVBQW1FLGFBQWEsaUVBQWlFLHlFQUF5RSxVQUFVLGVBQWUsNkJBQTZCLGlDQUFpQyx5QkFBeUIsaUNBQWlDLG9CQUFvQiwwQkFBMEIsNERBQTRELGlCQUFpQixZQUFZLHlCQUF5QixxQkFBcUIsTUFBTSxRQUFRLFdBQVcsS0FBSyxPQUFPLGlDQUFpQywyQkFBMkIsMENBQTBDLGlDQUFpQyxvQkFBb0IsWUFBWSxPQUFPLDBCQUEwQix5QkFBeUIsdUJBQXVCLGlCQUFpQixLQUFLLEtBQUssNkJBQTZCLGFBQWEsMkJBQTJCLGdCQUFnQiwwQkFBMEIsV0FBVywwQkFBMEIsc0RBQXNELG1EQUFtRCx1REFBdUQsZ0NBQWdDLDZEQUE2RCxpQ0FBaUMseUNBQXlDLHdDQUF3QywwQkFBMEIsS0FBSyxpQ0FBaUMsbURBQW1ELDBCQUEwQixtQkFBbUIsa0JBQWtCLFdBQVcsMEJBQTBCLFNBQVMsdUJBQXVCLGlCQUFpQixTQUFTLHdEQUF3RCwrQ0FBK0MseUJBQXlCLG1CQUFtQixZQUFZLElBQUksY0FBYyxTQUFTLHdCQUF3QixLQUFLLGFBQWEsZ0JBQWdCLFFBQVEsNEJBQTRCLDBCQUEwQixZQUFZLFdBQVcsS0FBSyx5QkFBeUIsU0FBUyxtQkFBbUIsa0NBQWtDLDBCQUEwQiw2QkFBNkIsS0FBSyxvQkFBb0IseUNBQXlDLHdDQUF3Qyw0QkFBNEIsNkNBQTZDLFVBQVUsRUFBRSxnQkFBZ0IsK0NBQStDLFVBQVUsR0FBRyxHQUFHLDhDQUE4Qyw2QkFBNkIsK0NBQStDLGlEQUFpRCw2QkFBNkIsV0FBVyxZQUFZLEtBQUssV0FBVyxnREFBZ0QsK0NBQStDLFdBQVcsc0NBQXNDLEtBQUssR0FBRyxLQUFLLHdHQUF3RyxTQUFTLGdDQUFnQyxXQUFXLGtCQUFrQixpQkFBaUIsWUFBWSxZQUFZLFdBQVcsSUFBSSxzQ0FBc0MsUUFBUSxRQUFRLGlCQUFpQixpQkFBaUIsbUVBQW1FLFNBQVMsS0FBSywrQkFBK0IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvZXZlbnRzL2V2ZW50cy5qcz83NjUyIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBlPXs4NjQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dHlwZW9mIFJlZmxlY3Q9PT1cIm9iamVjdFwiP1JlZmxlY3Q6bnVsbDt2YXIgbj10JiZ0eXBlb2YgdC5hcHBseT09PVwiZnVuY3Rpb25cIj90LmFwcGx5OmZ1bmN0aW9uIFJlZmxlY3RBcHBseShlLHQsbil7cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGUsdCxuKX07dmFyIHI7aWYodCYmdHlwZW9mIHQub3duS2V5cz09PVwiZnVuY3Rpb25cIil7cj10Lm93bktleXN9ZWxzZSBpZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXtyPWZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKSl9fWVsc2V7cj1mdW5jdGlvbiBSZWZsZWN0T3duS2V5cyhlKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSl9fWZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyhlKXtpZihjb25zb2xlJiZjb25zb2xlLndhcm4pY29uc29sZS53YXJuKGUpfXZhciBpPU51bWJlci5pc05hTnx8ZnVuY3Rpb24gTnVtYmVySXNOYU4oZSl7cmV0dXJuIGUhPT1lfTtmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKXtFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpfWUuZXhwb3J0cz1FdmVudEVtaXR0ZXI7ZS5leHBvcnRzLm9uY2U9b25jZTtFdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyPUV2ZW50RW1pdHRlcjtFdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHM9dW5kZWZpbmVkO0V2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50PTA7RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzPXVuZGVmaW5lZDt2YXIgcz0xMDtmdW5jdGlvbiBjaGVja0xpc3RlbmVyKGUpe2lmKHR5cGVvZiBlIT09XCJmdW5jdGlvblwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiBlKX19T2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlcixcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiBzfSxzZXQ6ZnVuY3Rpb24oZSl7aWYodHlwZW9mIGUhPT1cIm51bWJlclwifHxlPDB8fGkoZSkpe3Rocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJytlK1wiLlwiKX1zPWV9fSk7RXZlbnRFbWl0dGVyLmluaXQ9ZnVuY3Rpb24oKXtpZih0aGlzLl9ldmVudHM9PT11bmRlZmluZWR8fHRoaXMuX2V2ZW50cz09PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKXt0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTt0aGlzLl9ldmVudHNDb3VudD0wfXRoaXMuX21heExpc3RlbmVycz10aGlzLl9tYXhMaXN0ZW5lcnN8fHVuZGVmaW5lZH07RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKGUpe2lmKHR5cGVvZiBlIT09XCJudW1iZXJcInx8ZTwwfHxpKGUpKXt0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcrZStcIi5cIil9dGhpcy5fbWF4TGlzdGVuZXJzPWU7cmV0dXJuIHRoaXN9O2Z1bmN0aW9uIF9nZXRNYXhMaXN0ZW5lcnMoZSl7aWYoZS5fbWF4TGlzdGVuZXJzPT09dW5kZWZpbmVkKXJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztyZXR1cm4gZS5fbWF4TGlzdGVuZXJzfUV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzPWZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpe3JldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpfTtFdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQ9ZnVuY3Rpb24gZW1pdChlKXt2YXIgdD1bXTtmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXQucHVzaChhcmd1bWVudHNbcl0pO3ZhciBpPWU9PT1cImVycm9yXCI7dmFyIHM9dGhpcy5fZXZlbnRzO2lmKHMhPT11bmRlZmluZWQpaT1pJiZzLmVycm9yPT09dW5kZWZpbmVkO2Vsc2UgaWYoIWkpcmV0dXJuIGZhbHNlO2lmKGkpe3ZhciBvO2lmKHQubGVuZ3RoPjApbz10WzBdO2lmKG8gaW5zdGFuY2VvZiBFcnJvcil7dGhyb3cgb312YXIgZj1uZXcgRXJyb3IoXCJVbmhhbmRsZWQgZXJyb3IuXCIrKG8/XCIgKFwiK28ubWVzc2FnZStcIilcIjpcIlwiKSk7Zi5jb250ZXh0PW87dGhyb3cgZn12YXIgdT1zW2VdO2lmKHU9PT11bmRlZmluZWQpcmV0dXJuIGZhbHNlO2lmKHR5cGVvZiB1PT09XCJmdW5jdGlvblwiKXtuKHUsdGhpcyx0KX1lbHNle3ZhciBhPXUubGVuZ3RoO3ZhciBjPWFycmF5Q2xvbmUodSxhKTtmb3IodmFyIHI9MDtyPGE7KytyKW4oY1tyXSx0aGlzLHQpfXJldHVybiB0cnVlfTtmdW5jdGlvbiBfYWRkTGlzdGVuZXIoZSx0LG4scil7dmFyIGk7dmFyIHM7dmFyIG87Y2hlY2tMaXN0ZW5lcihuKTtzPWUuX2V2ZW50cztpZihzPT09dW5kZWZpbmVkKXtzPWUuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpO2UuX2V2ZW50c0NvdW50PTB9ZWxzZXtpZihzLm5ld0xpc3RlbmVyIT09dW5kZWZpbmVkKXtlLmVtaXQoXCJuZXdMaXN0ZW5lclwiLHQsbi5saXN0ZW5lcj9uLmxpc3RlbmVyOm4pO3M9ZS5fZXZlbnRzfW89c1t0XX1pZihvPT09dW5kZWZpbmVkKXtvPXNbdF09bjsrK2UuX2V2ZW50c0NvdW50fWVsc2V7aWYodHlwZW9mIG89PT1cImZ1bmN0aW9uXCIpe289c1t0XT1yP1tuLG9dOltvLG5dfWVsc2UgaWYocil7by51bnNoaWZ0KG4pfWVsc2V7by5wdXNoKG4pfWk9X2dldE1heExpc3RlbmVycyhlKTtpZihpPjAmJm8ubGVuZ3RoPmkmJiFvLndhcm5lZCl7by53YXJuZWQ9dHJ1ZTt2YXIgZj1uZXcgRXJyb3IoXCJQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuIFwiK28ubGVuZ3RoK1wiIFwiK1N0cmluZyh0KStcIiBsaXN0ZW5lcnMgXCIrXCJhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gXCIrXCJpbmNyZWFzZSBsaW1pdFwiKTtmLm5hbWU9XCJNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmdcIjtmLmVtaXR0ZXI9ZTtmLnR5cGU9dDtmLmNvdW50PW8ubGVuZ3RoO1Byb2Nlc3NFbWl0V2FybmluZyhmKX19cmV0dXJuIGV9RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1mdW5jdGlvbiBhZGRMaXN0ZW5lcihlLHQpe3JldHVybiBfYWRkTGlzdGVuZXIodGhpcyxlLHQsZmFsc2UpfTtFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uPUV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXI9ZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGUsdCl7cmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLGUsdCx0cnVlKX07ZnVuY3Rpb24gb25jZVdyYXBwZXIoKXtpZighdGhpcy5maXJlZCl7dGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLHRoaXMud3JhcEZuKTt0aGlzLmZpcmVkPXRydWU7aWYoYXJndW1lbnRzLmxlbmd0aD09PTApcmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCk7cmV0dXJuIHRoaXMubGlzdGVuZXIuYXBwbHkodGhpcy50YXJnZXQsYXJndW1lbnRzKX19ZnVuY3Rpb24gX29uY2VXcmFwKGUsdCxuKXt2YXIgcj17ZmlyZWQ6ZmFsc2Usd3JhcEZuOnVuZGVmaW5lZCx0YXJnZXQ6ZSx0eXBlOnQsbGlzdGVuZXI6bn07dmFyIGk9b25jZVdyYXBwZXIuYmluZChyKTtpLmxpc3RlbmVyPW47ci53cmFwRm49aTtyZXR1cm4gaX1FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2U9ZnVuY3Rpb24gb25jZShlLHQpe2NoZWNrTGlzdGVuZXIodCk7dGhpcy5vbihlLF9vbmNlV3JhcCh0aGlzLGUsdCkpO3JldHVybiB0aGlzfTtFdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXI9ZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcihlLHQpe2NoZWNrTGlzdGVuZXIodCk7dGhpcy5wcmVwZW5kTGlzdGVuZXIoZSxfb25jZVdyYXAodGhpcyxlLHQpKTtyZXR1cm4gdGhpc307RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihlLHQpe3ZhciBuLHIsaSxzLG87Y2hlY2tMaXN0ZW5lcih0KTtyPXRoaXMuX2V2ZW50cztpZihyPT09dW5kZWZpbmVkKXJldHVybiB0aGlzO249cltlXTtpZihuPT09dW5kZWZpbmVkKXJldHVybiB0aGlzO2lmKG49PT10fHxuLmxpc3RlbmVyPT09dCl7aWYoLS10aGlzLl9ldmVudHNDb3VudD09PTApdGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCk7ZWxzZXtkZWxldGUgcltlXTtpZihyLnJlbW92ZUxpc3RlbmVyKXRoaXMuZW1pdChcInJlbW92ZUxpc3RlbmVyXCIsZSxuLmxpc3RlbmVyfHx0KX19ZWxzZSBpZih0eXBlb2YgbiE9PVwiZnVuY3Rpb25cIil7aT0tMTtmb3Iocz1uLmxlbmd0aC0xO3M+PTA7cy0tKXtpZihuW3NdPT09dHx8bltzXS5saXN0ZW5lcj09PXQpe289bltzXS5saXN0ZW5lcjtpPXM7YnJlYWt9fWlmKGk8MClyZXR1cm4gdGhpcztpZihpPT09MCluLnNoaWZ0KCk7ZWxzZXtzcGxpY2VPbmUobixpKX1pZihuLmxlbmd0aD09PTEpcltlXT1uWzBdO2lmKHIucmVtb3ZlTGlzdGVuZXIhPT11bmRlZmluZWQpdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIixlLG98fHQpfXJldHVybiB0aGlzfTtFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZj1FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO0V2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPWZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhlKXt2YXIgdCxuLHI7bj10aGlzLl9ldmVudHM7aWYobj09PXVuZGVmaW5lZClyZXR1cm4gdGhpcztpZihuLnJlbW92ZUxpc3RlbmVyPT09dW5kZWZpbmVkKXtpZihhcmd1bWVudHMubGVuZ3RoPT09MCl7dGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCk7dGhpcy5fZXZlbnRzQ291bnQ9MH1lbHNlIGlmKG5bZV0hPT11bmRlZmluZWQpe2lmKC0tdGhpcy5fZXZlbnRzQ291bnQ9PT0wKXRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpO2Vsc2UgZGVsZXRlIG5bZV19cmV0dXJuIHRoaXN9aWYoYXJndW1lbnRzLmxlbmd0aD09PTApe3ZhciBpPU9iamVjdC5rZXlzKG4pO3ZhciBzO2ZvcihyPTA7cjxpLmxlbmd0aDsrK3Ipe3M9aVtyXTtpZihzPT09XCJyZW1vdmVMaXN0ZW5lclwiKWNvbnRpbnVlO3RoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKHMpfXRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKFwicmVtb3ZlTGlzdGVuZXJcIik7dGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCk7dGhpcy5fZXZlbnRzQ291bnQ9MDtyZXR1cm4gdGhpc310PW5bZV07aWYodHlwZW9mIHQ9PT1cImZ1bmN0aW9uXCIpe3RoaXMucmVtb3ZlTGlzdGVuZXIoZSx0KX1lbHNlIGlmKHQhPT11bmRlZmluZWQpe2ZvcihyPXQubGVuZ3RoLTE7cj49MDtyLS0pe3RoaXMucmVtb3ZlTGlzdGVuZXIoZSx0W3JdKX19cmV0dXJuIHRoaXN9O2Z1bmN0aW9uIF9saXN0ZW5lcnMoZSx0LG4pe3ZhciByPWUuX2V2ZW50cztpZihyPT09dW5kZWZpbmVkKXJldHVybltdO3ZhciBpPXJbdF07aWYoaT09PXVuZGVmaW5lZClyZXR1cm5bXTtpZih0eXBlb2YgaT09PVwiZnVuY3Rpb25cIilyZXR1cm4gbj9baS5saXN0ZW5lcnx8aV06W2ldO3JldHVybiBuP3Vud3JhcExpc3RlbmVycyhpKTphcnJheUNsb25lKGksaS5sZW5ndGgpfUV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzPWZ1bmN0aW9uIGxpc3RlbmVycyhlKXtyZXR1cm4gX2xpc3RlbmVycyh0aGlzLGUsdHJ1ZSl9O0V2ZW50RW1pdHRlci5wcm90b3R5cGUucmF3TGlzdGVuZXJzPWZ1bmN0aW9uIHJhd0xpc3RlbmVycyhlKXtyZXR1cm4gX2xpc3RlbmVycyh0aGlzLGUsZmFsc2UpfTtFdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudD1mdW5jdGlvbihlLHQpe2lmKHR5cGVvZiBlLmxpc3RlbmVyQ291bnQ9PT1cImZ1bmN0aW9uXCIpe3JldHVybiBlLmxpc3RlbmVyQ291bnQodCl9ZWxzZXtyZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGUsdCl9fTtFdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQ9bGlzdGVuZXJDb3VudDtmdW5jdGlvbiBsaXN0ZW5lckNvdW50KGUpe3ZhciB0PXRoaXMuX2V2ZW50cztpZih0IT09dW5kZWZpbmVkKXt2YXIgbj10W2VdO2lmKHR5cGVvZiBuPT09XCJmdW5jdGlvblwiKXtyZXR1cm4gMX1lbHNlIGlmKG4hPT11bmRlZmluZWQpe3JldHVybiBuLmxlbmd0aH19cmV0dXJuIDB9RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzPWZ1bmN0aW9uIGV2ZW50TmFtZXMoKXtyZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQ+MD9yKHRoaXMuX2V2ZW50cyk6W119O2Z1bmN0aW9uIGFycmF5Q2xvbmUoZSx0KXt2YXIgbj1uZXcgQXJyYXkodCk7Zm9yKHZhciByPTA7cjx0OysrciluW3JdPWVbcl07cmV0dXJuIG59ZnVuY3Rpb24gc3BsaWNlT25lKGUsdCl7Zm9yKDt0KzE8ZS5sZW5ndGg7dCsrKWVbdF09ZVt0KzFdO2UucG9wKCl9ZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGUpe3ZhciB0PW5ldyBBcnJheShlLmxlbmd0aCk7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDsrK24pe3Rbbl09ZVtuXS5saXN0ZW5lcnx8ZVtuXX1yZXR1cm4gdH1mdW5jdGlvbiBvbmNlKGUsdCl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihuLHIpe2Z1bmN0aW9uIGVycm9yTGlzdGVuZXIobil7ZS5yZW1vdmVMaXN0ZW5lcih0LHJlc29sdmVyKTtyKG4pfWZ1bmN0aW9uIHJlc29sdmVyKCl7aWYodHlwZW9mIGUucmVtb3ZlTGlzdGVuZXI9PT1cImZ1bmN0aW9uXCIpe2UucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLGVycm9yTGlzdGVuZXIpfW4oW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKX1ldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZSx0LHJlc29sdmVyLHtvbmNlOnRydWV9KTtpZih0IT09XCJlcnJvclwiKXthZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlLGVycm9yTGlzdGVuZXIse29uY2U6dHJ1ZX0pfX0pKX1mdW5jdGlvbiBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlLHQsbil7aWYodHlwZW9mIGUub249PT1cImZ1bmN0aW9uXCIpe2V2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlLFwiZXJyb3JcIix0LG4pfX1mdW5jdGlvbiBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZSx0LG4scil7aWYodHlwZW9mIGUub249PT1cImZ1bmN0aW9uXCIpe2lmKHIub25jZSl7ZS5vbmNlKHQsbil9ZWxzZXtlLm9uKHQsbil9fWVsc2UgaWYodHlwZW9mIGUuYWRkRXZlbnRMaXN0ZW5lcj09PVwiZnVuY3Rpb25cIil7ZS5hZGRFdmVudExpc3RlbmVyKHQsKGZ1bmN0aW9uIHdyYXBMaXN0ZW5lcihpKXtpZihyLm9uY2Upe2UucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LHdyYXBMaXN0ZW5lcil9bihpKX0pKX1lbHNle3Rocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImVtaXR0ZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIGUpfX19fTt2YXIgdD17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKG4pe3ZhciByPXRbbl07aWYociE9PXVuZGVmaW5lZCl7cmV0dXJuIHIuZXhwb3J0c312YXIgaT10W25dPXtleHBvcnRzOnt9fTt2YXIgcz10cnVlO3RyeXtlW25dKGksaS5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO3M9ZmFsc2V9ZmluYWxseXtpZihzKWRlbGV0ZSB0W25dfXJldHVybiBpLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciBuPV9fbmNjd3Bja19yZXF1aXJlX18oODY0KTttb2R1bGUuZXhwb3J0cz1ufSkoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/events/events.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/path-browserify/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/path-browserify/index.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){\"use strict\";var e={114:function(e){function assertPath(e){if(typeof e!==\"string\"){throw new TypeError(\"Path must be a string. Received \"+JSON.stringify(e))}}function normalizeStringPosix(e,r){var t=\"\";var i=0;var n=-1;var a=0;var f;for(var l=0;l<=e.length;++l){if(l<e.length)f=e.charCodeAt(l);else if(f===47)break;else f=47;if(f===47){if(n===l-1||a===1){}else if(n!==l-1&&a===2){if(t.length<2||i!==2||t.charCodeAt(t.length-1)!==46||t.charCodeAt(t.length-2)!==46){if(t.length>2){var s=t.lastIndexOf(\"/\");if(s!==t.length-1){if(s===-1){t=\"\";i=0}else{t=t.slice(0,s);i=t.length-1-t.lastIndexOf(\"/\")}n=l;a=0;continue}}else if(t.length===2||t.length===1){t=\"\";i=0;n=l;a=0;continue}}if(r){if(t.length>0)t+=\"/..\";else t=\"..\";i=2}}else{if(t.length>0)t+=\"/\"+e.slice(n+1,l);else t=e.slice(n+1,l);i=l-n-1}n=l;a=0}else if(f===46&&a!==-1){++a}else{a=-1}}return t}function _format(e,r){var t=r.dir||r.root;var i=r.base||(r.name||\"\")+(r.ext||\"\");if(!t){return i}if(t===r.root){return t+i}return t+e+i}var r={resolve:function resolve(){var e=\"\";var r=false;var t;for(var i=arguments.length-1;i>=-1&&!r;i--){var n;if(i>=0)n=arguments[i];else{if(t===undefined)t=\"\";n=t}assertPath(n);if(n.length===0){continue}e=n+\"/\"+e;r=n.charCodeAt(0)===47}e=normalizeStringPosix(e,!r);if(r){if(e.length>0)return\"/\"+e;else return\"/\"}else if(e.length>0){return e}else{return\".\"}},normalize:function normalize(e){assertPath(e);if(e.length===0)return\".\";var r=e.charCodeAt(0)===47;var t=e.charCodeAt(e.length-1)===47;e=normalizeStringPosix(e,!r);if(e.length===0&&!r)e=\".\";if(e.length>0&&t)e+=\"/\";if(r)return\"/\"+e;return e},isAbsolute:function isAbsolute(e){assertPath(e);return e.length>0&&e.charCodeAt(0)===47},join:function join(){if(arguments.length===0)return\".\";var e;for(var t=0;t<arguments.length;++t){var i=arguments[t];assertPath(i);if(i.length>0){if(e===undefined)e=i;else e+=\"/\"+i}}if(e===undefined)return\".\";return r.normalize(e)},relative:function relative(e,t){assertPath(e);assertPath(t);if(e===t)return\"\";e=r.resolve(e);t=r.resolve(t);if(e===t)return\"\";var i=1;for(;i<e.length;++i){if(e.charCodeAt(i)!==47)break}var n=e.length;var a=n-i;var f=1;for(;f<t.length;++f){if(t.charCodeAt(f)!==47)break}var l=t.length;var s=l-f;var o=a<s?a:s;var u=-1;var h=0;for(;h<=o;++h){if(h===o){if(s>o){if(t.charCodeAt(f+h)===47){return t.slice(f+h+1)}else if(h===0){return t.slice(f+h)}}else if(a>o){if(e.charCodeAt(i+h)===47){u=h}else if(h===0){u=0}}break}var c=e.charCodeAt(i+h);var v=t.charCodeAt(f+h);if(c!==v)break;else if(c===47)u=h}var g=\"\";for(h=i+u+1;h<=n;++h){if(h===n||e.charCodeAt(h)===47){if(g.length===0)g+=\"..\";else g+=\"/..\"}}if(g.length>0)return g+t.slice(f+u);else{f+=u;if(t.charCodeAt(f)===47)++f;return t.slice(f)}},_makeLong:function _makeLong(e){return e},dirname:function dirname(e){assertPath(e);if(e.length===0)return\".\";var r=e.charCodeAt(0);var t=r===47;var i=-1;var n=true;for(var a=e.length-1;a>=1;--a){r=e.charCodeAt(a);if(r===47){if(!n){i=a;break}}else{n=false}}if(i===-1)return t?\"/\":\".\";if(t&&i===1)return\"//\";return e.slice(0,i)},basename:function basename(e,r){if(r!==undefined&&typeof r!==\"string\")throw new TypeError('\"ext\" argument must be a string');assertPath(e);var t=0;var i=-1;var n=true;var a;if(r!==undefined&&r.length>0&&r.length<=e.length){if(r.length===e.length&&r===e)return\"\";var f=r.length-1;var l=-1;for(a=e.length-1;a>=0;--a){var s=e.charCodeAt(a);if(s===47){if(!n){t=a+1;break}}else{if(l===-1){n=false;l=a+1}if(f>=0){if(s===r.charCodeAt(f)){if(--f===-1){i=a}}else{f=-1;i=l}}}}if(t===i)i=l;else if(i===-1)i=e.length;return e.slice(t,i)}else{for(a=e.length-1;a>=0;--a){if(e.charCodeAt(a)===47){if(!n){t=a+1;break}}else if(i===-1){n=false;i=a+1}}if(i===-1)return\"\";return e.slice(t,i)}},extname:function extname(e){assertPath(e);var r=-1;var t=0;var i=-1;var n=true;var a=0;for(var f=e.length-1;f>=0;--f){var l=e.charCodeAt(f);if(l===47){if(!n){t=f+1;break}continue}if(i===-1){n=false;i=f+1}if(l===46){if(r===-1)r=f;else if(a!==1)a=1}else if(r!==-1){a=-1}}if(r===-1||i===-1||a===0||a===1&&r===i-1&&r===t+1){return\"\"}return e.slice(r,i)},format:function format(e){if(e===null||typeof e!==\"object\"){throw new TypeError('The \"pathObject\" argument must be of type Object. Received type '+typeof e)}return _format(\"/\",e)},parse:function parse(e){assertPath(e);var r={root:\"\",dir:\"\",base:\"\",ext:\"\",name:\"\"};if(e.length===0)return r;var t=e.charCodeAt(0);var i=t===47;var n;if(i){r.root=\"/\";n=1}else{n=0}var a=-1;var f=0;var l=-1;var s=true;var o=e.length-1;var u=0;for(;o>=n;--o){t=e.charCodeAt(o);if(t===47){if(!s){f=o+1;break}continue}if(l===-1){s=false;l=o+1}if(t===46){if(a===-1)a=o;else if(u!==1)u=1}else if(a!==-1){u=-1}}if(a===-1||l===-1||u===0||u===1&&a===l-1&&a===f+1){if(l!==-1){if(f===0&&i)r.base=r.name=e.slice(1,l);else r.base=r.name=e.slice(f,l)}}else{if(f===0&&i){r.name=e.slice(1,a);r.base=e.slice(1,l)}else{r.name=e.slice(f,a);r.base=e.slice(f,l)}r.ext=e.slice(a,l)}if(f>0)r.dir=e.slice(0,f-1);else if(i)r.dir=\"/\";return r},sep:\"/\",delimiter:\":\",win32:null,posix:null};r.posix=r;e.exports=r}};var r={};function __nccwpck_require__(t){var i=r[t];if(i!==undefined){return i.exports}var n=r[t]={exports:{}};var a=true;try{e[t](n,n.exports,__nccwpck_require__);a=false}finally{if(a)delete r[t]}return n.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(114);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3BhdGgtYnJvd3NlcmlmeS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsWUFBWSxhQUFhLE9BQU8sZ0JBQWdCLHVCQUF1Qix3QkFBd0IsMkVBQTJFLG1DQUFtQyxTQUFTLFFBQVEsU0FBUyxRQUFRLE1BQU0sWUFBWSxZQUFZLEtBQUssZ0NBQWdDLHFCQUFxQixVQUFVLFdBQVcsb0JBQW9CLHdCQUF3QixvRkFBb0YsZUFBZSx5QkFBeUIsbUJBQW1CLFdBQVcsS0FBSyxJQUFJLEtBQUssZUFBZSxnQ0FBZ0MsSUFBSSxJQUFJLFVBQVUsb0NBQW9DLEtBQUssSUFBSSxJQUFJLElBQUksVUFBVSxNQUFNLHVCQUF1QixZQUFZLEtBQUssS0FBSyxvQ0FBb0Msc0JBQXNCLFFBQVEsSUFBSSxJQUFJLHdCQUF3QixJQUFJLEtBQUssTUFBTSxTQUFTLHNCQUFzQixvQkFBb0IsdUNBQXVDLE9BQU8sU0FBUyxlQUFlLFdBQVcsYUFBYSxPQUFPLDJCQUEyQixTQUFTLFlBQVksTUFBTSw2QkFBNkIsVUFBVSxLQUFLLE1BQU0sdUJBQXVCLEtBQUssc0JBQXNCLElBQUksY0FBYyxpQkFBaUIsU0FBUyxVQUFVLHVCQUF1Qiw2QkFBNkIsTUFBTSwwQkFBMEIsZUFBZSxvQkFBb0IsU0FBUyxLQUFLLFdBQVcsaUNBQWlDLGNBQWMsMEJBQTBCLDJCQUEyQixvQ0FBb0MsNkJBQTZCLDBCQUEwQix3QkFBd0IsaUJBQWlCLFNBQVMsbUNBQW1DLGNBQWMsd0NBQXdDLHNCQUFzQixrQ0FBa0MsTUFBTSxZQUFZLG1CQUFtQixLQUFLLG1CQUFtQixjQUFjLGVBQWUscUJBQXFCLGVBQWUsMkJBQTJCLHNCQUFzQixpQ0FBaUMsY0FBYyxjQUFjLGtCQUFrQixlQUFlLGVBQWUsa0JBQWtCLFFBQVEsS0FBSyxXQUFXLEtBQUssOEJBQThCLGVBQWUsVUFBVSxRQUFRLEtBQUssV0FBVyxLQUFLLDhCQUE4QixlQUFlLFVBQVUsY0FBYyxTQUFTLFFBQVEsS0FBSyxLQUFLLEtBQUssVUFBVSxRQUFRLDJCQUEyQixzQkFBc0IsZUFBZSxxQkFBcUIsYUFBYSwyQkFBMkIsSUFBSSxlQUFlLEtBQUssTUFBTSx3QkFBd0Isd0JBQXdCLGVBQWUsbUJBQW1CLFNBQVMsWUFBWSxLQUFLLEtBQUssZ0NBQWdDLHdCQUF3QixlQUFlLG9DQUFvQyxLQUFLLEtBQUssNEJBQTRCLG1CQUFtQixpQ0FBaUMsU0FBUyw2QkFBNkIsY0FBYywwQkFBMEIsc0JBQXNCLGFBQWEsU0FBUyxXQUFXLHFCQUFxQixLQUFLLEtBQUssa0JBQWtCLFdBQVcsT0FBTyxJQUFJLE9BQU8sS0FBSyxTQUFTLDJCQUEyQix1QkFBdUIsb0JBQW9CLGlDQUFpQyw2RkFBNkYsY0FBYyxRQUFRLFNBQVMsV0FBVyxNQUFNLGtEQUFrRCx1Q0FBdUMsaUJBQWlCLFNBQVMsaUJBQWlCLEtBQUssS0FBSyxzQkFBc0IsV0FBVyxPQUFPLE1BQU0sT0FBTyxLQUFLLFdBQVcsUUFBUSxNQUFNLFNBQVMsd0JBQXdCLGFBQWEsS0FBSyxLQUFLLEtBQUssT0FBTyxhQUFhLDBCQUEwQixvQkFBb0IsS0FBSyxpQkFBaUIsS0FBSyxLQUFLLHlCQUF5QixPQUFPLE1BQU0sT0FBTyxnQkFBZ0IsUUFBUSxPQUFPLG1CQUFtQixxQkFBcUIsNkJBQTZCLGNBQWMsU0FBUyxRQUFRLFNBQVMsV0FBVyxRQUFRLHFCQUFxQixLQUFLLEtBQUssc0JBQXNCLFdBQVcsT0FBTyxNQUFNLE1BQU0sU0FBUyxXQUFXLFFBQVEsTUFBTSxXQUFXLGNBQWMsa0JBQWtCLGdCQUFnQixNQUFNLG1EQUFtRCxTQUFTLG9CQUFvQiwyQkFBMkIsa0NBQWtDLGlHQUFpRyxzQkFBc0IseUJBQXlCLGNBQWMsT0FBTyx1Q0FBdUMseUJBQXlCLHNCQUFzQixhQUFhLE1BQU0sTUFBTSxXQUFXLElBQUksS0FBSyxJQUFJLFNBQVMsUUFBUSxTQUFTLFdBQVcsaUJBQWlCLFFBQVEsS0FBSyxLQUFLLEtBQUssa0JBQWtCLFdBQVcsT0FBTyxNQUFNLE1BQU0sU0FBUyxXQUFXLFFBQVEsTUFBTSxXQUFXLGNBQWMsa0JBQWtCLGdCQUFnQixNQUFNLG1EQUFtRCxXQUFXLHVDQUF1QyxpQ0FBaUMsS0FBSyxhQUFhLG9CQUFvQixvQkFBb0IsS0FBSyxvQkFBb0Isb0JBQW9CLG1CQUFtQiw0QkFBNEIsb0JBQW9CLFNBQVMsOENBQThDLFVBQVUsY0FBYyxTQUFTLGdDQUFnQyxXQUFXLGtCQUFrQixpQkFBaUIsWUFBWSxZQUFZLFdBQVcsSUFBSSxzQ0FBc0MsUUFBUSxRQUFRLGlCQUFpQixpQkFBaUIsbUVBQW1FLFNBQVMsS0FBSywrQkFBK0IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcGF0aC1icm93c2VyaWZ5L2luZGV4LmpzPzNjZDEiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ezExNDpmdW5jdGlvbihlKXtmdW5jdGlvbiBhc3NlcnRQYXRoKGUpe2lmKHR5cGVvZiBlIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlBhdGggbXVzdCBiZSBhIHN0cmluZy4gUmVjZWl2ZWQgXCIrSlNPTi5zdHJpbmdpZnkoZSkpfX1mdW5jdGlvbiBub3JtYWxpemVTdHJpbmdQb3NpeChlLHIpe3ZhciB0PVwiXCI7dmFyIGk9MDt2YXIgbj0tMTt2YXIgYT0wO3ZhciBmO2Zvcih2YXIgbD0wO2w8PWUubGVuZ3RoOysrbCl7aWYobDxlLmxlbmd0aClmPWUuY2hhckNvZGVBdChsKTtlbHNlIGlmKGY9PT00NylicmVhaztlbHNlIGY9NDc7aWYoZj09PTQ3KXtpZihuPT09bC0xfHxhPT09MSl7fWVsc2UgaWYobiE9PWwtMSYmYT09PTIpe2lmKHQubGVuZ3RoPDJ8fGkhPT0yfHx0LmNoYXJDb2RlQXQodC5sZW5ndGgtMSkhPT00Nnx8dC5jaGFyQ29kZUF0KHQubGVuZ3RoLTIpIT09NDYpe2lmKHQubGVuZ3RoPjIpe3ZhciBzPXQubGFzdEluZGV4T2YoXCIvXCIpO2lmKHMhPT10Lmxlbmd0aC0xKXtpZihzPT09LTEpe3Q9XCJcIjtpPTB9ZWxzZXt0PXQuc2xpY2UoMCxzKTtpPXQubGVuZ3RoLTEtdC5sYXN0SW5kZXhPZihcIi9cIil9bj1sO2E9MDtjb250aW51ZX19ZWxzZSBpZih0Lmxlbmd0aD09PTJ8fHQubGVuZ3RoPT09MSl7dD1cIlwiO2k9MDtuPWw7YT0wO2NvbnRpbnVlfX1pZihyKXtpZih0Lmxlbmd0aD4wKXQrPVwiLy4uXCI7ZWxzZSB0PVwiLi5cIjtpPTJ9fWVsc2V7aWYodC5sZW5ndGg+MCl0Kz1cIi9cIitlLnNsaWNlKG4rMSxsKTtlbHNlIHQ9ZS5zbGljZShuKzEsbCk7aT1sLW4tMX1uPWw7YT0wfWVsc2UgaWYoZj09PTQ2JiZhIT09LTEpeysrYX1lbHNle2E9LTF9fXJldHVybiB0fWZ1bmN0aW9uIF9mb3JtYXQoZSxyKXt2YXIgdD1yLmRpcnx8ci5yb290O3ZhciBpPXIuYmFzZXx8KHIubmFtZXx8XCJcIikrKHIuZXh0fHxcIlwiKTtpZighdCl7cmV0dXJuIGl9aWYodD09PXIucm9vdCl7cmV0dXJuIHQraX1yZXR1cm4gdCtlK2l9dmFyIHI9e3Jlc29sdmU6ZnVuY3Rpb24gcmVzb2x2ZSgpe3ZhciBlPVwiXCI7dmFyIHI9ZmFsc2U7dmFyIHQ7Zm9yKHZhciBpPWFyZ3VtZW50cy5sZW5ndGgtMTtpPj0tMSYmIXI7aS0tKXt2YXIgbjtpZihpPj0wKW49YXJndW1lbnRzW2ldO2Vsc2V7aWYodD09PXVuZGVmaW5lZCl0PVwiXCI7bj10fWFzc2VydFBhdGgobik7aWYobi5sZW5ndGg9PT0wKXtjb250aW51ZX1lPW4rXCIvXCIrZTtyPW4uY2hhckNvZGVBdCgwKT09PTQ3fWU9bm9ybWFsaXplU3RyaW5nUG9zaXgoZSwhcik7aWYocil7aWYoZS5sZW5ndGg+MClyZXR1cm5cIi9cIitlO2Vsc2UgcmV0dXJuXCIvXCJ9ZWxzZSBpZihlLmxlbmd0aD4wKXtyZXR1cm4gZX1lbHNle3JldHVyblwiLlwifX0sbm9ybWFsaXplOmZ1bmN0aW9uIG5vcm1hbGl6ZShlKXthc3NlcnRQYXRoKGUpO2lmKGUubGVuZ3RoPT09MClyZXR1cm5cIi5cIjt2YXIgcj1lLmNoYXJDb2RlQXQoMCk9PT00Nzt2YXIgdD1lLmNoYXJDb2RlQXQoZS5sZW5ndGgtMSk9PT00NztlPW5vcm1hbGl6ZVN0cmluZ1Bvc2l4KGUsIXIpO2lmKGUubGVuZ3RoPT09MCYmIXIpZT1cIi5cIjtpZihlLmxlbmd0aD4wJiZ0KWUrPVwiL1wiO2lmKHIpcmV0dXJuXCIvXCIrZTtyZXR1cm4gZX0saXNBYnNvbHV0ZTpmdW5jdGlvbiBpc0Fic29sdXRlKGUpe2Fzc2VydFBhdGgoZSk7cmV0dXJuIGUubGVuZ3RoPjAmJmUuY2hhckNvZGVBdCgwKT09PTQ3fSxqb2luOmZ1bmN0aW9uIGpvaW4oKXtpZihhcmd1bWVudHMubGVuZ3RoPT09MClyZXR1cm5cIi5cIjt2YXIgZTtmb3IodmFyIHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7Kyt0KXt2YXIgaT1hcmd1bWVudHNbdF07YXNzZXJ0UGF0aChpKTtpZihpLmxlbmd0aD4wKXtpZihlPT09dW5kZWZpbmVkKWU9aTtlbHNlIGUrPVwiL1wiK2l9fWlmKGU9PT11bmRlZmluZWQpcmV0dXJuXCIuXCI7cmV0dXJuIHIubm9ybWFsaXplKGUpfSxyZWxhdGl2ZTpmdW5jdGlvbiByZWxhdGl2ZShlLHQpe2Fzc2VydFBhdGgoZSk7YXNzZXJ0UGF0aCh0KTtpZihlPT09dClyZXR1cm5cIlwiO2U9ci5yZXNvbHZlKGUpO3Q9ci5yZXNvbHZlKHQpO2lmKGU9PT10KXJldHVyblwiXCI7dmFyIGk9MTtmb3IoO2k8ZS5sZW5ndGg7KytpKXtpZihlLmNoYXJDb2RlQXQoaSkhPT00NylicmVha312YXIgbj1lLmxlbmd0aDt2YXIgYT1uLWk7dmFyIGY9MTtmb3IoO2Y8dC5sZW5ndGg7KytmKXtpZih0LmNoYXJDb2RlQXQoZikhPT00NylicmVha312YXIgbD10Lmxlbmd0aDt2YXIgcz1sLWY7dmFyIG89YTxzP2E6czt2YXIgdT0tMTt2YXIgaD0wO2Zvcig7aDw9bzsrK2gpe2lmKGg9PT1vKXtpZihzPm8pe2lmKHQuY2hhckNvZGVBdChmK2gpPT09NDcpe3JldHVybiB0LnNsaWNlKGYraCsxKX1lbHNlIGlmKGg9PT0wKXtyZXR1cm4gdC5zbGljZShmK2gpfX1lbHNlIGlmKGE+byl7aWYoZS5jaGFyQ29kZUF0KGkraCk9PT00Nyl7dT1ofWVsc2UgaWYoaD09PTApe3U9MH19YnJlYWt9dmFyIGM9ZS5jaGFyQ29kZUF0KGkraCk7dmFyIHY9dC5jaGFyQ29kZUF0KGYraCk7aWYoYyE9PXYpYnJlYWs7ZWxzZSBpZihjPT09NDcpdT1ofXZhciBnPVwiXCI7Zm9yKGg9aSt1KzE7aDw9bjsrK2gpe2lmKGg9PT1ufHxlLmNoYXJDb2RlQXQoaCk9PT00Nyl7aWYoZy5sZW5ndGg9PT0wKWcrPVwiLi5cIjtlbHNlIGcrPVwiLy4uXCJ9fWlmKGcubGVuZ3RoPjApcmV0dXJuIGcrdC5zbGljZShmK3UpO2Vsc2V7Zis9dTtpZih0LmNoYXJDb2RlQXQoZik9PT00NykrK2Y7cmV0dXJuIHQuc2xpY2UoZil9fSxfbWFrZUxvbmc6ZnVuY3Rpb24gX21ha2VMb25nKGUpe3JldHVybiBlfSxkaXJuYW1lOmZ1bmN0aW9uIGRpcm5hbWUoZSl7YXNzZXJ0UGF0aChlKTtpZihlLmxlbmd0aD09PTApcmV0dXJuXCIuXCI7dmFyIHI9ZS5jaGFyQ29kZUF0KDApO3ZhciB0PXI9PT00Nzt2YXIgaT0tMTt2YXIgbj10cnVlO2Zvcih2YXIgYT1lLmxlbmd0aC0xO2E+PTE7LS1hKXtyPWUuY2hhckNvZGVBdChhKTtpZihyPT09NDcpe2lmKCFuKXtpPWE7YnJlYWt9fWVsc2V7bj1mYWxzZX19aWYoaT09PS0xKXJldHVybiB0P1wiL1wiOlwiLlwiO2lmKHQmJmk9PT0xKXJldHVyblwiLy9cIjtyZXR1cm4gZS5zbGljZSgwLGkpfSxiYXNlbmFtZTpmdW5jdGlvbiBiYXNlbmFtZShlLHIpe2lmKHIhPT11bmRlZmluZWQmJnR5cGVvZiByIT09XCJzdHJpbmdcIil0aHJvdyBuZXcgVHlwZUVycm9yKCdcImV4dFwiIGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnKTthc3NlcnRQYXRoKGUpO3ZhciB0PTA7dmFyIGk9LTE7dmFyIG49dHJ1ZTt2YXIgYTtpZihyIT09dW5kZWZpbmVkJiZyLmxlbmd0aD4wJiZyLmxlbmd0aDw9ZS5sZW5ndGgpe2lmKHIubGVuZ3RoPT09ZS5sZW5ndGgmJnI9PT1lKXJldHVyblwiXCI7dmFyIGY9ci5sZW5ndGgtMTt2YXIgbD0tMTtmb3IoYT1lLmxlbmd0aC0xO2E+PTA7LS1hKXt2YXIgcz1lLmNoYXJDb2RlQXQoYSk7aWYocz09PTQ3KXtpZighbil7dD1hKzE7YnJlYWt9fWVsc2V7aWYobD09PS0xKXtuPWZhbHNlO2w9YSsxfWlmKGY+PTApe2lmKHM9PT1yLmNoYXJDb2RlQXQoZikpe2lmKC0tZj09PS0xKXtpPWF9fWVsc2V7Zj0tMTtpPWx9fX19aWYodD09PWkpaT1sO2Vsc2UgaWYoaT09PS0xKWk9ZS5sZW5ndGg7cmV0dXJuIGUuc2xpY2UodCxpKX1lbHNle2ZvcihhPWUubGVuZ3RoLTE7YT49MDstLWEpe2lmKGUuY2hhckNvZGVBdChhKT09PTQ3KXtpZighbil7dD1hKzE7YnJlYWt9fWVsc2UgaWYoaT09PS0xKXtuPWZhbHNlO2k9YSsxfX1pZihpPT09LTEpcmV0dXJuXCJcIjtyZXR1cm4gZS5zbGljZSh0LGkpfX0sZXh0bmFtZTpmdW5jdGlvbiBleHRuYW1lKGUpe2Fzc2VydFBhdGgoZSk7dmFyIHI9LTE7dmFyIHQ9MDt2YXIgaT0tMTt2YXIgbj10cnVlO3ZhciBhPTA7Zm9yKHZhciBmPWUubGVuZ3RoLTE7Zj49MDstLWYpe3ZhciBsPWUuY2hhckNvZGVBdChmKTtpZihsPT09NDcpe2lmKCFuKXt0PWYrMTticmVha31jb250aW51ZX1pZihpPT09LTEpe249ZmFsc2U7aT1mKzF9aWYobD09PTQ2KXtpZihyPT09LTEpcj1mO2Vsc2UgaWYoYSE9PTEpYT0xfWVsc2UgaWYociE9PS0xKXthPS0xfX1pZihyPT09LTF8fGk9PT0tMXx8YT09PTB8fGE9PT0xJiZyPT09aS0xJiZyPT09dCsxKXtyZXR1cm5cIlwifXJldHVybiBlLnNsaWNlKHIsaSl9LGZvcm1hdDpmdW5jdGlvbiBmb3JtYXQoZSl7aWYoZT09PW51bGx8fHR5cGVvZiBlIT09XCJvYmplY3RcIil7dGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwicGF0aE9iamVjdFwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyt0eXBlb2YgZSl9cmV0dXJuIF9mb3JtYXQoXCIvXCIsZSl9LHBhcnNlOmZ1bmN0aW9uIHBhcnNlKGUpe2Fzc2VydFBhdGgoZSk7dmFyIHI9e3Jvb3Q6XCJcIixkaXI6XCJcIixiYXNlOlwiXCIsZXh0OlwiXCIsbmFtZTpcIlwifTtpZihlLmxlbmd0aD09PTApcmV0dXJuIHI7dmFyIHQ9ZS5jaGFyQ29kZUF0KDApO3ZhciBpPXQ9PT00Nzt2YXIgbjtpZihpKXtyLnJvb3Q9XCIvXCI7bj0xfWVsc2V7bj0wfXZhciBhPS0xO3ZhciBmPTA7dmFyIGw9LTE7dmFyIHM9dHJ1ZTt2YXIgbz1lLmxlbmd0aC0xO3ZhciB1PTA7Zm9yKDtvPj1uOy0tbyl7dD1lLmNoYXJDb2RlQXQobyk7aWYodD09PTQ3KXtpZighcyl7Zj1vKzE7YnJlYWt9Y29udGludWV9aWYobD09PS0xKXtzPWZhbHNlO2w9bysxfWlmKHQ9PT00Nil7aWYoYT09PS0xKWE9bztlbHNlIGlmKHUhPT0xKXU9MX1lbHNlIGlmKGEhPT0tMSl7dT0tMX19aWYoYT09PS0xfHxsPT09LTF8fHU9PT0wfHx1PT09MSYmYT09PWwtMSYmYT09PWYrMSl7aWYobCE9PS0xKXtpZihmPT09MCYmaSlyLmJhc2U9ci5uYW1lPWUuc2xpY2UoMSxsKTtlbHNlIHIuYmFzZT1yLm5hbWU9ZS5zbGljZShmLGwpfX1lbHNle2lmKGY9PT0wJiZpKXtyLm5hbWU9ZS5zbGljZSgxLGEpO3IuYmFzZT1lLnNsaWNlKDEsbCl9ZWxzZXtyLm5hbWU9ZS5zbGljZShmLGEpO3IuYmFzZT1lLnNsaWNlKGYsbCl9ci5leHQ9ZS5zbGljZShhLGwpfWlmKGY+MClyLmRpcj1lLnNsaWNlKDAsZi0xKTtlbHNlIGlmKGkpci5kaXI9XCIvXCI7cmV0dXJuIHJ9LHNlcDpcIi9cIixkZWxpbWl0ZXI6XCI6XCIsd2luMzI6bnVsbCxwb3NpeDpudWxsfTtyLnBvc2l4PXI7ZS5leHBvcnRzPXJ9fTt2YXIgcj17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKHQpe3ZhciBpPXJbdF07aWYoaSE9PXVuZGVmaW5lZCl7cmV0dXJuIGkuZXhwb3J0c312YXIgbj1yW3RdPXtleHBvcnRzOnt9fTt2YXIgYT10cnVlO3RyeXtlW3RdKG4sbi5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO2E9ZmFsc2V9ZmluYWxseXtpZihhKWRlbGV0ZSByW3RdfXJldHVybiBuLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciB0PV9fbmNjd3Bja19yZXF1aXJlX18oMTE0KTttb2R1bGUuZXhwb3J0cz10fSkoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/path-browserify/index.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/process/browser.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/compiled/process/browser.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsWUFBWSxPQUFPLGdCQUFnQixtQkFBbUIsTUFBTSxNQUFNLDRCQUE0QixtREFBbUQsK0JBQStCLHFEQUFxRCxZQUFZLElBQUksbUNBQW1DLGFBQWEsS0FBSyxvQkFBb0IsU0FBUyxtQkFBbUIsSUFBSSxxQ0FBcUMsZUFBZSxLQUFLLHVCQUF1QixTQUFTLHVCQUF1QixJQUFJLHVCQUF1QixtQkFBbUIsdUJBQXVCLDJDQUEyQyxhQUFhLHVCQUF1QixJQUFJLGNBQWMsU0FBUyxJQUFJLHdCQUF3QixTQUFTLDBCQUEwQiw0QkFBNEIscUJBQXFCLHVCQUF1QixnREFBZ0QsZUFBZSx1QkFBdUIsSUFBSSxZQUFZLFNBQVMsSUFBSSxzQkFBc0IsU0FBUyx3QkFBd0IsU0FBUyxZQUFZLE1BQU0sU0FBUywyQkFBMkIsV0FBVyxPQUFPLFFBQVEsYUFBYSxjQUFjLEtBQUssS0FBSyxhQUFhLGNBQWMsc0JBQXNCLE1BQU0sT0FBTyxrQ0FBa0MsT0FBTyxlQUFlLFNBQVMsSUFBSSxLQUFLLGFBQWEsTUFBTSxZQUFZLEtBQUssV0FBVyxPQUFPLFFBQVEsbUJBQW1CLHVCQUF1QixvQ0FBb0MsdUJBQXVCLFlBQVksbUJBQW1CLEtBQUsscUJBQXFCLHNCQUFzQixxQkFBcUIseUJBQXlCLG1CQUFtQixXQUFXLGFBQWEsOEJBQThCLGlDQUFpQyxrQkFBa0IsZUFBZSxTQUFTLFVBQVUsYUFBYSxjQUFjLGlCQUFpQixVQUFVLG1CQUFtQixZQUFZLFdBQVcsc0JBQXNCLDBCQUEwQixZQUFZLHVCQUF1QiwyQkFBMkIsd0JBQXdCLFVBQVUsc0JBQXNCLHFEQUFxRCxpQkFBaUIsV0FBVyxvQkFBb0IsbURBQW1ELG1CQUFtQixZQUFZLFNBQVMsZ0NBQWdDLFdBQVcsa0JBQWtCLGlCQUFpQixZQUFZLFlBQVksV0FBVyxJQUFJLHNDQUFzQyxRQUFRLFFBQVEsaUJBQWlCLGlCQUFpQixtRUFBbUUsU0FBUyxLQUFLLCtCQUErQixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9wcm9jZXNzL2Jyb3dzZXIuanM/MWIxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXt2YXIgZT17MjI5OmZ1bmN0aW9uKGUpe3ZhciB0PWUuZXhwb3J0cz17fTt2YXIgcjt2YXIgbjtmdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfShmdW5jdGlvbigpe3RyeXtpZih0eXBlb2Ygc2V0VGltZW91dD09PVwiZnVuY3Rpb25cIil7cj1zZXRUaW1lb3V0fWVsc2V7cj1kZWZhdWx0U2V0VGltb3V0fX1jYXRjaChlKXtyPWRlZmF1bHRTZXRUaW1vdXR9dHJ5e2lmKHR5cGVvZiBjbGVhclRpbWVvdXQ9PT1cImZ1bmN0aW9uXCIpe249Y2xlYXJUaW1lb3V0fWVsc2V7bj1kZWZhdWx0Q2xlYXJUaW1lb3V0fX1jYXRjaChlKXtuPWRlZmF1bHRDbGVhclRpbWVvdXR9fSkoKTtmdW5jdGlvbiBydW5UaW1lb3V0KGUpe2lmKHI9PT1zZXRUaW1lb3V0KXtyZXR1cm4gc2V0VGltZW91dChlLDApfWlmKChyPT09ZGVmYXVsdFNldFRpbW91dHx8IXIpJiZzZXRUaW1lb3V0KXtyPXNldFRpbWVvdXQ7cmV0dXJuIHNldFRpbWVvdXQoZSwwKX10cnl7cmV0dXJuIHIoZSwwKX1jYXRjaCh0KXt0cnl7cmV0dXJuIHIuY2FsbChudWxsLGUsMCl9Y2F0Y2godCl7cmV0dXJuIHIuY2FsbCh0aGlzLGUsMCl9fX1mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQoZSl7aWYobj09PWNsZWFyVGltZW91dCl7cmV0dXJuIGNsZWFyVGltZW91dChlKX1pZigobj09PWRlZmF1bHRDbGVhclRpbWVvdXR8fCFuKSYmY2xlYXJUaW1lb3V0KXtuPWNsZWFyVGltZW91dDtyZXR1cm4gY2xlYXJUaW1lb3V0KGUpfXRyeXtyZXR1cm4gbihlKX1jYXRjaCh0KXt0cnl7cmV0dXJuIG4uY2FsbChudWxsLGUpfWNhdGNoKHQpe3JldHVybiBuLmNhbGwodGhpcyxlKX19fXZhciBpPVtdO3ZhciBvPWZhbHNlO3ZhciB1O3ZhciBhPS0xO2Z1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpe2lmKCFvfHwhdSl7cmV0dXJufW89ZmFsc2U7aWYodS5sZW5ndGgpe2k9dS5jb25jYXQoaSl9ZWxzZXthPS0xfWlmKGkubGVuZ3RoKXtkcmFpblF1ZXVlKCl9fWZ1bmN0aW9uIGRyYWluUXVldWUoKXtpZihvKXtyZXR1cm59dmFyIGU9cnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO289dHJ1ZTt2YXIgdD1pLmxlbmd0aDt3aGlsZSh0KXt1PWk7aT1bXTt3aGlsZSgrK2E8dCl7aWYodSl7dVthXS5ydW4oKX19YT0tMTt0PWkubGVuZ3RofXU9bnVsbDtvPWZhbHNlO3J1bkNsZWFyVGltZW91dChlKX10Lm5leHRUaWNrPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSl7Zm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl7dFtyLTFdPWFyZ3VtZW50c1tyXX19aS5wdXNoKG5ldyBJdGVtKGUsdCkpO2lmKGkubGVuZ3RoPT09MSYmIW8pe3J1blRpbWVvdXQoZHJhaW5RdWV1ZSl9fTtmdW5jdGlvbiBJdGVtKGUsdCl7dGhpcy5mdW49ZTt0aGlzLmFycmF5PXR9SXRlbS5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX07dC50aXRsZT1cImJyb3dzZXJcIjt0LmJyb3dzZXI9dHJ1ZTt0LmVudj17fTt0LmFyZ3Y9W107dC52ZXJzaW9uPVwiXCI7dC52ZXJzaW9ucz17fTtmdW5jdGlvbiBub29wKCl7fXQub249bm9vcDt0LmFkZExpc3RlbmVyPW5vb3A7dC5vbmNlPW5vb3A7dC5vZmY9bm9vcDt0LnJlbW92ZUxpc3RlbmVyPW5vb3A7dC5yZW1vdmVBbGxMaXN0ZW5lcnM9bm9vcDt0LmVtaXQ9bm9vcDt0LnByZXBlbmRMaXN0ZW5lcj1ub29wO3QucHJlcGVuZE9uY2VMaXN0ZW5lcj1ub29wO3QubGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybltdfTt0LmJpbmRpbmc9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3QuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCJ9O3QuY2hkaXI9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkXCIpfTt0LnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fX07dmFyIHQ9e307ZnVuY3Rpb24gX19uY2N3cGNrX3JlcXVpcmVfXyhyKXt2YXIgbj10W3JdO2lmKG4hPT11bmRlZmluZWQpe3JldHVybiBuLmV4cG9ydHN9dmFyIGk9dFtyXT17ZXhwb3J0czp7fX07dmFyIG89dHJ1ZTt0cnl7ZVtyXShpLGkuZXhwb3J0cyxfX25jY3dwY2tfcmVxdWlyZV9fKTtvPWZhbHNlfWZpbmFsbHl7aWYobylkZWxldGUgdFtyXX1yZXR1cm4gaS5leHBvcnRzfWlmKHR5cGVvZiBfX25jY3dwY2tfcmVxdWlyZV9fIT09XCJ1bmRlZmluZWRcIilfX25jY3dwY2tfcmVxdWlyZV9fLmFiPV9fZGlybmFtZStcIi9cIjt2YXIgcj1fX25jY3dwY2tfcmVxdWlyZV9fKDIyOSk7bW9kdWxlLmV4cG9ydHM9cn0pKCk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/process/browser.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/stream-browserify/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/next/dist/compiled/stream-browserify/index.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n(function(){var e={782:function(e){if(typeof Object.create===\"function\"){e.exports=function inherits(e,t){if(t){e.super_=t;e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:false,writable:true,configurable:true}})}}}else{e.exports=function inherits(e,t){if(t){e.super_=t;var TempCtor=function(){};TempCtor.prototype=t.prototype;e.prototype=new TempCtor;e.prototype.constructor=e}}}},646:function(e){\"use strict\";const t={};function createErrorType(e,r,n){if(!n){n=Error}function getMessage(e,t,n){if(typeof r===\"string\"){return r}else{return r(e,t,n)}}class NodeError extends n{constructor(e,t,r){super(getMessage(e,t,r))}}NodeError.prototype.name=n.name;NodeError.prototype.code=e;t[e]=NodeError}function oneOf(e,t){if(Array.isArray(e)){const r=e.length;e=e.map((e=>String(e)));if(r>2){return`one of ${t} ${e.slice(0,r-1).join(\", \")}, or `+e[r-1]}else if(r===2){return`one of ${t} ${e[0]} or ${e[1]}`}else{return`of ${t} ${e[0]}`}}else{return`of ${t} ${String(e)}`}}function startsWith(e,t,r){return e.substr(!r||r<0?0:+r,t.length)===t}function endsWith(e,t,r){if(r===undefined||r>e.length){r=e.length}return e.substring(r-t.length,r)===t}function includes(e,t,r){if(typeof r!==\"number\"){r=0}if(r+t.length>e.length){return false}else{return e.indexOf(t,r)!==-1}}createErrorType(\"ERR_INVALID_OPT_VALUE\",(function(e,t){return'The value \"'+t+'\" is invalid for option \"'+e+'\"'}),TypeError);createErrorType(\"ERR_INVALID_ARG_TYPE\",(function(e,t,r){let n;if(typeof t===\"string\"&&startsWith(t,\"not \")){n=\"must not be\";t=t.replace(/^not /,\"\")}else{n=\"must be\"}let i;if(endsWith(e,\" argument\")){i=`The ${e} ${n} ${oneOf(t,\"type\")}`}else{const r=includes(e,\".\")?\"property\":\"argument\";i=`The \"${e}\" ${r} ${n} ${oneOf(t,\"type\")}`}i+=`. Received type ${typeof r}`;return i}),TypeError);createErrorType(\"ERR_STREAM_PUSH_AFTER_EOF\",\"stream.push() after EOF\");createErrorType(\"ERR_METHOD_NOT_IMPLEMENTED\",(function(e){return\"The \"+e+\" method is not implemented\"}));createErrorType(\"ERR_STREAM_PREMATURE_CLOSE\",\"Premature close\");createErrorType(\"ERR_STREAM_DESTROYED\",(function(e){return\"Cannot call \"+e+\" after a stream was destroyed\"}));createErrorType(\"ERR_MULTIPLE_CALLBACK\",\"Callback called multiple times\");createErrorType(\"ERR_STREAM_CANNOT_PIPE\",\"Cannot pipe, not readable\");createErrorType(\"ERR_STREAM_WRITE_AFTER_END\",\"write after end\");createErrorType(\"ERR_STREAM_NULL_VALUES\",\"May not write null values to stream\",TypeError);createErrorType(\"ERR_UNKNOWN_ENCODING\",(function(e){return\"Unknown encoding: \"+e}),TypeError);createErrorType(\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\",\"stream.unshift() after end event\");e.exports.q=t},403:function(e,t,r){\"use strict\";var n=Object.keys||function(e){var t=[];for(var r in e){t.push(r)}return t};e.exports=Duplex;var i=r(709);var a=r(337);r(782)(Duplex,i);{var o=n(a.prototype);for(var s=0;s<o.length;s++){var f=o[s];if(!Duplex.prototype[f])Duplex.prototype[f]=a.prototype[f]}}function Duplex(e){if(!(this instanceof Duplex))return new Duplex(e);i.call(this,e);a.call(this,e);this.allowHalfOpen=true;if(e){if(e.readable===false)this.readable=false;if(e.writable===false)this.writable=false;if(e.allowHalfOpen===false){this.allowHalfOpen=false;this.once(\"end\",onend)}}}Object.defineProperty(Duplex.prototype,\"writableHighWaterMark\",{enumerable:false,get:function get(){return this._writableState.highWaterMark}});Object.defineProperty(Duplex.prototype,\"writableBuffer\",{enumerable:false,get:function get(){return this._writableState&&this._writableState.getBuffer()}});Object.defineProperty(Duplex.prototype,\"writableLength\",{enumerable:false,get:function get(){return this._writableState.length}});function onend(){if(this._writableState.ended)return;process.nextTick(onEndNT,this)}function onEndNT(e){e.end()}Object.defineProperty(Duplex.prototype,\"destroyed\",{enumerable:false,get:function get(){if(this._readableState===undefined||this._writableState===undefined){return false}return this._readableState.destroyed&&this._writableState.destroyed},set:function set(e){if(this._readableState===undefined||this._writableState===undefined){return}this._readableState.destroyed=e;this._writableState.destroyed=e}})},889:function(e,t,r){\"use strict\";e.exports=PassThrough;var n=r(170);r(782)(PassThrough,n);function PassThrough(e){if(!(this instanceof PassThrough))return new PassThrough(e);n.call(this,e)}PassThrough.prototype._transform=function(e,t,r){r(null,e)}},709:function(e,t,r){\"use strict\";e.exports=Readable;var n;Readable.ReadableState=ReadableState;var i=r(361).EventEmitter;var a=function EElistenerCount(e,t){return e.listeners(t).length};var o=r(678);var s=r(300).Buffer;var f=__webpack_require__.g.Uint8Array||function(){};function _uint8ArrayToBuffer(e){return s.from(e)}function _isUint8Array(e){return s.isBuffer(e)||e instanceof f}var l=r(837);var u;if(l&&l.debuglog){u=l.debuglog(\"stream\")}else{u=function debug(){}}var d=r(379);var c=r(25);var h=r(776),p=h.getHighWaterMark;var b=r(646).q,g=b.ERR_INVALID_ARG_TYPE,y=b.ERR_STREAM_PUSH_AFTER_EOF,_=b.ERR_METHOD_NOT_IMPLEMENTED,v=b.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;var w;var m;var S;r(782)(Readable,o);var R=c.errorOrDestroy;var E=[\"error\",\"close\",\"destroy\",\"pause\",\"resume\"];function prependListener(e,t,r){if(typeof e.prependListener===\"function\")return e.prependListener(t,r);if(!e._events||!e._events[t])e.on(t,r);else if(Array.isArray(e._events[t]))e._events[t].unshift(r);else e._events[t]=[r,e._events[t]]}function ReadableState(e,t,i){n=n||r(403);e=e||{};if(typeof i!==\"boolean\")i=t instanceof n;this.objectMode=!!e.objectMode;if(i)this.objectMode=this.objectMode||!!e.readableObjectMode;this.highWaterMark=p(this,e,\"readableHighWaterMark\",i);this.buffer=new d;this.length=0;this.pipes=null;this.pipesCount=0;this.flowing=null;this.ended=false;this.endEmitted=false;this.reading=false;this.sync=true;this.needReadable=false;this.emittedReadable=false;this.readableListening=false;this.resumeScheduled=false;this.paused=true;this.emitClose=e.emitClose!==false;this.autoDestroy=!!e.autoDestroy;this.destroyed=false;this.defaultEncoding=e.defaultEncoding||\"utf8\";this.awaitDrain=0;this.readingMore=false;this.decoder=null;this.encoding=null;if(e.encoding){if(!w)w=r(704).s;this.decoder=new w(e.encoding);this.encoding=e.encoding}}function Readable(e){n=n||r(403);if(!(this instanceof Readable))return new Readable(e);var t=this instanceof n;this._readableState=new ReadableState(e,this,t);this.readable=true;if(e){if(typeof e.read===\"function\")this._read=e.read;if(typeof e.destroy===\"function\")this._destroy=e.destroy}o.call(this)}Object.defineProperty(Readable.prototype,\"destroyed\",{enumerable:false,get:function get(){if(this._readableState===undefined){return false}return this._readableState.destroyed},set:function set(e){if(!this._readableState){return}this._readableState.destroyed=e}});Readable.prototype.destroy=c.destroy;Readable.prototype._undestroy=c.undestroy;Readable.prototype._destroy=function(e,t){t(e)};Readable.prototype.push=function(e,t){var r=this._readableState;var n;if(!r.objectMode){if(typeof e===\"string\"){t=t||r.defaultEncoding;if(t!==r.encoding){e=s.from(e,t);t=\"\"}n=true}}else{n=true}return readableAddChunk(this,e,t,false,n)};Readable.prototype.unshift=function(e){return readableAddChunk(this,e,null,true,false)};function readableAddChunk(e,t,r,n,i){u(\"readableAddChunk\",t);var a=e._readableState;if(t===null){a.reading=false;onEofChunk(e,a)}else{var o;if(!i)o=chunkInvalid(a,t);if(o){R(e,o)}else if(a.objectMode||t&&t.length>0){if(typeof t!==\"string\"&&!a.objectMode&&Object.getPrototypeOf(t)!==s.prototype){t=_uint8ArrayToBuffer(t)}if(n){if(a.endEmitted)R(e,new v);else addChunk(e,a,t,true)}else if(a.ended){R(e,new y)}else if(a.destroyed){return false}else{a.reading=false;if(a.decoder&&!r){t=a.decoder.write(t);if(a.objectMode||t.length!==0)addChunk(e,a,t,false);else maybeReadMore(e,a)}else{addChunk(e,a,t,false)}}}else if(!n){a.reading=false;maybeReadMore(e,a)}}return!a.ended&&(a.length<a.highWaterMark||a.length===0)}function addChunk(e,t,r,n){if(t.flowing&&t.length===0&&!t.sync){t.awaitDrain=0;e.emit(\"data\",r)}else{t.length+=t.objectMode?1:r.length;if(n)t.buffer.unshift(r);else t.buffer.push(r);if(t.needReadable)emitReadable(e)}maybeReadMore(e,t)}function chunkInvalid(e,t){var r;if(!_isUint8Array(t)&&typeof t!==\"string\"&&t!==undefined&&!e.objectMode){r=new g(\"chunk\",[\"string\",\"Buffer\",\"Uint8Array\"],t)}return r}Readable.prototype.isPaused=function(){return this._readableState.flowing===false};Readable.prototype.setEncoding=function(e){if(!w)w=r(704).s;var t=new w(e);this._readableState.decoder=t;this._readableState.encoding=this._readableState.decoder.encoding;var n=this._readableState.buffer.head;var i=\"\";while(n!==null){i+=t.write(n.data);n=n.next}this._readableState.buffer.clear();if(i!==\"\")this._readableState.buffer.push(i);this._readableState.length=i.length;return this};var T=1073741824;function computeNewHighWaterMark(e){if(e>=T){e=T}else{e--;e|=e>>>1;e|=e>>>2;e|=e>>>4;e|=e>>>8;e|=e>>>16;e++}return e}function howMuchToRead(e,t){if(e<=0||t.length===0&&t.ended)return 0;if(t.objectMode)return 1;if(e!==e){if(t.flowing&&t.length)return t.buffer.head.data.length;else return t.length}if(e>t.highWaterMark)t.highWaterMark=computeNewHighWaterMark(e);if(e<=t.length)return e;if(!t.ended){t.needReadable=true;return 0}return t.length}Readable.prototype.read=function(e){u(\"read\",e);e=parseInt(e,10);var t=this._readableState;var r=e;if(e!==0)t.emittedReadable=false;if(e===0&&t.needReadable&&((t.highWaterMark!==0?t.length>=t.highWaterMark:t.length>0)||t.ended)){u(\"read: emitReadable\",t.length,t.ended);if(t.length===0&&t.ended)endReadable(this);else emitReadable(this);return null}e=howMuchToRead(e,t);if(e===0&&t.ended){if(t.length===0)endReadable(this);return null}var n=t.needReadable;u(\"need readable\",n);if(t.length===0||t.length-e<t.highWaterMark){n=true;u(\"length less than watermark\",n)}if(t.ended||t.reading){n=false;u(\"reading or ended\",n)}else if(n){u(\"do read\");t.reading=true;t.sync=true;if(t.length===0)t.needReadable=true;this._read(t.highWaterMark);t.sync=false;if(!t.reading)e=howMuchToRead(r,t)}var i;if(e>0)i=fromList(e,t);else i=null;if(i===null){t.needReadable=t.length<=t.highWaterMark;e=0}else{t.length-=e;t.awaitDrain=0}if(t.length===0){if(!t.ended)t.needReadable=true;if(r!==e&&t.ended)endReadable(this)}if(i!==null)this.emit(\"data\",i);return i};function onEofChunk(e,t){u(\"onEofChunk\");if(t.ended)return;if(t.decoder){var r=t.decoder.end();if(r&&r.length){t.buffer.push(r);t.length+=t.objectMode?1:r.length}}t.ended=true;if(t.sync){emitReadable(e)}else{t.needReadable=false;if(!t.emittedReadable){t.emittedReadable=true;emitReadable_(e)}}}function emitReadable(e){var t=e._readableState;u(\"emitReadable\",t.needReadable,t.emittedReadable);t.needReadable=false;if(!t.emittedReadable){u(\"emitReadable\",t.flowing);t.emittedReadable=true;process.nextTick(emitReadable_,e)}}function emitReadable_(e){var t=e._readableState;u(\"emitReadable_\",t.destroyed,t.length,t.ended);if(!t.destroyed&&(t.length||t.ended)){e.emit(\"readable\");t.emittedReadable=false}t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark;flow(e)}function maybeReadMore(e,t){if(!t.readingMore){t.readingMore=true;process.nextTick(maybeReadMore_,e,t)}}function maybeReadMore_(e,t){while(!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&t.length===0)){var r=t.length;u(\"maybeReadMore read 0\");e.read(0);if(r===t.length)break}t.readingMore=false}Readable.prototype._read=function(e){R(this,new _(\"_read()\"))};Readable.prototype.pipe=function(e,t){var r=this;var n=this._readableState;switch(n.pipesCount){case 0:n.pipes=e;break;case 1:n.pipes=[n.pipes,e];break;default:n.pipes.push(e);break}n.pipesCount+=1;u(\"pipe count=%d opts=%j\",n.pipesCount,t);var i=(!t||t.end!==false)&&e!==process.stdout&&e!==process.stderr;var o=i?onend:unpipe;if(n.endEmitted)process.nextTick(o);else r.once(\"end\",o);e.on(\"unpipe\",onunpipe);function onunpipe(e,t){u(\"onunpipe\");if(e===r){if(t&&t.hasUnpiped===false){t.hasUnpiped=true;cleanup()}}}function onend(){u(\"onend\");e.end()}var s=pipeOnDrain(r);e.on(\"drain\",s);var f=false;function cleanup(){u(\"cleanup\");e.removeListener(\"close\",onclose);e.removeListener(\"finish\",onfinish);e.removeListener(\"drain\",s);e.removeListener(\"error\",onerror);e.removeListener(\"unpipe\",onunpipe);r.removeListener(\"end\",onend);r.removeListener(\"end\",unpipe);r.removeListener(\"data\",ondata);f=true;if(n.awaitDrain&&(!e._writableState||e._writableState.needDrain))s()}r.on(\"data\",ondata);function ondata(t){u(\"ondata\");var i=e.write(t);u(\"dest.write\",i);if(i===false){if((n.pipesCount===1&&n.pipes===e||n.pipesCount>1&&indexOf(n.pipes,e)!==-1)&&!f){u(\"false write response, pause\",n.awaitDrain);n.awaitDrain++}r.pause()}}function onerror(t){u(\"onerror\",t);unpipe();e.removeListener(\"error\",onerror);if(a(e,\"error\")===0)R(e,t)}prependListener(e,\"error\",onerror);function onclose(){e.removeListener(\"finish\",onfinish);unpipe()}e.once(\"close\",onclose);function onfinish(){u(\"onfinish\");e.removeListener(\"close\",onclose);unpipe()}e.once(\"finish\",onfinish);function unpipe(){u(\"unpipe\");r.unpipe(e)}e.emit(\"pipe\",r);if(!n.flowing){u(\"pipe resume\");r.resume()}return e};function pipeOnDrain(e){return function pipeOnDrainFunctionResult(){var t=e._readableState;u(\"pipeOnDrain\",t.awaitDrain);if(t.awaitDrain)t.awaitDrain--;if(t.awaitDrain===0&&a(e,\"data\")){t.flowing=true;flow(e)}}}Readable.prototype.unpipe=function(e){var t=this._readableState;var r={hasUnpiped:false};if(t.pipesCount===0)return this;if(t.pipesCount===1){if(e&&e!==t.pipes)return this;if(!e)e=t.pipes;t.pipes=null;t.pipesCount=0;t.flowing=false;if(e)e.emit(\"unpipe\",this,r);return this}if(!e){var n=t.pipes;var i=t.pipesCount;t.pipes=null;t.pipesCount=0;t.flowing=false;for(var a=0;a<i;a++){n[a].emit(\"unpipe\",this,{hasUnpiped:false})}return this}var o=indexOf(t.pipes,e);if(o===-1)return this;t.pipes.splice(o,1);t.pipesCount-=1;if(t.pipesCount===1)t.pipes=t.pipes[0];e.emit(\"unpipe\",this,r);return this};Readable.prototype.on=function(e,t){var r=o.prototype.on.call(this,e,t);var n=this._readableState;if(e===\"data\"){n.readableListening=this.listenerCount(\"readable\")>0;if(n.flowing!==false)this.resume()}else if(e===\"readable\"){if(!n.endEmitted&&!n.readableListening){n.readableListening=n.needReadable=true;n.flowing=false;n.emittedReadable=false;u(\"on readable\",n.length,n.reading);if(n.length){emitReadable(this)}else if(!n.reading){process.nextTick(nReadingNextTick,this)}}}return r};Readable.prototype.addListener=Readable.prototype.on;Readable.prototype.removeListener=function(e,t){var r=o.prototype.removeListener.call(this,e,t);if(e===\"readable\"){process.nextTick(updateReadableListening,this)}return r};Readable.prototype.removeAllListeners=function(e){var t=o.prototype.removeAllListeners.apply(this,arguments);if(e===\"readable\"||e===undefined){process.nextTick(updateReadableListening,this)}return t};function updateReadableListening(e){var t=e._readableState;t.readableListening=e.listenerCount(\"readable\")>0;if(t.resumeScheduled&&!t.paused){t.flowing=true}else if(e.listenerCount(\"data\")>0){e.resume()}}function nReadingNextTick(e){u(\"readable nexttick read 0\");e.read(0)}Readable.prototype.resume=function(){var e=this._readableState;if(!e.flowing){u(\"resume\");e.flowing=!e.readableListening;resume(this,e)}e.paused=false;return this};function resume(e,t){if(!t.resumeScheduled){t.resumeScheduled=true;process.nextTick(resume_,e,t)}}function resume_(e,t){u(\"resume\",t.reading);if(!t.reading){e.read(0)}t.resumeScheduled=false;e.emit(\"resume\");flow(e);if(t.flowing&&!t.reading)e.read(0)}Readable.prototype.pause=function(){u(\"call pause flowing=%j\",this._readableState.flowing);if(this._readableState.flowing!==false){u(\"pause\");this._readableState.flowing=false;this.emit(\"pause\")}this._readableState.paused=true;return this};function flow(e){var t=e._readableState;u(\"flow\",t.flowing);while(t.flowing&&e.read()!==null){}}Readable.prototype.wrap=function(e){var t=this;var r=this._readableState;var n=false;e.on(\"end\",(function(){u(\"wrapped end\");if(r.decoder&&!r.ended){var e=r.decoder.end();if(e&&e.length)t.push(e)}t.push(null)}));e.on(\"data\",(function(i){u(\"wrapped data\");if(r.decoder)i=r.decoder.write(i);if(r.objectMode&&(i===null||i===undefined))return;else if(!r.objectMode&&(!i||!i.length))return;var a=t.push(i);if(!a){n=true;e.pause()}}));for(var i in e){if(this[i]===undefined&&typeof e[i]===\"function\"){this[i]=function methodWrap(t){return function methodWrapReturnFunction(){return e[t].apply(e,arguments)}}(i)}}for(var a=0;a<E.length;a++){e.on(E[a],this.emit.bind(this,E[a]))}this._read=function(t){u(\"wrapped _read\",t);if(n){n=false;e.resume()}};return this};if(typeof Symbol===\"function\"){Readable.prototype[Symbol.asyncIterator]=function(){if(m===undefined){m=r(871)}return m(this)}}Object.defineProperty(Readable.prototype,\"readableHighWaterMark\",{enumerable:false,get:function get(){return this._readableState.highWaterMark}});Object.defineProperty(Readable.prototype,\"readableBuffer\",{enumerable:false,get:function get(){return this._readableState&&this._readableState.buffer}});Object.defineProperty(Readable.prototype,\"readableFlowing\",{enumerable:false,get:function get(){return this._readableState.flowing},set:function set(e){if(this._readableState){this._readableState.flowing=e}}});Readable._fromList=fromList;Object.defineProperty(Readable.prototype,\"readableLength\",{enumerable:false,get:function get(){return this._readableState.length}});function fromList(e,t){if(t.length===0)return null;var r;if(t.objectMode)r=t.buffer.shift();else if(!e||e>=t.length){if(t.decoder)r=t.buffer.join(\"\");else if(t.buffer.length===1)r=t.buffer.first();else r=t.buffer.concat(t.length);t.buffer.clear()}else{r=t.buffer.consume(e,t.decoder)}return r}function endReadable(e){var t=e._readableState;u(\"endReadable\",t.endEmitted);if(!t.endEmitted){t.ended=true;process.nextTick(endReadableNT,t,e)}}function endReadableNT(e,t){u(\"endReadableNT\",e.endEmitted,e.length);if(!e.endEmitted&&e.length===0){e.endEmitted=true;t.readable=false;t.emit(\"end\");if(e.autoDestroy){var r=t._writableState;if(!r||r.autoDestroy&&r.finished){t.destroy()}}}}if(typeof Symbol===\"function\"){Readable.from=function(e,t){if(S===undefined){S=r(727)}return S(Readable,e,t)}}function indexOf(e,t){for(var r=0,n=e.length;r<n;r++){if(e[r]===t)return r}return-1}},170:function(e,t,r){\"use strict\";e.exports=Transform;var n=r(646).q,i=n.ERR_METHOD_NOT_IMPLEMENTED,a=n.ERR_MULTIPLE_CALLBACK,o=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,s=n.ERR_TRANSFORM_WITH_LENGTH_0;var f=r(403);r(782)(Transform,f);function afterTransform(e,t){var r=this._transformState;r.transforming=false;var n=r.writecb;if(n===null){return this.emit(\"error\",new a)}r.writechunk=null;r.writecb=null;if(t!=null)this.push(t);n(e);var i=this._readableState;i.reading=false;if(i.needReadable||i.length<i.highWaterMark){this._read(i.highWaterMark)}}function Transform(e){if(!(this instanceof Transform))return new Transform(e);f.call(this,e);this._transformState={afterTransform:afterTransform.bind(this),needTransform:false,transforming:false,writecb:null,writechunk:null,writeencoding:null};this._readableState.needReadable=true;this._readableState.sync=false;if(e){if(typeof e.transform===\"function\")this._transform=e.transform;if(typeof e.flush===\"function\")this._flush=e.flush}this.on(\"prefinish\",prefinish)}function prefinish(){var e=this;if(typeof this._flush===\"function\"&&!this._readableState.destroyed){this._flush((function(t,r){done(e,t,r)}))}else{done(this,null,null)}}Transform.prototype.push=function(e,t){this._transformState.needTransform=false;return f.prototype.push.call(this,e,t)};Transform.prototype._transform=function(e,t,r){r(new i(\"_transform()\"))};Transform.prototype._write=function(e,t,r){var n=this._transformState;n.writecb=r;n.writechunk=e;n.writeencoding=t;if(!n.transforming){var i=this._readableState;if(n.needTransform||i.needReadable||i.length<i.highWaterMark)this._read(i.highWaterMark)}};Transform.prototype._read=function(e){var t=this._transformState;if(t.writechunk!==null&&!t.transforming){t.transforming=true;this._transform(t.writechunk,t.writeencoding,t.afterTransform)}else{t.needTransform=true}};Transform.prototype._destroy=function(e,t){f.prototype._destroy.call(this,e,(function(e){t(e)}))};function done(e,t,r){if(t)return e.emit(\"error\",t);if(r!=null)e.push(r);if(e._writableState.length)throw new s;if(e._transformState.transforming)throw new o;return e.push(null)}},337:function(e,t,r){\"use strict\";e.exports=Writable;function WriteReq(e,t,r){this.chunk=e;this.encoding=t;this.callback=r;this.next=null}function CorkedRequest(e){var t=this;this.next=null;this.entry=null;this.finish=function(){onCorkedFinish(t,e)}}var n;Writable.WritableState=WritableState;var i={deprecate:r(769)};var a=r(678);var o=r(300).Buffer;var s=__webpack_require__.g.Uint8Array||function(){};function _uint8ArrayToBuffer(e){return o.from(e)}function _isUint8Array(e){return o.isBuffer(e)||e instanceof s}var f=r(25);var l=r(776),u=l.getHighWaterMark;var d=r(646).q,c=d.ERR_INVALID_ARG_TYPE,h=d.ERR_METHOD_NOT_IMPLEMENTED,p=d.ERR_MULTIPLE_CALLBACK,b=d.ERR_STREAM_CANNOT_PIPE,g=d.ERR_STREAM_DESTROYED,y=d.ERR_STREAM_NULL_VALUES,_=d.ERR_STREAM_WRITE_AFTER_END,v=d.ERR_UNKNOWN_ENCODING;var w=f.errorOrDestroy;r(782)(Writable,a);function nop(){}function WritableState(e,t,i){n=n||r(403);e=e||{};if(typeof i!==\"boolean\")i=t instanceof n;this.objectMode=!!e.objectMode;if(i)this.objectMode=this.objectMode||!!e.writableObjectMode;this.highWaterMark=u(this,e,\"writableHighWaterMark\",i);this.finalCalled=false;this.needDrain=false;this.ending=false;this.ended=false;this.finished=false;this.destroyed=false;var a=e.decodeStrings===false;this.decodeStrings=!a;this.defaultEncoding=e.defaultEncoding||\"utf8\";this.length=0;this.writing=false;this.corked=0;this.sync=true;this.bufferProcessing=false;this.onwrite=function(e){onwrite(t,e)};this.writecb=null;this.writelen=0;this.bufferedRequest=null;this.lastBufferedRequest=null;this.pendingcb=0;this.prefinished=false;this.errorEmitted=false;this.emitClose=e.emitClose!==false;this.autoDestroy=!!e.autoDestroy;this.bufferedRequestCount=0;this.corkedRequestsFree=new CorkedRequest(this)}WritableState.prototype.getBuffer=function getBuffer(){var e=this.bufferedRequest;var t=[];while(e){t.push(e);e=e.next}return t};(function(){try{Object.defineProperty(WritableState.prototype,\"buffer\",{get:i.deprecate((function writableStateBufferGetter(){return this.getBuffer()}),\"_writableState.buffer is deprecated. Use _writableState.getBuffer \"+\"instead.\",\"DEP0003\")})}catch(e){}})();var m;if(typeof Symbol===\"function\"&&Symbol.hasInstance&&typeof Function.prototype[Symbol.hasInstance]===\"function\"){m=Function.prototype[Symbol.hasInstance];Object.defineProperty(Writable,Symbol.hasInstance,{value:function value(e){if(m.call(this,e))return true;if(this!==Writable)return false;return e&&e._writableState instanceof WritableState}})}else{m=function realHasInstance(e){return e instanceof this}}function Writable(e){n=n||r(403);var t=this instanceof n;if(!t&&!m.call(Writable,this))return new Writable(e);this._writableState=new WritableState(e,this,t);this.writable=true;if(e){if(typeof e.write===\"function\")this._write=e.write;if(typeof e.writev===\"function\")this._writev=e.writev;if(typeof e.destroy===\"function\")this._destroy=e.destroy;if(typeof e.final===\"function\")this._final=e.final}a.call(this)}Writable.prototype.pipe=function(){w(this,new b)};function writeAfterEnd(e,t){var r=new _;w(e,r);process.nextTick(t,r)}function validChunk(e,t,r,n){var i;if(r===null){i=new y}else if(typeof r!==\"string\"&&!t.objectMode){i=new c(\"chunk\",[\"string\",\"Buffer\"],r)}if(i){w(e,i);process.nextTick(n,i);return false}return true}Writable.prototype.write=function(e,t,r){var n=this._writableState;var i=false;var a=!n.objectMode&&_isUint8Array(e);if(a&&!o.isBuffer(e)){e=_uint8ArrayToBuffer(e)}if(typeof t===\"function\"){r=t;t=null}if(a)t=\"buffer\";else if(!t)t=n.defaultEncoding;if(typeof r!==\"function\")r=nop;if(n.ending)writeAfterEnd(this,r);else if(a||validChunk(this,n,e,r)){n.pendingcb++;i=writeOrBuffer(this,n,a,e,t,r)}return i};Writable.prototype.cork=function(){this._writableState.corked++};Writable.prototype.uncork=function(){var e=this._writableState;if(e.corked){e.corked--;if(!e.writing&&!e.corked&&!e.bufferProcessing&&e.bufferedRequest)clearBuffer(this,e)}};Writable.prototype.setDefaultEncoding=function setDefaultEncoding(e){if(typeof e===\"string\")e=e.toLowerCase();if(!([\"hex\",\"utf8\",\"utf-8\",\"ascii\",\"binary\",\"base64\",\"ucs2\",\"ucs-2\",\"utf16le\",\"utf-16le\",\"raw\"].indexOf((e+\"\").toLowerCase())>-1))throw new v(e);this._writableState.defaultEncoding=e;return this};Object.defineProperty(Writable.prototype,\"writableBuffer\",{enumerable:false,get:function get(){return this._writableState&&this._writableState.getBuffer()}});function decodeChunk(e,t,r){if(!e.objectMode&&e.decodeStrings!==false&&typeof t===\"string\"){t=o.from(t,r)}return t}Object.defineProperty(Writable.prototype,\"writableHighWaterMark\",{enumerable:false,get:function get(){return this._writableState.highWaterMark}});function writeOrBuffer(e,t,r,n,i,a){if(!r){var o=decodeChunk(t,n,i);if(n!==o){r=true;i=\"buffer\";n=o}}var s=t.objectMode?1:n.length;t.length+=s;var f=t.length<t.highWaterMark;if(!f)t.needDrain=true;if(t.writing||t.corked){var l=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:a,next:null};if(l){l.next=t.lastBufferedRequest}else{t.bufferedRequest=t.lastBufferedRequest}t.bufferedRequestCount+=1}else{doWrite(e,t,false,s,n,i,a)}return f}function doWrite(e,t,r,n,i,a,o){t.writelen=n;t.writecb=o;t.writing=true;t.sync=true;if(t.destroyed)t.onwrite(new g(\"write\"));else if(r)e._writev(i,t.onwrite);else e._write(i,a,t.onwrite);t.sync=false}function onwriteError(e,t,r,n,i){--t.pendingcb;if(r){process.nextTick(i,n);process.nextTick(finishMaybe,e,t);e._writableState.errorEmitted=true;w(e,n)}else{i(n);e._writableState.errorEmitted=true;w(e,n);finishMaybe(e,t)}}function onwriteStateUpdate(e){e.writing=false;e.writecb=null;e.length-=e.writelen;e.writelen=0}function onwrite(e,t){var r=e._writableState;var n=r.sync;var i=r.writecb;if(typeof i!==\"function\")throw new p;onwriteStateUpdate(r);if(t)onwriteError(e,r,n,t,i);else{var a=needFinish(r)||e.destroyed;if(!a&&!r.corked&&!r.bufferProcessing&&r.bufferedRequest){clearBuffer(e,r)}if(n){process.nextTick(afterWrite,e,r,a,i)}else{afterWrite(e,r,a,i)}}}function afterWrite(e,t,r,n){if(!r)onwriteDrain(e,t);t.pendingcb--;n();finishMaybe(e,t)}function onwriteDrain(e,t){if(t.length===0&&t.needDrain){t.needDrain=false;e.emit(\"drain\")}}function clearBuffer(e,t){t.bufferProcessing=true;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount;var i=new Array(n);var a=t.corkedRequestsFree;a.entry=r;var o=0;var s=true;while(r){i[o]=r;if(!r.isBuf)s=false;r=r.next;o+=1}i.allBuffers=s;doWrite(e,t,true,t.length,i,\"\",a.finish);t.pendingcb++;t.lastBufferedRequest=null;if(a.next){t.corkedRequestsFree=a.next;a.next=null}else{t.corkedRequestsFree=new CorkedRequest(t)}t.bufferedRequestCount=0}else{while(r){var f=r.chunk;var l=r.encoding;var u=r.callback;var d=t.objectMode?1:f.length;doWrite(e,t,false,d,f,l,u);r=r.next;t.bufferedRequestCount--;if(t.writing){break}}if(r===null)t.lastBufferedRequest=null}t.bufferedRequest=r;t.bufferProcessing=false}Writable.prototype._write=function(e,t,r){r(new h(\"_write()\"))};Writable.prototype._writev=null;Writable.prototype.end=function(e,t,r){var n=this._writableState;if(typeof e===\"function\"){r=e;e=null;t=null}else if(typeof t===\"function\"){r=t;t=null}if(e!==null&&e!==undefined)this.write(e,t);if(n.corked){n.corked=1;this.uncork()}if(!n.ending)endWritable(this,n,r);return this};Object.defineProperty(Writable.prototype,\"writableLength\",{enumerable:false,get:function get(){return this._writableState.length}});function needFinish(e){return e.ending&&e.length===0&&e.bufferedRequest===null&&!e.finished&&!e.writing}function callFinal(e,t){e._final((function(r){t.pendingcb--;if(r){w(e,r)}t.prefinished=true;e.emit(\"prefinish\");finishMaybe(e,t)}))}function prefinish(e,t){if(!t.prefinished&&!t.finalCalled){if(typeof e._final===\"function\"&&!t.destroyed){t.pendingcb++;t.finalCalled=true;process.nextTick(callFinal,e,t)}else{t.prefinished=true;e.emit(\"prefinish\")}}}function finishMaybe(e,t){var r=needFinish(t);if(r){prefinish(e,t);if(t.pendingcb===0){t.finished=true;e.emit(\"finish\");if(t.autoDestroy){var n=e._readableState;if(!n||n.autoDestroy&&n.endEmitted){e.destroy()}}}}return r}function endWritable(e,t,r){t.ending=true;finishMaybe(e,t);if(r){if(t.finished)process.nextTick(r);else e.once(\"finish\",r)}t.ended=true;e.writable=false}function onCorkedFinish(e,t,r){var n=e.entry;e.entry=null;while(n){var i=n.callback;t.pendingcb--;i(r);n=n.next}t.corkedRequestsFree.next=e}Object.defineProperty(Writable.prototype,\"destroyed\",{enumerable:false,get:function get(){if(this._writableState===undefined){return false}return this._writableState.destroyed},set:function set(e){if(!this._writableState){return}this._writableState.destroyed=e}});Writable.prototype.destroy=f.destroy;Writable.prototype._undestroy=f.undestroy;Writable.prototype._destroy=function(e,t){t(e)}},871:function(e,t,r){\"use strict\";var n;function _defineProperty(e,t,r){if(t in e){Object.defineProperty(e,t,{value:r,enumerable:true,configurable:true,writable:true})}else{e[t]=r}return e}var i=r(698);var a=Symbol(\"lastResolve\");var o=Symbol(\"lastReject\");var s=Symbol(\"error\");var f=Symbol(\"ended\");var l=Symbol(\"lastPromise\");var u=Symbol(\"handlePromise\");var d=Symbol(\"stream\");function createIterResult(e,t){return{value:e,done:t}}function readAndResolve(e){var t=e[a];if(t!==null){var r=e[d].read();if(r!==null){e[l]=null;e[a]=null;e[o]=null;t(createIterResult(r,false))}}}function onReadable(e){process.nextTick(readAndResolve,e)}function wrapForNext(e,t){return function(r,n){e.then((function(){if(t[f]){r(createIterResult(undefined,true));return}t[u](r,n)}),n)}}var c=Object.getPrototypeOf((function(){}));var h=Object.setPrototypeOf((n={get stream(){return this[d]},next:function next(){var e=this;var t=this[s];if(t!==null){return Promise.reject(t)}if(this[f]){return Promise.resolve(createIterResult(undefined,true))}if(this[d].destroyed){return new Promise((function(t,r){process.nextTick((function(){if(e[s]){r(e[s])}else{t(createIterResult(undefined,true))}}))}))}var r=this[l];var n;if(r){n=new Promise(wrapForNext(r,this))}else{var i=this[d].read();if(i!==null){return Promise.resolve(createIterResult(i,false))}n=new Promise(this[u])}this[l]=n;return n}},_defineProperty(n,Symbol.asyncIterator,(function(){return this})),_defineProperty(n,\"return\",(function _return(){var e=this;return new Promise((function(t,r){e[d].destroy(null,(function(e){if(e){r(e);return}t(createIterResult(undefined,true))}))}))})),n),c);var p=function createReadableStreamAsyncIterator(e){var t;var r=Object.create(h,(t={},_defineProperty(t,d,{value:e,writable:true}),_defineProperty(t,a,{value:null,writable:true}),_defineProperty(t,o,{value:null,writable:true}),_defineProperty(t,s,{value:null,writable:true}),_defineProperty(t,f,{value:e._readableState.endEmitted,writable:true}),_defineProperty(t,u,{value:function value(e,t){var n=r[d].read();if(n){r[l]=null;r[a]=null;r[o]=null;e(createIterResult(n,false))}else{r[a]=e;r[o]=t}},writable:true}),t));r[l]=null;i(e,(function(e){if(e&&e.code!==\"ERR_STREAM_PREMATURE_CLOSE\"){var t=r[o];if(t!==null){r[l]=null;r[a]=null;r[o]=null;t(e)}r[s]=e;return}var n=r[a];if(n!==null){r[l]=null;r[a]=null;r[o]=null;n(createIterResult(undefined,true))}r[f]=true}));e.on(\"readable\",onReadable.bind(null,r));return r};e.exports=p},379:function(e,t,r){\"use strict\";function ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);if(t)n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}));r.push.apply(r,n)}return r}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{};if(t%2){ownKeys(Object(r),true).forEach((function(t){_defineProperty(e,t,r[t])}))}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(e,Object.getOwnPropertyDescriptors(r))}else{ownKeys(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}}return e}function _defineProperty(e,t,r){if(t in e){Object.defineProperty(e,t,{value:r,enumerable:true,configurable:true,writable:true})}else{e[t]=r}return e}function _classCallCheck(e,t){if(!(e instanceof t)){throw new TypeError(\"Cannot call a class as a function\")}}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||false;n.configurable=true;if(\"value\"in n)n.writable=true;Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){if(t)_defineProperties(e.prototype,t);if(r)_defineProperties(e,r);return e}var n=r(300),i=n.Buffer;var a=r(837),o=a.inspect;var s=o&&o.custom||\"inspect\";function copyBuffer(e,t,r){i.prototype.copy.call(e,t,r)}e.exports=function(){function BufferList(){_classCallCheck(this,BufferList);this.head=null;this.tail=null;this.length=0}_createClass(BufferList,[{key:\"push\",value:function push(e){var t={data:e,next:null};if(this.length>0)this.tail.next=t;else this.head=t;this.tail=t;++this.length}},{key:\"unshift\",value:function unshift(e){var t={data:e,next:this.head};if(this.length===0)this.tail=t;this.head=t;++this.length}},{key:\"shift\",value:function shift(){if(this.length===0)return;var e=this.head.data;if(this.length===1)this.head=this.tail=null;else this.head=this.head.next;--this.length;return e}},{key:\"clear\",value:function clear(){this.head=this.tail=null;this.length=0}},{key:\"join\",value:function join(e){if(this.length===0)return\"\";var t=this.head;var r=\"\"+t.data;while(t=t.next){r+=e+t.data}return r}},{key:\"concat\",value:function concat(e){if(this.length===0)return i.alloc(0);var t=i.allocUnsafe(e>>>0);var r=this.head;var n=0;while(r){copyBuffer(r.data,t,n);n+=r.data.length;r=r.next}return t}},{key:\"consume\",value:function consume(e,t){var r;if(e<this.head.data.length){r=this.head.data.slice(0,e);this.head.data=this.head.data.slice(e)}else if(e===this.head.data.length){r=this.shift()}else{r=t?this._getString(e):this._getBuffer(e)}return r}},{key:\"first\",value:function first(){return this.head.data}},{key:\"_getString\",value:function _getString(e){var t=this.head;var r=1;var n=t.data;e-=n.length;while(t=t.next){var i=t.data;var a=e>i.length?i.length:e;if(a===i.length)n+=i;else n+=i.slice(0,e);e-=a;if(e===0){if(a===i.length){++r;if(t.next)this.head=t.next;else this.head=this.tail=null}else{this.head=t;t.data=i.slice(a)}break}++r}this.length-=r;return n}},{key:\"_getBuffer\",value:function _getBuffer(e){var t=i.allocUnsafe(e);var r=this.head;var n=1;r.data.copy(t);e-=r.data.length;while(r=r.next){var a=r.data;var o=e>a.length?a.length:e;a.copy(t,t.length-e,0,o);e-=o;if(e===0){if(o===a.length){++n;if(r.next)this.head=r.next;else this.head=this.tail=null}else{this.head=r;r.data=a.slice(o)}break}++n}this.length-=n;return t}},{key:s,value:function value(e,t){return o(this,_objectSpread({},t,{depth:0,customInspect:false}))}}]);return BufferList}()},25:function(e){\"use strict\";function destroy(e,t){var r=this;var n=this._readableState&&this._readableState.destroyed;var i=this._writableState&&this._writableState.destroyed;if(n||i){if(t){t(e)}else if(e){if(!this._writableState){process.nextTick(emitErrorNT,this,e)}else if(!this._writableState.errorEmitted){this._writableState.errorEmitted=true;process.nextTick(emitErrorNT,this,e)}}return this}if(this._readableState){this._readableState.destroyed=true}if(this._writableState){this._writableState.destroyed=true}this._destroy(e||null,(function(e){if(!t&&e){if(!r._writableState){process.nextTick(emitErrorAndCloseNT,r,e)}else if(!r._writableState.errorEmitted){r._writableState.errorEmitted=true;process.nextTick(emitErrorAndCloseNT,r,e)}else{process.nextTick(emitCloseNT,r)}}else if(t){process.nextTick(emitCloseNT,r);t(e)}else{process.nextTick(emitCloseNT,r)}}));return this}function emitErrorAndCloseNT(e,t){emitErrorNT(e,t);emitCloseNT(e)}function emitCloseNT(e){if(e._writableState&&!e._writableState.emitClose)return;if(e._readableState&&!e._readableState.emitClose)return;e.emit(\"close\")}function undestroy(){if(this._readableState){this._readableState.destroyed=false;this._readableState.reading=false;this._readableState.ended=false;this._readableState.endEmitted=false}if(this._writableState){this._writableState.destroyed=false;this._writableState.ended=false;this._writableState.ending=false;this._writableState.finalCalled=false;this._writableState.prefinished=false;this._writableState.finished=false;this._writableState.errorEmitted=false}}function emitErrorNT(e,t){e.emit(\"error\",t)}function errorOrDestroy(e,t){var r=e._readableState;var n=e._writableState;if(r&&r.autoDestroy||n&&n.autoDestroy)e.destroy(t);else e.emit(\"error\",t)}e.exports={destroy:destroy,undestroy:undestroy,errorOrDestroy:errorOrDestroy}},698:function(e,t,r){\"use strict\";var n=r(646).q.ERR_STREAM_PREMATURE_CLOSE;function once(e){var t=false;return function(){if(t)return;t=true;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++){n[i]=arguments[i]}e.apply(this,n)}}function noop(){}function isRequest(e){return e.setHeader&&typeof e.abort===\"function\"}function eos(e,t,r){if(typeof t===\"function\")return eos(e,null,t);if(!t)t={};r=once(r||noop);var i=t.readable||t.readable!==false&&e.readable;var a=t.writable||t.writable!==false&&e.writable;var o=function onlegacyfinish(){if(!e.writable)f()};var s=e._writableState&&e._writableState.finished;var f=function onfinish(){a=false;s=true;if(!i)r.call(e)};var l=e._readableState&&e._readableState.endEmitted;var u=function onend(){i=false;l=true;if(!a)r.call(e)};var d=function onerror(t){r.call(e,t)};var c=function onclose(){var t;if(i&&!l){if(!e._readableState||!e._readableState.ended)t=new n;return r.call(e,t)}if(a&&!s){if(!e._writableState||!e._writableState.ended)t=new n;return r.call(e,t)}};var h=function onrequest(){e.req.on(\"finish\",f)};if(isRequest(e)){e.on(\"complete\",f);e.on(\"abort\",c);if(e.req)h();else e.on(\"request\",h)}else if(a&&!e._writableState){e.on(\"end\",o);e.on(\"close\",o)}e.on(\"end\",u);e.on(\"finish\",f);if(t.error!==false)e.on(\"error\",d);e.on(\"close\",c);return function(){e.removeListener(\"complete\",f);e.removeListener(\"abort\",c);e.removeListener(\"request\",h);if(e.req)e.req.removeListener(\"finish\",f);e.removeListener(\"end\",o);e.removeListener(\"close\",o);e.removeListener(\"finish\",f);e.removeListener(\"end\",u);e.removeListener(\"error\",d);e.removeListener(\"close\",c)}}e.exports=eos},727:function(e,t,r){\"use strict\";function asyncGeneratorStep(e,t,r,n,i,a,o){try{var s=e[a](o);var f=s.value}catch(e){r(e);return}if(s.done){t(f)}else{Promise.resolve(f).then(n,i)}}function _asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise((function(n,i){var a=e.apply(t,r);function _next(e){asyncGeneratorStep(a,n,i,_next,_throw,\"next\",e)}function _throw(e){asyncGeneratorStep(a,n,i,_next,_throw,\"throw\",e)}_next(undefined)}))}}function ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);if(t)n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}));r.push.apply(r,n)}return r}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{};if(t%2){ownKeys(Object(r),true).forEach((function(t){_defineProperty(e,t,r[t])}))}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(e,Object.getOwnPropertyDescriptors(r))}else{ownKeys(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}}return e}function _defineProperty(e,t,r){if(t in e){Object.defineProperty(e,t,{value:r,enumerable:true,configurable:true,writable:true})}else{e[t]=r}return e}var n=r(646).q.ERR_INVALID_ARG_TYPE;function from(e,t,r){var i;if(t&&typeof t.next===\"function\"){i=t}else if(t&&t[Symbol.asyncIterator])i=t[Symbol.asyncIterator]();else if(t&&t[Symbol.iterator])i=t[Symbol.iterator]();else throw new n(\"iterable\",[\"Iterable\"],t);var a=new e(_objectSpread({objectMode:true},r));var o=false;a._read=function(){if(!o){o=true;next()}};function next(){return _next2.apply(this,arguments)}function _next2(){_next2=_asyncToGenerator((function*(){try{var e=yield i.next(),t=e.value,r=e.done;if(r){a.push(null)}else if(a.push(yield t)){next()}else{o=false}}catch(e){a.destroy(e)}}));return _next2.apply(this,arguments)}return a}e.exports=from},442:function(e,t,r){\"use strict\";var n;function once(e){var t=false;return function(){if(t)return;t=true;e.apply(void 0,arguments)}}var i=r(646).q,a=i.ERR_MISSING_ARGS,o=i.ERR_STREAM_DESTROYED;function noop(e){if(e)throw e}function isRequest(e){return e.setHeader&&typeof e.abort===\"function\"}function destroyer(e,t,i,a){a=once(a);var s=false;e.on(\"close\",(function(){s=true}));if(n===undefined)n=r(698);n(e,{readable:t,writable:i},(function(e){if(e)return a(e);s=true;a()}));var f=false;return function(t){if(s)return;if(f)return;f=true;if(isRequest(e))return e.abort();if(typeof e.destroy===\"function\")return e.destroy();a(t||new o(\"pipe\"))}}function call(e){e()}function pipe(e,t){return e.pipe(t)}function popCallback(e){if(!e.length)return noop;if(typeof e[e.length-1]!==\"function\")return noop;return e.pop()}function pipeline(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++){t[r]=arguments[r]}var n=popCallback(t);if(Array.isArray(t[0]))t=t[0];if(t.length<2){throw new a(\"streams\")}var i;var o=t.map((function(e,r){var a=r<t.length-1;var s=r>0;return destroyer(e,a,s,(function(e){if(!i)i=e;if(e)o.forEach(call);if(a)return;o.forEach(call);n(i)}))}));return t.reduce(pipe)}e.exports=pipeline},776:function(e,t,r){\"use strict\";var n=r(646).q.ERR_INVALID_OPT_VALUE;function highWaterMarkFrom(e,t,r){return e.highWaterMark!=null?e.highWaterMark:t?e[r]:null}function getHighWaterMark(e,t,r,i){var a=highWaterMarkFrom(t,i,r);if(a!=null){if(!(isFinite(a)&&Math.floor(a)===a)||a<0){var o=i?r:\"highWaterMark\";throw new n(o,a)}return Math.floor(a)}return e.objectMode?16:16*1024}e.exports={getHighWaterMark:getHighWaterMark}},678:function(e,t,r){e.exports=r(781)},55:function(e,t,r){var n=r(300);var i=n.Buffer;function copyProps(e,t){for(var r in e){t[r]=e[r]}}if(i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow){e.exports=n}else{copyProps(n,t);t.Buffer=SafeBuffer}function SafeBuffer(e,t,r){return i(e,t,r)}SafeBuffer.prototype=Object.create(i.prototype);copyProps(i,SafeBuffer);SafeBuffer.from=function(e,t,r){if(typeof e===\"number\"){throw new TypeError(\"Argument must not be a number\")}return i(e,t,r)};SafeBuffer.alloc=function(e,t,r){if(typeof e!==\"number\"){throw new TypeError(\"Argument must be a number\")}var n=i(e);if(t!==undefined){if(typeof r===\"string\"){n.fill(t,r)}else{n.fill(t)}}else{n.fill(0)}return n};SafeBuffer.allocUnsafe=function(e){if(typeof e!==\"number\"){throw new TypeError(\"Argument must be a number\")}return i(e)};SafeBuffer.allocUnsafeSlow=function(e){if(typeof e!==\"number\"){throw new TypeError(\"Argument must be a number\")}return n.SlowBuffer(e)}},173:function(e,t,r){e.exports=Stream;var n=r(361).EventEmitter;var i=r(782);i(Stream,n);Stream.Readable=r(709);Stream.Writable=r(337);Stream.Duplex=r(403);Stream.Transform=r(170);Stream.PassThrough=r(889);Stream.finished=r(698);Stream.pipeline=r(442);Stream.Stream=Stream;function Stream(){n.call(this)}Stream.prototype.pipe=function(e,t){var r=this;function ondata(t){if(e.writable){if(false===e.write(t)&&r.pause){r.pause()}}}r.on(\"data\",ondata);function ondrain(){if(r.readable&&r.resume){r.resume()}}e.on(\"drain\",ondrain);if(!e._isStdio&&(!t||t.end!==false)){r.on(\"end\",onend);r.on(\"close\",onclose)}var i=false;function onend(){if(i)return;i=true;e.end()}function onclose(){if(i)return;i=true;if(typeof e.destroy===\"function\")e.destroy()}function onerror(e){cleanup();if(n.listenerCount(this,\"error\")===0){throw e}}r.on(\"error\",onerror);e.on(\"error\",onerror);function cleanup(){r.removeListener(\"data\",ondata);e.removeListener(\"drain\",ondrain);r.removeListener(\"end\",onend);r.removeListener(\"close\",onclose);r.removeListener(\"error\",onerror);e.removeListener(\"error\",onerror);r.removeListener(\"end\",cleanup);r.removeListener(\"close\",cleanup);e.removeListener(\"close\",cleanup)}r.on(\"end\",cleanup);r.on(\"close\",cleanup);e.on(\"close\",cleanup);e.emit(\"pipe\",r);return e}},704:function(e,t,r){\"use strict\";var n=r(55).Buffer;var i=n.isEncoding||function(e){e=\"\"+e;switch(e&&e.toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":case\"raw\":return true;default:return false}};function _normalizeEncoding(e){if(!e)return\"utf8\";var t;while(true){switch(e){case\"utf8\":case\"utf-8\":return\"utf8\";case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return\"utf16le\";case\"latin1\":case\"binary\":return\"latin1\";case\"base64\":case\"ascii\":case\"hex\":return e;default:if(t)return;e=(\"\"+e).toLowerCase();t=true}}}function normalizeEncoding(e){var t=_normalizeEncoding(e);if(typeof t!==\"string\"&&(n.isEncoding===i||!i(e)))throw new Error(\"Unknown encoding: \"+e);return t||e}t.s=StringDecoder;function StringDecoder(e){this.encoding=normalizeEncoding(e);var t;switch(this.encoding){case\"utf16le\":this.text=utf16Text;this.end=utf16End;t=4;break;case\"utf8\":this.fillLast=utf8FillLast;t=4;break;case\"base64\":this.text=base64Text;this.end=base64End;t=3;break;default:this.write=simpleWrite;this.end=simpleEnd;return}this.lastNeed=0;this.lastTotal=0;this.lastChar=n.allocUnsafe(t)}StringDecoder.prototype.write=function(e){if(e.length===0)return\"\";var t;var r;if(this.lastNeed){t=this.fillLast(e);if(t===undefined)return\"\";r=this.lastNeed;this.lastNeed=0}else{r=0}if(r<e.length)return t?t+this.text(e,r):this.text(e,r);return t||\"\"};StringDecoder.prototype.end=utf8End;StringDecoder.prototype.text=utf8Text;StringDecoder.prototype.fillLast=function(e){if(this.lastNeed<=e.length){e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed);return this.lastChar.toString(this.encoding,0,this.lastTotal)}e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length);this.lastNeed-=e.length};function utf8CheckByte(e){if(e<=127)return 0;else if(e>>5===6)return 2;else if(e>>4===14)return 3;else if(e>>3===30)return 4;return e>>6===2?-1:-2}function utf8CheckIncomplete(e,t,r){var n=t.length-1;if(n<r)return 0;var i=utf8CheckByte(t[n]);if(i>=0){if(i>0)e.lastNeed=i-1;return i}if(--n<r||i===-2)return 0;i=utf8CheckByte(t[n]);if(i>=0){if(i>0)e.lastNeed=i-2;return i}if(--n<r||i===-2)return 0;i=utf8CheckByte(t[n]);if(i>=0){if(i>0){if(i===2)i=0;else e.lastNeed=i-3}return i}return 0}function utf8CheckExtraBytes(e,t,r){if((t[0]&192)!==128){e.lastNeed=0;return\"�\"}if(e.lastNeed>1&&t.length>1){if((t[1]&192)!==128){e.lastNeed=1;return\"�\"}if(e.lastNeed>2&&t.length>2){if((t[2]&192)!==128){e.lastNeed=2;return\"�\"}}}}function utf8FillLast(e){var t=this.lastTotal-this.lastNeed;var r=utf8CheckExtraBytes(this,e,t);if(r!==undefined)return r;if(this.lastNeed<=e.length){e.copy(this.lastChar,t,0,this.lastNeed);return this.lastChar.toString(this.encoding,0,this.lastTotal)}e.copy(this.lastChar,t,0,e.length);this.lastNeed-=e.length}function utf8Text(e,t){var r=utf8CheckIncomplete(this,e,t);if(!this.lastNeed)return e.toString(\"utf8\",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);e.copy(this.lastChar,0,n);return e.toString(\"utf8\",t,n)}function utf8End(e){var t=e&&e.length?this.write(e):\"\";if(this.lastNeed)return t+\"�\";return t}function utf16Text(e,t){if((e.length-t)%2===0){var r=e.toString(\"utf16le\",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319){this.lastNeed=2;this.lastTotal=4;this.lastChar[0]=e[e.length-2];this.lastChar[1]=e[e.length-1];return r.slice(0,-1)}}return r}this.lastNeed=1;this.lastTotal=2;this.lastChar[0]=e[e.length-1];return e.toString(\"utf16le\",t,e.length-1)}function utf16End(e){var t=e&&e.length?this.write(e):\"\";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString(\"utf16le\",0,r)}return t}function base64Text(e,t){var r=(e.length-t)%3;if(r===0)return e.toString(\"base64\",t);this.lastNeed=3-r;this.lastTotal=3;if(r===1){this.lastChar[0]=e[e.length-1]}else{this.lastChar[0]=e[e.length-2];this.lastChar[1]=e[e.length-1]}return e.toString(\"base64\",t,e.length-r)}function base64End(e){var t=e&&e.length?this.write(e):\"\";if(this.lastNeed)return t+this.lastChar.toString(\"base64\",0,3-this.lastNeed);return t}function simpleWrite(e){return e.toString(this.encoding)}function simpleEnd(e){return e&&e.length?this.write(e):\"\"}},769:function(e){e.exports=deprecate;function deprecate(e,t){if(config(\"noDeprecation\")){return e}var r=false;function deprecated(){if(!r){if(config(\"throwDeprecation\")){throw new Error(t)}else if(config(\"traceDeprecation\")){console.trace(t)}else{console.warn(t)}r=true}return e.apply(this,arguments)}return deprecated}function config(e){try{if(!__webpack_require__.g.localStorage)return false}catch(e){return false}var t=__webpack_require__.g.localStorage[e];if(null==t)return false;return String(t).toLowerCase()===\"true\"}},300:function(e){\"use strict\";e.exports=__webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")},361:function(e){\"use strict\";e.exports=__webpack_require__(/*! events */ \"./node_modules/next/dist/compiled/events/events.js\")},781:function(e){\"use strict\";e.exports=(__webpack_require__(/*! events */ \"./node_modules/next/dist/compiled/events/events.js\").EventEmitter)},837:function(e){\"use strict\";e.exports=__webpack_require__(/*! util */ \"./node_modules/next/dist/compiled/util/util.js\")}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var a=true;try{e[r](i,i.exports,__nccwpck_require__);a=false}finally{if(a)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(173);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/stream-browserify/index.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/util/util.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/compiled/util/util.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n(function(){var r={992:function(r){r.exports=function(r,t,o){if(r.filter)return r.filter(t,o);if(void 0===r||null===r)throw new TypeError;if(\"function\"!=typeof t)throw new TypeError;var n=[];for(var i=0;i<r.length;i++){if(!e.call(r,i))continue;var a=r[i];if(t.call(o,a,i,r))n.push(a)}return n};var e=Object.prototype.hasOwnProperty},256:function(r,e,t){\"use strict\";var o=t(925);var n=t(139);var i=n(o(\"String.prototype.indexOf\"));r.exports=function callBoundIntrinsic(r,e){var t=o(r,!!e);if(typeof t===\"function\"&&i(r,\".prototype.\")>-1){return n(t)}return t}},139:function(r,e,t){\"use strict\";var o=t(174);var n=t(925);var i=n(\"%Function.prototype.apply%\");var a=n(\"%Function.prototype.call%\");var y=n(\"%Reflect.apply%\",true)||o.call(a,i);var f=n(\"%Object.getOwnPropertyDescriptor%\",true);var p=n(\"%Object.defineProperty%\",true);var u=n(\"%Math.max%\");if(p){try{p({},\"a\",{value:1})}catch(r){p=null}}r.exports=function callBind(r){var e=y(o,a,arguments);if(f&&p){var t=f(e,\"length\");if(t.configurable){p(e,\"length\",{value:1+u(0,r.length-(arguments.length-1))})}}return e};var s=function applyBind(){return y(o,i,arguments)};if(p){p(r.exports,\"apply\",{value:s})}else{r.exports.apply=s}},144:function(r){var e=Object.prototype.hasOwnProperty;var t=Object.prototype.toString;r.exports=function forEach(r,o,n){if(t.call(o)!==\"[object Function]\"){throw new TypeError(\"iterator must be a function\")}var i=r.length;if(i===+i){for(var a=0;a<i;a++){o.call(n,r[a],a,r)}}else{for(var y in r){if(e.call(r,y)){o.call(n,r[y],y,r)}}}}},426:function(r){\"use strict\";var e=\"Function.prototype.bind called on incompatible \";var t=Array.prototype.slice;var o=Object.prototype.toString;var n=\"[object Function]\";r.exports=function bind(r){var i=this;if(typeof i!==\"function\"||o.call(i)!==n){throw new TypeError(e+i)}var a=t.call(arguments,1);var y;var binder=function(){if(this instanceof y){var e=i.apply(this,a.concat(t.call(arguments)));if(Object(e)===e){return e}return this}else{return i.apply(r,a.concat(t.call(arguments)))}};var f=Math.max(0,i.length-a.length);var p=[];for(var u=0;u<f;u++){p.push(\"$\"+u)}y=Function(\"binder\",\"return function (\"+p.join(\",\")+\"){ return binder.apply(this,arguments); }\")(binder);if(i.prototype){var s=function Empty(){};s.prototype=i.prototype;y.prototype=new s;s.prototype=null}return y}},174:function(r,e,t){\"use strict\";var o=t(426);r.exports=Function.prototype.bind||o},500:function(r,e,t){\"use strict\";var o;var n=SyntaxError;var i=Function;var a=TypeError;var getEvalledConstructor=function(r){try{return i('\"use strict\"; return ('+r+\").constructor;\")()}catch(r){}};var y=Object.getOwnPropertyDescriptor;if(y){try{y({},\"\")}catch(r){y=null}}var throwTypeError=function(){throw new a};var f=y?function(){try{arguments.callee;return throwTypeError}catch(r){try{return y(arguments,\"callee\").get}catch(r){return throwTypeError}}}():throwTypeError;var p=t(115)();var u=Object.getPrototypeOf||function(r){return r.__proto__};var s={};var c=typeof Uint8Array===\"undefined\"?o:u(Uint8Array);var l={\"%AggregateError%\":typeof AggregateError===\"undefined\"?o:AggregateError,\"%Array%\":Array,\"%ArrayBuffer%\":typeof ArrayBuffer===\"undefined\"?o:ArrayBuffer,\"%ArrayIteratorPrototype%\":p?u([][Symbol.iterator]()):o,\"%AsyncFromSyncIteratorPrototype%\":o,\"%AsyncFunction%\":s,\"%AsyncGenerator%\":s,\"%AsyncGeneratorFunction%\":s,\"%AsyncIteratorPrototype%\":s,\"%Atomics%\":typeof Atomics===\"undefined\"?o:Atomics,\"%BigInt%\":typeof BigInt===\"undefined\"?o:BigInt,\"%Boolean%\":Boolean,\"%DataView%\":typeof DataView===\"undefined\"?o:DataView,\"%Date%\":Date,\"%decodeURI%\":decodeURI,\"%decodeURIComponent%\":decodeURIComponent,\"%encodeURI%\":encodeURI,\"%encodeURIComponent%\":encodeURIComponent,\"%Error%\":Error,\"%eval%\":eval,\"%EvalError%\":EvalError,\"%Float32Array%\":typeof Float32Array===\"undefined\"?o:Float32Array,\"%Float64Array%\":typeof Float64Array===\"undefined\"?o:Float64Array,\"%FinalizationRegistry%\":typeof FinalizationRegistry===\"undefined\"?o:FinalizationRegistry,\"%Function%\":i,\"%GeneratorFunction%\":s,\"%Int8Array%\":typeof Int8Array===\"undefined\"?o:Int8Array,\"%Int16Array%\":typeof Int16Array===\"undefined\"?o:Int16Array,\"%Int32Array%\":typeof Int32Array===\"undefined\"?o:Int32Array,\"%isFinite%\":isFinite,\"%isNaN%\":isNaN,\"%IteratorPrototype%\":p?u(u([][Symbol.iterator]())):o,\"%JSON%\":typeof JSON===\"object\"?JSON:o,\"%Map%\":typeof Map===\"undefined\"?o:Map,\"%MapIteratorPrototype%\":typeof Map===\"undefined\"||!p?o:u((new Map)[Symbol.iterator]()),\"%Math%\":Math,\"%Number%\":Number,\"%Object%\":Object,\"%parseFloat%\":parseFloat,\"%parseInt%\":parseInt,\"%Promise%\":typeof Promise===\"undefined\"?o:Promise,\"%Proxy%\":typeof Proxy===\"undefined\"?o:Proxy,\"%RangeError%\":RangeError,\"%ReferenceError%\":ReferenceError,\"%Reflect%\":typeof Reflect===\"undefined\"?o:Reflect,\"%RegExp%\":RegExp,\"%Set%\":typeof Set===\"undefined\"?o:Set,\"%SetIteratorPrototype%\":typeof Set===\"undefined\"||!p?o:u((new Set)[Symbol.iterator]()),\"%SharedArrayBuffer%\":typeof SharedArrayBuffer===\"undefined\"?o:SharedArrayBuffer,\"%String%\":String,\"%StringIteratorPrototype%\":p?u(\"\"[Symbol.iterator]()):o,\"%Symbol%\":p?Symbol:o,\"%SyntaxError%\":n,\"%ThrowTypeError%\":f,\"%TypedArray%\":c,\"%TypeError%\":a,\"%Uint8Array%\":typeof Uint8Array===\"undefined\"?o:Uint8Array,\"%Uint8ClampedArray%\":typeof Uint8ClampedArray===\"undefined\"?o:Uint8ClampedArray,\"%Uint16Array%\":typeof Uint16Array===\"undefined\"?o:Uint16Array,\"%Uint32Array%\":typeof Uint32Array===\"undefined\"?o:Uint32Array,\"%URIError%\":URIError,\"%WeakMap%\":typeof WeakMap===\"undefined\"?o:WeakMap,\"%WeakRef%\":typeof WeakRef===\"undefined\"?o:WeakRef,\"%WeakSet%\":typeof WeakSet===\"undefined\"?o:WeakSet};var d=function doEval(r){var e;if(r===\"%AsyncFunction%\"){e=getEvalledConstructor(\"async function () {}\")}else if(r===\"%GeneratorFunction%\"){e=getEvalledConstructor(\"function* () {}\")}else if(r===\"%AsyncGeneratorFunction%\"){e=getEvalledConstructor(\"async function* () {}\")}else if(r===\"%AsyncGenerator%\"){var t=doEval(\"%AsyncGeneratorFunction%\");if(t){e=t.prototype}}else if(r===\"%AsyncIteratorPrototype%\"){var o=doEval(\"%AsyncGenerator%\");if(o){e=u(o.prototype)}}l[r]=e;return e};var g={\"%ArrayBufferPrototype%\":[\"ArrayBuffer\",\"prototype\"],\"%ArrayPrototype%\":[\"Array\",\"prototype\"],\"%ArrayProto_entries%\":[\"Array\",\"prototype\",\"entries\"],\"%ArrayProto_forEach%\":[\"Array\",\"prototype\",\"forEach\"],\"%ArrayProto_keys%\":[\"Array\",\"prototype\",\"keys\"],\"%ArrayProto_values%\":[\"Array\",\"prototype\",\"values\"],\"%AsyncFunctionPrototype%\":[\"AsyncFunction\",\"prototype\"],\"%AsyncGenerator%\":[\"AsyncGeneratorFunction\",\"prototype\"],\"%AsyncGeneratorPrototype%\":[\"AsyncGeneratorFunction\",\"prototype\",\"prototype\"],\"%BooleanPrototype%\":[\"Boolean\",\"prototype\"],\"%DataViewPrototype%\":[\"DataView\",\"prototype\"],\"%DatePrototype%\":[\"Date\",\"prototype\"],\"%ErrorPrototype%\":[\"Error\",\"prototype\"],\"%EvalErrorPrototype%\":[\"EvalError\",\"prototype\"],\"%Float32ArrayPrototype%\":[\"Float32Array\",\"prototype\"],\"%Float64ArrayPrototype%\":[\"Float64Array\",\"prototype\"],\"%FunctionPrototype%\":[\"Function\",\"prototype\"],\"%Generator%\":[\"GeneratorFunction\",\"prototype\"],\"%GeneratorPrototype%\":[\"GeneratorFunction\",\"prototype\",\"prototype\"],\"%Int8ArrayPrototype%\":[\"Int8Array\",\"prototype\"],\"%Int16ArrayPrototype%\":[\"Int16Array\",\"prototype\"],\"%Int32ArrayPrototype%\":[\"Int32Array\",\"prototype\"],\"%JSONParse%\":[\"JSON\",\"parse\"],\"%JSONStringify%\":[\"JSON\",\"stringify\"],\"%MapPrototype%\":[\"Map\",\"prototype\"],\"%NumberPrototype%\":[\"Number\",\"prototype\"],\"%ObjectPrototype%\":[\"Object\",\"prototype\"],\"%ObjProto_toString%\":[\"Object\",\"prototype\",\"toString\"],\"%ObjProto_valueOf%\":[\"Object\",\"prototype\",\"valueOf\"],\"%PromisePrototype%\":[\"Promise\",\"prototype\"],\"%PromiseProto_then%\":[\"Promise\",\"prototype\",\"then\"],\"%Promise_all%\":[\"Promise\",\"all\"],\"%Promise_reject%\":[\"Promise\",\"reject\"],\"%Promise_resolve%\":[\"Promise\",\"resolve\"],\"%RangeErrorPrototype%\":[\"RangeError\",\"prototype\"],\"%ReferenceErrorPrototype%\":[\"ReferenceError\",\"prototype\"],\"%RegExpPrototype%\":[\"RegExp\",\"prototype\"],\"%SetPrototype%\":[\"Set\",\"prototype\"],\"%SharedArrayBufferPrototype%\":[\"SharedArrayBuffer\",\"prototype\"],\"%StringPrototype%\":[\"String\",\"prototype\"],\"%SymbolPrototype%\":[\"Symbol\",\"prototype\"],\"%SyntaxErrorPrototype%\":[\"SyntaxError\",\"prototype\"],\"%TypedArrayPrototype%\":[\"TypedArray\",\"prototype\"],\"%TypeErrorPrototype%\":[\"TypeError\",\"prototype\"],\"%Uint8ArrayPrototype%\":[\"Uint8Array\",\"prototype\"],\"%Uint8ClampedArrayPrototype%\":[\"Uint8ClampedArray\",\"prototype\"],\"%Uint16ArrayPrototype%\":[\"Uint16Array\",\"prototype\"],\"%Uint32ArrayPrototype%\":[\"Uint32Array\",\"prototype\"],\"%URIErrorPrototype%\":[\"URIError\",\"prototype\"],\"%WeakMapPrototype%\":[\"WeakMap\",\"prototype\"],\"%WeakSetPrototype%\":[\"WeakSet\",\"prototype\"]};var v=t(174);var b=t(101);var A=v.call(Function.call,Array.prototype.concat);var m=v.call(Function.apply,Array.prototype.splice);var S=v.call(Function.call,String.prototype.replace);var h=v.call(Function.call,String.prototype.slice);var P=v.call(Function.call,RegExp.prototype.exec);var O=/[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;var w=/\\\\(\\\\)?/g;var j=function stringToPath(r){var e=h(r,0,1);var t=h(r,-1);if(e===\"%\"&&t!==\"%\"){throw new n(\"invalid intrinsic syntax, expected closing `%`\")}else if(t===\"%\"&&e!==\"%\"){throw new n(\"invalid intrinsic syntax, expected opening `%`\")}var o=[];S(r,O,(function(r,e,t,n){o[o.length]=t?S(n,w,\"$1\"):e||r}));return o};var E=function getBaseIntrinsic(r,e){var t=r;var o;if(b(g,t)){o=g[t];t=\"%\"+o[0]+\"%\"}if(b(l,t)){var i=l[t];if(i===s){i=d(t)}if(typeof i===\"undefined\"&&!e){throw new a(\"intrinsic \"+r+\" exists, but is not available. Please file an issue!\")}return{alias:o,name:t,value:i}}throw new n(\"intrinsic \"+r+\" does not exist!\")};r.exports=function GetIntrinsic(r,e){if(typeof r!==\"string\"||r.length===0){throw new a(\"intrinsic name must be a non-empty string\")}if(arguments.length>1&&typeof e!==\"boolean\"){throw new a('\"allowMissing\" argument must be a boolean')}if(P(/^%?[^%]*%?$/g,r)===null){throw new n(\"`%` may not be present anywhere but at the beginning and end of the intrinsic name\")}var t=j(r);var i=t.length>0?t[0]:\"\";var f=E(\"%\"+i+\"%\",e);var p=f.name;var u=f.value;var s=false;var c=f.alias;if(c){i=c[0];m(t,A([0,1],c))}for(var d=1,g=true;d<t.length;d+=1){var v=t[d];var S=h(v,0,1);var O=h(v,-1);if((S==='\"'||S===\"'\"||S===\"`\"||(O==='\"'||O===\"'\"||O===\"`\"))&&S!==O){throw new n(\"property names with quotes must have matching quotes\")}if(v===\"constructor\"||!g){s=true}i+=\".\"+v;p=\"%\"+i+\"%\";if(b(l,p)){u=l[p]}else if(u!=null){if(!(v in u)){if(!e){throw new a(\"base intrinsic for \"+r+\" exists, but the property is not available.\")}return void o}if(y&&d+1>=t.length){var w=y(u,v);g=!!w;if(g&&\"get\"in w&&!(\"originalValue\"in w.get)){u=w.get}else{u=u[v]}}else{g=b(u,v);u=u[v]}if(g&&!s){l[p]=u}}}return u}},925:function(r,e,t){\"use strict\";var o;var n=SyntaxError;var i=Function;var a=TypeError;var getEvalledConstructor=function(r){try{return i('\"use strict\"; return ('+r+\").constructor;\")()}catch(r){}};var y=Object.getOwnPropertyDescriptor;if(y){try{y({},\"\")}catch(r){y=null}}var throwTypeError=function(){throw new a};var f=y?function(){try{arguments.callee;return throwTypeError}catch(r){try{return y(arguments,\"callee\").get}catch(r){return throwTypeError}}}():throwTypeError;var p=t(115)();var u=t(504)();var s=Object.getPrototypeOf||(u?function(r){return r.__proto__}:null);var c={};var l=typeof Uint8Array===\"undefined\"||!s?o:s(Uint8Array);var d={\"%AggregateError%\":typeof AggregateError===\"undefined\"?o:AggregateError,\"%Array%\":Array,\"%ArrayBuffer%\":typeof ArrayBuffer===\"undefined\"?o:ArrayBuffer,\"%ArrayIteratorPrototype%\":p&&s?s([][Symbol.iterator]()):o,\"%AsyncFromSyncIteratorPrototype%\":o,\"%AsyncFunction%\":c,\"%AsyncGenerator%\":c,\"%AsyncGeneratorFunction%\":c,\"%AsyncIteratorPrototype%\":c,\"%Atomics%\":typeof Atomics===\"undefined\"?o:Atomics,\"%BigInt%\":typeof BigInt===\"undefined\"?o:BigInt,\"%BigInt64Array%\":typeof BigInt64Array===\"undefined\"?o:BigInt64Array,\"%BigUint64Array%\":typeof BigUint64Array===\"undefined\"?o:BigUint64Array,\"%Boolean%\":Boolean,\"%DataView%\":typeof DataView===\"undefined\"?o:DataView,\"%Date%\":Date,\"%decodeURI%\":decodeURI,\"%decodeURIComponent%\":decodeURIComponent,\"%encodeURI%\":encodeURI,\"%encodeURIComponent%\":encodeURIComponent,\"%Error%\":Error,\"%eval%\":eval,\"%EvalError%\":EvalError,\"%Float32Array%\":typeof Float32Array===\"undefined\"?o:Float32Array,\"%Float64Array%\":typeof Float64Array===\"undefined\"?o:Float64Array,\"%FinalizationRegistry%\":typeof FinalizationRegistry===\"undefined\"?o:FinalizationRegistry,\"%Function%\":i,\"%GeneratorFunction%\":c,\"%Int8Array%\":typeof Int8Array===\"undefined\"?o:Int8Array,\"%Int16Array%\":typeof Int16Array===\"undefined\"?o:Int16Array,\"%Int32Array%\":typeof Int32Array===\"undefined\"?o:Int32Array,\"%isFinite%\":isFinite,\"%isNaN%\":isNaN,\"%IteratorPrototype%\":p&&s?s(s([][Symbol.iterator]())):o,\"%JSON%\":typeof JSON===\"object\"?JSON:o,\"%Map%\":typeof Map===\"undefined\"?o:Map,\"%MapIteratorPrototype%\":typeof Map===\"undefined\"||!p||!s?o:s((new Map)[Symbol.iterator]()),\"%Math%\":Math,\"%Number%\":Number,\"%Object%\":Object,\"%parseFloat%\":parseFloat,\"%parseInt%\":parseInt,\"%Promise%\":typeof Promise===\"undefined\"?o:Promise,\"%Proxy%\":typeof Proxy===\"undefined\"?o:Proxy,\"%RangeError%\":RangeError,\"%ReferenceError%\":ReferenceError,\"%Reflect%\":typeof Reflect===\"undefined\"?o:Reflect,\"%RegExp%\":RegExp,\"%Set%\":typeof Set===\"undefined\"?o:Set,\"%SetIteratorPrototype%\":typeof Set===\"undefined\"||!p||!s?o:s((new Set)[Symbol.iterator]()),\"%SharedArrayBuffer%\":typeof SharedArrayBuffer===\"undefined\"?o:SharedArrayBuffer,\"%String%\":String,\"%StringIteratorPrototype%\":p&&s?s(\"\"[Symbol.iterator]()):o,\"%Symbol%\":p?Symbol:o,\"%SyntaxError%\":n,\"%ThrowTypeError%\":f,\"%TypedArray%\":l,\"%TypeError%\":a,\"%Uint8Array%\":typeof Uint8Array===\"undefined\"?o:Uint8Array,\"%Uint8ClampedArray%\":typeof Uint8ClampedArray===\"undefined\"?o:Uint8ClampedArray,\"%Uint16Array%\":typeof Uint16Array===\"undefined\"?o:Uint16Array,\"%Uint32Array%\":typeof Uint32Array===\"undefined\"?o:Uint32Array,\"%URIError%\":URIError,\"%WeakMap%\":typeof WeakMap===\"undefined\"?o:WeakMap,\"%WeakRef%\":typeof WeakRef===\"undefined\"?o:WeakRef,\"%WeakSet%\":typeof WeakSet===\"undefined\"?o:WeakSet};if(s){try{null.error}catch(r){var g=s(s(r));d[\"%Error.prototype%\"]=g}}var v=function doEval(r){var e;if(r===\"%AsyncFunction%\"){e=getEvalledConstructor(\"async function () {}\")}else if(r===\"%GeneratorFunction%\"){e=getEvalledConstructor(\"function* () {}\")}else if(r===\"%AsyncGeneratorFunction%\"){e=getEvalledConstructor(\"async function* () {}\")}else if(r===\"%AsyncGenerator%\"){var t=doEval(\"%AsyncGeneratorFunction%\");if(t){e=t.prototype}}else if(r===\"%AsyncIteratorPrototype%\"){var o=doEval(\"%AsyncGenerator%\");if(o&&s){e=s(o.prototype)}}d[r]=e;return e};var b={\"%ArrayBufferPrototype%\":[\"ArrayBuffer\",\"prototype\"],\"%ArrayPrototype%\":[\"Array\",\"prototype\"],\"%ArrayProto_entries%\":[\"Array\",\"prototype\",\"entries\"],\"%ArrayProto_forEach%\":[\"Array\",\"prototype\",\"forEach\"],\"%ArrayProto_keys%\":[\"Array\",\"prototype\",\"keys\"],\"%ArrayProto_values%\":[\"Array\",\"prototype\",\"values\"],\"%AsyncFunctionPrototype%\":[\"AsyncFunction\",\"prototype\"],\"%AsyncGenerator%\":[\"AsyncGeneratorFunction\",\"prototype\"],\"%AsyncGeneratorPrototype%\":[\"AsyncGeneratorFunction\",\"prototype\",\"prototype\"],\"%BooleanPrototype%\":[\"Boolean\",\"prototype\"],\"%DataViewPrototype%\":[\"DataView\",\"prototype\"],\"%DatePrototype%\":[\"Date\",\"prototype\"],\"%ErrorPrototype%\":[\"Error\",\"prototype\"],\"%EvalErrorPrototype%\":[\"EvalError\",\"prototype\"],\"%Float32ArrayPrototype%\":[\"Float32Array\",\"prototype\"],\"%Float64ArrayPrototype%\":[\"Float64Array\",\"prototype\"],\"%FunctionPrototype%\":[\"Function\",\"prototype\"],\"%Generator%\":[\"GeneratorFunction\",\"prototype\"],\"%GeneratorPrototype%\":[\"GeneratorFunction\",\"prototype\",\"prototype\"],\"%Int8ArrayPrototype%\":[\"Int8Array\",\"prototype\"],\"%Int16ArrayPrototype%\":[\"Int16Array\",\"prototype\"],\"%Int32ArrayPrototype%\":[\"Int32Array\",\"prototype\"],\"%JSONParse%\":[\"JSON\",\"parse\"],\"%JSONStringify%\":[\"JSON\",\"stringify\"],\"%MapPrototype%\":[\"Map\",\"prototype\"],\"%NumberPrototype%\":[\"Number\",\"prototype\"],\"%ObjectPrototype%\":[\"Object\",\"prototype\"],\"%ObjProto_toString%\":[\"Object\",\"prototype\",\"toString\"],\"%ObjProto_valueOf%\":[\"Object\",\"prototype\",\"valueOf\"],\"%PromisePrototype%\":[\"Promise\",\"prototype\"],\"%PromiseProto_then%\":[\"Promise\",\"prototype\",\"then\"],\"%Promise_all%\":[\"Promise\",\"all\"],\"%Promise_reject%\":[\"Promise\",\"reject\"],\"%Promise_resolve%\":[\"Promise\",\"resolve\"],\"%RangeErrorPrototype%\":[\"RangeError\",\"prototype\"],\"%ReferenceErrorPrototype%\":[\"ReferenceError\",\"prototype\"],\"%RegExpPrototype%\":[\"RegExp\",\"prototype\"],\"%SetPrototype%\":[\"Set\",\"prototype\"],\"%SharedArrayBufferPrototype%\":[\"SharedArrayBuffer\",\"prototype\"],\"%StringPrototype%\":[\"String\",\"prototype\"],\"%SymbolPrototype%\":[\"Symbol\",\"prototype\"],\"%SyntaxErrorPrototype%\":[\"SyntaxError\",\"prototype\"],\"%TypedArrayPrototype%\":[\"TypedArray\",\"prototype\"],\"%TypeErrorPrototype%\":[\"TypeError\",\"prototype\"],\"%Uint8ArrayPrototype%\":[\"Uint8Array\",\"prototype\"],\"%Uint8ClampedArrayPrototype%\":[\"Uint8ClampedArray\",\"prototype\"],\"%Uint16ArrayPrototype%\":[\"Uint16Array\",\"prototype\"],\"%Uint32ArrayPrototype%\":[\"Uint32Array\",\"prototype\"],\"%URIErrorPrototype%\":[\"URIError\",\"prototype\"],\"%WeakMapPrototype%\":[\"WeakMap\",\"prototype\"],\"%WeakSetPrototype%\":[\"WeakSet\",\"prototype\"]};var A=t(174);var m=t(101);var S=A.call(Function.call,Array.prototype.concat);var h=A.call(Function.apply,Array.prototype.splice);var P=A.call(Function.call,String.prototype.replace);var O=A.call(Function.call,String.prototype.slice);var w=A.call(Function.call,RegExp.prototype.exec);var j=/[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;var E=/\\\\(\\\\)?/g;var I=function stringToPath(r){var e=O(r,0,1);var t=O(r,-1);if(e===\"%\"&&t!==\"%\"){throw new n(\"invalid intrinsic syntax, expected closing `%`\")}else if(t===\"%\"&&e!==\"%\"){throw new n(\"invalid intrinsic syntax, expected opening `%`\")}var o=[];P(r,j,(function(r,e,t,n){o[o.length]=t?P(n,E,\"$1\"):e||r}));return o};var B=function getBaseIntrinsic(r,e){var t=r;var o;if(m(b,t)){o=b[t];t=\"%\"+o[0]+\"%\"}if(m(d,t)){var i=d[t];if(i===c){i=v(t)}if(typeof i===\"undefined\"&&!e){throw new a(\"intrinsic \"+r+\" exists, but is not available. Please file an issue!\")}return{alias:o,name:t,value:i}}throw new n(\"intrinsic \"+r+\" does not exist!\")};r.exports=function GetIntrinsic(r,e){if(typeof r!==\"string\"||r.length===0){throw new a(\"intrinsic name must be a non-empty string\")}if(arguments.length>1&&typeof e!==\"boolean\"){throw new a('\"allowMissing\" argument must be a boolean')}if(w(/^%?[^%]*%?$/,r)===null){throw new n(\"`%` may not be present anywhere but at the beginning and end of the intrinsic name\")}var t=I(r);var i=t.length>0?t[0]:\"\";var f=B(\"%\"+i+\"%\",e);var p=f.name;var u=f.value;var s=false;var c=f.alias;if(c){i=c[0];h(t,S([0,1],c))}for(var l=1,g=true;l<t.length;l+=1){var v=t[l];var b=O(v,0,1);var A=O(v,-1);if((b==='\"'||b===\"'\"||b===\"`\"||(A==='\"'||A===\"'\"||A===\"`\"))&&b!==A){throw new n(\"property names with quotes must have matching quotes\")}if(v===\"constructor\"||!g){s=true}i+=\".\"+v;p=\"%\"+i+\"%\";if(m(d,p)){u=d[p]}else if(u!=null){if(!(v in u)){if(!e){throw new a(\"base intrinsic for \"+r+\" exists, but the property is not available.\")}return void o}if(y&&l+1>=t.length){var P=y(u,v);g=!!P;if(g&&\"get\"in P&&!(\"originalValue\"in P.get)){u=P.get}else{u=u[v]}}else{g=m(u,v);u=u[v]}if(g&&!s){d[p]=u}}}return u}},504:function(r){\"use strict\";var e={foo:{}};var t=Object;r.exports=function hasProto(){return{__proto__:e}.foo===e.foo&&!({__proto__:null}instanceof t)}},942:function(r,e,t){\"use strict\";var o=typeof Symbol!==\"undefined\"&&Symbol;var n=t(773);r.exports=function hasNativeSymbols(){if(typeof o!==\"function\"){return false}if(typeof Symbol!==\"function\"){return false}if(typeof o(\"foo\")!==\"symbol\"){return false}if(typeof Symbol(\"bar\")!==\"symbol\"){return false}return n()}},773:function(r){\"use strict\";r.exports=function hasSymbols(){if(typeof Symbol!==\"function\"||typeof Object.getOwnPropertySymbols!==\"function\"){return false}if(typeof Symbol.iterator===\"symbol\"){return true}var r={};var e=Symbol(\"test\");var t=Object(e);if(typeof e===\"string\"){return false}if(Object.prototype.toString.call(e)!==\"[object Symbol]\"){return false}if(Object.prototype.toString.call(t)!==\"[object Symbol]\"){return false}var o=42;r[e]=o;for(e in r){return false}if(typeof Object.keys===\"function\"&&Object.keys(r).length!==0){return false}if(typeof Object.getOwnPropertyNames===\"function\"&&Object.getOwnPropertyNames(r).length!==0){return false}var n=Object.getOwnPropertySymbols(r);if(n.length!==1||n[0]!==e){return false}if(!Object.prototype.propertyIsEnumerable.call(r,e)){return false}if(typeof Object.getOwnPropertyDescriptor===\"function\"){var i=Object.getOwnPropertyDescriptor(r,e);if(i.value!==o||i.enumerable!==true){return false}}return true}},115:function(r,e,t){\"use strict\";var o=typeof Symbol!==\"undefined\"&&Symbol;var n=t(832);r.exports=function hasNativeSymbols(){if(typeof o!==\"function\"){return false}if(typeof Symbol!==\"function\"){return false}if(typeof o(\"foo\")!==\"symbol\"){return false}if(typeof Symbol(\"bar\")!==\"symbol\"){return false}return n()}},832:function(r){\"use strict\";r.exports=function hasSymbols(){if(typeof Symbol!==\"function\"||typeof Object.getOwnPropertySymbols!==\"function\"){return false}if(typeof Symbol.iterator===\"symbol\"){return true}var r={};var e=Symbol(\"test\");var t=Object(e);if(typeof e===\"string\"){return false}if(Object.prototype.toString.call(e)!==\"[object Symbol]\"){return false}if(Object.prototype.toString.call(t)!==\"[object Symbol]\"){return false}var o=42;r[e]=o;for(e in r){return false}if(typeof Object.keys===\"function\"&&Object.keys(r).length!==0){return false}if(typeof Object.getOwnPropertyNames===\"function\"&&Object.getOwnPropertyNames(r).length!==0){return false}var n=Object.getOwnPropertySymbols(r);if(n.length!==1||n[0]!==e){return false}if(!Object.prototype.propertyIsEnumerable.call(r,e)){return false}if(typeof Object.getOwnPropertyDescriptor===\"function\"){var i=Object.getOwnPropertyDescriptor(r,e);if(i.value!==o||i.enumerable!==true){return false}}return true}},101:function(r,e,t){\"use strict\";var o=t(174);r.exports=o.call(Function.call,Object.prototype.hasOwnProperty)},782:function(r){if(typeof Object.create===\"function\"){r.exports=function inherits(r,e){if(e){r.super_=e;r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:false,writable:true,configurable:true}})}}}else{r.exports=function inherits(r,e){if(e){r.super_=e;var TempCtor=function(){};TempCtor.prototype=e.prototype;r.prototype=new TempCtor;r.prototype.constructor=r}}}},157:function(r){\"use strict\";var e=typeof Symbol===\"function\"&&typeof Symbol.toStringTag===\"symbol\";var t=Object.prototype.toString;var o=function isArguments(r){if(e&&r&&typeof r===\"object\"&&Symbol.toStringTag in r){return false}return t.call(r)===\"[object Arguments]\"};var n=function isArguments(r){if(o(r)){return true}return r!==null&&typeof r===\"object\"&&typeof r.length===\"number\"&&r.length>=0&&t.call(r)!==\"[object Array]\"&&t.call(r.callee)===\"[object Function]\"};var i=function(){return o(arguments)}();o.isLegacyArguments=n;r.exports=i?o:n},391:function(r){\"use strict\";var e=Object.prototype.toString;var t=Function.prototype.toString;var o=/^\\s*(?:function)?\\*/;var n=typeof Symbol===\"function\"&&typeof Symbol.toStringTag===\"symbol\";var i=Object.getPrototypeOf;var getGeneratorFunc=function(){if(!n){return false}try{return Function(\"return function*() {}\")()}catch(r){}};var a=getGeneratorFunc();var y=a?i(a):{};r.exports=function isGeneratorFunction(r){if(typeof r!==\"function\"){return false}if(o.test(t.call(r))){return true}if(!n){var a=e.call(r);return a===\"[object GeneratorFunction]\"}return i(r)===y}},994:function(r,e,t){\"use strict\";var o=t(144);var n=t(349);var i=t(256);var a=i(\"Object.prototype.toString\");var y=t(942)();var f=y&&typeof Symbol.toStringTag===\"symbol\";var p=n();var u=i(\"Array.prototype.indexOf\",true)||function indexOf(r,e){for(var t=0;t<r.length;t+=1){if(r[t]===e){return t}}return-1};var s=i(\"String.prototype.slice\");var c={};var l=t(24);var d=Object.getPrototypeOf;if(f&&l&&d){o(p,(function(r){var e=new __webpack_require__.g[r];if(!(Symbol.toStringTag in e)){throw new EvalError(\"this engine has support for Symbol.toStringTag, but \"+r+\" does not have the property! Please report this.\")}var t=d(e);var o=l(t,Symbol.toStringTag);if(!o){var n=d(t);o=l(n,Symbol.toStringTag)}c[r]=o.get}))}var g=function tryAllTypedArrays(r){var e=false;o(c,(function(t,o){if(!e){try{e=t.call(r)===o}catch(r){}}}));return e};r.exports=function isTypedArray(r){if(!r||typeof r!==\"object\"){return false}if(!f){var e=s(a(r),8,-1);return u(p,e)>-1}if(!l){return false}return g(r)}},369:function(r){r.exports=function isBuffer(r){return r instanceof Buffer}},584:function(r,e,t){\"use strict\";var o=t(157);var n=t(391);var i=t(490);var a=t(994);function uncurryThis(r){return r.call.bind(r)}var y=typeof BigInt!==\"undefined\";var f=typeof Symbol!==\"undefined\";var p=uncurryThis(Object.prototype.toString);var u=uncurryThis(Number.prototype.valueOf);var s=uncurryThis(String.prototype.valueOf);var c=uncurryThis(Boolean.prototype.valueOf);if(y){var l=uncurryThis(BigInt.prototype.valueOf)}if(f){var d=uncurryThis(Symbol.prototype.valueOf)}function checkBoxedPrimitive(r,e){if(typeof r!==\"object\"){return false}try{e(r);return true}catch(r){return false}}e.isArgumentsObject=o;e.isGeneratorFunction=n;e.isTypedArray=a;function isPromise(r){return typeof Promise!==\"undefined\"&&r instanceof Promise||r!==null&&typeof r===\"object\"&&typeof r.then===\"function\"&&typeof r.catch===\"function\"}e.isPromise=isPromise;function isArrayBufferView(r){if(typeof ArrayBuffer!==\"undefined\"&&ArrayBuffer.isView){return ArrayBuffer.isView(r)}return a(r)||isDataView(r)}e.isArrayBufferView=isArrayBufferView;function isUint8Array(r){return i(r)===\"Uint8Array\"}e.isUint8Array=isUint8Array;function isUint8ClampedArray(r){return i(r)===\"Uint8ClampedArray\"}e.isUint8ClampedArray=isUint8ClampedArray;function isUint16Array(r){return i(r)===\"Uint16Array\"}e.isUint16Array=isUint16Array;function isUint32Array(r){return i(r)===\"Uint32Array\"}e.isUint32Array=isUint32Array;function isInt8Array(r){return i(r)===\"Int8Array\"}e.isInt8Array=isInt8Array;function isInt16Array(r){return i(r)===\"Int16Array\"}e.isInt16Array=isInt16Array;function isInt32Array(r){return i(r)===\"Int32Array\"}e.isInt32Array=isInt32Array;function isFloat32Array(r){return i(r)===\"Float32Array\"}e.isFloat32Array=isFloat32Array;function isFloat64Array(r){return i(r)===\"Float64Array\"}e.isFloat64Array=isFloat64Array;function isBigInt64Array(r){return i(r)===\"BigInt64Array\"}e.isBigInt64Array=isBigInt64Array;function isBigUint64Array(r){return i(r)===\"BigUint64Array\"}e.isBigUint64Array=isBigUint64Array;function isMapToString(r){return p(r)===\"[object Map]\"}isMapToString.working=typeof Map!==\"undefined\"&&isMapToString(new Map);function isMap(r){if(typeof Map===\"undefined\"){return false}return isMapToString.working?isMapToString(r):r instanceof Map}e.isMap=isMap;function isSetToString(r){return p(r)===\"[object Set]\"}isSetToString.working=typeof Set!==\"undefined\"&&isSetToString(new Set);function isSet(r){if(typeof Set===\"undefined\"){return false}return isSetToString.working?isSetToString(r):r instanceof Set}e.isSet=isSet;function isWeakMapToString(r){return p(r)===\"[object WeakMap]\"}isWeakMapToString.working=typeof WeakMap!==\"undefined\"&&isWeakMapToString(new WeakMap);function isWeakMap(r){if(typeof WeakMap===\"undefined\"){return false}return isWeakMapToString.working?isWeakMapToString(r):r instanceof WeakMap}e.isWeakMap=isWeakMap;function isWeakSetToString(r){return p(r)===\"[object WeakSet]\"}isWeakSetToString.working=typeof WeakSet!==\"undefined\"&&isWeakSetToString(new WeakSet);function isWeakSet(r){return isWeakSetToString(r)}e.isWeakSet=isWeakSet;function isArrayBufferToString(r){return p(r)===\"[object ArrayBuffer]\"}isArrayBufferToString.working=typeof ArrayBuffer!==\"undefined\"&&isArrayBufferToString(new ArrayBuffer);function isArrayBuffer(r){if(typeof ArrayBuffer===\"undefined\"){return false}return isArrayBufferToString.working?isArrayBufferToString(r):r instanceof ArrayBuffer}e.isArrayBuffer=isArrayBuffer;function isDataViewToString(r){return p(r)===\"[object DataView]\"}isDataViewToString.working=typeof ArrayBuffer!==\"undefined\"&&typeof DataView!==\"undefined\"&&isDataViewToString(new DataView(new ArrayBuffer(1),0,1));function isDataView(r){if(typeof DataView===\"undefined\"){return false}return isDataViewToString.working?isDataViewToString(r):r instanceof DataView}e.isDataView=isDataView;var g=typeof SharedArrayBuffer!==\"undefined\"?SharedArrayBuffer:undefined;function isSharedArrayBufferToString(r){return p(r)===\"[object SharedArrayBuffer]\"}function isSharedArrayBuffer(r){if(typeof g===\"undefined\"){return false}if(typeof isSharedArrayBufferToString.working===\"undefined\"){isSharedArrayBufferToString.working=isSharedArrayBufferToString(new g)}return isSharedArrayBufferToString.working?isSharedArrayBufferToString(r):r instanceof g}e.isSharedArrayBuffer=isSharedArrayBuffer;function isAsyncFunction(r){return p(r)===\"[object AsyncFunction]\"}e.isAsyncFunction=isAsyncFunction;function isMapIterator(r){return p(r)===\"[object Map Iterator]\"}e.isMapIterator=isMapIterator;function isSetIterator(r){return p(r)===\"[object Set Iterator]\"}e.isSetIterator=isSetIterator;function isGeneratorObject(r){return p(r)===\"[object Generator]\"}e.isGeneratorObject=isGeneratorObject;function isWebAssemblyCompiledModule(r){return p(r)===\"[object WebAssembly.Module]\"}e.isWebAssemblyCompiledModule=isWebAssemblyCompiledModule;function isNumberObject(r){return checkBoxedPrimitive(r,u)}e.isNumberObject=isNumberObject;function isStringObject(r){return checkBoxedPrimitive(r,s)}e.isStringObject=isStringObject;function isBooleanObject(r){return checkBoxedPrimitive(r,c)}e.isBooleanObject=isBooleanObject;function isBigIntObject(r){return y&&checkBoxedPrimitive(r,l)}e.isBigIntObject=isBigIntObject;function isSymbolObject(r){return f&&checkBoxedPrimitive(r,d)}e.isSymbolObject=isSymbolObject;function isBoxedPrimitive(r){return isNumberObject(r)||isStringObject(r)||isBooleanObject(r)||isBigIntObject(r)||isSymbolObject(r)}e.isBoxedPrimitive=isBoxedPrimitive;function isAnyArrayBuffer(r){return typeof Uint8Array!==\"undefined\"&&(isArrayBuffer(r)||isSharedArrayBuffer(r))}e.isAnyArrayBuffer=isAnyArrayBuffer;[\"isProxy\",\"isExternal\",\"isModuleNamespaceObject\"].forEach((function(r){Object.defineProperty(e,r,{enumerable:false,value:function(){throw new Error(r+\" is not supported in userland\")}})}))},177:function(r,e,t){var o=Object.getOwnPropertyDescriptors||function getOwnPropertyDescriptors(r){var e=Object.keys(r);var t={};for(var o=0;o<e.length;o++){t[e[o]]=Object.getOwnPropertyDescriptor(r,e[o])}return t};var n=/%[sdj%]/g;e.format=function(r){if(!isString(r)){var e=[];for(var t=0;t<arguments.length;t++){e.push(inspect(arguments[t]))}return e.join(\" \")}var t=1;var o=arguments;var i=o.length;var a=String(r).replace(n,(function(r){if(r===\"%%\")return\"%\";if(t>=i)return r;switch(r){case\"%s\":return String(o[t++]);case\"%d\":return Number(o[t++]);case\"%j\":try{return JSON.stringify(o[t++])}catch(r){return\"[Circular]\"}default:return r}}));for(var y=o[t];t<i;y=o[++t]){if(isNull(y)||!isObject(y)){a+=\" \"+y}else{a+=\" \"+inspect(y)}}return a};e.deprecate=function(r,t){if(typeof process!==\"undefined\"&&process.noDeprecation===true){return r}if(typeof process===\"undefined\"){return function(){return e.deprecate(r,t).apply(this,arguments)}}var o=false;function deprecated(){if(!o){if(process.throwDeprecation){throw new Error(t)}else if(process.traceDeprecation){console.trace(t)}else{console.error(t)}o=true}return r.apply(this,arguments)}return deprecated};var i={};var a=/^$/;if(process.env.NODE_DEBUG){var y=process.env.NODE_DEBUG;y=y.replace(/[|\\\\{}()[\\]^$+?.]/g,\"\\\\$&\").replace(/\\*/g,\".*\").replace(/,/g,\"$|^\").toUpperCase();a=new RegExp(\"^\"+y+\"$\",\"i\")}e.debuglog=function(r){r=r.toUpperCase();if(!i[r]){if(a.test(r)){var t=process.pid;i[r]=function(){var o=e.format.apply(e,arguments);console.error(\"%s %d: %s\",r,t,o)}}else{i[r]=function(){}}}return i[r]};function inspect(r,t){var o={seen:[],stylize:stylizeNoColor};if(arguments.length>=3)o.depth=arguments[2];if(arguments.length>=4)o.colors=arguments[3];if(isBoolean(t)){o.showHidden=t}else if(t){e._extend(o,t)}if(isUndefined(o.showHidden))o.showHidden=false;if(isUndefined(o.depth))o.depth=2;if(isUndefined(o.colors))o.colors=false;if(isUndefined(o.customInspect))o.customInspect=true;if(o.colors)o.stylize=stylizeWithColor;return formatValue(o,r,o.depth)}e.inspect=inspect;inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]};inspect.styles={special:\"cyan\",number:\"yellow\",boolean:\"yellow\",undefined:\"grey\",null:\"bold\",string:\"green\",date:\"magenta\",regexp:\"red\"};function stylizeWithColor(r,e){var t=inspect.styles[e];if(t){return\"\u001b[\"+inspect.colors[t][0]+\"m\"+r+\"\u001b[\"+inspect.colors[t][1]+\"m\"}else{return r}}function stylizeNoColor(r,e){return r}function arrayToHash(r){var e={};r.forEach((function(r,t){e[r]=true}));return e}function formatValue(r,t,o){if(r.customInspect&&t&&isFunction(t.inspect)&&t.inspect!==e.inspect&&!(t.constructor&&t.constructor.prototype===t)){var n=t.inspect(o,r);if(!isString(n)){n=formatValue(r,n,o)}return n}var i=formatPrimitive(r,t);if(i){return i}var a=Object.keys(t);var y=arrayToHash(a);if(r.showHidden){a=Object.getOwnPropertyNames(t)}if(isError(t)&&(a.indexOf(\"message\")>=0||a.indexOf(\"description\")>=0)){return formatError(t)}if(a.length===0){if(isFunction(t)){var f=t.name?\": \"+t.name:\"\";return r.stylize(\"[Function\"+f+\"]\",\"special\")}if(isRegExp(t)){return r.stylize(RegExp.prototype.toString.call(t),\"regexp\")}if(isDate(t)){return r.stylize(Date.prototype.toString.call(t),\"date\")}if(isError(t)){return formatError(t)}}var p=\"\",u=false,s=[\"{\",\"}\"];if(isArray(t)){u=true;s=[\"[\",\"]\"]}if(isFunction(t)){var c=t.name?\": \"+t.name:\"\";p=\" [Function\"+c+\"]\"}if(isRegExp(t)){p=\" \"+RegExp.prototype.toString.call(t)}if(isDate(t)){p=\" \"+Date.prototype.toUTCString.call(t)}if(isError(t)){p=\" \"+formatError(t)}if(a.length===0&&(!u||t.length==0)){return s[0]+p+s[1]}if(o<0){if(isRegExp(t)){return r.stylize(RegExp.prototype.toString.call(t),\"regexp\")}else{return r.stylize(\"[Object]\",\"special\")}}r.seen.push(t);var l;if(u){l=formatArray(r,t,o,y,a)}else{l=a.map((function(e){return formatProperty(r,t,o,y,e,u)}))}r.seen.pop();return reduceToSingleString(l,p,s)}function formatPrimitive(r,e){if(isUndefined(e))return r.stylize(\"undefined\",\"undefined\");if(isString(e)){var t=\"'\"+JSON.stringify(e).replace(/^\"|\"$/g,\"\").replace(/'/g,\"\\\\'\").replace(/\\\\\"/g,'\"')+\"'\";return r.stylize(t,\"string\")}if(isNumber(e))return r.stylize(\"\"+e,\"number\");if(isBoolean(e))return r.stylize(\"\"+e,\"boolean\");if(isNull(e))return r.stylize(\"null\",\"null\")}function formatError(r){return\"[\"+Error.prototype.toString.call(r)+\"]\"}function formatArray(r,e,t,o,n){var i=[];for(var a=0,y=e.length;a<y;++a){if(hasOwnProperty(e,String(a))){i.push(formatProperty(r,e,t,o,String(a),true))}else{i.push(\"\")}}n.forEach((function(n){if(!n.match(/^\\d+$/)){i.push(formatProperty(r,e,t,o,n,true))}}));return i}function formatProperty(r,e,t,o,n,i){var a,y,f;f=Object.getOwnPropertyDescriptor(e,n)||{value:e[n]};if(f.get){if(f.set){y=r.stylize(\"[Getter/Setter]\",\"special\")}else{y=r.stylize(\"[Getter]\",\"special\")}}else{if(f.set){y=r.stylize(\"[Setter]\",\"special\")}}if(!hasOwnProperty(o,n)){a=\"[\"+n+\"]\"}if(!y){if(r.seen.indexOf(f.value)<0){if(isNull(t)){y=formatValue(r,f.value,null)}else{y=formatValue(r,f.value,t-1)}if(y.indexOf(\"\\n\")>-1){if(i){y=y.split(\"\\n\").map((function(r){return\"  \"+r})).join(\"\\n\").substr(2)}else{y=\"\\n\"+y.split(\"\\n\").map((function(r){return\"   \"+r})).join(\"\\n\")}}}else{y=r.stylize(\"[Circular]\",\"special\")}}if(isUndefined(a)){if(i&&n.match(/^\\d+$/)){return y}a=JSON.stringify(\"\"+n);if(a.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)){a=a.substr(1,a.length-2);a=r.stylize(a,\"name\")}else{a=a.replace(/'/g,\"\\\\'\").replace(/\\\\\"/g,'\"').replace(/(^\"|\"$)/g,\"'\");a=r.stylize(a,\"string\")}}return a+\": \"+y}function reduceToSingleString(r,e,t){var o=0;var n=r.reduce((function(r,e){o++;if(e.indexOf(\"\\n\")>=0)o++;return r+e.replace(/\\u001b\\[\\d\\d?m/g,\"\").length+1}),0);if(n>60){return t[0]+(e===\"\"?\"\":e+\"\\n \")+\" \"+r.join(\",\\n  \")+\" \"+t[1]}return t[0]+e+\" \"+r.join(\", \")+\" \"+t[1]}e.types=t(584);function isArray(r){return Array.isArray(r)}e.isArray=isArray;function isBoolean(r){return typeof r===\"boolean\"}e.isBoolean=isBoolean;function isNull(r){return r===null}e.isNull=isNull;function isNullOrUndefined(r){return r==null}e.isNullOrUndefined=isNullOrUndefined;function isNumber(r){return typeof r===\"number\"}e.isNumber=isNumber;function isString(r){return typeof r===\"string\"}e.isString=isString;function isSymbol(r){return typeof r===\"symbol\"}e.isSymbol=isSymbol;function isUndefined(r){return r===void 0}e.isUndefined=isUndefined;function isRegExp(r){return isObject(r)&&objectToString(r)===\"[object RegExp]\"}e.isRegExp=isRegExp;e.types.isRegExp=isRegExp;function isObject(r){return typeof r===\"object\"&&r!==null}e.isObject=isObject;function isDate(r){return isObject(r)&&objectToString(r)===\"[object Date]\"}e.isDate=isDate;e.types.isDate=isDate;function isError(r){return isObject(r)&&(objectToString(r)===\"[object Error]\"||r instanceof Error)}e.isError=isError;e.types.isNativeError=isError;function isFunction(r){return typeof r===\"function\"}e.isFunction=isFunction;function isPrimitive(r){return r===null||typeof r===\"boolean\"||typeof r===\"number\"||typeof r===\"string\"||typeof r===\"symbol\"||typeof r===\"undefined\"}e.isPrimitive=isPrimitive;e.isBuffer=t(369);function objectToString(r){return Object.prototype.toString.call(r)}function pad(r){return r<10?\"0\"+r.toString(10):r.toString(10)}var f=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];function timestamp(){var r=new Date;var e=[pad(r.getHours()),pad(r.getMinutes()),pad(r.getSeconds())].join(\":\");return[r.getDate(),f[r.getMonth()],e].join(\" \")}e.log=function(){console.log(\"%s - %s\",timestamp(),e.format.apply(e,arguments))};e.inherits=t(782);e._extend=function(r,e){if(!e||!isObject(e))return r;var t=Object.keys(e);var o=t.length;while(o--){r[t[o]]=e[t[o]]}return r};function hasOwnProperty(r,e){return Object.prototype.hasOwnProperty.call(r,e)}var p=typeof Symbol!==\"undefined\"?Symbol(\"util.promisify.custom\"):undefined;e.promisify=function promisify(r){if(typeof r!==\"function\")throw new TypeError('The \"original\" argument must be of type Function');if(p&&r[p]){var e=r[p];if(typeof e!==\"function\"){throw new TypeError('The \"util.promisify.custom\" argument must be of type Function')}Object.defineProperty(e,p,{value:e,enumerable:false,writable:false,configurable:true});return e}function e(){var e,t;var o=new Promise((function(r,o){e=r;t=o}));var n=[];for(var i=0;i<arguments.length;i++){n.push(arguments[i])}n.push((function(r,o){if(r){t(r)}else{e(o)}}));try{r.apply(this,n)}catch(r){t(r)}return o}Object.setPrototypeOf(e,Object.getPrototypeOf(r));if(p)Object.defineProperty(e,p,{value:e,enumerable:false,writable:false,configurable:true});return Object.defineProperties(e,o(r))};e.promisify.custom=p;function callbackifyOnRejected(r,e){if(!r){var t=new Error(\"Promise was rejected with a falsy value\");t.reason=r;r=t}return e(r)}function callbackify(r){if(typeof r!==\"function\"){throw new TypeError('The \"original\" argument must be of type Function')}function callbackified(){var e=[];for(var t=0;t<arguments.length;t++){e.push(arguments[t])}var o=e.pop();if(typeof o!==\"function\"){throw new TypeError(\"The last argument must be of type Function\")}var n=this;var cb=function(){return o.apply(n,arguments)};r.apply(this,e).then((function(r){process.nextTick(cb.bind(null,null,r))}),(function(r){process.nextTick(callbackifyOnRejected.bind(null,r,cb))}))}Object.setPrototypeOf(callbackified,Object.getPrototypeOf(r));Object.defineProperties(callbackified,o(r));return callbackified}e.callbackify=callbackify},490:function(r,e,t){\"use strict\";var o=t(144);var n=t(349);var i=t(256);var a=i(\"Object.prototype.toString\");var y=t(942)();var f=y&&typeof Symbol.toStringTag===\"symbol\";var p=n();var u=i(\"String.prototype.slice\");var s={};var c=t(24);var l=Object.getPrototypeOf;if(f&&c&&l){o(p,(function(r){if(typeof __webpack_require__.g[r]===\"function\"){var e=new __webpack_require__.g[r];if(!(Symbol.toStringTag in e)){throw new EvalError(\"this engine has support for Symbol.toStringTag, but \"+r+\" does not have the property! Please report this.\")}var t=l(e);var o=c(t,Symbol.toStringTag);if(!o){var n=l(t);o=c(n,Symbol.toStringTag)}s[r]=o.get}}))}var d=function tryAllTypedArrays(r){var e=false;o(s,(function(t,o){if(!e){try{var n=t.call(r);if(n===o){e=n}}catch(r){}}}));return e};var g=t(994);r.exports=function whichTypedArray(r){if(!g(r)){return false}if(!f){return u(a(r),8,-1)}return d(r)}},349:function(r,e,t){\"use strict\";var o=t(992);r.exports=function availableTypedArrays(){return o([\"BigInt64Array\",\"BigUint64Array\",\"Float32Array\",\"Float64Array\",\"Int16Array\",\"Int32Array\",\"Int8Array\",\"Uint16Array\",\"Uint32Array\",\"Uint8Array\",\"Uint8ClampedArray\"],(function(r){return typeof __webpack_require__.g[r]===\"function\"}))}},24:function(r,e,t){\"use strict\";var o=t(500);var n=o(\"%Object.getOwnPropertyDescriptor%\",true);if(n){try{n([],\"length\")}catch(r){n=null}}r.exports=n}};var e={};function __nccwpck_require__(t){var o=e[t];if(o!==undefined){return o.exports}var n=e[t]={exports:{}};var i=true;try{r[t](n,n.exports,__nccwpck_require__);i=false}finally{if(i)delete e[t]}return n.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(177);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/util/util.js\n"));

/***/ }),

/***/ "./node_modules/next/router.js":
/*!*************************************!*\
  !*** ./node_modules/next/router.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/client/router */ \"./node_modules/next/dist/client/router.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9yb3V0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsNkdBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L3JvdXRlci5qcz8xYmI2Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2NsaWVudC9yb3V0ZXInKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/router.js\n"));

/***/ }),

/***/ "./node_modules/pend/index.js":
/*!************************************!*\
  !*** ./node_modules/pend/index.js ***!
  \************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = Pend;\n\nfunction Pend() {\n  this.pending = 0;\n  this.max = Infinity;\n  this.listeners = [];\n  this.waiting = [];\n  this.error = null;\n}\n\nPend.prototype.go = function(fn) {\n  if (this.pending < this.max) {\n    pendGo(this, fn);\n  } else {\n    this.waiting.push(fn);\n  }\n};\n\nPend.prototype.wait = function(cb) {\n  if (this.pending === 0) {\n    cb(this.error);\n  } else {\n    this.listeners.push(cb);\n  }\n};\n\nPend.prototype.hold = function() {\n  return pendHold(this);\n};\n\nfunction pendHold(self) {\n  self.pending += 1;\n  var called = false;\n  return onCb;\n  function onCb(err) {\n    if (called) throw new Error(\"callback called twice\");\n    called = true;\n    self.error = self.error || err;\n    self.pending -= 1;\n    if (self.waiting.length > 0 && self.pending < self.max) {\n      pendGo(self, self.waiting.shift());\n    } else if (self.pending === 0) {\n      var listeners = self.listeners;\n      self.listeners = [];\n      listeners.forEach(cbListener);\n    }\n  }\n  function cbListener(listener) {\n    listener(self.error);\n  }\n}\n\nfunction pendGo(self, fn) {\n  fn(pendHold(self));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGVuZC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcGVuZC9pbmRleC5qcz9jMTg2Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gUGVuZDtcblxuZnVuY3Rpb24gUGVuZCgpIHtcbiAgdGhpcy5wZW5kaW5nID0gMDtcbiAgdGhpcy5tYXggPSBJbmZpbml0eTtcbiAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgdGhpcy53YWl0aW5nID0gW107XG4gIHRoaXMuZXJyb3IgPSBudWxsO1xufVxuXG5QZW5kLnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uKGZuKSB7XG4gIGlmICh0aGlzLnBlbmRpbmcgPCB0aGlzLm1heCkge1xuICAgIHBlbmRHbyh0aGlzLCBmbik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWl0aW5nLnB1c2goZm4pO1xuICB9XG59O1xuXG5QZW5kLnByb3RvdHlwZS53YWl0ID0gZnVuY3Rpb24oY2IpIHtcbiAgaWYgKHRoaXMucGVuZGluZyA9PT0gMCkge1xuICAgIGNiKHRoaXMuZXJyb3IpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGlzdGVuZXJzLnB1c2goY2IpO1xuICB9XG59O1xuXG5QZW5kLnByb3RvdHlwZS5ob2xkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwZW5kSG9sZCh0aGlzKTtcbn07XG5cbmZ1bmN0aW9uIHBlbmRIb2xkKHNlbGYpIHtcbiAgc2VsZi5wZW5kaW5nICs9IDE7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIG9uQ2I7XG4gIGZ1bmN0aW9uIG9uQ2IoZXJyKSB7XG4gICAgaWYgKGNhbGxlZCkgdGhyb3cgbmV3IEVycm9yKFwiY2FsbGJhY2sgY2FsbGVkIHR3aWNlXCIpO1xuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgc2VsZi5lcnJvciA9IHNlbGYuZXJyb3IgfHwgZXJyO1xuICAgIHNlbGYucGVuZGluZyAtPSAxO1xuICAgIGlmIChzZWxmLndhaXRpbmcubGVuZ3RoID4gMCAmJiBzZWxmLnBlbmRpbmcgPCBzZWxmLm1heCkge1xuICAgICAgcGVuZEdvKHNlbGYsIHNlbGYud2FpdGluZy5zaGlmdCgpKTtcbiAgICB9IGVsc2UgaWYgKHNlbGYucGVuZGluZyA9PT0gMCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IHNlbGYubGlzdGVuZXJzO1xuICAgICAgc2VsZi5saXN0ZW5lcnMgPSBbXTtcbiAgICAgIGxpc3RlbmVycy5mb3JFYWNoKGNiTGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjYkxpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgbGlzdGVuZXIoc2VsZi5lcnJvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGVuZEdvKHNlbGYsIGZuKSB7XG4gIGZuKHBlbmRIb2xkKHNlbGYpKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pend/index.js\n"));

/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_MODULE_REFERENCE;\n\n{\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n}\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nvar didWarnAboutKeySpread = {};\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    {\n      if (hasOwnProperty.call(props, 'key')) {\n        var componentName = getComponentNameFromType(type);\n        var keys = Object.keys(props).filter(function (k) {\n          return k !== 'key';\n        });\n        var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n        if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n          var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n          error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n          didWarnAboutKeySpread[componentName + beforeExample] = true;\n        }\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV$1 =  jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV$1;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "./node_modules/react/jsx-dev-runtime.js":
/*!***********************************************!*\
  !*** ./node_modules/react/jsx-dev-runtime.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"./node_modules/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSx1SkFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz81Nzc3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "./node_modules/strnum/strnum.js":
/*!***************************************!*\
  !*** ./node_modules/strnum/strnum.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)([0-9]*(\\.[0-9]*)?)$/;\n// const octRegex = /^0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n \nconst consider = {\n    hex :  true,\n    // oct: false,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true,\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    \n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if(str===\"0\") return 0;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return parse_int(trimmedStr, 16);\n    // }else if (options.oct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    }else if (trimmedStr.search(/[eE]/)!== -1) { //eNotation\n        const notation = trimmedStr.match(/^([-\\+])?(0*)([0-9]*(\\.[0-9]*)?[eE][-\\+]?[0-9]+)$/); \n        // +00.123 => [ , '+', '00', '.123', ..\n        if(notation){\n            // console.log(notation)\n            if(options.leadingZeros){ //accept with leading zeros\n                trimmedStr = (notation[1] || \"\") + notation[3];\n            }else{\n                if(notation[2] === \"0\" && notation[3][0]=== \".\"){ //valid number\n                }else{\n                    return str;\n                }\n            }\n            return options.eNotation ? Number(trimmedStr) : str;\n        }else{\n            return str;\n        }\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        // +00.123 => [ , '+', '00', '.123', ..\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else if(options.leadingZeros && leadingZeros===str) return 0; //00\n            \n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    return (numTrimmedByZeros === numStr) || (sign+numTrimmedByZeros === numStr) ? num : str\n                }else  {\n                    return (trimmedStr === numStr) || (trimmedStr === sign+numStr) ? num : str\n                }\n            }\n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\n\nfunction parse_int(numStr, base){\n    //polyfill\n    if(parseInt) return parseInt(numStr, base);\n    else if(Number.parseInt) return Number.parseInt(numStr, base);\n    else if(window && window.parseInt) return window.parseInt(numStr, base);\n    else throw new Error(\"parseInt, Number.parseInt, window.parseInt are not supported\")\n}\n\nmodule.exports = toNumber;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3RybnVtL3N0cm51bS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSyw0Q0FBNEM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQSxhQUFhO0FBQ2Isa0VBQWtFO0FBQ2xFLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0EsOEdBQThHO0FBQzlHLG9IQUFvSDtBQUNwSCwwRUFBMEU7QUFDMUU7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTs7QUFFQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLGlCQUFpQix5Q0FBeUM7QUFDMUQsa0ZBQWtGO0FBQ2xGLHNFQUFzRTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsU0FBUyxNQUFNO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0MsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zdHJudW0vc3RybnVtLmpzPzk0MjciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaGV4UmVnZXggPSAvXlstK10/MHhbYS1mQS1GMC05XSskLztcbmNvbnN0IG51bVJlZ2V4ID0gL14oW1xcLVxcK10pPygwKikoWzAtOV0qKFxcLlswLTldKik/KSQvO1xuLy8gY29uc3Qgb2N0UmVnZXggPSAvXjB4W2EtejAtOV0rLztcbi8vIGNvbnN0IGJpblJlZ2V4ID0gLzB4W2EtejAtOV0rLztcblxuIFxuY29uc3QgY29uc2lkZXIgPSB7XG4gICAgaGV4IDogIHRydWUsXG4gICAgLy8gb2N0OiBmYWxzZSxcbiAgICBsZWFkaW5nWmVyb3M6IHRydWUsXG4gICAgZGVjaW1hbFBvaW50OiBcIlxcLlwiLFxuICAgIGVOb3RhdGlvbjogdHJ1ZSxcbiAgICAvL3NraXBMaWtlOiAvcmVnZXgvXG59O1xuXG5mdW5jdGlvbiB0b051bWJlcihzdHIsIG9wdGlvbnMgPSB7fSl7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbnNpZGVyLCBvcHRpb25zICk7XG4gICAgaWYoIXN0ciB8fCB0eXBlb2Ygc3RyICE9PSBcInN0cmluZ1wiICkgcmV0dXJuIHN0cjtcbiAgICBcbiAgICBsZXQgdHJpbW1lZFN0ciAgPSBzdHIudHJpbSgpO1xuICAgIFxuICAgIGlmKG9wdGlvbnMuc2tpcExpa2UgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnNraXBMaWtlLnRlc3QodHJpbW1lZFN0cikpIHJldHVybiBzdHI7XG4gICAgZWxzZSBpZihzdHI9PT1cIjBcIikgcmV0dXJuIDA7XG4gICAgZWxzZSBpZiAob3B0aW9ucy5oZXggJiYgaGV4UmVnZXgudGVzdCh0cmltbWVkU3RyKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VfaW50KHRyaW1tZWRTdHIsIDE2KTtcbiAgICAvLyB9ZWxzZSBpZiAob3B0aW9ucy5vY3QgJiYgb2N0UmVnZXgudGVzdChzdHIpKSB7XG4gICAgLy8gICAgIHJldHVybiBOdW1iZXIucGFyc2VJbnQodmFsLCA4KTtcbiAgICB9ZWxzZSBpZiAodHJpbW1lZFN0ci5zZWFyY2goL1tlRV0vKSE9PSAtMSkgeyAvL2VOb3RhdGlvblxuICAgICAgICBjb25zdCBub3RhdGlvbiA9IHRyaW1tZWRTdHIubWF0Y2goL14oWy1cXCtdKT8oMCopKFswLTldKihcXC5bMC05XSopP1tlRV1bLVxcK10/WzAtOV0rKSQvKTsgXG4gICAgICAgIC8vICswMC4xMjMgPT4gWyAsICcrJywgJzAwJywgJy4xMjMnLCAuLlxuICAgICAgICBpZihub3RhdGlvbil7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhub3RhdGlvbilcbiAgICAgICAgICAgIGlmKG9wdGlvbnMubGVhZGluZ1plcm9zKXsgLy9hY2NlcHQgd2l0aCBsZWFkaW5nIHplcm9zXG4gICAgICAgICAgICAgICAgdHJpbW1lZFN0ciA9IChub3RhdGlvblsxXSB8fCBcIlwiKSArIG5vdGF0aW9uWzNdO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgaWYobm90YXRpb25bMl0gPT09IFwiMFwiICYmIG5vdGF0aW9uWzNdWzBdPT09IFwiLlwiKXsgLy92YWxpZCBudW1iZXJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5lTm90YXRpb24gPyBOdW1iZXIodHJpbW1lZFN0cikgOiBzdHI7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgfVxuICAgIC8vIH1lbHNlIGlmIChvcHRpb25zLnBhcnNlQmluICYmIGJpblJlZ2V4LnRlc3Qoc3RyKSkge1xuICAgIC8vICAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KHZhbCwgMik7XG4gICAgfWVsc2V7XG4gICAgICAgIC8vc2VwYXJhdGUgbmVnYXRpdmUgc2lnbiwgbGVhZGluZyB6ZXJvcywgYW5kIHJlc3QgbnVtYmVyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gbnVtUmVnZXguZXhlYyh0cmltbWVkU3RyKTtcbiAgICAgICAgLy8gKzAwLjEyMyA9PiBbICwgJysnLCAnMDAnLCAnLjEyMycsIC4uXG4gICAgICAgIGlmKG1hdGNoKXtcbiAgICAgICAgICAgIGNvbnN0IHNpZ24gPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIGNvbnN0IGxlYWRpbmdaZXJvcyA9IG1hdGNoWzJdO1xuICAgICAgICAgICAgbGV0IG51bVRyaW1tZWRCeVplcm9zID0gdHJpbVplcm9zKG1hdGNoWzNdKTsgLy9jb21wbGV0ZSBudW0gd2l0aG91dCBsZWFkaW5nIHplcm9zXG4gICAgICAgICAgICAvL3RyaW0gZW5kaW5nIHplcm9zIGZvciBmbG9hdGluZyBudW1iZXJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoIW9wdGlvbnMubGVhZGluZ1plcm9zICYmIGxlYWRpbmdaZXJvcy5sZW5ndGggPiAwICYmIHNpZ24gJiYgdHJpbW1lZFN0clsyXSAhPT0gXCIuXCIpIHJldHVybiBzdHI7IC8vLTAxMjNcbiAgICAgICAgICAgIGVsc2UgaWYoIW9wdGlvbnMubGVhZGluZ1plcm9zICYmIGxlYWRpbmdaZXJvcy5sZW5ndGggPiAwICYmICFzaWduICYmIHRyaW1tZWRTdHJbMV0gIT09IFwiLlwiKSByZXR1cm4gc3RyOyAvLzAxMjNcbiAgICAgICAgICAgIGVsc2UgaWYob3B0aW9ucy5sZWFkaW5nWmVyb3MgJiYgbGVhZGluZ1plcm9zPT09c3RyKSByZXR1cm4gMDsgLy8wMFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBlbHNley8vbm8gbGVhZGluZyB6ZXJvcyBvciBsZWFkaW5nIHplcm9zIGFyZSBhbGxvd2VkXG4gICAgICAgICAgICAgICAgY29uc3QgbnVtID0gTnVtYmVyKHRyaW1tZWRTdHIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG51bVN0ciA9IFwiXCIgKyBudW07XG5cbiAgICAgICAgICAgICAgICBpZihudW1TdHIuc2VhcmNoKC9bZUVdLykgIT09IC0xKXsgLy9naXZlbiBudW1iZXIgaXMgbG9uZyBhbmQgcGFyc2VkIHRvIGVOb3RhdGlvblxuICAgICAgICAgICAgICAgICAgICBpZihvcHRpb25zLmVOb3RhdGlvbikgcmV0dXJuIG51bTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gc3RyO1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmKHRyaW1tZWRTdHIuaW5kZXhPZihcIi5cIikgIT09IC0xKXsgLy9mbG9hdGluZyBudW1iZXJcbiAgICAgICAgICAgICAgICAgICAgaWYobnVtU3RyID09PSBcIjBcIiAmJiAobnVtVHJpbW1lZEJ5WmVyb3MgPT09IFwiXCIpICkgcmV0dXJuIG51bTsgLy8wLjBcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihudW1TdHIgPT09IG51bVRyaW1tZWRCeVplcm9zKSByZXR1cm4gbnVtOyAvLzAuNDU2LiAwLjc5MDAwXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoIHNpZ24gJiYgbnVtU3RyID09PSBcIi1cIitudW1UcmltbWVkQnlaZXJvcykgcmV0dXJuIG51bTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gc3RyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZihsZWFkaW5nWmVyb3Mpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKG51bVRyaW1tZWRCeVplcm9zID09PSBudW1TdHIpIHx8IChzaWduK251bVRyaW1tZWRCeVplcm9zID09PSBudW1TdHIpID8gbnVtIDogc3RyXG4gICAgICAgICAgICAgICAgfWVsc2UgIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0cmltbWVkU3RyID09PSBudW1TdHIpIHx8ICh0cmltbWVkU3RyID09PSBzaWduK251bVN0cikgPyBudW0gOiBzdHJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1lbHNleyAvL25vbi1udW1lcmljIHN0cmluZ1xuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7c3RyaW5nfSBudW1TdHIgd2l0aG91dCBsZWFkaW5nIHplcm9zXG4gKiBAcmV0dXJucyBcbiAqL1xuZnVuY3Rpb24gdHJpbVplcm9zKG51bVN0cil7XG4gICAgaWYobnVtU3RyICYmIG51bVN0ci5pbmRleE9mKFwiLlwiKSAhPT0gLTEpey8vZmxvYXRcbiAgICAgICAgbnVtU3RyID0gbnVtU3RyLnJlcGxhY2UoLzArJC8sIFwiXCIpOyAvL3JlbW92ZSBlbmRpbmcgemVyb3NcbiAgICAgICAgaWYobnVtU3RyID09PSBcIi5cIikgIG51bVN0ciA9IFwiMFwiO1xuICAgICAgICBlbHNlIGlmKG51bVN0clswXSA9PT0gXCIuXCIpICBudW1TdHIgPSBcIjBcIitudW1TdHI7XG4gICAgICAgIGVsc2UgaWYobnVtU3RyW251bVN0ci5sZW5ndGgtMV0gPT09IFwiLlwiKSAgbnVtU3RyID0gbnVtU3RyLnN1YnN0cigwLG51bVN0ci5sZW5ndGgtMSk7XG4gICAgICAgIHJldHVybiBudW1TdHI7XG4gICAgfVxuICAgIHJldHVybiBudW1TdHI7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX2ludChudW1TdHIsIGJhc2Upe1xuICAgIC8vcG9seWZpbGxcbiAgICBpZihwYXJzZUludCkgcmV0dXJuIHBhcnNlSW50KG51bVN0ciwgYmFzZSk7XG4gICAgZWxzZSBpZihOdW1iZXIucGFyc2VJbnQpIHJldHVybiBOdW1iZXIucGFyc2VJbnQobnVtU3RyLCBiYXNlKTtcbiAgICBlbHNlIGlmKHdpbmRvdyAmJiB3aW5kb3cucGFyc2VJbnQpIHJldHVybiB3aW5kb3cucGFyc2VJbnQobnVtU3RyLCBiYXNlKTtcbiAgICBlbHNlIHRocm93IG5ldyBFcnJvcihcInBhcnNlSW50LCBOdW1iZXIucGFyc2VJbnQsIHdpbmRvdy5wYXJzZUludCBhcmUgbm90IHN1cHBvcnRlZFwiKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvTnVtYmVyOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/strnum/strnum.js\n"));

/***/ }),

/***/ "./node_modules/yauzl/index.js":
/*!*************************************!*\
  !*** ./node_modules/yauzl/index.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\nvar fs = __webpack_require__(/*! fs */ \"?5f3d\");\nvar zlib = __webpack_require__(/*! zlib */ \"./node_modules/next/dist/compiled/browserify-zlib/index.js\");\nvar fd_slicer = __webpack_require__(/*! fd-slicer */ \"./node_modules/fd-slicer/index.js\");\nvar crc32 = __webpack_require__(/*! buffer-crc32 */ \"./node_modules/buffer-crc32/index.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/next/dist/compiled/util/util.js\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"./node_modules/next/dist/compiled/events/events.js\").EventEmitter);\nvar Transform = (__webpack_require__(/*! stream */ \"./node_modules/next/dist/compiled/stream-browserify/index.js\").Transform);\nvar PassThrough = (__webpack_require__(/*! stream */ \"./node_modules/next/dist/compiled/stream-browserify/index.js\").PassThrough);\nvar Writable = (__webpack_require__(/*! stream */ \"./node_modules/next/dist/compiled/stream-browserify/index.js\").Writable);\n\nexports.open = open;\nexports.fromFd = fromFd;\nexports.fromBuffer = fromBuffer;\nexports.fromRandomAccessReader = fromRandomAccessReader;\nexports.dosDateTimeToDate = dosDateTimeToDate;\nexports.validateFileName = validateFileName;\nexports.ZipFile = ZipFile;\nexports.Entry = Entry;\nexports.RandomAccessReader = RandomAccessReader;\n\nfunction open(path, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  if (options.autoClose == null) options.autoClose = true;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  if (callback == null) callback = defaultCallback;\n  fs.open(path, \"r\", function(err, fd) {\n    if (err) return callback(err);\n    fromFd(fd, options, function(err, zipfile) {\n      if (err) fs.close(fd, defaultCallback);\n      callback(err, zipfile);\n    });\n  });\n}\n\nfunction fromFd(fd, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  if (options.autoClose == null) options.autoClose = false;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  if (callback == null) callback = defaultCallback;\n  fs.fstat(fd, function(err, stats) {\n    if (err) return callback(err);\n    var reader = fd_slicer.createFromFd(fd, {autoClose: true});\n    fromRandomAccessReader(reader, stats.size, options, callback);\n  });\n}\n\nfunction fromBuffer(buffer, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  options.autoClose = false;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  // limit the max chunk size. see https://github.com/thejoshwolfe/yauzl/issues/87\n  var reader = fd_slicer.createFromBuffer(buffer, {maxChunkSize: 0x10000});\n  fromRandomAccessReader(reader, buffer.length, options, callback);\n}\n\nfunction fromRandomAccessReader(reader, totalSize, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  if (options.autoClose == null) options.autoClose = true;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  var decodeStrings = !!options.decodeStrings;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  if (callback == null) callback = defaultCallback;\n  if (typeof totalSize !== \"number\") throw new Error(\"expected totalSize parameter to be a number\");\n  if (totalSize > Number.MAX_SAFE_INTEGER) {\n    throw new Error(\"zip file too large. only file sizes up to 2^52 are supported due to JavaScript's Number type being an IEEE 754 double.\");\n  }\n\n  // the matching unref() call is in zipfile.close()\n  reader.ref();\n\n  // eocdr means End of Central Directory Record.\n  // search backwards for the eocdr signature.\n  // the last field of the eocdr is a variable-length comment.\n  // the comment size is encoded in a 2-byte field in the eocdr, which we can't find without trudging backwards through the comment to find it.\n  // as a consequence of this design decision, it's possible to have ambiguous zip file metadata if a coherent eocdr was in the comment.\n  // we search backwards for a eocdr signature, and hope that whoever made the zip file was smart enough to forbid the eocdr signature in the comment.\n  var eocdrWithoutCommentSize = 22;\n  var maxCommentSize = 0xffff; // 2-byte size\n  var bufferSize = Math.min(eocdrWithoutCommentSize + maxCommentSize, totalSize);\n  var buffer = newBuffer(bufferSize);\n  var bufferReadStart = totalSize - buffer.length;\n  readAndAssertNoEof(reader, buffer, 0, bufferSize, bufferReadStart, function(err) {\n    if (err) return callback(err);\n    for (var i = bufferSize - eocdrWithoutCommentSize; i >= 0; i -= 1) {\n      if (buffer.readUInt32LE(i) !== 0x06054b50) continue;\n      // found eocdr\n      var eocdrBuffer = buffer.slice(i);\n\n      // 0 - End of central directory signature = 0x06054b50\n      // 4 - Number of this disk\n      var diskNumber = eocdrBuffer.readUInt16LE(4);\n      if (diskNumber !== 0) {\n        return callback(new Error(\"multi-disk zip files are not supported: found disk number: \" + diskNumber));\n      }\n      // 6 - Disk where central directory starts\n      // 8 - Number of central directory records on this disk\n      // 10 - Total number of central directory records\n      var entryCount = eocdrBuffer.readUInt16LE(10);\n      // 12 - Size of central directory (bytes)\n      // 16 - Offset of start of central directory, relative to start of archive\n      var centralDirectoryOffset = eocdrBuffer.readUInt32LE(16);\n      // 20 - Comment length\n      var commentLength = eocdrBuffer.readUInt16LE(20);\n      var expectedCommentLength = eocdrBuffer.length - eocdrWithoutCommentSize;\n      if (commentLength !== expectedCommentLength) {\n        return callback(new Error(\"invalid comment length. expected: \" + expectedCommentLength + \". found: \" + commentLength));\n      }\n      // 22 - Comment\n      // the encoding is always cp437.\n      var comment = decodeStrings ? decodeBuffer(eocdrBuffer, 22, eocdrBuffer.length, false)\n                                  : eocdrBuffer.slice(22);\n\n      if (!(entryCount === 0xffff || centralDirectoryOffset === 0xffffffff)) {\n        return callback(null, new ZipFile(reader, centralDirectoryOffset, totalSize, entryCount, comment, options.autoClose, options.lazyEntries, decodeStrings, options.validateEntrySizes, options.strictFileNames));\n      }\n\n      // ZIP64 format\n\n      // ZIP64 Zip64 end of central directory locator\n      var zip64EocdlBuffer = newBuffer(20);\n      var zip64EocdlOffset = bufferReadStart + i - zip64EocdlBuffer.length;\n      readAndAssertNoEof(reader, zip64EocdlBuffer, 0, zip64EocdlBuffer.length, zip64EocdlOffset, function(err) {\n        if (err) return callback(err);\n\n        // 0 - zip64 end of central dir locator signature = 0x07064b50\n        if (zip64EocdlBuffer.readUInt32LE(0) !== 0x07064b50) {\n          return callback(new Error(\"invalid zip64 end of central directory locator signature\"));\n        }\n        // 4 - number of the disk with the start of the zip64 end of central directory\n        // 8 - relative offset of the zip64 end of central directory record\n        var zip64EocdrOffset = readUInt64LE(zip64EocdlBuffer, 8);\n        // 16 - total number of disks\n\n        // ZIP64 end of central directory record\n        var zip64EocdrBuffer = newBuffer(56);\n        readAndAssertNoEof(reader, zip64EocdrBuffer, 0, zip64EocdrBuffer.length, zip64EocdrOffset, function(err) {\n          if (err) return callback(err);\n\n          // 0 - zip64 end of central dir signature                           4 bytes  (0x06064b50)\n          if (zip64EocdrBuffer.readUInt32LE(0) !== 0x06064b50) {\n            return callback(new Error(\"invalid zip64 end of central directory record signature\"));\n          }\n          // 4 - size of zip64 end of central directory record                8 bytes\n          // 12 - version made by                                             2 bytes\n          // 14 - version needed to extract                                   2 bytes\n          // 16 - number of this disk                                         4 bytes\n          // 20 - number of the disk with the start of the central directory  4 bytes\n          // 24 - total number of entries in the central directory on this disk         8 bytes\n          // 32 - total number of entries in the central directory            8 bytes\n          entryCount = readUInt64LE(zip64EocdrBuffer, 32);\n          // 40 - size of the central directory                               8 bytes\n          // 48 - offset of start of central directory with respect to the starting disk number     8 bytes\n          centralDirectoryOffset = readUInt64LE(zip64EocdrBuffer, 48);\n          // 56 - zip64 extensible data sector                                (variable size)\n          return callback(null, new ZipFile(reader, centralDirectoryOffset, totalSize, entryCount, comment, options.autoClose, options.lazyEntries, decodeStrings, options.validateEntrySizes, options.strictFileNames));\n        });\n      });\n      return;\n    }\n    callback(new Error(\"end of central directory record signature not found\"));\n  });\n}\n\nutil.inherits(ZipFile, EventEmitter);\nfunction ZipFile(reader, centralDirectoryOffset, fileSize, entryCount, comment, autoClose, lazyEntries, decodeStrings, validateEntrySizes, strictFileNames) {\n  var self = this;\n  EventEmitter.call(self);\n  self.reader = reader;\n  // forward close events\n  self.reader.on(\"error\", function(err) {\n    // error closing the fd\n    emitError(self, err);\n  });\n  self.reader.once(\"close\", function() {\n    self.emit(\"close\");\n  });\n  self.readEntryCursor = centralDirectoryOffset;\n  self.fileSize = fileSize;\n  self.entryCount = entryCount;\n  self.comment = comment;\n  self.entriesRead = 0;\n  self.autoClose = !!autoClose;\n  self.lazyEntries = !!lazyEntries;\n  self.decodeStrings = !!decodeStrings;\n  self.validateEntrySizes = !!validateEntrySizes;\n  self.strictFileNames = !!strictFileNames;\n  self.isOpen = true;\n  self.emittedError = false;\n\n  if (!self.lazyEntries) self._readEntry();\n}\nZipFile.prototype.close = function() {\n  if (!this.isOpen) return;\n  this.isOpen = false;\n  this.reader.unref();\n};\n\nfunction emitErrorAndAutoClose(self, err) {\n  if (self.autoClose) self.close();\n  emitError(self, err);\n}\nfunction emitError(self, err) {\n  if (self.emittedError) return;\n  self.emittedError = true;\n  self.emit(\"error\", err);\n}\n\nZipFile.prototype.readEntry = function() {\n  if (!this.lazyEntries) throw new Error(\"readEntry() called without lazyEntries:true\");\n  this._readEntry();\n};\nZipFile.prototype._readEntry = function() {\n  var self = this;\n  if (self.entryCount === self.entriesRead) {\n    // done with metadata\n    setImmediate(function() {\n      if (self.autoClose) self.close();\n      if (self.emittedError) return;\n      self.emit(\"end\");\n    });\n    return;\n  }\n  if (self.emittedError) return;\n  var buffer = newBuffer(46);\n  readAndAssertNoEof(self.reader, buffer, 0, buffer.length, self.readEntryCursor, function(err) {\n    if (err) return emitErrorAndAutoClose(self, err);\n    if (self.emittedError) return;\n    var entry = new Entry();\n    // 0 - Central directory file header signature\n    var signature = buffer.readUInt32LE(0);\n    if (signature !== 0x02014b50) return emitErrorAndAutoClose(self, new Error(\"invalid central directory file header signature: 0x\" + signature.toString(16)));\n    // 4 - Version made by\n    entry.versionMadeBy = buffer.readUInt16LE(4);\n    // 6 - Version needed to extract (minimum)\n    entry.versionNeededToExtract = buffer.readUInt16LE(6);\n    // 8 - General purpose bit flag\n    entry.generalPurposeBitFlag = buffer.readUInt16LE(8);\n    // 10 - Compression method\n    entry.compressionMethod = buffer.readUInt16LE(10);\n    // 12 - File last modification time\n    entry.lastModFileTime = buffer.readUInt16LE(12);\n    // 14 - File last modification date\n    entry.lastModFileDate = buffer.readUInt16LE(14);\n    // 16 - CRC-32\n    entry.crc32 = buffer.readUInt32LE(16);\n    // 20 - Compressed size\n    entry.compressedSize = buffer.readUInt32LE(20);\n    // 24 - Uncompressed size\n    entry.uncompressedSize = buffer.readUInt32LE(24);\n    // 28 - File name length (n)\n    entry.fileNameLength = buffer.readUInt16LE(28);\n    // 30 - Extra field length (m)\n    entry.extraFieldLength = buffer.readUInt16LE(30);\n    // 32 - File comment length (k)\n    entry.fileCommentLength = buffer.readUInt16LE(32);\n    // 34 - Disk number where file starts\n    // 36 - Internal file attributes\n    entry.internalFileAttributes = buffer.readUInt16LE(36);\n    // 38 - External file attributes\n    entry.externalFileAttributes = buffer.readUInt32LE(38);\n    // 42 - Relative offset of local file header\n    entry.relativeOffsetOfLocalHeader = buffer.readUInt32LE(42);\n\n    if (entry.generalPurposeBitFlag & 0x40) return emitErrorAndAutoClose(self, new Error(\"strong encryption is not supported\"));\n\n    self.readEntryCursor += 46;\n\n    buffer = newBuffer(entry.fileNameLength + entry.extraFieldLength + entry.fileCommentLength);\n    readAndAssertNoEof(self.reader, buffer, 0, buffer.length, self.readEntryCursor, function(err) {\n      if (err) return emitErrorAndAutoClose(self, err);\n      if (self.emittedError) return;\n      // 46 - File name\n      var isUtf8 = (entry.generalPurposeBitFlag & 0x800) !== 0;\n      entry.fileName = self.decodeStrings ? decodeBuffer(buffer, 0, entry.fileNameLength, isUtf8)\n                                          : buffer.slice(0, entry.fileNameLength);\n\n      // 46+n - Extra field\n      var fileCommentStart = entry.fileNameLength + entry.extraFieldLength;\n      var extraFieldBuffer = buffer.slice(entry.fileNameLength, fileCommentStart);\n      entry.extraFields = [];\n      var i = 0;\n      while (i < extraFieldBuffer.length - 3) {\n        var headerId = extraFieldBuffer.readUInt16LE(i + 0);\n        var dataSize = extraFieldBuffer.readUInt16LE(i + 2);\n        var dataStart = i + 4;\n        var dataEnd = dataStart + dataSize;\n        if (dataEnd > extraFieldBuffer.length) return emitErrorAndAutoClose(self, new Error(\"extra field length exceeds extra field buffer size\"));\n        var dataBuffer = newBuffer(dataSize);\n        extraFieldBuffer.copy(dataBuffer, 0, dataStart, dataEnd);\n        entry.extraFields.push({\n          id: headerId,\n          data: dataBuffer,\n        });\n        i = dataEnd;\n      }\n\n      // 46+n+m - File comment\n      entry.fileComment = self.decodeStrings ? decodeBuffer(buffer, fileCommentStart, fileCommentStart + entry.fileCommentLength, isUtf8)\n                                             : buffer.slice(fileCommentStart, fileCommentStart + entry.fileCommentLength);\n      // compatibility hack for https://github.com/thejoshwolfe/yauzl/issues/47\n      entry.comment = entry.fileComment;\n\n      self.readEntryCursor += buffer.length;\n      self.entriesRead += 1;\n\n      if (entry.uncompressedSize            === 0xffffffff ||\n          entry.compressedSize              === 0xffffffff ||\n          entry.relativeOffsetOfLocalHeader === 0xffffffff) {\n        // ZIP64 format\n        // find the Zip64 Extended Information Extra Field\n        var zip64EiefBuffer = null;\n        for (var i = 0; i < entry.extraFields.length; i++) {\n          var extraField = entry.extraFields[i];\n          if (extraField.id === 0x0001) {\n            zip64EiefBuffer = extraField.data;\n            break;\n          }\n        }\n        if (zip64EiefBuffer == null) {\n          return emitErrorAndAutoClose(self, new Error(\"expected zip64 extended information extra field\"));\n        }\n        var index = 0;\n        // 0 - Original Size          8 bytes\n        if (entry.uncompressedSize === 0xffffffff) {\n          if (index + 8 > zip64EiefBuffer.length) {\n            return emitErrorAndAutoClose(self, new Error(\"zip64 extended information extra field does not include uncompressed size\"));\n          }\n          entry.uncompressedSize = readUInt64LE(zip64EiefBuffer, index);\n          index += 8;\n        }\n        // 8 - Compressed Size        8 bytes\n        if (entry.compressedSize === 0xffffffff) {\n          if (index + 8 > zip64EiefBuffer.length) {\n            return emitErrorAndAutoClose(self, new Error(\"zip64 extended information extra field does not include compressed size\"));\n          }\n          entry.compressedSize = readUInt64LE(zip64EiefBuffer, index);\n          index += 8;\n        }\n        // 16 - Relative Header Offset 8 bytes\n        if (entry.relativeOffsetOfLocalHeader === 0xffffffff) {\n          if (index + 8 > zip64EiefBuffer.length) {\n            return emitErrorAndAutoClose(self, new Error(\"zip64 extended information extra field does not include relative header offset\"));\n          }\n          entry.relativeOffsetOfLocalHeader = readUInt64LE(zip64EiefBuffer, index);\n          index += 8;\n        }\n        // 24 - Disk Start Number      4 bytes\n      }\n\n      // check for Info-ZIP Unicode Path Extra Field (0x7075)\n      // see https://github.com/thejoshwolfe/yauzl/issues/33\n      if (self.decodeStrings) {\n        for (var i = 0; i < entry.extraFields.length; i++) {\n          var extraField = entry.extraFields[i];\n          if (extraField.id === 0x7075) {\n            if (extraField.data.length < 6) {\n              // too short to be meaningful\n              continue;\n            }\n            // Version       1 byte      version of this extra field, currently 1\n            if (extraField.data.readUInt8(0) !== 1) {\n              // > Changes may not be backward compatible so this extra\n              // > field should not be used if the version is not recognized.\n              continue;\n            }\n            // NameCRC32     4 bytes     File Name Field CRC32 Checksum\n            var oldNameCrc32 = extraField.data.readUInt32LE(1);\n            if (crc32.unsigned(buffer.slice(0, entry.fileNameLength)) !== oldNameCrc32) {\n              // > If the CRC check fails, this UTF-8 Path Extra Field should be\n              // > ignored and the File Name field in the header should be used instead.\n              continue;\n            }\n            // UnicodeName   Variable    UTF-8 version of the entry File Name\n            entry.fileName = decodeBuffer(extraField.data, 5, extraField.data.length, true);\n            break;\n          }\n        }\n      }\n\n      // validate file size\n      if (self.validateEntrySizes && entry.compressionMethod === 0) {\n        var expectedCompressedSize = entry.uncompressedSize;\n        if (entry.isEncrypted()) {\n          // traditional encryption prefixes the file data with a header\n          expectedCompressedSize += 12;\n        }\n        if (entry.compressedSize !== expectedCompressedSize) {\n          var msg = \"compressed/uncompressed size mismatch for stored file: \" + entry.compressedSize + \" != \" + entry.uncompressedSize;\n          return emitErrorAndAutoClose(self, new Error(msg));\n        }\n      }\n\n      if (self.decodeStrings) {\n        if (!self.strictFileNames) {\n          // allow backslash\n          entry.fileName = entry.fileName.replace(/\\\\/g, \"/\");\n        }\n        var errorMessage = validateFileName(entry.fileName, self.validateFileNameOptions);\n        if (errorMessage != null) return emitErrorAndAutoClose(self, new Error(errorMessage));\n      }\n      self.emit(\"entry\", entry);\n\n      if (!self.lazyEntries) self._readEntry();\n    });\n  });\n};\n\nZipFile.prototype.openReadStream = function(entry, options, callback) {\n  var self = this;\n  // parameter validation\n  var relativeStart = 0;\n  var relativeEnd = entry.compressedSize;\n  if (callback == null) {\n    callback = options;\n    options = {};\n  } else {\n    // validate options that the caller has no excuse to get wrong\n    if (options.decrypt != null) {\n      if (!entry.isEncrypted()) {\n        throw new Error(\"options.decrypt can only be specified for encrypted entries\");\n      }\n      if (options.decrypt !== false) throw new Error(\"invalid options.decrypt value: \" + options.decrypt);\n      if (entry.isCompressed()) {\n        if (options.decompress !== false) throw new Error(\"entry is encrypted and compressed, and options.decompress !== false\");\n      }\n    }\n    if (options.decompress != null) {\n      if (!entry.isCompressed()) {\n        throw new Error(\"options.decompress can only be specified for compressed entries\");\n      }\n      if (!(options.decompress === false || options.decompress === true)) {\n        throw new Error(\"invalid options.decompress value: \" + options.decompress);\n      }\n    }\n    if (options.start != null || options.end != null) {\n      if (entry.isCompressed() && options.decompress !== false) {\n        throw new Error(\"start/end range not allowed for compressed entry without options.decompress === false\");\n      }\n      if (entry.isEncrypted() && options.decrypt !== false) {\n        throw new Error(\"start/end range not allowed for encrypted entry without options.decrypt === false\");\n      }\n    }\n    if (options.start != null) {\n      relativeStart = options.start;\n      if (relativeStart < 0) throw new Error(\"options.start < 0\");\n      if (relativeStart > entry.compressedSize) throw new Error(\"options.start > entry.compressedSize\");\n    }\n    if (options.end != null) {\n      relativeEnd = options.end;\n      if (relativeEnd < 0) throw new Error(\"options.end < 0\");\n      if (relativeEnd > entry.compressedSize) throw new Error(\"options.end > entry.compressedSize\");\n      if (relativeEnd < relativeStart) throw new Error(\"options.end < options.start\");\n    }\n  }\n  // any further errors can either be caused by the zipfile,\n  // or were introduced in a minor version of yauzl,\n  // so should be passed to the client rather than thrown.\n  if (!self.isOpen) return callback(new Error(\"closed\"));\n  if (entry.isEncrypted()) {\n    if (options.decrypt !== false) return callback(new Error(\"entry is encrypted, and options.decrypt !== false\"));\n  }\n  // make sure we don't lose the fd before we open the actual read stream\n  self.reader.ref();\n  var buffer = newBuffer(30);\n  readAndAssertNoEof(self.reader, buffer, 0, buffer.length, entry.relativeOffsetOfLocalHeader, function(err) {\n    try {\n      if (err) return callback(err);\n      // 0 - Local file header signature = 0x04034b50\n      var signature = buffer.readUInt32LE(0);\n      if (signature !== 0x04034b50) {\n        return callback(new Error(\"invalid local file header signature: 0x\" + signature.toString(16)));\n      }\n      // all this should be redundant\n      // 4 - Version needed to extract (minimum)\n      // 6 - General purpose bit flag\n      // 8 - Compression method\n      // 10 - File last modification time\n      // 12 - File last modification date\n      // 14 - CRC-32\n      // 18 - Compressed size\n      // 22 - Uncompressed size\n      // 26 - File name length (n)\n      var fileNameLength = buffer.readUInt16LE(26);\n      // 28 - Extra field length (m)\n      var extraFieldLength = buffer.readUInt16LE(28);\n      // 30 - File name\n      // 30+n - Extra field\n      var localFileHeaderEnd = entry.relativeOffsetOfLocalHeader + buffer.length + fileNameLength + extraFieldLength;\n      var decompress;\n      if (entry.compressionMethod === 0) {\n        // 0 - The file is stored (no compression)\n        decompress = false;\n      } else if (entry.compressionMethod === 8) {\n        // 8 - The file is Deflated\n        decompress = options.decompress != null ? options.decompress : true;\n      } else {\n        return callback(new Error(\"unsupported compression method: \" + entry.compressionMethod));\n      }\n      var fileDataStart = localFileHeaderEnd;\n      var fileDataEnd = fileDataStart + entry.compressedSize;\n      if (entry.compressedSize !== 0) {\n        // bounds check now, because the read streams will probably not complain loud enough.\n        // since we're dealing with an unsigned offset plus an unsigned size,\n        // we only have 1 thing to check for.\n        if (fileDataEnd > self.fileSize) {\n          return callback(new Error(\"file data overflows file bounds: \" +\n              fileDataStart + \" + \" + entry.compressedSize + \" > \" + self.fileSize));\n        }\n      }\n      var readStream = self.reader.createReadStream({\n        start: fileDataStart + relativeStart,\n        end: fileDataStart + relativeEnd,\n      });\n      var endpointStream = readStream;\n      if (decompress) {\n        var destroyed = false;\n        var inflateFilter = zlib.createInflateRaw();\n        readStream.on(\"error\", function(err) {\n          // setImmediate here because errors can be emitted during the first call to pipe()\n          setImmediate(function() {\n            if (!destroyed) inflateFilter.emit(\"error\", err);\n          });\n        });\n        readStream.pipe(inflateFilter);\n\n        if (self.validateEntrySizes) {\n          endpointStream = new AssertByteCountStream(entry.uncompressedSize);\n          inflateFilter.on(\"error\", function(err) {\n            // forward zlib errors to the client-visible stream\n            setImmediate(function() {\n              if (!destroyed) endpointStream.emit(\"error\", err);\n            });\n          });\n          inflateFilter.pipe(endpointStream);\n        } else {\n          // the zlib filter is the client-visible stream\n          endpointStream = inflateFilter;\n        }\n        // this is part of yauzl's API, so implement this function on the client-visible stream\n        endpointStream.destroy = function() {\n          destroyed = true;\n          if (inflateFilter !== endpointStream) inflateFilter.unpipe(endpointStream);\n          readStream.unpipe(inflateFilter);\n          // TODO: the inflateFilter may cause a memory leak. see Issue #27.\n          readStream.destroy();\n        };\n      }\n      callback(null, endpointStream);\n    } finally {\n      self.reader.unref();\n    }\n  });\n};\n\nfunction Entry() {\n}\nEntry.prototype.getLastModDate = function() {\n  return dosDateTimeToDate(this.lastModFileDate, this.lastModFileTime);\n};\nEntry.prototype.isEncrypted = function() {\n  return (this.generalPurposeBitFlag & 0x1) !== 0;\n};\nEntry.prototype.isCompressed = function() {\n  return this.compressionMethod === 8;\n};\n\nfunction dosDateTimeToDate(date, time) {\n  var day = date & 0x1f; // 1-31\n  var month = (date >> 5 & 0xf) - 1; // 1-12, 0-11\n  var year = (date >> 9 & 0x7f) + 1980; // 0-128, 1980-2108\n\n  var millisecond = 0;\n  var second = (time & 0x1f) * 2; // 0-29, 0-58 (even numbers)\n  var minute = time >> 5 & 0x3f; // 0-59\n  var hour = time >> 11 & 0x1f; // 0-23\n\n  return new Date(year, month, day, hour, minute, second, millisecond);\n}\n\nfunction validateFileName(fileName) {\n  if (fileName.indexOf(\"\\\\\") !== -1) {\n    return \"invalid characters in fileName: \" + fileName;\n  }\n  if (/^[a-zA-Z]:/.test(fileName) || /^\\//.test(fileName)) {\n    return \"absolute path: \" + fileName;\n  }\n  if (fileName.split(\"/\").indexOf(\"..\") !== -1) {\n    return \"invalid relative path: \" + fileName;\n  }\n  // all good\n  return null;\n}\n\nfunction readAndAssertNoEof(reader, buffer, offset, length, position, callback) {\n  if (length === 0) {\n    // fs.read will throw an out-of-bounds error if you try to read 0 bytes from a 0 byte file\n    return setImmediate(function() { callback(null, newBuffer(0)); });\n  }\n  reader.read(buffer, offset, length, position, function(err, bytesRead) {\n    if (err) return callback(err);\n    if (bytesRead < length) {\n      return callback(new Error(\"unexpected EOF\"));\n    }\n    callback();\n  });\n}\n\nutil.inherits(AssertByteCountStream, Transform);\nfunction AssertByteCountStream(byteCount) {\n  Transform.call(this);\n  this.actualByteCount = 0;\n  this.expectedByteCount = byteCount;\n}\nAssertByteCountStream.prototype._transform = function(chunk, encoding, cb) {\n  this.actualByteCount += chunk.length;\n  if (this.actualByteCount > this.expectedByteCount) {\n    var msg = \"too many bytes in the stream. expected \" + this.expectedByteCount + \". got at least \" + this.actualByteCount;\n    return cb(new Error(msg));\n  }\n  cb(null, chunk);\n};\nAssertByteCountStream.prototype._flush = function(cb) {\n  if (this.actualByteCount < this.expectedByteCount) {\n    var msg = \"not enough bytes in the stream. expected \" + this.expectedByteCount + \". got only \" + this.actualByteCount;\n    return cb(new Error(msg));\n  }\n  cb();\n};\n\nutil.inherits(RandomAccessReader, EventEmitter);\nfunction RandomAccessReader() {\n  EventEmitter.call(this);\n  this.refCount = 0;\n}\nRandomAccessReader.prototype.ref = function() {\n  this.refCount += 1;\n};\nRandomAccessReader.prototype.unref = function() {\n  var self = this;\n  self.refCount -= 1;\n\n  if (self.refCount > 0) return;\n  if (self.refCount < 0) throw new Error(\"invalid unref\");\n\n  self.close(onCloseDone);\n\n  function onCloseDone(err) {\n    if (err) return self.emit('error', err);\n    self.emit('close');\n  }\n};\nRandomAccessReader.prototype.createReadStream = function(options) {\n  var start = options.start;\n  var end = options.end;\n  if (start === end) {\n    var emptyStream = new PassThrough();\n    setImmediate(function() {\n      emptyStream.end();\n    });\n    return emptyStream;\n  }\n  var stream = this._readStreamForRange(start, end);\n\n  var destroyed = false;\n  var refUnrefFilter = new RefUnrefFilter(this);\n  stream.on(\"error\", function(err) {\n    setImmediate(function() {\n      if (!destroyed) refUnrefFilter.emit(\"error\", err);\n    });\n  });\n  refUnrefFilter.destroy = function() {\n    stream.unpipe(refUnrefFilter);\n    refUnrefFilter.unref();\n    stream.destroy();\n  };\n\n  var byteCounter = new AssertByteCountStream(end - start);\n  refUnrefFilter.on(\"error\", function(err) {\n    setImmediate(function() {\n      if (!destroyed) byteCounter.emit(\"error\", err);\n    });\n  });\n  byteCounter.destroy = function() {\n    destroyed = true;\n    refUnrefFilter.unpipe(byteCounter);\n    refUnrefFilter.destroy();\n  };\n\n  return stream.pipe(refUnrefFilter).pipe(byteCounter);\n};\nRandomAccessReader.prototype._readStreamForRange = function(start, end) {\n  throw new Error(\"not implemented\");\n};\nRandomAccessReader.prototype.read = function(buffer, offset, length, position, callback) {\n  var readStream = this.createReadStream({start: position, end: position + length});\n  var writeStream = new Writable();\n  var written = 0;\n  writeStream._write = function(chunk, encoding, cb) {\n    chunk.copy(buffer, offset + written, 0, chunk.length);\n    written += chunk.length;\n    cb();\n  };\n  writeStream.on(\"finish\", callback);\n  readStream.on(\"error\", function(error) {\n    callback(error);\n  });\n  readStream.pipe(writeStream);\n};\nRandomAccessReader.prototype.close = function(callback) {\n  setImmediate(callback);\n};\n\nutil.inherits(RefUnrefFilter, PassThrough);\nfunction RefUnrefFilter(context) {\n  PassThrough.call(this);\n  this.context = context;\n  this.context.ref();\n  this.unreffedYet = false;\n}\nRefUnrefFilter.prototype._flush = function(cb) {\n  this.unref();\n  cb();\n};\nRefUnrefFilter.prototype.unref = function(cb) {\n  if (this.unreffedYet) return;\n  this.unreffedYet = true;\n  this.context.unref();\n};\n\nvar cp437 = '\\u0000☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ';\nfunction decodeBuffer(buffer, start, end, isUtf8) {\n  if (isUtf8) {\n    return buffer.toString(\"utf8\", start, end);\n  } else {\n    var result = \"\";\n    for (var i = start; i < end; i++) {\n      result += cp437[buffer[i]];\n    }\n    return result;\n  }\n}\n\nfunction readUInt64LE(buffer, offset) {\n  // there is no native function for this, because we can't actually store 64-bit integers precisely.\n  // after 53 bits, JavaScript's Number type (IEEE 754 double) can't store individual integers anymore.\n  // but since 53 bits is a whole lot more than 32 bits, we do our best anyway.\n  var lower32 = buffer.readUInt32LE(offset);\n  var upper32 = buffer.readUInt32LE(offset + 4);\n  // we can't use bitshifting here, because JavaScript bitshifting only works on 32-bit integers.\n  return upper32 * 0x100000000 + lower32;\n  // as long as we're bounds checking the result of this function against the total file size,\n  // we'll catch any overflow errors, because we already made sure the total file size was within reason.\n}\n\n// Node 10 deprecated new Buffer().\nvar newBuffer;\nif (typeof Buffer.allocUnsafe === \"function\") {\n  newBuffer = function(len) {\n    return Buffer.allocUnsafe(len);\n  };\n} else {\n  newBuffer = function(len) {\n    return new Buffer(len);\n  };\n}\n\nfunction defaultCallback(err) {\n  if (err) throw err;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/yauzl/index.js\n"));

/***/ }),

/***/ "?7ea0":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* (ignored) */

/***/ }),

/***/ "?e234":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* (ignored) */

/***/ }),

/***/ "?82df":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* (ignored) */

/***/ }),

/***/ "?3147":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* (ignored) */

/***/ }),

/***/ "?5f3d":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* (ignored) */

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["pages/_app","main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CMuhmmad%20Umer%20Farooq%5CDesktop%5CIDML%5Cidml-parser%5Cpages%5Cview%5C%5BuploadId%5D.js&page=%2Fview%2F%5BuploadId%5D!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);