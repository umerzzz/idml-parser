"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/view/[uploadId]",{

/***/ "./lib/utils/ColorUtils.js":
/*!*********************************!*\
  !*** ./lib/utils/ColorUtils.js ***!
  \*********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * ColorUtils.js - Comprehensive color conversion and manipulation utilities\n * Handles CMYK, RGB, HEX, and other color format conversions for IDML processing\n */ \nclass ColorUtils {\n    /**\n   * Convert CMYK color values to RGB\n   * @param {number} c - Cyan (0-100)\n   * @param {number} m - Magenta (0-100)\n   * @param {number} y - Yellow (0-100)\n   * @param {number} k - Black/Key (0-100)\n   * @returns {object} RGB object with r, g, b values (0-255)\n   */ static cmykToRgb(c, m, y, k) {\n        // Normalize CMYK values to 0-1 range\n        const cNorm = c / 100;\n        const mNorm = m / 100;\n        const yNorm = y / 100;\n        const kNorm = k / 100;\n        // Convert to RGB using standard formula\n        const r = Math.round(255 * (1 - cNorm) * (1 - kNorm));\n        const g = Math.round(255 * (1 - mNorm) * (1 - kNorm));\n        const b = Math.round(255 * (1 - yNorm) * (1 - kNorm));\n        return {\n            r,\n            g,\n            b\n        };\n    }\n    /**\n   * Convert CMYK to RGB CSS string\n   * @param {number} c - Cyan (0-100)\n   * @param {number} m - Magenta (0-100)\n   * @param {number} y - Yellow (0-100)\n   * @param {number} k - Black/Key (0-100)\n   * @returns {string} CSS rgb() string\n   */ static cmykToRgbString(c, m, y, k) {\n        const { r, g, b } = this.cmykToRgb(c, m, y, k);\n        return \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n    }\n    /**\n   * Convert RGB to HEX\n   * @param {number} r - Red (0-255)\n   * @param {number} g - Green (0-255)\n   * @param {number} b - Blue (0-255)\n   * @returns {string} HEX color string\n   */ static rgbToHex(r, g, b) {\n        const toHex = (component)=>{\n            const hex = component.toString(16);\n            return hex.length === 1 ? \"0\" + hex : hex;\n        };\n        return \"#\".concat(toHex(r)).concat(toHex(g)).concat(toHex(b));\n    }\n    /**\n   * Convert CMYK to HEX\n   * @param {number} c - Cyan (0-100)\n   * @param {number} m - Magenta (0-100)\n   * @param {number} y - Yellow (0-100)\n   * @param {number} k - Black/Key (0-100)\n   * @returns {string} HEX color string\n   */ static cmykToHex(c, m, y, k) {\n        const { r, g, b } = this.cmykToRgb(c, m, y, k);\n        return this.rgbToHex(r, g, b);\n    }\n    /**\n   * Parse CMYK values from IDML color reference string\n   * @param {string} colorRef - IDML color reference (e.g., \"Color/C=1 M=18 Y=16 K=0\")\n   * @returns {object|null} Object with c, m, y, k values or null if not parseable\n   */ static parseCmykFromColorRef(colorRef) {\n        if (!colorRef || typeof colorRef !== \"string\") {\n            return null;\n        }\n        // Match CMYK pattern in IDML color references\n        const cmykMatch = colorRef.match(/Color\\/C=([\\d.]+)\\s*M=([\\d.]+)\\s*Y=([\\d.]+)\\s*K=([\\d.]+)/);\n        if (cmykMatch) {\n            const [, c, m, y, k] = cmykMatch.map((val)=>parseFloat(val));\n            return {\n                c,\n                m,\n                y,\n                k\n            };\n        }\n        return null;\n    }\n    /**\n   * Convert IDML color reference to RGB CSS string\n   * @param {string} colorRef - IDML color reference\n   * @returns {string} CSS color string (rgb, hex, or named color)\n   */ static convertIdmlColorToRgb(colorRefOrObj) {\n        if (!colorRefOrObj || colorRefOrObj === \"Color/None\") {\n            return \"transparent\";\n        }\n        // ENHANCED: Handle color objects with intelligent RGB/CMYK prioritization\n        if (typeof colorRefOrObj === \"object\") {\n            console.log(\"\\uD83C\\uDFA8 Converting color object:\", {\n                self: colorRefOrObj.self,\n                source: colorRefOrObj.colorSource,\n                hasRGB: colorRefOrObj.hasDirectRGB,\n                hasCMYK: colorRefOrObj.hasDirectCMYK,\n                space: colorRefOrObj.space\n            });\n            // PRIORITY 1: Use direct RGB values (no conversion needed)\n            if (colorRefOrObj.hasDirectRGB && colorRefOrObj.red !== undefined && colorRefOrObj.red > 0 || colorRefOrObj.green !== undefined && colorRefOrObj.green > 0 || colorRefOrObj.blue !== undefined && colorRefOrObj.blue > 0 || colorRefOrObj.red === 0 && colorRefOrObj.green === 0 && colorRefOrObj.blue === 0) {\n                const rgbString = \"rgb(\".concat(colorRefOrObj.red || 0, \", \").concat(colorRefOrObj.green || 0, \", \").concat(colorRefOrObj.blue || 0, \")\");\n                console.log(\"   ✅ Using direct RGB values: \".concat(rgbString, \" (source: \").concat(colorRefOrObj.colorSource, \")\"));\n                return rgbString;\n            }\n            // PRIORITY 2: Convert CMYK values to RGB (when RGB not available)\n            if (colorRefOrObj.hasDirectCMYK && (colorRefOrObj.cyan !== undefined || colorRefOrObj.magenta !== undefined || colorRefOrObj.yellow !== undefined || colorRefOrObj.black !== undefined)) {\n                const { r, g, b } = this.cmykToRgb(colorRefOrObj.cyan || 0, colorRefOrObj.magenta || 0, colorRefOrObj.yellow || 0, colorRefOrObj.black || 0);\n                const rgbString = \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n                console.log(\"   \\uD83D\\uDD04 Converted CMYK to RGB: C:\".concat(colorRefOrObj.cyan, \" M:\").concat(colorRefOrObj.magenta, \" Y:\").concat(colorRefOrObj.yellow, \" K:\").concat(colorRefOrObj.black, \" → \").concat(rgbString, \" (source: \").concat(colorRefOrObj.colorSource, \")\"));\n                return rgbString;\n            }\n            // FALLBACK: Legacy object handling (backward compatibility)\n            // Check for legacy red/green/blue properties\n            if (colorRefOrObj.red !== undefined && colorRefOrObj.green !== undefined && colorRefOrObj.blue !== undefined) {\n                const rgbString = \"rgb(\".concat(colorRefOrObj.red, \", \").concat(colorRefOrObj.green, \", \").concat(colorRefOrObj.blue, \")\");\n                console.log(\"   ✅ Using legacy RGB properties: \".concat(rgbString));\n                return rgbString;\n            }\n            // Check for legacy cyan/magenta/yellow/black properties\n            if (colorRefOrObj.cyan !== undefined && colorRefOrObj.magenta !== undefined && colorRefOrObj.yellow !== undefined && colorRefOrObj.black !== undefined) {\n                const { r, g, b } = this.cmykToRgb(colorRefOrObj.cyan, colorRefOrObj.magenta, colorRefOrObj.yellow, colorRefOrObj.black);\n                const rgbString = \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n                console.log(\"   \\uD83D\\uDD04 Converted legacy CMYK to RGB: \".concat(rgbString));\n                return rgbString;\n            }\n        }\n        // Handle string-based color references (color names like \"Color/Main\", \"Color/Black\", etc.)\n        if (typeof colorRefOrObj === \"string\") {\n            console.log('\\uD83C\\uDFA8 Processing string color reference: \"'.concat(colorRefOrObj, '\"'));\n            // Try to parse CMYK pattern from string\n            const cmyk = this.parseCmykFromColorRef(colorRefOrObj);\n            if (cmyk) {\n                const rgbString = this.cmykToRgbString(cmyk.c, cmyk.m, cmyk.y, cmyk.k);\n                console.log(\"   \\uD83D\\uDD04 Parsed and converted CMYK string: \".concat(colorRefOrObj, \" → \").concat(rgbString));\n                return rgbString;\n            }\n            // Check predefined named colors\n            const namedColors = {\n                \"Color/Black\": \"rgb(0, 0, 0)\",\n                \"Color/White\": \"rgb(255, 255, 255)\",\n                \"Color/Red\": \"rgb(255, 0, 0)\",\n                \"Color/Green\": \"rgb(0, 255, 0)\",\n                \"Color/Blue\": \"rgb(0, 0, 255)\",\n                \"Color/Cyan\": \"rgb(0, 255, 255)\",\n                \"Color/Magenta\": \"rgb(255, 0, 255)\",\n                \"Color/Yellow\": \"rgb(255, 255, 0)\",\n                \"Color/Paper\": \"rgb(255, 255, 255)\"\n            };\n            if (namedColors[colorRefOrObj]) {\n                console.log(\"   ✅ Using predefined named color: \".concat(colorRefOrObj, \" → \").concat(namedColors[colorRefOrObj]));\n                return namedColors[colorRefOrObj];\n            }\n        }\n        // Ultimate fallback\n        console.log(\"   ⚠️  No valid color data found, using default gray: \".concat(JSON.stringify(colorRefOrObj)));\n        return \"rgb(200, 200, 200)\";\n    }\n    /**\n   * Determine if a CMYK color is suitable for use as a background\n   * @param {number} c - Cyan (0-100)\n   * @param {number} m - Magenta (0-100)\n   * @param {number} y - Yellow (0-100)\n   * @param {number} k - Black/Key (0-100)\n   * @returns {object} Analysis result with isLightBackground boolean and reasoning\n   */ static analyzeCmykForBackground(c, m, y, k) {\n        const maxCMY = Math.max(c, m, y);\n        const avgCMY = (c + m + y) / 3;\n        const analysis = {\n            c,\n            m,\n            y,\n            k,\n            maxCMY,\n            avgCMY,\n            isLightBackground: false,\n            category: \"unknown\",\n            reasoning: \"\"\n        };\n        // Very light colors: low K and low CMY values\n        if (k <= 20 && maxCMY <= 30 && avgCMY <= 20) {\n            analysis.isLightBackground = true;\n            analysis.category = \"very_light\";\n            analysis.reasoning = \"Very light color suitable for background\";\n            return analysis;\n        }\n        // Light tinted colors: very low K, slightly higher CMY (like light pink, light blue, etc.)\n        if (k <= 10 && maxCMY <= 50 && avgCMY <= 25) {\n            analysis.isLightBackground = true;\n            analysis.category = \"light_tinted\";\n            analysis.reasoning = \"Light tinted color suitable for background\";\n            return analysis;\n        }\n        // Light gray: balanced CMY, moderate K\n        if (k >= 5 && k <= 60 && maxCMY <= 15 && Math.abs(c - m) <= 5 && Math.abs(m - y) <= 5) {\n            analysis.isLightBackground = true;\n            analysis.category = \"light_gray\";\n            analysis.reasoning = \"Light gray color suitable for background\";\n            return analysis;\n        }\n        // Not suitable for background\n        analysis.reasoning = \"Too dark or saturated for background use\";\n        return analysis;\n    }\n    /**\n   * Analyze IDML color reference for background suitability\n   * @param {string} colorRef - IDML color reference\n   * @returns {object|null} Analysis result or null if not CMYK\n   */ static analyzeIdmlColorForBackground(colorRef) {\n        // Handle Paper color specially\n        if (colorRef === \"Color/Paper\" || colorRef.includes(\"Paper\")) {\n            return {\n                isLightBackground: true,\n                category: \"paper\",\n                reasoning: \"InDesign Paper color - ideal for background\",\n                colorRef\n            };\n        }\n        const cmyk = this.parseCmykFromColorRef(colorRef);\n        if (!cmyk) {\n            return null;\n        }\n        const analysis = this.analyzeCmykForBackground(cmyk.c, cmyk.m, cmyk.y, cmyk.k);\n        analysis.colorRef = colorRef;\n        return analysis;\n    }\n    /**\n   * Get RGB brightness value (0-255, higher = brighter)\n   * @param {number} r - Red (0-255)\n   * @param {number} g - Green (0-255)\n   * @param {number} b - Blue (0-255)\n   * @returns {number} Brightness value\n   */ static getRgbBrightness(r, g, b) {\n        // Use relative luminance formula\n        return 0.299 * r + 0.587 * g + 0.114 * b;\n    }\n    /**\n   * Get brightness from CMYK values\n   * @param {number} c - Cyan (0-100)\n   * @param {number} m - Magenta (0-100)\n   * @param {number} y - Yellow (0-100)\n   * @param {number} k - Black/Key (0-100)\n   * @returns {number} Brightness value (0-255)\n   */ static getCmykBrightness(c, m, y, k) {\n        const { r, g, b } = this.cmykToRgb(c, m, y, k);\n        return this.getRgbBrightness(r, g, b);\n    }\n    /**\n   * Sort colors by lightness (lightest first)\n   * @param {Array} colorRefs - Array of IDML color references\n   * @returns {Array} Sorted array with lightest colors first\n   */ static sortColorsByLightness(colorRefs) {\n        return colorRefs.sort((a, b)=>{\n            // Analyze both colors for background suitability\n            const analysisA = this.analyzeIdmlColorForBackground(a);\n            const analysisB = this.analyzeIdmlColorForBackground(b);\n            // Prioritize actual CMYK colors over Paper color for visual interest\n            const aIsPaper = a.includes(\"Paper\");\n            const bIsPaper = b.includes(\"Paper\");\n            const aIsCmyk = !aIsPaper && analysisA && analysisA.c !== undefined;\n            const bIsCmyk = !bIsPaper && analysisB && analysisB.c !== undefined;\n            // If one is CMYK and other is Paper, prefer CMYK for visual interest\n            if (aIsCmyk && bIsPaper) return -1;\n            if (bIsCmyk && aIsPaper) return 1;\n            // If both are CMYK, sort by lightness (lower K value = lighter)\n            if (aIsCmyk && bIsCmyk) {\n                const cmykA = this.parseCmykFromColorRef(a);\n                const cmykB = this.parseCmykFromColorRef(b);\n                if (cmykA && cmykB) {\n                    // First compare by category priority (very_light > light_gray, etc.)\n                    const categoryPriority = {\n                        very_light: 1,\n                        light_gray: 2,\n                        paper: 3,\n                        unknown: 4\n                    };\n                    const priorityA = categoryPriority[analysisA.category] || 4;\n                    const priorityB = categoryPriority[analysisB.category] || 4;\n                    if (priorityA !== priorityB) {\n                        return priorityA - priorityB;\n                    }\n                    // If same category, sort by K value (lower K = lighter)\n                    return cmykA.k - cmykB.k;\n                }\n            }\n            // If both are Paper or both are unknown, maintain original order\n            return 0;\n        });\n    }\n}\n// Restore CommonJS exports\nmodule.exports = ColorUtils;\nmodule.exports.cmykToRgb = ColorUtils.cmykToRgb;\nmodule.exports.cmykToRgbString = ColorUtils.cmykToRgbString;\nmodule.exports.cmykToHex = ColorUtils.cmykToHex;\nmodule.exports.rgbToHex = ColorUtils.rgbToHex;\nmodule.exports.parseCmykFromColorRef = ColorUtils.parseCmykFromColorRef;\nmodule.exports.convertIdmlColorToRgb = ColorUtils.convertIdmlColorToRgb;\nmodule.exports.analyzeCmykForBackground = ColorUtils.analyzeCmykForBackground;\nmodule.exports.analyzeIdmlColorForBackground = ColorUtils.analyzeIdmlColorForBackground;\nmodule.exports.getRgbBrightness = ColorUtils.getRgbBrightness;\nmodule.exports.getCmykBrightness = ColorUtils.getCmykBrightness;\nmodule.exports.sortColorsByLightness = ColorUtils.sortColorsByLightness;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/utils/ColorUtils.js\n"));

/***/ })

});