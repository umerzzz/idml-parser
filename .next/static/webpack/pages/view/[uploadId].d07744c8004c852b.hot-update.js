"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/view/[uploadId]",{

/***/ "./lib/parsers/ElementParser.js":
/*!**************************************!*\
  !*** ./lib/parsers/ElementParser.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nconst path = __webpack_require__(/*! path */ \"./node_modules/next/dist/compiled/path-browserify/index.js\");\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass ElementParser {\n    extractSpreadPages(spreadData) {\n        const pages = [];\n        if (spreadData.Page) {\n            const pageList = Array.isArray(spreadData.Page) ? spreadData.Page : [\n                spreadData.Page\n            ];\n            pageList.forEach((page, index)=>{\n                pages.push({\n                    self: page[\"@_Self\"],\n                    name: page[\"@_Name\"] || \"\",\n                    appliedMaster: page[\"@_AppliedMaster\"] || \"\",\n                    geometricBounds: IDMLUtils.parseGeometricBounds(page[\"@_GeometricBounds\"]),\n                    itemTransform: IDMLUtils.parseTransform(page[\"@_ItemTransform\"])\n                });\n            });\n        } else {\n            console.log(\"No pages found in spread data\");\n        }\n        console.log(\"Extracted \".concat(pages.length, \" pages\"));\n        return pages;\n    }\n    extractPageItems(spreadData) {\n        const pageItems = [];\n        // Extract different types of page items\n        const itemTypes = [\n            \"Rectangle\",\n            \"Oval\",\n            \"Polygon\",\n            \"GraphicLine\",\n            \"TextFrame\",\n            \"Group\",\n            \"Button\",\n            \"Table\",\n            \"Image\",\n            \"EPS\",\n            \"PDF\",\n            \"PlacedItem\",\n            \"ContentFrame\" // Add these\n        ];\n        itemTypes.forEach((itemType)=>{\n            if (spreadData[itemType]) {\n                const items = Array.isArray(spreadData[itemType]) ? spreadData[itemType] : [\n                    spreadData[itemType]\n                ];\n                items.forEach((item)=>{\n                    console.log(\"Processing \".concat(itemType, \":\"), item[\"@_Self\"]);\n                    const pageItem = this.parsePageItem(item, itemType);\n                    if (pageItem) {\n                        pageItems.push(pageItem);\n                        this.elements.push(pageItem);\n                    }\n                });\n            }\n        });\n        this.checkForNestedContent(spreadData, pageItems);\n        // ALSO CHECK FOR NESTED ITEMS IN PAGES\n        if (spreadData.Page) {\n            const pages = Array.isArray(spreadData.Page) ? spreadData.Page : [\n                spreadData.Page\n            ];\n            pages.forEach((page)=>{\n                itemTypes.forEach((itemType)=>{\n                    if (page[itemType]) {\n                        console.log(\"Found \".concat(itemType, \" in page:\"), Array.isArray(page[itemType]) ? page[itemType].length : 1);\n                        const items = Array.isArray(page[itemType]) ? page[itemType] : [\n                            page[itemType]\n                        ];\n                        items.forEach((item)=>{\n                            const pageItem = this.parsePageItem(item, itemType);\n                            if (pageItem) {\n                                pageItems.push(pageItem);\n                                this.elements.push(pageItem);\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        console.log(\"Total page items extracted: \".concat(pageItems.length));\n        return pageItems;\n    }\n    checkForNestedContent(spreadData, pageItems) {\n        console.log(\"\\uD83D\\uDD0D Checking for nested content in elements...\");\n        // Check rectangles for placed images\n        if (spreadData.Rectangle) {\n            const rectangles = Array.isArray(spreadData.Rectangle) ? spreadData.Rectangle : [\n                spreadData.Rectangle\n            ];\n            rectangles.forEach((rect)=>{\n                var _rect_Properties, _rect_Properties1, _rect_Properties2;\n                // Look for ANY content inside rectangle - be more aggressive\n                const possibleContent = rect.Image || rect.PlacedImage || rect.EPS || rect.PDF || ((_rect_Properties = rect.Properties) === null || _rect_Properties === void 0 ? void 0 : _rect_Properties.Image) || ((_rect_Properties1 = rect.Properties) === null || _rect_Properties1 === void 0 ? void 0 : _rect_Properties1.PlacedImage) || rect.Link || ((_rect_Properties2 = rect.Properties) === null || _rect_Properties2 === void 0 ? void 0 : _rect_Properties2.Link);\n                if (possibleContent) {\n                    console.log(\"\\uD83D\\uDCF7 Found placed content in rectangle \".concat(rect[\"@_Self\"], \":\"), possibleContent);\n                    // Update the rectangle to indicate it's a content frame\n                    const existingRect = pageItems.find((item)=>item.self === rect[\"@_Self\"]);\n                    if (existingRect) {\n                        existingRect.hasPlacedContent = true;\n                        existingRect.contentType = \"Image\";\n                        // Extract placed content details with better handling\n                        existingRect.placedContent = this.extractPlacedContent(possibleContent);\n                        // IMPORTANT: Calculate the image position within the frame\n                        existingRect.imagePosition = IDMLUtils.calculateImagePositionInFrame(existingRect.geometricBounds, existingRect.itemTransform, existingRect.placedContent);\n                    }\n                }\n            });\n        }\n    }\n    extractPlacedContent(content) {\n        if (!content) return null;\n        console.log(\"\\uD83D\\uDD0D Extracting placed content:\", content);\n        const contentItem = Array.isArray(content) ? content[0] : content;\n        console.log(\"Content item keys:\", Object.keys(contentItem));\n        // ENHANCED: Better href handling for embedded images\n        let href = contentItem[\"@_href\"] || contentItem[\"@_ActualPpi\"] || \"\";\n        let isEmbedded = false;\n        // Check if this is an embedded image reference\n        if (href && !href.startsWith(\"file://\") && !href.includes(\"/\")) {\n            // This looks like an embedded image reference\n            isEmbedded = true;\n            console.log(\"\\uD83D\\uDDBCÔ∏è Detected embedded image reference:\", href);\n        }\n        return {\n            type: contentItem[\"@_type\"] || \"Image\",\n            href: href,\n            isEmbedded: isEmbedded,\n            bounds: contentItem[\"@_GeometricBounds\"] ? IDMLUtils.parseGeometricBounds(contentItem[\"@_GeometricBounds\"]) : null,\n            transform: contentItem[\"@_ItemTransform\"] ? IDMLUtils.parseTransform(contentItem[\"@_ItemTransform\"]) : null,\n            actualPpi: contentItem[\"@_ActualPpi\"],\n            effectivePpi: contentItem[\"@_EffectivePpi\"],\n            imageTypeName: contentItem[\"@_ImageTypeName\"],\n            space: contentItem[\"@_Space\"]\n        };\n    }\n    parsePageItem(item, itemType) {\n        // ADD: Validation\n        if (!item || !item[\"@_Self\"]) {\n            console.warn(\"Invalid \".concat(itemType, \" item - missing self ID\"));\n            return null;\n        }\n        const baseItem = {\n            type: itemType,\n            self: item[\"@_Self\"],\n            name: item[\"@_Name\"] || \"\",\n            visible: item[\"@_Visible\"] !== false,\n            locked: item[\"@_Locked\"] === true,\n            geometricBounds: IDMLUtils.calculateBoundsFromPath(item),\n            itemTransform: IDMLUtils.parseTransform(item[\"@_ItemTransform\"]),\n            itemLayer: item[\"@_ItemLayer\"] || \"\",\n            fillColor: item[\"@_FillColor\"] || \"Color/None\",\n            strokeColor: item[\"@_StrokeColor\"] || \"Color/None\",\n            strokeWeight: parseFloat(item[\"@_StrokeWeight\"]) || 0,\n            parentStory: item[\"@_ParentStory\"] || null,\n            // ENHANCED: Better content frame detection\n            isContentFrame: false,\n            hasPlacedContent: false,\n            contentType: null\n        };\n        // ADD: Detect content frames more accurately\n        // ENHANCED: Better embedded image detection\n        if (itemType === \"Rectangle\") {\n            var _item_Properties, _item_Properties1;\n            // Check for embedded images more thoroughly\n            const embeddedInfo = this.detectEmbeddedImages(item);\n            if (embeddedInfo.hasEmbeddedContent || embeddedInfo.isPlaceholder) {\n                baseItem.isContentFrame = true;\n                baseItem.hasPlacedContent = embeddedInfo.hasEmbeddedContent;\n                baseItem.contentType = embeddedInfo.embeddedType || \"placeholder\";\n                baseItem.isEmbedded = embeddedInfo.hasEmbeddedContent;\n                baseItem.isPlaceholder = embeddedInfo.isPlaceholder;\n                console.log(\"\\uD83D\\uDCE6 Detected \".concat(embeddedInfo.hasEmbeddedContent ? \"embedded\" : \"placeholder\", \" content frame: \").concat(baseItem.self));\n            }\n            // Existing content frame detection logic...\n            const hasContent = !!(item.Image || item.PlacedImage || item.EPS || item.PDF || ((_item_Properties = item.Properties) === null || _item_Properties === void 0 ? void 0 : _item_Properties.Image) || ((_item_Properties1 = item.Properties) === null || _item_Properties1 === void 0 ? void 0 : _item_Properties1.PlacedImage));\n            if (hasContent && !baseItem.isContentFrame) {\n                baseItem.isContentFrame = true;\n                baseItem.hasPlacedContent = true;\n                baseItem.contentType = \"Image\";\n                // Extract placed content transform for positioning\n                const placedContent = item.Image || item.PlacedImage || item.EPS || item.PDF;\n                if (placedContent) {\n                    baseItem.placedContent = this.extractPlacedContent(placedContent);\n                }\n                console.log(\"\\uD83D\\uDCE6 Detected external content frame: \".concat(baseItem.self));\n            }\n        }\n        // Type-specific processing...\n        switch(itemType){\n            case \"TextFrame\":\n                baseItem.textFramePreferences = this.parseTextFramePreferences(item.TextFramePreference);\n                break;\n            case \"Rectangle\":\n                baseItem.cornerEffects = this.parseCornerEffects(item);\n                break;\n            case \"Group\":\n                baseItem.groupItems = this.extractGroupItems(item);\n                break;\n        }\n        return baseItem;\n    }\n    detectEmbeddedImages(element) {\n        const embeddedIndicators = {\n            hasEmbeddedContent: false,\n            embeddedType: null,\n            embeddedData: null,\n            embeddedFileName: null,\n            isPlaceholder: false\n        };\n        // Check if element name indicates placeholder\n        if (element.name && (element.name.includes(\"[YOUR IMAGE HERE]\") || element.name.includes(\"[IMAGE]\") || element.name.toLowerCase().includes(\"placeholder\"))) {\n            embeddedIndicators.isPlaceholder = true;\n            embeddedIndicators.embeddedType = \"placeholder\";\n        }\n        // ENHANCED: Check for actual embedded image data\n        if (element.placedContent) {\n            const content = element.placedContent;\n            // Check if href looks like an embedded reference\n            if (content.href && content.isEmbedded) {\n                embeddedIndicators.hasEmbeddedContent = true;\n                embeddedIndicators.embeddedType = content.imageTypeName || \"unknown\";\n                embeddedIndicators.embeddedData = content.href;\n                embeddedIndicators.embeddedFileName = \"\".concat(content.href, \".\").concat(IDMLUtils.getImageExtension(content.imageTypeName));\n            }\n        }\n        return embeddedIndicators;\n    }\n    parseTextFramePreferences(textFramePreference) {\n        var _textFramePreference__InsetSpacing, _textFramePreference__InsetSpacing1, _textFramePreference__InsetSpacing2, _textFramePreference__InsetSpacing3;\n        if (!textFramePreference) return null;\n        return {\n            textColumnCount: parseInt(textFramePreference[\"@_TextColumnCount\"]) || 1,\n            textColumnGutter: parseFloat(textFramePreference[\"@_TextColumnGutter\"]) || 0,\n            firstBaselineOffset: textFramePreference[\"@_FirstBaselineOffset\"] || \"AscentOffset\",\n            autoSizingReferencePoint: textFramePreference[\"@_AutoSizingReferencePoint\"] || \"CenterPoint\",\n            autoSizingType: textFramePreference[\"@_AutoSizingType\"] || \"Off\",\n            verticalJustification: textFramePreference[\"@_VerticalJustification\"] || \"TopAlign\",\n            // ENHANCED: Extract text frame insets for precise positioning\n            insetSpacing: {\n                top: parseFloat((_textFramePreference__InsetSpacing = textFramePreference[\"@_InsetSpacing\"]) === null || _textFramePreference__InsetSpacing === void 0 ? void 0 : _textFramePreference__InsetSpacing.split(\" \")[0]) || parseFloat(textFramePreference[\"@_TextInsetTop\"]) || 0,\n                right: parseFloat((_textFramePreference__InsetSpacing1 = textFramePreference[\"@_InsetSpacing\"]) === null || _textFramePreference__InsetSpacing1 === void 0 ? void 0 : _textFramePreference__InsetSpacing1.split(\" \")[1]) || parseFloat(textFramePreference[\"@_TextInsetRight\"]) || 0,\n                bottom: parseFloat((_textFramePreference__InsetSpacing2 = textFramePreference[\"@_InsetSpacing\"]) === null || _textFramePreference__InsetSpacing2 === void 0 ? void 0 : _textFramePreference__InsetSpacing2.split(\" \")[2]) || parseFloat(textFramePreference[\"@_TextInsetBottom\"]) || 0,\n                left: parseFloat((_textFramePreference__InsetSpacing3 = textFramePreference[\"@_InsetSpacing\"]) === null || _textFramePreference__InsetSpacing3 === void 0 ? void 0 : _textFramePreference__InsetSpacing3.split(\" \")[3]) || parseFloat(textFramePreference[\"@_TextInsetLeft\"]) || 0\n            },\n            // Additional InDesign-specific properties for precise text layout\n            useMinimumHeight: textFramePreference[\"@_UseMinimumHeight\"] === true,\n            minimumFirstBaselineOffset: parseFloat(textFramePreference[\"@_MinimumFirstBaselineOffset\"]) || 0,\n            ignoreWrap: textFramePreference[\"@_IgnoreWrap\"] === true\n        };\n    }\n    parseCornerEffects(item) {\n        // Parse corner effects for rectangles\n        return {\n            topLeftCornerRadius: parseFloat(item[\"@_TopLeftCornerRadius\"]) || 0,\n            topRightCornerRadius: parseFloat(item[\"@_TopRightCornerRadius\"]) || 0,\n            bottomLeftCornerRadius: parseFloat(item[\"@_BottomLeftCornerRadius\"]) || 0,\n            bottomRightCornerRadius: parseFloat(item[\"@_BottomRightCornerRadius\"]) || 0\n        };\n    }\n    extractGroupItems(groupItem) {\n        const groupItems = [];\n        // Groups can contain other page items\n        const itemTypes = [\n            \"Rectangle\",\n            \"Oval\",\n            \"Polygon\",\n            \"TextFrame\"\n        ];\n        itemTypes.forEach((itemType)=>{\n            if (groupItem[itemType]) {\n                const items = Array.isArray(groupItem[itemType]) ? groupItem[itemType] : [\n                    groupItem[itemType]\n                ];\n                items.forEach((item)=>{\n                    const parsedItem = this.parsePageItem(item, itemType);\n                    if (parsedItem) {\n                        groupItems.push(parsedItem);\n                    }\n                });\n            }\n        });\n        return groupItems;\n    }\n    parseTransparency(transparencySettings) {\n        if (!transparencySettings) return null;\n        return {\n            blendingSettings: transparencySettings.BlendingSetting ? {\n                blendMode: transparencySettings.BlendingSetting[\"@_BlendMode\"] || \"Normal\",\n                opacity: parseFloat(transparencySettings.BlendingSetting[\"@_Opacity\"]) || 100\n            } : null\n        };\n    }\n    createElementPositionMapFixed() {\n        console.log(\"Creating FIXED element position map...\");\n        // Calculate coordinate offset to handle negative coordinates\n        const coordinateOffset = IDMLUtils.calculateCoordinateOffset(this.elements);\n        console.log(\"Coordinate offset:\", coordinateOffset);\n        this.elements.forEach((element, index)=>{\n            const bounds = element.geometricBounds || element.originalBounds;\n            const transform = element.itemTransform || {\n                a: 1,\n                b: 0,\n                c: 0,\n                d: 1,\n                tx: 0,\n                ty: 0\n            };\n            // CORRECT: Apply transform to bounds, then add offset\n            let x = ((bounds === null || bounds === void 0 ? void 0 : bounds.left) || 0) + (transform.tx || 0) + coordinateOffset.x;\n            let y = ((bounds === null || bounds === void 0 ? void 0 : bounds.top) || 0) + (transform.ty || 0) + coordinateOffset.y;\n            // For the textframe with negative Y, apply special handling\n            if (y < 0) {\n                y = Math.abs(y); // Convert negative to positive\n            }\n            let width = Math.abs((bounds === null || bounds === void 0 ? void 0 : bounds.width) || 0);\n            let height = Math.abs((bounds === null || bounds === void 0 ? void 0 : bounds.height) || 0);\n            element.position = {\n                x: Math.round(x * 100) / 100,\n                y: Math.round(y * 100) / 100,\n                width: Math.round(width * 100) / 100,\n                height: Math.round(height * 100) / 100,\n                rotation: IDMLUtils.calculateRotation(transform)\n            };\n        });\n    }\n    extractMasterPages(masterData) {\n        const pages = [];\n        if (masterData.Page) {\n            const pageList = Array.isArray(masterData.Page) ? masterData.Page : [\n                masterData.Page\n            ];\n            pageList.forEach((page)=>{\n                pages.push({\n                    self: page[\"@_Self\"],\n                    name: page[\"@_Name\"] || \"\",\n                    geometricBounds: IDMLUtils.parseGeometricBounds(page[\"@_GeometricBounds\"]),\n                    itemTransform: IDMLUtils.parseTransform(page[\"@_ItemTransform\"]),\n                    appliedMaster: page[\"@_AppliedMaster\"] || \"\",\n                    masterPageTransform: IDMLUtils.parseTransform(page[\"@_MasterPageTransform\"])\n                });\n            });\n        }\n        return pages;\n    }\n    getElements() {\n        return this.elements;\n    }\n    clearElements() {\n        this.elements = [];\n    }\n    getElementIndex(element) {\n        return this.elements.findIndex((el)=>el.self === element.self);\n    }\n    getPageContent(pageId) {\n        const pageElements = this.elements.filter((element)=>{\n            // Check if element belongs to this page based on its bounds\n            return true; // TODO: Implement proper page boundary checking\n        });\n        return {\n            elements: pageElements\n        };\n    }\n    constructor(){\n        this.elements = [];\n    }\n}\nmodule.exports = ElementParser;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/parsers/ElementParser.js\n"));

/***/ })

});