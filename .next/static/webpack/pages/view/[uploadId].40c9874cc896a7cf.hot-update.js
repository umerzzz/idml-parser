"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/view/[uploadId]",{

/***/ "./lib/IDMLProcessor.js":
/*!******************************!*\
  !*** ./lib/IDMLProcessor.js ***!
  \******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// Core modules\n\nconst IDMLXMLParser = __webpack_require__(/*! ./parsers/XMLParser */ \"./lib/parsers/XMLParser.js\");\nconst FileExtractor = __webpack_require__(/*! ./extractors/FileExtractor */ \"./lib/extractors/FileExtractor.js\");\nconst StyleParser = __webpack_require__(/*! ./parsers/StyleParser */ \"./lib/parsers/StyleParser.js\");\nconst StoryParser = __webpack_require__(/*! ./parsers/StoryParser */ \"./lib/parsers/StoryParser.js\");\nconst ElementParser = __webpack_require__(/*! ./parsers/ElementParser */ \"./lib/parsers/ElementParser.js\");\nconst DocumentParser = __webpack_require__(/*! ./parsers/DocumentParser */ \"./lib/parsers/DocumentParser.js\");\nconst ImageProcessor = __webpack_require__(/*! ./processors/ImageProcessor */ \"./lib/processors/ImageProcessor.js\");\nconst DebugAnalyzer = __webpack_require__(/*! ./debug/DebugAnalyzer */ \"./lib/debug/DebugAnalyzer.js\");\nconst IDMLUtils = __webpack_require__(/*! ./utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nconst UnitConverter = __webpack_require__(/*! ./utils/UnitConverter */ \"./lib/utils/UnitConverter.js\"); // ADDED: Unit conversion support\nconst path = __webpack_require__(/*! path */ \"./node_modules/next/dist/compiled/path-browserify/index.js\");\nclass IDMLProcessor {\n    async processIDML(filePath) {\n        console.log(\"Processing IDML file:\", filePath);\n        try {\n            var _this_document, _this_document1, _this_pageInfo_dimensions, _this_pageInfo_dimensions1, _this_documentInfo_preferences_viewPreferences, _this_documentInfo_preferences;\n            // Extract ZIP contents\n            const extractedData = await this.fileExtractor.extractIDMLContents(filePath);\n            console.log(\"Extracted \".concat(Object.keys(extractedData).length, \" files from IDML\"));\n            // Parse main structure\n            await this.parseDocumentStructure(extractedData);\n            // Extract detailed information\n            await this.extractDetailedInformation();\n            // Return the correct structure\n            const documentData = {\n                document: {\n                    version: ((_this_document = this.document) === null || _this_document === void 0 ? void 0 : _this_document[\"@_DOMVersion\"]) || \"Unknown\",\n                    pageCount: Math.max(1, this.elements.length > 0 ? 1 : 0),\n                    name: ((_this_document1 = this.document) === null || _this_document1 === void 0 ? void 0 : _this_document1[\"@_Name\"]) || \"Untitled\",\n                    dimensions: this.pageInfo.dimensions\n                },\n                // ADDED: Unit conversion information\n                unitConversion: {\n                    enabled: this.config.convertToPixels,\n                    dpi: this.config.dpi,\n                    originalUnits: ((_this_pageInfo_dimensions = this.pageInfo.dimensions) === null || _this_pageInfo_dimensions === void 0 ? void 0 : _this_pageInfo_dimensions.units) || \"Unknown\",\n                    convertedToPixels: !!((_this_pageInfo_dimensions1 = this.pageInfo.dimensions) === null || _this_pageInfo_dimensions1 === void 0 ? void 0 : _this_pageInfo_dimensions1.pixelDimensions),\n                    conversionAppliedTo: [\n                        \"document dimensions\",\n                        \"element geometric bounds\",\n                        \"element positions\",\n                        \"font sizes\",\n                        \"spacing measurements\",\n                        \"page margins\",\n                        \"transform coordinates\",\n                        \"stroke weights\",\n                        \"text frame insets\"\n                    ].filter(Boolean)\n                },\n                // === ADD GLOBAL STYLE INFO ===\n                paragraphStyles: this.styleParser.getParagraphStyles(),\n                characterStyles: this.styleParser.getCharacterStyles(),\n                fontDefinitions: this.styleParser.getFontDefinitions(),\n                // === END GLOBAL STYLE INFO ===\n                pageInfo: {\n                    dimensions: this.pageInfo.dimensions,\n                    margins: this.pageInfo.margins\n                },\n                elements: this.elements.map((element)=>{\n                    if (!element.pixelPosition) {\n                        console.warn(\"⚠️ Element \".concat(element.self, \" is missing pixelPosition! This may cause rendering issues.\"));\n                    }\n                    return {\n                        id: element.self,\n                        type: element.type,\n                        name: element.name,\n                        // ENFORCED: Only output pixelPosition (in pixels)\n                        pixelPosition: element.pixelPosition,\n                        fill: element.fillColor,\n                        stroke: element.strokeColor,\n                        strokeWeight: element.strokeWeight,\n                        parentStory: element.parentStory,\n                        linkedImage: element.linkedImage,\n                        visible: element.visible,\n                        locked: element.locked,\n                        // Content frame specific properties\n                        isContentFrame: element.isContentFrame || false,\n                        hasPlacedContent: element.hasPlacedContent || false,\n                        contentType: element.contentType || null,\n                        // Image positioning within frame\n                        imagePosition: element.imagePosition || null,\n                        placedContent: element.placedContent || null\n                    };\n                }),\n                stories: Object.keys(this.stories).reduce((acc, storyId)=>{\n                    var _story_content;\n                    const story = this.stories[storyId];\n                    if (story === null || story === void 0 ? void 0 : (_story_content = story.content) === null || _story_content === void 0 ? void 0 : _story_content.plainText) {\n                        var _story_content_lineBreakInfo, _story_content_lineBreakInfo1;\n                        acc[storyId] = {\n                            text: story.content.plainText,\n                            wordCount: story.content.wordCount,\n                            characterCount: story.content.characterCount,\n                            textColor: story.content.textColor,\n                            hasLineBreaks: ((_story_content_lineBreakInfo = story.content.lineBreakInfo) === null || _story_content_lineBreakInfo === void 0 ? void 0 : _story_content_lineBreakInfo.hasLineBreaks) || false,\n                            lineBreakCount: ((_story_content_lineBreakInfo1 = story.content.lineBreakInfo) === null || _story_content_lineBreakInfo1 === void 0 ? void 0 : _story_content_lineBreakInfo1.lineBreakCount) || 0,\n                            // Include resolved styling information\n                            styling: this.styleParser.getStoryStyleSummary(story),\n                            // Include formatted content with resolved formatting\n                            formattedContent: story.content.formattedContent || []\n                        };\n                    }\n                    return acc;\n                }, {}),\n                debug22: {\n                    measurementUnits: (_this_documentInfo_preferences = this.documentInfo.preferences) === null || _this_documentInfo_preferences === void 0 ? void 0 : (_this_documentInfo_preferences_viewPreferences = _this_documentInfo_preferences.viewPreferences) === null || _this_documentInfo_preferences_viewPreferences === void 0 ? void 0 : _this_documentInfo_preferences_viewPreferences.horizontalMeasurementUnits,\n                    coordinateOffset: this.calculateCoordinateOffset(),\n                    contentFramesCount: this.elements.filter((el)=>el.isContentFrame).length,\n                    imagesLinkedCount: this.elements.filter((el)=>el.linkedImage && !el.linkedImage.isEmbedded).length,\n                    embeddedImagesCount: this.elements.filter((el)=>el.linkedImage && el.linkedImage.isEmbedded).length\n                }\n            };\n            await this.addComprehensiveTextFormattingDebug();\n            console.log(\"✅ IDML processing completed. Elements:\", documentData.elements.length);\n            return documentData;\n        } catch (error) {\n            console.error(\"Error processing IDML:\", error);\n            throw error;\n        }\n    }\n    async parseDocumentStructure(extractedData) {\n        console.log(\"Parsing document structure...\");\n        // Parse Resources\n        console.log(\"\\n\\uD83D\\uDCCB === PARSING RESOURCES ===\");\n        for (const [fileName, content] of Object.entries(extractedData)){\n            if (fileName.startsWith(\"Resources/\")) {\n                console.log(\"\\uD83D\\uDD0D Processing resource:\", fileName);\n                await this.styleParser.parseResourceFile(fileName, content, this.xmlParser);\n            }\n        }\n        // Parse document structure (spreads, master spreads)\n        await this.documentParser.parseDocumentStructure(extractedData, this.xmlParser);\n        // Parse Stories\n        console.log(\"\\n\\uD83D\\uDCDD === PARSING STORIES ===\");\n        let storyCount = 0;\n        for (const [fileName, content] of Object.entries(extractedData)){\n            if (fileName.startsWith(\"Stories/\")) {\n                console.log(\"\\uD83D\\uDD0D Found story file:\", fileName);\n                console.log(\"   Content length:\", content.length);\n                console.log(\"   Content preview:\", content.substring(0, 200));\n                storyCount++;\n                await this.storyParser.parseStoryFile(fileName, content, this.xmlParser);\n            }\n        }\n        console.log(\"\\uD83D\\uDCDD Total stories processed: \".concat(storyCount));\n        // Sync data from modules to maintain backward compatibility\n        this.syncModuleData();\n    }\n    syncModuleData() {\n        // Sync document data\n        this.document = this.documentParser.getDocument();\n        this.spreads = this.documentParser.getSpreads();\n        this.masterSpreads = this.documentParser.getMasterSpreads();\n        this.documentInfo = this.documentParser.getDocumentInfo();\n        this.layers = this.documentParser.getLayers();\n        // Sync style data\n        this.styles = this.styleParser.getStyles();\n        this.resources = this.styleParser.getResources();\n        // Sync story data\n        this.stories = this.storyParser.getStories();\n        // Sync element data\n        this.elements = this.elementParser.getElements();\n    }\n    async extractDetailedInformation() {\n        var _this_pageInfo_dimensions, _this_pageInfo;\n        console.log(\"Extracting detailed information with enhanced processing...\");\n        await this.documentParser.extractDetailedInformation();\n        this.pageInfo = this.documentParser.getPageInfo();\n        // ADDED: Set document units on StoryParser after pageInfo is available\n        if ((_this_pageInfo = this.pageInfo) === null || _this_pageInfo === void 0 ? void 0 : (_this_pageInfo_dimensions = _this_pageInfo.dimensions) === null || _this_pageInfo_dimensions === void 0 ? void 0 : _this_pageInfo_dimensions.units) {\n            const documentUnits = this.pageInfo.dimensions.units;\n            console.log(\"\\uD83D\\uDCD0 IDMLProcessor: Setting document units to\", documentUnits, \"on StoryParser\");\n            if (this.storyParser.setDocumentUnits) {\n                this.storyParser.setDocumentUnits(documentUnits);\n            }\n        }\n        console.log(\"✅ Enhanced detailed information extracted\");\n    }\n    calculateCoordinateOffset() {\n        return this.documentParser.calculateCoordinateOffset();\n    }\n    async addComprehensiveTextFormattingDebug() {\n        return await this.debugAnalyzer.addComprehensiveTextFormattingDebug(this);\n    }\n    // Package processing methods\n    async processIDMLPackage(idmlFilePath, packageStructure) {\n        let extractedImages = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n        console.log(\"Processing IDML package:\", idmlFilePath);\n        try {\n            var _packageStructure_resourceMap, _packageStructure_resourceMap1;\n            // Process the IDML file first\n            const documentData = await this.processIDML(idmlFilePath);\n            // Process linked images and update elements\n            await this.imageProcessor.processLinkedResources(documentData, packageStructure, extractedImages);\n            // Add package info\n            documentData.packageInfo = {\n                hasLinks: ((_packageStructure_resourceMap = packageStructure.resourceMap) === null || _packageStructure_resourceMap === void 0 ? void 0 : _packageStructure_resourceMap.size) > 1,\n                hasFonts: false,\n                linksCount: Array.from(((_packageStructure_resourceMap1 = packageStructure.resourceMap) === null || _packageStructure_resourceMap1 === void 0 ? void 0 : _packageStructure_resourceMap1.keys()) || []).filter((name)=>IDMLUtils.isImageFile(name)).length,\n                fontsCount: 0,\n                extractedImagesCount: extractedImages.length\n            };\n            return documentData;\n        } catch (error) {\n            console.error(\"Error processing IDML package:\", error);\n            throw error;\n        }\n    }\n    // Image processing methods\n    async extractAndSaveEmbeddedImages(idmlPath, uploadDir) {\n        return await this.fileExtractor.extractAndSaveEmbeddedImages(idmlPath, uploadDir);\n    }\n    async extractEmbeddedImageFromSpread(idmlPath, uploadDir) {\n        return await this.imageProcessor.extractEmbeddedImageFromSpread(idmlPath, uploadDir, this.xmlParser);\n    }\n    // Debug methods\n    async debugIDMLContents(idmlPath) {\n        return await this.fileExtractor.debugIDMLContents(idmlPath);\n    }\n    async debugIDMLContentsDetailed(idmlPath) {\n        return await this.fileExtractor.debugIDMLContentsDetailed(idmlPath);\n    }\n    async analyzeSpreadForImageReferences(idmlPath) {\n        return await this.imageProcessor.analyzeSpreadForImageReferences(idmlPath, this.xmlParser);\n    }\n    // Utility methods for backward compatibility\n    getPageContent(pageId) {\n        return this.documentParser.getPageContent(pageId);\n    }\n    // Getter methods for accessing module data\n    getStyles() {\n        return this.styleParser.getStyles();\n    }\n    getResources() {\n        return this.styleParser.getResources();\n    }\n    getStories() {\n        return this.storyParser.getStories();\n    }\n    getElements() {\n        return this.elementParser.getElements();\n    }\n    getSpreads() {\n        return this.documentParser.getSpreads();\n    }\n    getMasterSpreads() {\n        return this.documentParser.getMasterSpreads();\n    }\n    getDocumentInfo() {\n        return this.documentParser.getDocumentInfo();\n    }\n    getPageInfo() {\n        return this.documentParser.getPageInfo();\n    }\n    getLayers() {\n        return this.documentParser.getLayers();\n    }\n    // Module access for advanced usage\n    getXMLParser() {\n        return this.xmlParser;\n    }\n    getFileExtractor() {\n        return this.fileExtractor;\n    }\n    getStyleParser() {\n        return this.styleParser;\n    }\n    getStoryParser() {\n        return this.storyParser;\n    }\n    getElementParser() {\n        return this.elementParser;\n    }\n    getDocumentParser() {\n        return this.documentParser;\n    }\n    getImageProcessor() {\n        return this.imageProcessor;\n    }\n    getDebugAnalyzer() {\n        return this.debugAnalyzer;\n    }\n    constructor(options = {}){\n        // Configuration options\n        this.config = {\n            dpi: options.dpi || 96,\n            convertToPixels: options.convertToPixels !== false,\n            preserveOriginalUnits: options.preserveOriginalUnits !== false,\n            ...options\n        };\n        // ADDED: Initialize unit converter with configured DPI first\n        this.unitConverter = new UnitConverter(this.config.dpi);\n        // Initialize all modules\n        this.xmlParser = new IDMLXMLParser();\n        this.fileExtractor = new FileExtractor();\n        this.styleParser = new StyleParser(this.unitConverter); // ADDED: Pass UnitConverter\n        this.elementParser = new ElementParser(this.unitConverter); // ADDED: Pass UnitConverter\n        this.storyParser = new StoryParser(this.styleParser, this.unitConverter); // ADDED: Pass UnitConverter\n        this.documentParser = new DocumentParser(this.elementParser, this.styleParser, this.unitConverter); // FIXED: Pass StyleParser and UnitConverter\n        this.imageProcessor = new ImageProcessor(this.fileExtractor);\n        this.debugAnalyzer = new DebugAnalyzer();\n        // Maintain backward compatibility properties\n        this.document = null;\n        this.resources = {};\n        this.spreads = {};\n        this.stories = {};\n        this.masterSpreads = {};\n        this.documentInfo = {};\n        this.pageInfo = {};\n        this.elements = [];\n        this.layers = [];\n        this.styles = {\n            paragraph: {},\n            character: {},\n            object: {},\n            table: {},\n            cell: {}\n        };\n    }\n}\nmodule.exports = IDMLProcessor;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/IDMLProcessor.js\n"));

/***/ })

});