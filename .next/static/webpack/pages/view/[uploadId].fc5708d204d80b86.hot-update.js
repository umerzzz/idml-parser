"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/view/[uploadId]",{

/***/ "./lib/utils/NextFontMapper.js":
/*!*************************************!*\
  !*** ./lib/utils/NextFontMapper.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\r\n * NextFontMapper.js - Dynamic Next.js font mapping based on font characteristics\r\n * NO HARDCODED MAPPINGS - Automatically maps any font to appropriate Next.js fonts\r\n */ \nclass NextFontMapper {\n    /**\r\n   * Initialize comprehensive Next.js font database with characteristics\r\n   * @returns {Object} Font database categorized by type and characteristics\r\n   */ initializeNextFontDatabase() {\n        return {\n            serif: {\n                traditional: [\n                    {\n                        nextFont: \"Crimson_Text\",\n                        family: \"Crimson Text\",\n                        weights: [\n                            \"400\",\n                            \"600\",\n                            \"700\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"elegant\",\n                            \"traditional\",\n                            \"readable\",\n                            \"body-text\"\n                        ],\n                        keywords: [\n                            \"minion\",\n                            \"times\",\n                            \"garamond\",\n                            \"baskerville\",\n                            \"caslon\"\n                        ]\n                    },\n                    {\n                        nextFont: \"Libre_Baskerville\",\n                        family: \"Libre Baskerville\",\n                        weights: [\n                            \"400\",\n                            \"700\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"classic\",\n                            \"readable\",\n                            \"book\"\n                        ],\n                        keywords: [\n                            \"baskerville\",\n                            \"libre\",\n                            \"book\"\n                        ]\n                    },\n                    {\n                        nextFont: \"Lora\",\n                        family: \"Lora\",\n                        weights: [\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"modern\",\n                            \"friendly\",\n                            \"calligraphic\"\n                        ],\n                        keywords: [\n                            \"lora\",\n                            \"modern-serif\"\n                        ]\n                    }\n                ],\n                display: [\n                    {\n                        nextFont: \"Playfair_Display\",\n                        family: \"Playfair Display\",\n                        weights: [\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\",\n                            \"800\",\n                            \"900\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"elegant\",\n                            \"high-contrast\",\n                            \"display\",\n                            \"luxury\"\n                        ],\n                        keywords: [\n                            \"playfair\",\n                            \"display\",\n                            \"elegant\",\n                            \"luxury\"\n                        ]\n                    },\n                    {\n                        nextFont: \"Cormorant_Garamond\",\n                        family: \"Cormorant Garamond\",\n                        weights: [\n                            \"300\",\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"refined\",\n                            \"garamond\",\n                            \"classic\"\n                        ],\n                        keywords: [\n                            \"garamond\",\n                            \"cormorant\",\n                            \"refined\"\n                        ]\n                    }\n                ]\n            },\n            \"sans-serif\": {\n                geometric: [\n                    {\n                        nextFont: \"Inter\",\n                        family: \"Inter\",\n                        weights: [\n                            \"100\",\n                            \"200\",\n                            \"300\",\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\",\n                            \"800\",\n                            \"900\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"modern\",\n                            \"clean\",\n                            \"ui\",\n                            \"versatile\",\n                            \"geometric\"\n                        ],\n                        keywords: [\n                            \"inter\",\n                            \"ui\",\n                            \"interface\",\n                            \"modern\"\n                        ]\n                    },\n                    {\n                        nextFont: \"Nunito_Sans\",\n                        family: \"Nunito Sans\",\n                        weights: [\n                            \"200\",\n                            \"300\",\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\",\n                            \"800\",\n                            \"900\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"friendly\",\n                            \"rounded\",\n                            \"geometric\"\n                        ],\n                        keywords: [\n                            \"nunito\",\n                            \"friendly\",\n                            \"rounded\",\n                            \"futura\",\n                            \"avenir\"\n                        ]\n                    }\n                ],\n                humanist: [\n                    {\n                        nextFont: \"Open_Sans\",\n                        family: \"Open Sans\",\n                        weights: [\n                            \"300\",\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\",\n                            \"800\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"versatile\",\n                            \"readable\",\n                            \"neutral\",\n                            \"professional\"\n                        ],\n                        keywords: [\n                            \"open\",\n                            \"myriad\",\n                            \"professional\",\n                            \"clean\"\n                        ]\n                    },\n                    {\n                        nextFont: \"Source_Sans_3\",\n                        family: \"Source Sans 3\",\n                        weights: [\n                            \"200\",\n                            \"300\",\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\",\n                            \"800\",\n                            \"900\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"adobe\",\n                            \"technical\",\n                            \"clean\"\n                        ],\n                        keywords: [\n                            \"source\",\n                            \"adobe\",\n                            \"technical\",\n                            \"calibri\"\n                        ]\n                    },\n                    {\n                        nextFont: \"Lato\",\n                        family: \"Lato\",\n                        weights: [\n                            \"100\",\n                            \"300\",\n                            \"400\",\n                            \"700\",\n                            \"900\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"warm\",\n                            \"friendly\",\n                            \"professional\"\n                        ],\n                        keywords: [\n                            \"lato\",\n                            \"warm\",\n                            \"friendly\"\n                        ]\n                    }\n                ],\n                grotesque: [\n                    {\n                        nextFont: \"Roboto\",\n                        family: \"Roboto\",\n                        weights: [\n                            \"100\",\n                            \"300\",\n                            \"400\",\n                            \"500\",\n                            \"700\",\n                            \"900\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"android\",\n                            \"modern\",\n                            \"mechanical\"\n                        ],\n                        keywords: [\n                            \"roboto\",\n                            \"android\",\n                            \"mechanical\"\n                        ]\n                    },\n                    {\n                        nextFont: \"Work_Sans\",\n                        family: \"Work Sans\",\n                        weights: [\n                            \"100\",\n                            \"200\",\n                            \"300\",\n                            \"400\",\n                            \"500\",\n                            \"600\",\n                            \"700\",\n                            \"800\",\n                            \"900\"\n                        ],\n                        styles: [\n                            \"normal\",\n                            \"italic\"\n                        ],\n                        googleFont: true,\n                        characteristics: [\n                            \"work\",\n                            \"professional\",\n                            \"clean\"\n                        ],\n                        keywords: [\n                            \"work\",\n                            \"professional\",\n                            \"helvetica\"\n                        ]\n                    }\n                ]\n            },\n            monospace: [\n                {\n                    nextFont: \"JetBrains_Mono\",\n                    family: \"JetBrains Mono\",\n                    weights: [\n                        \"100\",\n                        \"200\",\n                        \"300\",\n                        \"400\",\n                        \"500\",\n                        \"600\",\n                        \"700\",\n                        \"800\"\n                    ],\n                    styles: [\n                        \"normal\",\n                        \"italic\"\n                    ],\n                    googleFont: true,\n                    characteristics: [\n                        \"coding\",\n                        \"modern\",\n                        \"ligatures\"\n                    ],\n                    keywords: [\n                        \"jetbrains\",\n                        \"code\",\n                        \"programming\"\n                    ]\n                },\n                {\n                    nextFont: \"Courier_Prime\",\n                    family: \"Courier Prime\",\n                    weights: [\n                        \"400\",\n                        \"700\"\n                    ],\n                    styles: [\n                        \"normal\",\n                        \"italic\"\n                    ],\n                    googleFont: true,\n                    characteristics: [\n                        \"typewriter\",\n                        \"classic\",\n                        \"courier\"\n                    ],\n                    keywords: [\n                        \"courier\",\n                        \"typewriter\",\n                        \"classic\"\n                    ]\n                },\n                {\n                    nextFont: \"Source_Code_Pro\",\n                    family: \"Source Code Pro\",\n                    weights: [\n                        \"200\",\n                        \"300\",\n                        \"400\",\n                        \"500\",\n                        \"600\",\n                        \"700\",\n                        \"800\",\n                        \"900\"\n                    ],\n                    styles: [\n                        \"normal\",\n                        \"italic\"\n                    ],\n                    googleFont: true,\n                    characteristics: [\n                        \"adobe\",\n                        \"coding\",\n                        \"technical\"\n                    ],\n                    keywords: [\n                        \"source\",\n                        \"code\",\n                        \"adobe\",\n                        \"technical\"\n                    ]\n                }\n            ],\n            // Language-specific fonts\n            japanese: [\n                {\n                    nextFont: \"Noto_Serif_JP\",\n                    family: \"Noto Serif JP\",\n                    weights: [\n                        \"200\",\n                        \"300\",\n                        \"400\",\n                        \"500\",\n                        \"600\",\n                        \"700\",\n                        \"900\"\n                    ],\n                    styles: [\n                        \"normal\"\n                    ],\n                    googleFont: true,\n                    characteristics: [\n                        \"japanese\",\n                        \"serif\",\n                        \"traditional\"\n                    ],\n                    keywords: [\n                        \"japanese\",\n                        \"jp\",\n                        \"mincho\",\n                        \"kozuka\",\n                        \"noto\"\n                    ]\n                },\n                {\n                    nextFont: \"Noto_Sans_JP\",\n                    family: \"Noto Sans JP\",\n                    weights: [\n                        \"100\",\n                        \"300\",\n                        \"400\",\n                        \"500\",\n                        \"700\",\n                        \"900\"\n                    ],\n                    styles: [\n                        \"normal\"\n                    ],\n                    googleFont: true,\n                    characteristics: [\n                        \"japanese\",\n                        \"sans-serif\",\n                        \"modern\"\n                    ],\n                    keywords: [\n                        \"japanese\",\n                        \"jp\",\n                        \"gothic\",\n                        \"sans\",\n                        \"noto\"\n                    ]\n                }\n            ],\n            chinese: [\n                {\n                    nextFont: \"Noto_Serif_SC\",\n                    family: \"Noto Serif SC\",\n                    weights: [\n                        \"200\",\n                        \"300\",\n                        \"400\",\n                        \"500\",\n                        \"600\",\n                        \"700\",\n                        \"900\"\n                    ],\n                    styles: [\n                        \"normal\"\n                    ],\n                    googleFont: true,\n                    characteristics: [\n                        \"chinese\",\n                        \"simplified\",\n                        \"serif\"\n                    ],\n                    keywords: [\n                        \"chinese\",\n                        \"simplified\",\n                        \"sc\",\n                        \"simsun\",\n                        \"noto\"\n                    ]\n                },\n                {\n                    nextFont: \"Noto_Sans_SC\",\n                    family: \"Noto Sans SC\",\n                    weights: [\n                        \"100\",\n                        \"300\",\n                        \"400\",\n                        \"500\",\n                        \"700\",\n                        \"900\"\n                    ],\n                    styles: [\n                        \"normal\"\n                    ],\n                    googleFont: true,\n                    characteristics: [\n                        \"chinese\",\n                        \"simplified\",\n                        \"sans-serif\"\n                    ],\n                    keywords: [\n                        \"chinese\",\n                        \"simplified\",\n                        \"sc\",\n                        \"sans\",\n                        \"noto\"\n                    ]\n                }\n            ]\n        };\n    }\n    /**\r\n   * Dynamically map IDML font to Next.js font based on characteristics\r\n   * @param {string} idmlFontFamily - Original IDML font family\r\n   * @param {string} fontStyle - Font style (Regular, Bold, Italic, etc.)\r\n   * @param {number} fontSize - Font size in pixels\r\n   * @param {Object} fontMetadata - Additional font metadata from IDML\r\n   * @returns {Object} Next.js font configuration\r\n   */ mapToNextFont(idmlFontFamily) {\n        let fontStyle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"Regular\", fontSize = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 16, fontMetadata = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n        if (!idmlFontFamily) {\n            console.log(\"⚠️  No font family provided, using default\");\n            return this.getDefaultFont();\n        }\n        // Create cache key\n        const cacheKey = \"\".concat(idmlFontFamily, \"-\").concat(fontStyle, \"-\").concat(fontSize);\n        // Check cache first\n        if (this.fontCache.has(cacheKey)) {\n            return this.fontCache.get(cacheKey);\n        }\n        console.log('\\uD83D\\uDD0D Dynamically mapping font: \"'.concat(idmlFontFamily, '\" (').concat(fontStyle, \")\"));\n        // Analyze font characteristics\n        const fontAnalysis = this.analyzeFontCharacteristics(idmlFontFamily, fontStyle, fontMetadata);\n        console.log('\\uD83D\\uDCCA Font analysis for \"'.concat(idmlFontFamily, '\":'), {\n            category: fontAnalysis.category,\n            subcategory: fontAnalysis.subcategory,\n            language: fontAnalysis.language,\n            keywords: fontAnalysis.detectedKeywords,\n            confidence: fontAnalysis.confidence\n        });\n        // Find best matching Next.js font\n        const bestMatch = this.findBestNextJSFont(fontAnalysis, idmlFontFamily);\n        // Build final font configuration\n        const finalConfig = this.buildFontConfig(bestMatch, fontStyle, fontSize, idmlFontFamily);\n        // Add to cache\n        this.fontCache.set(cacheKey, finalConfig);\n        // Track for import generation\n        this.nextFontImports.add(bestMatch.nextFont);\n        console.log('✅ Dynamic mapping: \"'.concat(idmlFontFamily, '\" → \"').concat(finalConfig.fontFamily, '\" (').concat(bestMatch.nextFont, \")\"));\n        return finalConfig;\n    }\n    /**\r\n   * Analyze font characteristics to determine category and properties\r\n   * @param {string} fontName - Font name to analyze\r\n   * @param {string} fontStyle - Font style\r\n   * @param {Object} metadata - Additional metadata\r\n   * @returns {Object} Font analysis result\r\n   */ analyzeFontCharacteristics(fontName, fontStyle) {\n        let metadata = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        const lowerName = fontName.toLowerCase();\n        const analysis = {\n            category: \"sans-serif\",\n            subcategory: \"humanist\",\n            language: \"latin\",\n            detectedKeywords: [],\n            confidence: 0,\n            weight: this.extractWeight(fontStyle),\n            isDisplay: false,\n            isCondensed: false\n        };\n        // Language detection\n        if (this.isJapaneseFont(lowerName)) {\n            analysis.language = \"japanese\";\n            analysis.category = this.isSerifFont(lowerName) ? \"serif\" : \"sans-serif\";\n            analysis.confidence += 0.8;\n            return analysis;\n        }\n        if (this.isChineseFont(lowerName)) {\n            analysis.language = \"chinese\";\n            analysis.category = this.isSerifFont(lowerName) ? \"serif\" : \"sans-serif\";\n            analysis.confidence += 0.8;\n            return analysis;\n        }\n        // Category detection\n        if (this.isSerifFont(lowerName)) {\n            analysis.category = \"serif\";\n            analysis.subcategory = this.isDisplayFont(lowerName) ? \"display\" : \"traditional\";\n            analysis.confidence += 0.6;\n        } else if (this.isMonospaceFont(lowerName)) {\n            analysis.category = \"monospace\";\n            analysis.confidence += 0.8;\n        } else {\n            // Sans-serif subcategory detection\n            analysis.category = \"sans-serif\";\n            if (this.isGeometricFont(lowerName)) {\n                analysis.subcategory = \"geometric\";\n                analysis.confidence += 0.5;\n            } else if (this.isGrotesqueFont(lowerName)) {\n                analysis.subcategory = \"grotesque\";\n                analysis.confidence += 0.5;\n            } else {\n                analysis.subcategory = \"humanist\"; // default\n                analysis.confidence += 0.3;\n            }\n        }\n        // Additional characteristics\n        analysis.isDisplay = this.isDisplayFont(lowerName);\n        analysis.isCondensed = this.isCondensedFont(lowerName);\n        // Extract keywords for matching\n        analysis.detectedKeywords = this.extractKeywords(lowerName);\n        return analysis;\n    }\n    /**\r\n   * Check if font is Japanese\r\n   */ isJapaneseFont(fontName) {\n        const japaneseIndicators = [\n            \"kozuka\",\n            \"mincho\",\n            \"gothic\",\n            \"hiragino\",\n            \"yu\",\n            \"meiryo\",\n            \"noto\",\n            \"jp\"\n        ];\n        return japaneseIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Check if font is Chinese\r\n   */ isChineseFont(fontName) {\n        const chineseIndicators = [\n            \"simsun\",\n            \"simhei\",\n            \"microsoft yahei\",\n            \"songti\",\n            \"fangsong\",\n            \"sc\",\n            \"tc\"\n        ];\n        return chineseIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Check if font is serif\r\n   */ isSerifFont(fontName) {\n        const serifIndicators = [\n            \"serif\",\n            \"times\",\n            \"minion\",\n            \"georgia\",\n            \"garamond\",\n            \"baskerville\",\n            \"caslon\",\n            \"mincho\",\n            \"songti\",\n            \"book\"\n        ];\n        return serifIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Check if font is monospace\r\n   */ isMonospaceFont(fontName) {\n        const monospaceIndicators = [\n            \"mono\",\n            \"courier\",\n            \"code\",\n            \"console\",\n            \"terminal\",\n            \"typewriter\"\n        ];\n        return monospaceIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Check if font is geometric sans-serif\r\n   */ isGeometricFont(fontName) {\n        const geometricIndicators = [\n            \"futura\",\n            \"avenir\",\n            \"nunito\",\n            \"inter\",\n            \"circular\",\n            \"geometric\"\n        ];\n        return geometricIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Check if font is grotesque sans-serif\r\n   */ isGrotesqueFont(fontName) {\n        const grotesqueIndicators = [\n            \"helvetica\",\n            \"arial\",\n            \"roboto\",\n            \"work\",\n            \"franklin\",\n            \"akzidenz\"\n        ];\n        return grotesqueIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Check if font is display type\r\n   */ isDisplayFont(fontName) {\n        const displayIndicators = [\n            \"display\",\n            \"title\",\n            \"headline\",\n            \"poster\",\n            \"banner\",\n            \"playfair\"\n        ];\n        return displayIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Check if font is condensed\r\n   */ isCondensedFont(fontName) {\n        const condensedIndicators = [\n            \"condensed\",\n            \"compressed\",\n            \"narrow\",\n            \"compact\"\n        ];\n        return condensedIndicators.some((indicator)=>fontName.includes(indicator));\n    }\n    /**\r\n   * Extract weight from font style\r\n   */ extractWeight(fontStyle) {\n        const style = (fontStyle || \"\").toLowerCase();\n        if (style.includes(\"thin\")) return \"thin\";\n        if (style.includes(\"light\")) return \"light\";\n        if (style.includes(\"medium\")) return \"medium\";\n        if (style.includes(\"semibold\") || style.includes(\"semi bold\")) return \"semibold\";\n        if (style.includes(\"bold\")) return \"bold\";\n        if (style.includes(\"black\") || style.includes(\"heavy\")) return \"black\";\n        return \"regular\";\n    }\n    /**\r\n   * Extract keywords from font name for matching\r\n   */ extractKeywords(fontName) {\n        // Remove common suffixes and split into words\n        const cleaned = fontName.replace(/\\s+(pro|std|regular|bold|italic|light|medium|heavy|black|mt)$/gi, \"\").replace(/[^\\w\\s]/g, \" \").toLowerCase();\n        return cleaned.split(/\\s+/).filter((word)=>word.length > 2);\n    }\n    /**\r\n   * Find best matching Next.js font based on analysis\r\n   * @param {Object} analysis - Font analysis result\r\n   * @param {string} originalName - Original font name for logging\r\n   * @returns {Object} Best matching Next.js font configuration\r\n   */ findBestNextJSFont(analysis, originalName) {\n        let candidates = [];\n        // Get font category\n        if (analysis.language === \"japanese\") {\n            candidates = this.nextFontDatabase.japanese;\n        } else if (analysis.language === \"chinese\") {\n            candidates = this.nextFontDatabase.chinese;\n        } else if (analysis.category === \"monospace\") {\n            candidates = this.nextFontDatabase.monospace;\n        } else if (analysis.category === \"serif\") {\n            const subcategory = analysis.subcategory || \"traditional\";\n            candidates = this.nextFontDatabase.serif[subcategory] || this.nextFontDatabase.serif.traditional;\n        } else {\n            // sans-serif\n            const subcategory = analysis.subcategory || \"humanist\";\n            candidates = this.nextFontDatabase[\"sans-serif\"][subcategory] || this.nextFontDatabase[\"sans-serif\"].humanist;\n        }\n        if (!candidates || candidates.length === 0) {\n            console.log(\"⚠️ No candidates found for \".concat(originalName, \", using default\"));\n            return this.getDefaultFontConfig();\n        }\n        // Score each candidate\n        const scoredCandidates = candidates.map((font)=>({\n                ...font,\n                score: this.calculateFontScore(font, analysis, originalName)\n            }));\n        // Sort by score (highest first)\n        scoredCandidates.sort((a, b)=>b.score - a.score);\n        const bestMatch = scoredCandidates[0];\n        console.log('\\uD83C\\uDFAF Best match for \"'.concat(originalName, '\": ').concat(bestMatch.family, \" (score: \").concat(bestMatch.score.toFixed(2), \")\"));\n        return bestMatch;\n    }\n    /**\r\n   * Calculate matching score between font and analysis\r\n   */ calculateFontScore(font, analysis, originalName) {\n        let score = 0;\n        const lowerOriginal = originalName.toLowerCase();\n        // Keyword matching (high weight)\n        const keywordMatches = analysis.detectedKeywords.filter((keyword)=>font.keywords.some((fontKeyword)=>fontKeyword.includes(keyword) || keyword.includes(fontKeyword)));\n        score += keywordMatches.length * 2;\n        // Exact keyword match (very high weight)\n        if (font.keywords.some((keyword)=>lowerOriginal.includes(keyword))) {\n            score += 5;\n        }\n        // Family name similarity\n        if (lowerOriginal.includes(font.family.toLowerCase().split(\" \")[0])) {\n            score += 3;\n        }\n        // Characteristics matching\n        const characteristicMatches = font.characteristics.filter((char)=>analysis.detectedKeywords.includes(char) || lowerOriginal.includes(char));\n        score += characteristicMatches.length * 1;\n        // Weight availability\n        const targetWeight = this.mapFontWeight(analysis.weight, font.weights);\n        if (font.weights.includes(targetWeight)) {\n            score += 0.5;\n        }\n        // Display font preference\n        if (analysis.isDisplay && font.characteristics.includes(\"display\")) {\n            score += 2;\n        }\n        return score;\n    }\n    /**\r\n   * Build final font configuration\r\n   * @param {Object} fontConfig - Next.js font configuration\r\n   * @param {string} fontStyle - Original font style\r\n   * @param {number} fontSize - Font size\r\n   * @param {string} originalFamily - Original font family name\r\n   * @returns {Object} Complete font configuration\r\n   */ buildFontConfig(fontConfig, fontStyle, fontSize, originalFamily) {\n        // Safety check\n        if (!fontConfig) {\n            console.error(\"⚠️ buildFontConfig received null/undefined fontConfig\");\n            fontConfig = this.getDefaultFontConfig();\n        }\n        const weight = this.mapFontWeight(fontStyle, fontConfig.weights);\n        const style = this.mapFontStyle(fontStyle);\n        // ENHANCED: Extract complete style analysis\n        const styleAnalysis = this.analyzeComplexFontStyle(fontStyle);\n        return {\n            // Next.js specific\n            nextFont: fontConfig.nextFont,\n            nextFontVariable: \"--font-\".concat(fontConfig.nextFont.toLowerCase()),\n            // CSS properties\n            fontFamily: fontConfig.family,\n            fontSize: \"\".concat(fontSize, \"px\"),\n            fontWeight: weight,\n            fontStyle: style,\n            // ENHANCED: Complete style information\n            completeStyle: {\n                weight: weight,\n                style: style,\n                isItalic: styleAnalysis.isItalic,\n                isBold: styleAnalysis.isBold,\n                originalStyle: fontStyle,\n                complexStyle: styleAnalysis.complexStyle,\n                // CSS class suggestions\n                cssClasses: this.generateCSSClasses(styleAnalysis),\n                // Multiple weights for Next.js font loading\n                requiredWeights: this.getRequiredWeights(styleAnalysis, fontConfig.weights),\n                requiredStyles: this.getRequiredStyles(styleAnalysis)\n            },\n            // Fallback chain\n            fontFamilyFallback: [\n                fontConfig.family,\n                \"system-ui\",\n                \"-apple-system\",\n                \"sans-serif\"\n            ].join(\", \"),\n            // Metadata\n            category: fontConfig.characteristics ? fontConfig.characteristics[0] : \"sans-serif\",\n            isGoogleFont: fontConfig.googleFont || false,\n            isSystemFont: fontConfig.systemFont || false,\n            // Original values\n            originalFamily: originalFamily,\n            originalStyle: fontStyle,\n            originalSize: fontSize,\n            // Mapping info\n            mappingConfidence: fontConfig.score || 0,\n            mappingReason: this.generateMappingReason(fontConfig, originalFamily)\n        };\n    }\n    /**\r\n   * Analyze complex font styles like \"Bold Italic\", \"Semibold Condensed\", etc.\r\n   * @param {string} fontStyle - Font style string\r\n   * @returns {Object} Style analysis result\r\n   */ analyzeComplexFontStyle(fontStyle) {\n        if (!fontStyle) {\n            return {\n                isBold: false,\n                isItalic: false,\n                complexStyle: \"regular\",\n                weight: \"400\",\n                style: \"normal\"\n            };\n        }\n        const style = fontStyle.toLowerCase();\n        const analysis = {\n            isBold: style.includes(\"bold\"),\n            isItalic: style.includes(\"italic\") || style.includes(\"oblique\"),\n            isLight: style.includes(\"light\"),\n            isMedium: style.includes(\"medium\"),\n            isSemibold: style.includes(\"semibold\") || style.includes(\"demibold\"),\n            isBlack: style.includes(\"black\") || style.includes(\"heavy\"),\n            isCondensed: style.includes(\"condensed\") || style.includes(\"compressed\"),\n            originalStyle: fontStyle\n        };\n        // Determine complex style description\n        let complexStyle = \"regular\";\n        if (analysis.isBold && analysis.isItalic) {\n            complexStyle = \"bold-italic\";\n        } else if (analysis.isBold) {\n            complexStyle = \"bold\";\n        } else if (analysis.isItalic) {\n            complexStyle = \"italic\";\n        } else if (analysis.isSemibold) {\n            complexStyle = analysis.isItalic ? \"semibold-italic\" : \"semibold\";\n        } else if (analysis.isLight) {\n            complexStyle = analysis.isItalic ? \"light-italic\" : \"light\";\n        } else if (analysis.isMedium) {\n            complexStyle = analysis.isItalic ? \"medium-italic\" : \"medium\";\n        } else if (analysis.isBlack) {\n            complexStyle = analysis.isItalic ? \"black-italic\" : \"black\";\n        }\n        analysis.complexStyle = complexStyle;\n        analysis.weight = this.extractWeight(fontStyle);\n        analysis.style = analysis.isItalic ? \"italic\" : \"normal\";\n        return analysis;\n    }\n    /**\r\n   * Generate CSS classes for styling\r\n   * @param {Object} styleAnalysis - Style analysis result\r\n   * @returns {Array} CSS class suggestions\r\n   */ generateCSSClasses(styleAnalysis) {\n        const classes = [];\n        if (styleAnalysis.isBold) classes.push(\"font-bold\");\n        else if (styleAnalysis.isSemibold) classes.push(\"font-semibold\");\n        else if (styleAnalysis.isMedium) classes.push(\"font-medium\");\n        else if (styleAnalysis.isLight) classes.push(\"font-light\");\n        else classes.push(\"font-normal\");\n        if (styleAnalysis.isItalic) classes.push(\"italic\");\n        return classes;\n    }\n    /**\r\n   * Get required weights for Next.js font loading\r\n   * @param {Object} styleAnalysis - Style analysis result\r\n   * @param {Array} availableWeights - Available weights\r\n   * @returns {Array} Required weights\r\n   */ getRequiredWeights(styleAnalysis, availableWeights) {\n        const weights = [\n            \"400\"\n        ]; // Always include normal\n        if (styleAnalysis.isBold && availableWeights.includes(\"700\")) {\n            weights.push(\"700\");\n        }\n        if (styleAnalysis.isSemibold && availableWeights.includes(\"600\")) {\n            weights.push(\"600\");\n        }\n        if (styleAnalysis.isMedium && availableWeights.includes(\"500\")) {\n            weights.push(\"500\");\n        }\n        if (styleAnalysis.isLight && availableWeights.includes(\"300\")) {\n            weights.push(\"300\");\n        }\n        if (styleAnalysis.isBlack && availableWeights.includes(\"900\")) {\n            weights.push(\"900\");\n        }\n        return [\n            ...new Set(weights)\n        ];\n    }\n    /**\r\n   * Get required styles for Next.js font loading\r\n   * @param {Object} styleAnalysis - Style analysis result\r\n   * @returns {Array} Required styles\r\n   */ getRequiredStyles(styleAnalysis) {\n        const styles = [\n            \"normal\"\n        ];\n        if (styleAnalysis.isItalic) {\n            styles.push(\"italic\");\n        }\n        return styles;\n    }\n    /**\r\n   * Generate explanation for why this font was chosen\r\n   */ generateMappingReason(fontConfig, originalFamily) {\n        const reasons = [];\n        if (fontConfig.keywords && fontConfig.keywords.some((k)=>originalFamily.toLowerCase().includes(k))) {\n            reasons.push(\"keyword match\");\n        }\n        if (fontConfig.characteristics) {\n            reasons.push(\"\".concat(fontConfig.characteristics[0], \" characteristics\"));\n        }\n        if (fontConfig.googleFont) {\n            reasons.push(\"Google Font availability\");\n        }\n        return reasons.length > 0 ? reasons.join(\", \") : \"category fallback\";\n    }\n    /**\r\n   * Map InDesign font style to CSS font weight\r\n   * @param {string} fontStyle - InDesign font style\r\n   * @param {Array} availableWeights - Available weights for font\r\n   * @returns {string} CSS font weight\r\n   */ mapFontWeight(fontStyle) {\n        let availableWeights = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [\n            \"400\"\n        ];\n        const style = (fontStyle || \"\").toLowerCase();\n        // Weight mapping\n        const weightMap = {\n            thin: \"100\",\n            extralight: \"200\",\n            light: \"300\",\n            regular: \"400\",\n            normal: \"400\",\n            medium: \"500\",\n            semibold: \"600\",\n            bold: \"700\",\n            extrabold: \"800\",\n            black: \"900\",\n            heavy: \"900\"\n        };\n        // Check for weight keywords in style\n        for (const [keyword, weight] of Object.entries(weightMap)){\n            if (style.includes(keyword)) {\n                // Ensure the weight is available\n                return availableWeights.includes(weight) ? weight : availableWeights.includes(\"400\") ? \"400\" : availableWeights[0];\n            }\n        }\n        // Default to normal weight\n        return availableWeights.includes(\"400\") ? \"400\" : availableWeights[0];\n    }\n    /**\r\n   * Map InDesign font style to CSS font style\r\n   * @param {string} fontStyle - InDesign font style\r\n   * @returns {string} CSS font style\r\n   */ mapFontStyle(fontStyle) {\n        const style = (fontStyle || \"\").toLowerCase();\n        if (style.includes(\"italic\") || style.includes(\"oblique\")) {\n            return \"italic\";\n        }\n        return \"normal\";\n    }\n    /**\r\n   * Get default fallback font configuration\r\n   * @returns {Object} Default font configuration\r\n   */ getDefaultFontConfig() {\n        return this.nextFontDatabase[\"sans-serif\"].humanist[0]; // Inter\n    }\n    /**\r\n   * Get default fallback font\r\n   * @returns {Object} Default font configuration\r\n   */ getDefaultFont() {\n        return this.buildFontConfig(this.getDefaultFontConfig(), \"Regular\", 16, \"Default Font\");\n    }\n    /**\r\n   * Generate Next.js font imports code\r\n   * @returns {string} Import statements for fonts\r\n   */ generateNextFontImports() {\n        const imports = Array.from(this.nextFontImports).map((fontName)=>{\n            return \"import { \".concat(fontName, \" } from 'next/font/google';\");\n        });\n        return imports.join(\"\\n\");\n    }\n    /**\r\n   * Generate Next.js font variable definitions\r\n   * @returns {string} Font variable definitions\r\n   */ generateFontVariables() {\n        const variables = Array.from(this.nextFontImports).map((fontName)=>{\n            // Find font config for weights and styles\n            const fontConfig = this.findFontConfigByNextFont(fontName);\n            // ENHANCED: Collect all required weights and styles from mapped fonts\n            const allRequiredWeights = new Set([\n                \"400\"\n            ]); // Always include normal\n            const allRequiredStyles = new Set([\n                \"normal\"\n            ]); // Always include normal\n            // Check all cached fonts for this Next.js font to see what weights/styles are needed\n            for (const [cacheKey, cachedFont] of this.fontCache.entries()){\n                if (cachedFont.nextFont === fontName) {\n                    var _cachedFont_completeStyle, _cachedFont_completeStyle1;\n                    if ((_cachedFont_completeStyle = cachedFont.completeStyle) === null || _cachedFont_completeStyle === void 0 ? void 0 : _cachedFont_completeStyle.requiredWeights) {\n                        cachedFont.completeStyle.requiredWeights.forEach((w)=>allRequiredWeights.add(w));\n                    }\n                    if ((_cachedFont_completeStyle1 = cachedFont.completeStyle) === null || _cachedFont_completeStyle1 === void 0 ? void 0 : _cachedFont_completeStyle1.requiredStyles) {\n                        cachedFont.completeStyle.requiredStyles.forEach((s)=>allRequiredStyles.add(s));\n                    }\n                }\n            }\n            const weights = Array.from(allRequiredWeights).filter((w)=>fontConfig.weights.includes(w));\n            const styles = Array.from(allRequiredStyles).filter((s)=>fontConfig.styles.includes(s));\n            return \"const \".concat(fontName.toLowerCase(), \" = \").concat(fontName, \"({\\n  weight: [\").concat(weights.map((w)=>\"'\".concat(w, \"'\")).join(\", \"), \"],\\n  style: [\").concat(styles.map((s)=>\"'\".concat(s, \"'\")).join(\", \"), \"],\\n  subsets: ['latin'],\\n  variable: '--font-\").concat(fontName.toLowerCase(), \"',\\n  display: 'swap' // Optimize loading\\n});\");\n        });\n        return variables.join(\"\\n\\n\");\n    }\n    /**\r\n   * Find font config by Next.js font name\r\n   */ findFontConfigByNextFont(nextFontName) {\n        // Search through all categories\n        for (const category of Object.values(this.nextFontDatabase)){\n            if (Array.isArray(category)) {\n                const found = category.find((f)=>f.nextFont === nextFontName);\n                if (found) return found;\n            } else {\n                for (const subcategory of Object.values(category)){\n                    const found = subcategory.find((f)=>f.nextFont === nextFontName);\n                    if (found) return found;\n                }\n            }\n        }\n        // Default fallback\n        return this.getDefaultFontConfig();\n    }\n    /**\r\n   * Get all unique fonts used in a document\r\n   * @param {Object} documentData - Processed IDML document data\r\n   * @returns {Array} Array of font configurations\r\n   */ extractDocumentFonts(documentData) {\n        const usedFonts = new Set();\n        const fontConfigs = [];\n        console.log(\"\\uD83D\\uDD0D Extracting fonts from document data...\");\n        // Extract fonts from stories\n        if (documentData.stories) {\n            Object.values(documentData.stories).forEach((story)=>{\n                if (story.content && story.content.formattedContent) {\n                    story.content.formattedContent.forEach((segment)=>{\n                        if (segment.formatting && segment.formatting.fontFamily) {\n                            const key = \"\".concat(segment.formatting.fontFamily, \"-\").concat(segment.formatting.fontStyle || \"Regular\");\n                            if (!usedFonts.has(key)) {\n                                usedFonts.add(key);\n                                const config = this.mapToNextFont(segment.formatting.fontFamily, segment.formatting.fontStyle, segment.formatting.fontSize || 16);\n                                fontConfigs.push(config);\n                            }\n                        }\n                    });\n                }\n            });\n        }\n        // Extract fonts from resources\n        if (documentData.resources && documentData.resources.fonts) {\n            Object.values(documentData.resources.fonts).forEach((fontFamily)=>{\n                if (fontFamily.fonts) {\n                    fontFamily.fonts.forEach((font)=>{\n                        const key = \"\".concat(font.fontFamily, \"-\").concat(font.fontStyleName);\n                        if (!usedFonts.has(key)) {\n                            usedFonts.add(key);\n                            const config = this.mapToNextFont(font.fontFamily, font.fontStyleName, 16, {\n                                postScriptName: font.postScriptName,\n                                status: font.status\n                            });\n                            fontConfigs.push(config);\n                        }\n                    });\n                }\n            });\n        }\n        console.log(\"\\uD83D\\uDCCA Extracted \".concat(fontConfigs.length, \" unique fonts from document\"));\n        // Log summary\n        fontConfigs.forEach((font, index)=>{\n            console.log(\"   \".concat(index + 1, '. \"').concat(font.originalFamily, '\" → \"').concat(font.fontFamily, '\" (').concat(font.mappingReason, \")\"));\n        });\n        return fontConfigs;\n    }\n    /**\r\n   * Clear caches\r\n   */ clearCache() {\n        this.fontCache.clear();\n        this.nextFontImports.clear();\n    }\n    constructor(){\n        // Available Next.js font categories and their characteristics\n        this.nextFontDatabase = this.initializeNextFontDatabase();\n        this.fontCache = new Map(); // Cache for resolved fonts\n        this.nextFontImports = new Set(); // Track which fonts need to be imported\n    }\n}\nmodule.exports = NextFontMapper;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/utils/NextFontMapper.js\n"));

/***/ })

});