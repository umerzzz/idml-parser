"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/view/[uploadId]",{

/***/ "./lib/parsers/DocumentParser.js":
/*!***************************************!*\
  !*** ./lib/parsers/DocumentParser.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nconst path = __webpack_require__(/*! path */ \"./node_modules/next/dist/compiled/path-browserify/index.js\");\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass DocumentParser {\n    async parseDocumentStructure(extractedData, xmlParser) {\n        console.log(\"Parsing document structure...\");\n        console.log(\"\\uD83D\\uDD0D Total files to process:\", Object.keys(extractedData).length);\n        // Parse designmap.xml first (main document structure)\n        if (extractedData[\"designmap.xml\"]) {\n            console.log(\"Parsing designmap.xml...\");\n            try {\n                const designMapData = xmlParser.parse(extractedData[\"designmap.xml\"]);\n                this.document = designMapData.Document || designMapData;\n                await this.extractDocumentInfo(this.document);\n                console.log(\"✅ DesignMap parsed successfully\");\n            } catch (error) {\n                console.error(\"Error parsing designmap.xml:\", error);\n            }\n        }\n        // Parse Spreads\n        console.log(\"\\n\\uD83D\\uDCC4 === PARSING SPREADS ===\");\n        for (const [fileName, content] of Object.entries(extractedData)){\n            if (fileName.startsWith(\"Spreads/\")) {\n                console.log(\"\\uD83D\\uDD0D Processing spread:\", fileName);\n                await this.parseSpreadFile(fileName, content, xmlParser);\n            }\n        }\n        // Parse Master Spreads\n        console.log(\"\\n\\uD83C\\uDFA8 === PARSING MASTER SPREADS ===\");\n        for (const [fileName, content] of Object.entries(extractedData)){\n            if (fileName.startsWith(\"MasterSpreads/\")) {\n                console.log(\"\\uD83D\\uDD0D Processing master spread:\", fileName);\n                await this.parseMasterSpreadFile(fileName, content, xmlParser);\n            }\n        }\n    }\n    async extractDocumentInfo(document) {\n        console.log(\"Extracting document information...\");\n        if (!document) return;\n        // Extract document preferences and page setup\n        this.documentInfo = {\n            version: document[\"@_DOMVersion\"] || \"Unknown\",\n            self: document[\"@_Self\"] || \"Unknown\",\n            activeLayer: document[\"@_ActiveLayer\"] || null,\n            unusedSwatches: document[\"@_UnusedSwatches\"] || [],\n            // Document preferences\n            documentPreferences: this.extractDocumentPreferences(document),\n            // Page setup\n            pageSetup: this.extractPageSetup(document),\n            // Layers\n            layers: this.extractLayers(document),\n            // Pages\n            pages: this.extractPages(document)\n        };\n        console.log(\"✅ Document info extracted\");\n    }\n    extractDocumentPreferences(document) {\n        console.log(\"\\uD83D\\uDCCB Extracting document preferences...\");\n        console.log(\"Document keys:\", Object.keys(document));\n        const prefs = {};\n        // Try multiple possible locations for document preferences\n        let docPref = null;\n        if (document.DocumentPreference) {\n            docPref = document.DocumentPreference;\n            console.log(\"Found DocumentPreference\");\n        } else if (document.documentPreference) {\n            docPref = document.documentPreference;\n            console.log(\"Found documentPreference (lowercase)\");\n        } else if (document.Properties && document.Properties.DocumentPreference) {\n            docPref = document.Properties.DocumentPreference;\n            console.log(\"Found DocumentPreference in Properties\");\n        }\n        if (docPref) {\n            console.log(\"DocumentPreference keys:\", Object.keys(docPref));\n            prefs.pageWidth = parseFloat(docPref[\"@_PageWidth\"]) || 0;\n            prefs.pageHeight = parseFloat(docPref[\"@_PageHeight\"]) || 0;\n            prefs.left = parseFloat(docPref[\"@_Left\"]) || 0;\n            prefs.top = parseFloat(docPref[\"@_Top\"]) || 0;\n            prefs.right = parseFloat(docPref[\"@_Right\"]) || 0;\n            prefs.bottom = parseFloat(docPref[\"@_Bottom\"]) || 0;\n            prefs.columnCount = parseInt(docPref[\"@_ColumnCount\"]) || 1;\n            prefs.columnGutter = parseFloat(docPref[\"@_ColumnGutter\"]) || 0;\n            prefs.facingPages = docPref[\"@_FacingPages\"] === \"true\" || docPref[\"@_FacingPages\"] === true;\n            console.log(\"\\uD83D\\uDCCB Extracted document preferences:\", prefs);\n        } else {\n            console.log(\"⚠️ No DocumentPreference found in document\");\n        }\n        // Also try to extract margin preferences\n        let marginPref = null;\n        if (document.MarginPreference) {\n            marginPref = document.MarginPreference;\n            console.log(\"Found MarginPreference\");\n        } else if (document.marginPreference) {\n            marginPref = document.marginPreference;\n            console.log(\"Found marginPreference (lowercase)\");\n        } else if (document.Properties && document.Properties.MarginPreference) {\n            marginPref = document.Properties.MarginPreference;\n            console.log(\"Found MarginPreference in Properties\");\n        }\n        if (marginPref) {\n            console.log(\"MarginPreference keys:\", Object.keys(marginPref));\n            prefs.marginTop = parseFloat(marginPref[\"@_Top\"]) || 0;\n            prefs.marginBottom = parseFloat(marginPref[\"@_Bottom\"]) || 0;\n            prefs.marginLeft = parseFloat(marginPref[\"@_Left\"]) || 0;\n            prefs.marginRight = parseFloat(marginPref[\"@_Right\"]) || 0;\n            prefs.marginColumnCount = parseInt(marginPref[\"@_ColumnCount\"]) || 1;\n            prefs.marginColumnGutter = parseFloat(marginPref[\"@_ColumnGutter\"]) || 0;\n            console.log(\"\\uD83D\\uDCCF Extracted margin preferences:\", {\n                top: prefs.marginTop,\n                bottom: prefs.marginBottom,\n                left: prefs.marginLeft,\n                right: prefs.marginRight,\n                columnCount: prefs.marginColumnCount,\n                columnGutter: prefs.marginColumnGutter\n            });\n        }\n        return prefs;\n    }\n    extractPageSetup(document) {\n        const pageSetup = {\n            pages: [],\n            masterPages: [],\n            spreads: []\n        };\n        // Extract page information from document\n        if (document.Page) {\n            const pages = Array.isArray(document.Page) ? document.Page : [\n                document.Page\n            ];\n            pages.forEach((page)=>{\n                pageSetup.pages.push({\n                    self: page[\"@_Self\"],\n                    name: page[\"@_Name\"] || \"\",\n                    appliedMaster: page[\"@_AppliedMaster\"] || \"\",\n                    geometricBounds: IDMLUtils.parseGeometricBounds(page[\"@_GeometricBounds\"]),\n                    itemTransform: IDMLUtils.parseTransform(page[\"@_ItemTransform\"]),\n                    overrideList: page[\"@_OverrideList\"] || []\n                });\n            });\n        }\n        return pageSetup;\n    }\n    extractLayers(document) {\n        const layers = [];\n        if (document.Layer) {\n            const layerData = Array.isArray(document.Layer) ? document.Layer : [\n                document.Layer\n            ];\n            layerData.forEach((layer)=>{\n                layers.push({\n                    self: layer[\"@_Self\"],\n                    name: layer[\"@_Name\"] || \"\",\n                    visible: layer[\"@_Visible\"] !== false,\n                    locked: layer[\"@_Locked\"] === true,\n                    ignoreWrap: layer[\"@_IgnoreWrap\"] === true,\n                    showGuides: layer[\"@_ShowGuides\"] !== false,\n                    lockGuides: layer[\"@_LockGuides\"] === true,\n                    ui: layer[\"@_UI\"] || \"\",\n                    layerColor: layer[\"@_LayerColor\"] || \"LightBlue\"\n                });\n            });\n        }\n        this.layers = layers;\n        return layers;\n    }\n    extractPages(document) {\n        const pages = [];\n        if (document.Spread) {\n            const spreads = Array.isArray(document.Spread) ? document.Spread : [\n                document.Spread\n            ];\n            spreads.forEach((spread)=>{\n                if (spread.Page) {\n                    const spreadPages = Array.isArray(spread.Page) ? spread.Page : [\n                        spread.Page\n                    ];\n                    spreadPages.forEach((page)=>{\n                        pages.push({\n                            self: page[\"@_Self\"],\n                            name: page[\"@_Name\"] || \"\",\n                            appliedMaster: page[\"@_AppliedMaster\"] || \"\",\n                            geometricBounds: IDMLUtils.parseGeometricBounds(page[\"@_GeometricBounds\"]),\n                            itemTransform: IDMLUtils.parseTransform(page[\"@_ItemTransform\"]),\n                            spreadParent: spread[\"@_Self\"]\n                        });\n                    });\n                }\n            });\n        }\n        return pages;\n    }\n    async parseSpreadFile(fileName, content, xmlParser) {\n        console.log(\"\\uD83D\\uDCC4 Parsing spread: \".concat(fileName));\n        try {\n            var _parsed_Spread;\n            const parsed = xmlParser.parse(content);\n            const spreadId = path.basename(fileName, \".xml\");\n            const spreadData = ((_parsed_Spread = parsed.Spread) === null || _parsed_Spread === void 0 ? void 0 : _parsed_Spread.Spread) || parsed.Spread || parsed;\n            if (parsed.Spread) {\n                console.log(\"Spread wrapper keys:\", Object.keys(parsed.Spread));\n                if (parsed.Spread.Spread) {\n                    console.log(\"Actual spread keys:\", Object.keys(parsed.Spread.Spread));\n                }\n            }\n            if (spreadData.Page) {\n                const pages = Array.isArray(spreadData.Page) ? spreadData.Page : [\n                    spreadData.Page\n                ];\n                console.log(\"Found \".concat(pages.length, \" pages in spread\"));\n                pages.forEach((page, index)=>{\n                    console.log(\"Page \".concat(index, \" keys:\"), Object.keys(page));\n                    // Look for elements in the page\n                    Object.keys(page).forEach((key)=>{\n                        if (key !== \"@_Self\" && key !== \"@_Name\" && key !== \"@_GeometricBounds\" && key !== \"@_ItemTransform\" && key !== \"@_AppliedMaster\") {\n                            const value = page[key];\n                            if (Array.isArray(value)) {\n                                console.log(\"  Found array \".concat(key, \" with \").concat(value.length, \" items\"));\n                            } else if (typeof value === \"object\") {\n                                console.log(\"  Found object \".concat(key, \":\"), Object.keys(value));\n                            }\n                        }\n                    });\n                });\n            } else {\n                console.log(\"No Page property found in spread\");\n            }\n            // Check for direct elements in spread\n            Object.keys(spreadData).forEach((key)=>{\n                if (key.includes(\"Frame\") || key.includes(\"Rectangle\") || key.includes(\"Text\") || key.includes(\"Group\") || key.includes(\"Oval\")) {\n                    console.log(\"Found potential elements directly in spread: \".concat(key), Array.isArray(spreadData[key]) ? spreadData[key].length : \"single\");\n                }\n            });\n            // Extract detailed spread information\n            const detailedSpread = {\n                self: spreadData[\"@_Self\"],\n                flattenerOverride: spreadData[\"@_FlattenerOverride\"] || \"\",\n                bindingLocation: parseFloat(spreadData[\"@_BindingLocation\"]) || 0,\n                allowPageShuffle: spreadData[\"@_AllowPageShuffle\"] !== false,\n                // Extract page elements\n                pages: this.elementParser.extractSpreadPages(spreadData),\n                // Extract all page items (text frames, rectangles, etc.)\n                pageItems: this.elementParser.extractPageItems(spreadData)\n            };\n            this.spreads[spreadId] = detailedSpread;\n            console.log(\"✅ Spread \".concat(spreadId, \" parsed with \").concat(detailedSpread.pageItems.length, \" items\"));\n        } catch (error) {\n            console.error(\"❌ Error parsing spread \".concat(fileName, \":\"), error.message);\n        }\n    }\n    async parseMasterSpreadFile(fileName, content, xmlParser) {\n        console.log(\"\\uD83C\\uDFA8 Parsing master spread: \".concat(fileName));\n        try {\n            var _parsed_MasterSpread;\n            const parsed = xmlParser.parse(content);\n            const masterId = path.basename(fileName, \".xml\");\n            const masterData = ((_parsed_MasterSpread = parsed.MasterSpread) === null || _parsed_MasterSpread === void 0 ? void 0 : _parsed_MasterSpread.MasterSpread) || parsed.MasterSpread || parsed;\n            console.log(\"Parsed master spread keys:\", Object.keys(parsed));\n            if (parsed.MasterSpread) {\n                console.log(\"MasterSpread wrapper keys:\", Object.keys(parsed.MasterSpread));\n                if (parsed.MasterSpread.MasterSpread) {\n                    console.log(\"Actual master spread keys:\", Object.keys(parsed.MasterSpread.MasterSpread));\n                }\n            }\n            // Extract detailed master spread information\n            const detailedMaster = {\n                self: masterData[\"@_Self\"],\n                name: masterData[\"@_Name\"] || \"\",\n                namePrefix: masterData[\"@_NamePrefix\"] || \"\",\n                basedOn: masterData[\"@_BasedOn\"] || \"\",\n                itemTransform: IDMLUtils.parseTransform(masterData[\"@_ItemTransform\"]),\n                // Extract master pages\n                pages: this.elementParser.extractMasterPages(masterData),\n                // Extract master page items\n                pageItems: this.elementParser.extractPageItems(masterData)\n            };\n            this.masterSpreads[masterId] = detailedMaster;\n            console.log(\"✅ Master spread \".concat(masterId, \" parsed with \").concat(detailedMaster.pageItems.length, \" items\"));\n        } catch (error) {\n            console.error(\"❌ Error parsing master spread \".concat(fileName, \":\"), error.message);\n        }\n    }\n    async extractDetailedInformation() {\n        console.log(\"Extracting detailed information with enhanced processing...\");\n        this.pageInfo = {\n            dimensions: this.calculatePageDimensions(),\n            margins: this.calculateMargins(),\n            bleeds: this.calculateBleeds(),\n            guides: this.extractGuides(),\n            grids: this.extractGrids()\n        };\n        this.elementParser.createElementPositionMapFixed(); // Use the fixed version\n        console.log(\"✅ Enhanced detailed information extracted\");\n    }\n    calculatePageDimensions() {\n        var _this_documentInfo_preferences, _this_documentInfo_preferences_viewPreferences, _this_documentInfo_preferences1;\n        // Try to get dimensions from spreads first (most reliable)\n        if (this.spreads && Object.keys(this.spreads).length > 0) {\n            const firstSpread = Object.values(this.spreads)[0];\n            if (firstSpread.pages && firstSpread.pages.length > 0) {\n                const firstPage = firstSpread.pages[0];\n                if (firstPage.geometricBounds) {\n                    const bounds = firstPage.geometricBounds;\n                    return {\n                        width: bounds.width || bounds.right - bounds.left || 0,\n                        height: bounds.height || bounds.bottom - bounds.top || 0,\n                        facingPages: Object.values(this.spreads).some((spread)=>spread.pages && spread.pages.length > 1),\n                        units: \"Points\"\n                    };\n                }\n            }\n        }\n        // Fallback to document preferences\n        const docPrefs = ((_this_documentInfo_preferences = this.documentInfo.preferences) === null || _this_documentInfo_preferences === void 0 ? void 0 : _this_documentInfo_preferences.documentPreferences) || {};\n        return {\n            width: docPrefs.pageWidth || 0,\n            height: docPrefs.pageHeight || 0,\n            facingPages: docPrefs.facingPages || false,\n            units: ((_this_documentInfo_preferences1 = this.documentInfo.preferences) === null || _this_documentInfo_preferences1 === void 0 ? void 0 : (_this_documentInfo_preferences_viewPreferences = _this_documentInfo_preferences1.viewPreferences) === null || _this_documentInfo_preferences_viewPreferences === void 0 ? void 0 : _this_documentInfo_preferences_viewPreferences.horizontalMeasurementUnits) || \"Points\"\n        };\n    }\n    calculateMargins() {\n        var _this_documentInfo_preferences;\n        console.log(\"\\uD83D\\uDCCF Calculating margins from multiple sources...\");\n        // Try to get margins from master pages first (most reliable)\n        if (this.masterSpreads && Object.keys(this.masterSpreads).length > 0) {\n            const firstMaster = Object.values(this.masterSpreads)[0];\n            if (firstMaster.pages && firstMaster.pages.length > 0) {\n                const firstMasterPage = firstMaster.pages[0];\n                // Look for margin preferences in master page\n                // This will be populated by the improved master spread parsing\n                if (firstMasterPage.marginPreference) {\n                    const masterMargins = {\n                        top: firstMasterPage.marginPreference.top || 0,\n                        bottom: firstMasterPage.marginPreference.bottom || 0,\n                        left: firstMasterPage.marginPreference.left || 0,\n                        right: firstMasterPage.marginPreference.right || 0,\n                        columnCount: firstMasterPage.marginPreference.columnCount || 1,\n                        columnGutter: firstMasterPage.marginPreference.columnGutter || 0\n                    };\n                    console.log(\"\\uD83D\\uDCCF Found margins from master page:\", masterMargins);\n                    return masterMargins;\n                }\n            }\n        }\n        // Fallback to document preferences\n        const docPrefs = this.documentInfo.documentPreferences || {};\n        const marginPrefs = ((_this_documentInfo_preferences = this.documentInfo.preferences) === null || _this_documentInfo_preferences === void 0 ? void 0 : _this_documentInfo_preferences.marginPreferences) || {};\n        // Check for margin data in document preferences (fallback)\n        const margins = {\n            top: marginPrefs.top || docPrefs.marginTop || docPrefs.top || 0,\n            bottom: marginPrefs.bottom || docPrefs.marginBottom || docPrefs.bottom || 0,\n            left: marginPrefs.left || docPrefs.marginLeft || docPrefs.left || 0,\n            right: marginPrefs.right || docPrefs.marginRight || docPrefs.right || 0,\n            columnCount: marginPrefs.columnCount || docPrefs.marginColumnCount || docPrefs.columnCount || 1,\n            columnGutter: marginPrefs.columnGutter || docPrefs.marginColumnGutter || docPrefs.columnGutter || 0\n        };\n        console.log(\"\\uD83D\\uDCCF Calculated margins (fallback):\", margins);\n        return margins;\n    }\n    calculateBleeds() {\n        var _this_documentInfo_preferences;\n        const docPrefs = ((_this_documentInfo_preferences = this.documentInfo.preferences) === null || _this_documentInfo_preferences === void 0 ? void 0 : _this_documentInfo_preferences.documentPreferences) || {};\n        return {\n            top: docPrefs.documentBleedTopOffset || 0,\n            bottom: docPrefs.documentBleedBottomOffset || 0,\n            inside: docPrefs.documentBleedInsideOrLeftOffset || 0,\n            outside: docPrefs.documentBleedOutsideOrRightOffset || 0\n        };\n    }\n    extractGuides() {\n        const guides = [];\n        // Extract guides from spreads\n        Object.values(this.spreads).forEach((spread)=>{\n            if (spread.pageItems) {\n                spread.pageItems.forEach((item)=>{\n                    if (item.type === \"Guide\") {\n                        guides.push({\n                            orientation: item.orientation || \"Horizontal\",\n                            location: item.location || 0,\n                            fitToPage: item.fitToPage || false,\n                            viewThreshold: item.viewThreshold || 0\n                        });\n                    }\n                });\n            }\n        });\n        return guides;\n    }\n    extractGrids() {\n        var _this_documentInfo_preferences;\n        const gridPrefs = ((_this_documentInfo_preferences = this.documentInfo.preferences) === null || _this_documentInfo_preferences === void 0 ? void 0 : _this_documentInfo_preferences.gridPreferences) || {};\n        return {\n            baseline: {\n                start: gridPrefs.baselineStart || 0,\n                division: gridPrefs.baselineDivision || 12,\n                shown: gridPrefs.baselineShown || false,\n                snapTo: gridPrefs.baselineSnapto || false\n            },\n            document: {\n                shown: gridPrefs.documentGridShown || false,\n                snapTo: gridPrefs.documentGridSnapto || false\n            }\n        };\n    }\n    // Utility method to get page content\n    getPageContent(pageId) {\n        return this.elementParser.getPageContent(pageId);\n    }\n    getDocument() {\n        return this.document;\n    }\n    getSpreads() {\n        return this.spreads;\n    }\n    getMasterSpreads() {\n        return this.masterSpreads;\n    }\n    getDocumentInfo() {\n        return this.documentInfo;\n    }\n    getPageInfo() {\n        return this.pageInfo;\n    }\n    getLayers() {\n        return this.layers;\n    }\n    calculateCoordinateOffset() {\n        return IDMLUtils.calculateCoordinateOffset(this.elementParser.getElements());\n    }\n    constructor(elementParser){\n        this.elementParser = elementParser;\n        this.document = null;\n        this.spreads = {};\n        this.masterSpreads = {};\n        this.documentInfo = {};\n        this.pageInfo = {};\n        this.layers = [];\n    }\n}\nmodule.exports = DocumentParser;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/parsers/DocumentParser.js\n"));

/***/ })

});