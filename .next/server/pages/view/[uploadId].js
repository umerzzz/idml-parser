"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/view/[uploadId]";
exports.ids = ["pages/view/[uploadId]"];
exports.modules = {

/***/ "./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2Fview%2F%5BuploadId%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Cview%5C%5BuploadId%5D.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2Fview%2F%5BuploadId%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Cview%5C%5BuploadId%5D.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getServerSideProps: () => (/* binding */ getServerSideProps),\n/* harmony export */   getStaticPaths: () => (/* binding */ getStaticPaths),\n/* harmony export */   getStaticProps: () => (/* binding */ getStaticProps),\n/* harmony export */   reportWebVitals: () => (/* binding */ reportWebVitals),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   unstable_getServerProps: () => (/* binding */ unstable_getServerProps),\n/* harmony export */   unstable_getServerSideProps: () => (/* binding */ unstable_getServerSideProps),\n/* harmony export */   unstable_getStaticParams: () => (/* binding */ unstable_getStaticParams),\n/* harmony export */   unstable_getStaticPaths: () => (/* binding */ unstable_getStaticPaths),\n/* harmony export */   unstable_getStaticProps: () => (/* binding */ unstable_getStaticProps)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages/module.compiled */ \"./node_modules/next/dist/server/future/route-modules/pages/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! private-next-pages/_document */ \"./node_modules/next/dist/pages/_document.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! private-next-pages/_app */ \"./node_modules/next/dist/pages/_app.js\");\n/* harmony import */ var private_next_pages_app__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _pages_view_uploadId_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pages\\view\\[uploadId].js */ \"./pages/view/[uploadId].js\");\n\n\n\n// Import the app and document modules.\n\n\n// Import the userland code.\n\n// Re-export the component (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_view_uploadId_js__WEBPACK_IMPORTED_MODULE_5__, \"default\"));\n// Re-export methods.\nconst getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_view_uploadId_js__WEBPACK_IMPORTED_MODULE_5__, \"getStaticProps\");\nconst getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_view_uploadId_js__WEBPACK_IMPORTED_MODULE_5__, \"getStaticPaths\");\nconst getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_view_uploadId_js__WEBPACK_IMPORTED_MODULE_5__, \"getServerSideProps\");\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_view_uploadId_js__WEBPACK_IMPORTED_MODULE_5__, \"config\");\nconst reportWebVitals = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_view_uploadId_js__WEBPACK_IMPORTED_MODULE_5__, \"reportWebVitals\");\n// Re-export legacy methods.\nconst unstable_getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_view_uploadId_js__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticProps\");\nconst unstable_getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_view_uploadId_js__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticPaths\");\nconst unstable_getStaticParams = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_view_uploadId_js__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticParams\");\nconst unstable_getServerProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_view_uploadId_js__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getServerProps\");\nconst unstable_getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_view_uploadId_js__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getServerSideProps\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES,\n        page: \"/view/[uploadId]\",\n        pathname: \"/view/[uploadId]\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    components: {\n        App: (private_next_pages_app__WEBPACK_IMPORTED_MODULE_4___default()),\n        Document: (private_next_pages_document__WEBPACK_IMPORTED_MODULE_3___default())\n    },\n    userland: _pages_view_uploadId_js__WEBPACK_IMPORTED_MODULE_5__\n});\n\n//# sourceMappingURL=pages.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTJnBhZ2U9JTJGdmlldyUyRiU1QnVwbG9hZElkJTVEJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUN2aWV3JTVDJTVCdXBsb2FkSWQlNUQuanMmYWJzb2x1dGVBcHBQYXRoPXByaXZhdGUtbmV4dC1wYWdlcyUyRl9hcHAmYWJzb2x1dGVEb2N1bWVudFBhdGg9cHJpdmF0ZS1uZXh0LXBhZ2VzJTJGX2RvY3VtZW50Jm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDaEM7QUFDTDtBQUMxRDtBQUNvRDtBQUNWO0FBQzFDO0FBQ3lEO0FBQ3pEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxvREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyx1QkFBdUIsd0VBQUssQ0FBQyxvREFBUTtBQUNyQyx1QkFBdUIsd0VBQUssQ0FBQyxvREFBUTtBQUNyQywyQkFBMkIsd0VBQUssQ0FBQyxvREFBUTtBQUN6QyxlQUFlLHdFQUFLLENBQUMsb0RBQVE7QUFDN0Isd0JBQXdCLHdFQUFLLENBQUMsb0RBQVE7QUFDN0M7QUFDTyxnQ0FBZ0Msd0VBQUssQ0FBQyxvREFBUTtBQUM5QyxnQ0FBZ0Msd0VBQUssQ0FBQyxvREFBUTtBQUM5QyxpQ0FBaUMsd0VBQUssQ0FBQyxvREFBUTtBQUMvQyxnQ0FBZ0Msd0VBQUssQ0FBQyxvREFBUTtBQUM5QyxvQ0FBb0Msd0VBQUssQ0FBQyxvREFBUTtBQUN6RDtBQUNPLHdCQUF3Qix5R0FBZ0I7QUFDL0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxXQUFXO0FBQ1gsZ0JBQWdCO0FBQ2hCLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2lkbWwtdmlld2VyLz9lMTYxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgYXBwIGFuZCBkb2N1bWVudCBtb2R1bGVzLlxuaW1wb3J0IERvY3VtZW50IGZyb20gXCJwcml2YXRlLW5leHQtcGFnZXMvX2RvY3VtZW50XCI7XG5pbXBvcnQgQXBwIGZyb20gXCJwcml2YXRlLW5leHQtcGFnZXMvX2FwcFwiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcdmlld1xcXFxbdXBsb2FkSWRdLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGNvbXBvbmVudCAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IG1ldGhvZHMuXG5leHBvcnQgY29uc3QgZ2V0U3RhdGljUHJvcHMgPSBob2lzdCh1c2VybGFuZCwgXCJnZXRTdGF0aWNQcm9wc1wiKTtcbmV4cG9ydCBjb25zdCBnZXRTdGF0aWNQYXRocyA9IGhvaXN0KHVzZXJsYW5kLCBcImdldFN0YXRpY1BhdGhzXCIpO1xuZXhwb3J0IGNvbnN0IGdldFNlcnZlclNpZGVQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCBcImdldFNlcnZlclNpZGVQcm9wc1wiKTtcbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG5leHBvcnQgY29uc3QgcmVwb3J0V2ViVml0YWxzID0gaG9pc3QodXNlcmxhbmQsIFwicmVwb3J0V2ViVml0YWxzXCIpO1xuLy8gUmUtZXhwb3J0IGxlZ2FjeSBtZXRob2RzLlxuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX2dldFN0YXRpY1Byb3BzID0gaG9pc3QodXNlcmxhbmQsIFwidW5zdGFibGVfZ2V0U3RhdGljUHJvcHNcIik7XG5leHBvcnQgY29uc3QgdW5zdGFibGVfZ2V0U3RhdGljUGF0aHMgPSBob2lzdCh1c2VybGFuZCwgXCJ1bnN0YWJsZV9nZXRTdGF0aWNQYXRoc1wiKTtcbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTdGF0aWNQYXJhbXMgPSBob2lzdCh1c2VybGFuZCwgXCJ1bnN0YWJsZV9nZXRTdGF0aWNQYXJhbXNcIik7XG5leHBvcnQgY29uc3QgdW5zdGFibGVfZ2V0U2VydmVyUHJvcHMgPSBob2lzdCh1c2VybGFuZCwgXCJ1bnN0YWJsZV9nZXRTZXJ2ZXJQcm9wc1wiKTtcbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTZXJ2ZXJTaWRlUHJvcHMgPSBob2lzdCh1c2VybGFuZCwgXCJ1bnN0YWJsZV9nZXRTZXJ2ZXJTaWRlUHJvcHNcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc1JvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFUyxcbiAgICAgICAgcGFnZTogXCIvdmlldy9bdXBsb2FkSWRdXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi92aWV3L1t1cGxvYWRJZF1cIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBBcHAsXG4gICAgICAgIERvY3VtZW50XG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2Fview%2F%5BuploadId%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Cview%5C%5BuploadId%5D.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "./lib/IDMLProcessor.js":
/*!******************************!*\
  !*** ./lib/IDMLProcessor.js ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Core modules\n\nconst IDMLXMLParser = __webpack_require__(/*! ./parsers/XMLParser */ \"./lib/parsers/XMLParser.js\");\nconst FileExtractor = __webpack_require__(/*! ./extractors/FileExtractor */ \"./lib/extractors/FileExtractor.js\");\nconst StyleParser = __webpack_require__(/*! ./parsers/StyleParser */ \"./lib/parsers/StyleParser.js\");\nconst StoryParser = __webpack_require__(/*! ./parsers/StoryParser */ \"./lib/parsers/StoryParser.js\");\nconst ElementParser = __webpack_require__(/*! ./parsers/ElementParser */ \"./lib/parsers/ElementParser.js\");\nconst DocumentParser = __webpack_require__(/*! ./parsers/DocumentParser */ \"./lib/parsers/DocumentParser.js\");\nconst ImageProcessor = __webpack_require__(/*! ./processors/ImageProcessor */ \"./lib/processors/ImageProcessor.js\");\nconst DebugAnalyzer = __webpack_require__(/*! ./debug/DebugAnalyzer */ \"./lib/debug/DebugAnalyzer.js\");\nconst IDMLUtils = __webpack_require__(/*! ./utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\nclass IDMLProcessor {\n    constructor(){\n        // Initialize all modules\n        this.xmlParser = new IDMLXMLParser();\n        this.fileExtractor = new FileExtractor();\n        this.styleParser = new StyleParser();\n        this.elementParser = new ElementParser();\n        this.storyParser = new StoryParser(this.styleParser);\n        this.documentParser = new DocumentParser(this.elementParser, this.styleParser); // FIXED: Pass StyleParser\n        this.imageProcessor = new ImageProcessor(this.fileExtractor);\n        this.debugAnalyzer = new DebugAnalyzer();\n        // Maintain backward compatibility properties\n        this.document = null;\n        this.resources = {};\n        this.spreads = {};\n        this.stories = {};\n        this.masterSpreads = {};\n        this.documentInfo = {};\n        this.pageInfo = {};\n        this.elements = [];\n        this.layers = [];\n        this.styles = {\n            paragraph: {},\n            character: {},\n            object: {},\n            table: {},\n            cell: {}\n        };\n    }\n    async processIDML(filePath) {\n        console.log(\"Processing IDML file:\", filePath);\n        try {\n            // Extract ZIP contents\n            const extractedData = await this.fileExtractor.extractIDMLContents(filePath);\n            console.log(`Extracted ${Object.keys(extractedData).length} files from IDML`);\n            // Parse main structure\n            await this.parseDocumentStructure(extractedData);\n            // Extract detailed information\n            await this.extractDetailedInformation();\n            // Return the correct structure\n            const documentData = {\n                document: {\n                    version: this.document?.[\"@_DOMVersion\"] || \"Unknown\",\n                    pageCount: Math.max(1, this.elements.length > 0 ? 1 : 0),\n                    name: this.document?.[\"@_Name\"] || \"Untitled\",\n                    dimensions: this.pageInfo.dimensions\n                },\n                // === ADD GLOBAL STYLE INFO ===\n                paragraphStyles: this.styleParser.getParagraphStyles(),\n                characterStyles: this.styleParser.getCharacterStyles(),\n                fontDefinitions: this.styleParser.getFontDefinitions(),\n                // === END GLOBAL STYLE INFO ===\n                pageInfo: {\n                    dimensions: this.pageInfo.dimensions,\n                    margins: this.pageInfo.margins\n                },\n                elements: this.elements.map((element)=>({\n                        id: element.self,\n                        type: element.type,\n                        name: element.name,\n                        position: element.position,\n                        fill: element.fillColor,\n                        stroke: element.strokeColor,\n                        strokeWeight: element.strokeWeight,\n                        parentStory: element.parentStory,\n                        linkedImage: element.linkedImage,\n                        visible: element.visible,\n                        locked: element.locked,\n                        // Content frame specific properties\n                        isContentFrame: element.isContentFrame || false,\n                        hasPlacedContent: element.hasPlacedContent || false,\n                        contentType: element.contentType || null,\n                        // Image positioning within frame\n                        imagePosition: element.imagePosition || null,\n                        placedContent: element.placedContent || null\n                    })),\n                stories: Object.keys(this.stories).reduce((acc, storyId)=>{\n                    const story = this.stories[storyId];\n                    if (story?.content?.plainText) {\n                        acc[storyId] = {\n                            text: story.content.plainText,\n                            wordCount: story.content.wordCount,\n                            characterCount: story.content.characterCount,\n                            textColor: story.content.textColor,\n                            hasLineBreaks: story.content.lineBreakInfo?.hasLineBreaks || false,\n                            lineBreakCount: story.content.lineBreakInfo?.lineBreakCount || 0,\n                            // Include resolved styling information\n                            styling: this.styleParser.getStoryStyleSummary(story),\n                            // Include formatted content with resolved formatting\n                            formattedContent: story.content.formattedContent || []\n                        };\n                    }\n                    return acc;\n                }, {}),\n                debug22: {\n                    measurementUnits: this.documentInfo.preferences?.viewPreferences?.horizontalMeasurementUnits,\n                    coordinateOffset: this.calculateCoordinateOffset(),\n                    contentFramesCount: this.elements.filter((el)=>el.isContentFrame).length,\n                    imagesLinkedCount: this.elements.filter((el)=>el.linkedImage && !el.linkedImage.isEmbedded).length,\n                    embeddedImagesCount: this.elements.filter((el)=>el.linkedImage && el.linkedImage.isEmbedded).length\n                }\n            };\n            await this.addComprehensiveTextFormattingDebug();\n            console.log(\"✅ IDML processing completed. Elements:\", documentData.elements.length);\n            return documentData;\n        } catch (error) {\n            console.error(\"Error processing IDML:\", error);\n            throw error;\n        }\n    }\n    async parseDocumentStructure(extractedData) {\n        console.log(\"Parsing document structure...\");\n        // Parse Resources\n        console.log(\"\\n\\uD83D\\uDCCB === PARSING RESOURCES ===\");\n        for (const [fileName, content] of Object.entries(extractedData)){\n            if (fileName.startsWith(\"Resources/\")) {\n                console.log(\"\\uD83D\\uDD0D Processing resource:\", fileName);\n                await this.styleParser.parseResourceFile(fileName, content, this.xmlParser);\n            }\n        }\n        // Parse document structure (spreads, master spreads)\n        await this.documentParser.parseDocumentStructure(extractedData, this.xmlParser);\n        // Parse Stories\n        console.log(\"\\n\\uD83D\\uDCDD === PARSING STORIES ===\");\n        let storyCount = 0;\n        for (const [fileName, content] of Object.entries(extractedData)){\n            if (fileName.startsWith(\"Stories/\")) {\n                console.log(\"\\uD83D\\uDD0D Found story file:\", fileName);\n                console.log(\"   Content length:\", content.length);\n                console.log(\"   Content preview:\", content.substring(0, 200));\n                storyCount++;\n                await this.storyParser.parseStoryFile(fileName, content, this.xmlParser);\n            }\n        }\n        console.log(`📝 Total stories processed: ${storyCount}`);\n        // Sync data from modules to maintain backward compatibility\n        this.syncModuleData();\n    }\n    syncModuleData() {\n        // Sync document data\n        this.document = this.documentParser.getDocument();\n        this.spreads = this.documentParser.getSpreads();\n        this.masterSpreads = this.documentParser.getMasterSpreads();\n        this.documentInfo = this.documentParser.getDocumentInfo();\n        this.layers = this.documentParser.getLayers();\n        // Sync style data\n        this.styles = this.styleParser.getStyles();\n        this.resources = this.styleParser.getResources();\n        // Sync story data\n        this.stories = this.storyParser.getStories();\n        // Sync element data\n        this.elements = this.elementParser.getElements();\n    }\n    async extractDetailedInformation() {\n        console.log(\"Extracting detailed information with enhanced processing...\");\n        await this.documentParser.extractDetailedInformation();\n        this.pageInfo = this.documentParser.getPageInfo();\n        console.log(\"✅ Enhanced detailed information extracted\");\n    }\n    calculateCoordinateOffset() {\n        return this.documentParser.calculateCoordinateOffset();\n    }\n    async addComprehensiveTextFormattingDebug() {\n        return await this.debugAnalyzer.addComprehensiveTextFormattingDebug(this);\n    }\n    // Package processing methods\n    async processIDMLPackage(idmlFilePath, packageStructure, extractedImages = []) {\n        console.log(\"Processing IDML package:\", idmlFilePath);\n        try {\n            // Process the IDML file first\n            const documentData = await this.processIDML(idmlFilePath);\n            // Process linked images and update elements\n            await this.imageProcessor.processLinkedResources(documentData, packageStructure, extractedImages);\n            // Add package info\n            documentData.packageInfo = {\n                hasLinks: packageStructure.resourceMap?.size > 1,\n                hasFonts: false,\n                linksCount: Array.from(packageStructure.resourceMap?.keys() || []).filter((name)=>IDMLUtils.isImageFile(name)).length,\n                fontsCount: 0,\n                extractedImagesCount: extractedImages.length\n            };\n            return documentData;\n        } catch (error) {\n            console.error(\"Error processing IDML package:\", error);\n            throw error;\n        }\n    }\n    // Image processing methods\n    async extractAndSaveEmbeddedImages(idmlPath, uploadDir) {\n        return await this.fileExtractor.extractAndSaveEmbeddedImages(idmlPath, uploadDir);\n    }\n    async extractEmbeddedImageFromSpread(idmlPath, uploadDir) {\n        return await this.imageProcessor.extractEmbeddedImageFromSpread(idmlPath, uploadDir, this.xmlParser);\n    }\n    // Debug methods\n    async debugIDMLContents(idmlPath) {\n        return await this.fileExtractor.debugIDMLContents(idmlPath);\n    }\n    async debugIDMLContentsDetailed(idmlPath) {\n        return await this.fileExtractor.debugIDMLContentsDetailed(idmlPath);\n    }\n    async analyzeSpreadForImageReferences(idmlPath) {\n        return await this.imageProcessor.analyzeSpreadForImageReferences(idmlPath, this.xmlParser);\n    }\n    // Utility methods for backward compatibility\n    getPageContent(pageId) {\n        return this.documentParser.getPageContent(pageId);\n    }\n    // Getter methods for accessing module data\n    getStyles() {\n        return this.styleParser.getStyles();\n    }\n    getResources() {\n        return this.styleParser.getResources();\n    }\n    getStories() {\n        return this.storyParser.getStories();\n    }\n    getElements() {\n        return this.elementParser.getElements();\n    }\n    getSpreads() {\n        return this.documentParser.getSpreads();\n    }\n    getMasterSpreads() {\n        return this.documentParser.getMasterSpreads();\n    }\n    getDocumentInfo() {\n        return this.documentParser.getDocumentInfo();\n    }\n    getPageInfo() {\n        return this.documentParser.getPageInfo();\n    }\n    getLayers() {\n        return this.documentParser.getLayers();\n    }\n    // Module access for advanced usage\n    getXMLParser() {\n        return this.xmlParser;\n    }\n    getFileExtractor() {\n        return this.fileExtractor;\n    }\n    getStyleParser() {\n        return this.styleParser;\n    }\n    getStoryParser() {\n        return this.storyParser;\n    }\n    getElementParser() {\n        return this.elementParser;\n    }\n    getDocumentParser() {\n        return this.documentParser;\n    }\n    getImageProcessor() {\n        return this.imageProcessor;\n    }\n    getDebugAnalyzer() {\n        return this.debugAnalyzer;\n    }\n}\nmodule.exports = IDMLProcessor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/IDMLProcessor.js\n");

/***/ }),

/***/ "./lib/debug/DebugAnalyzer.js":
/*!************************************!*\
  !*** ./lib/debug/DebugAnalyzer.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass DebugAnalyzer {\n    constructor(){\n        this.debugData = {};\n    }\n    async addComprehensiveTextFormattingDebug(processor) {\n        console.log(\"\\n\\uD83D\\uDD0D ======= COMPREHENSIVE TEXT FORMATTING DEBUG =======\");\n        const debugInfo = {\n            timestamp: new Date().toISOString(),\n            totalStories: Object.keys(processor.stories || {}).length,\n            totalElements: processor.elements ? processor.elements.length : 0,\n            styleDefinitions: processor.styleParser ? processor.styleParser.getStyles() : {},\n            detailedStoryAnalysis: {},\n            spreadElementAnalysis: {},\n            resourcesAnalysis: {},\n            xmlStructureAnalysis: {},\n            formattingAttributeMapping: {},\n            missingFormattingReasons: []\n        };\n        // 1. ANALYZE STORY CONTENT IN EXTREME DETAIL\n        console.log(\"\\n\\uD83D\\uDCDD === DETAILED STORY CONTENT ANALYSIS ===\");\n        if (processor.storyParser && processor.storyParser.getStories) {\n            const stories = processor.storyParser.getStories();\n            for (const [storyId, story] of Object.entries(stories)){\n                console.log(`\\n--- STORY ${storyId} DEEP DIVE ---`);\n                debugInfo.detailedStoryAnalysis[storyId] = {\n                    storyStructure: this.analyzeStoryStructure(story),\n                    formattingExtraction: this.analyzeFormattingExtraction(story),\n                    xmlAttributes: this.extractAllXMLAttributes(story),\n                    nestedElements: this.findNestedFormattingElements(story),\n                    characterStyleRanges: this.extractCharacterStyleRanges(story),\n                    paragraphStyleRanges: this.extractParagraphStyleRanges(story),\n                    directFormattingAttributes: this.extractDirectFormattingAttributes(story),\n                    styleReferences: this.extractStyleReferences(story)\n                };\n            }\n        }\n        // 2. ANALYZE SPREAD ELEMENTS FOR TEXT FRAMES\n        if (processor.spreads) {\n            for (const [spreadId, spread] of Object.entries(processor.spreads)){\n                debugInfo.spreadElementAnalysis[spreadId] = {\n                    textFrames: spread.pageItems?.filter((item)=>item.type === \"TextFrame\") || [],\n                    textFrameDetails: this.analyzeTextFrameFormatting(spread.pageItems || [])\n                };\n            }\n        }\n        // 3. ANALYZE RESOURCES AND STYLE DEFINITIONS\n        if (processor.styleParser) {\n            debugInfo.resourcesAnalysis = {\n                paragraphStyles: this.analyzeParagraphStyles(processor.styleParser),\n                characterStyles: this.analyzeCharacterStyles(processor.styleParser),\n                styleHierarchy: this.analyzeStyleHierarchy(processor.styleParser),\n                fontDefinitions: this.analyzeFontDefinitions(processor.styleParser)\n            };\n        }\n        // 4. ANALYZE XML STRUCTURE FOR FORMATTING ATTRIBUTES\n        debugInfo.xmlStructureAnalysis = this.performXMLStructureAnalysis(processor);\n        // 5. CREATE FORMATTING ATTRIBUTE MAPPING\n        debugInfo.formattingAttributeMapping = this.createFormattingAttributeMapping();\n        // 6. IDENTIFY MISSING FORMATTING REASONS\n        debugInfo.missingFormattingReasons = this.identifyMissingFormattingReasons(processor);\n        // 7. SAVE DEBUG INFO TO FILE\n        const debugFileName = `idml-text-formatting-debug-${Date.now()}.json`;\n        IDMLUtils.saveDebugInfo(debugInfo, debugFileName);\n        console.log(`\\n✅ Comprehensive debug completed. Check file: ${debugFileName}`);\n        this.debugData = debugInfo;\n        return debugInfo;\n    }\n    // NEW: Output a debug file with ONLY style definitions (paragraph, character, font)\n    async addStyleOnlyDebug(processor) {\n        console.log(\"\\n\\uD83D\\uDD0D ======= STYLE-ONLY DEBUG =======\");\n        const styleDebug = {\n            timestamp: new Date().toISOString(),\n            paragraphStyles: processor.styleParser ? processor.styleParser.getParagraphStyles && processor.styleParser.getParagraphStyles() : {},\n            characterStyles: processor.styleParser ? processor.styleParser.getCharacterStyles && processor.styleParser.getCharacterStyles() : {},\n            fontDefinitions: processor.styleParser ? processor.styleParser.getFontDefinitions && processor.styleParser.getFontDefinitions() : {}\n        };\n        const debugFileName = `idml-style-debug-${Date.now()}.json`;\n        IDMLUtils.saveDebugInfo(styleDebug, debugFileName);\n        console.log(`\\n✅ Style-only debug completed. Check file: ${debugFileName}`);\n        this.debugData = styleDebug;\n        return styleDebug;\n    }\n    // NEW: Output a debug file with all extracted story text for whitespace debugging\n    async addExtractedTextDebug(processor) {\n        console.log(\"\\n\\uD83D\\uDD0D ======= EXTRACTED TEXT DEBUG =======\");\n        const stories = processor.storyParser && processor.storyParser.getStories ? processor.storyParser.getStories() : {};\n        const textDebug = {\n            timestamp: new Date().toISOString(),\n            stories: Object.fromEntries(Object.entries(stories).map(([storyId, story])=>[\n                    storyId,\n                    {\n                        plainText: story.content?.plainText || \"\",\n                        preview: (story.content?.plainText || \"\").substring(0, 100),\n                        whitespaceSample: (story.content?.plainText || \"\").replace(/[^\\s]/g, \"_\").substring(0, 100)\n                    }\n                ]))\n        };\n        const debugFileName = `idml-extracted-text-debug-${Date.now()}.json`;\n        IDMLUtils.saveDebugInfo(textDebug, debugFileName);\n        console.log(`\\n✅ Extracted text debug completed. Check file: ${debugFileName}`);\n        this.debugData = textDebug;\n        return textDebug;\n    }\n    analyzeStoryStructure(story) {\n        const structure = {\n            rawStoryKeys: Object.keys(story),\n            contentKeys: story.content ? Object.keys(story.content) : [],\n            textFormattingKeys: story.textFormatting ? Object.keys(story.textFormatting) : [],\n            hasFormattedContent: !!(story.content && story.content.formattedContent),\n            formattedContentLength: story.content?.formattedContent?.length || 0,\n            rawStoryData: JSON.stringify(story, null, 2).substring(0, 1000) + \"...\"\n        };\n        return structure;\n    }\n    analyzeFormattingExtraction(story) {\n        const formatting = {\n            extractedFormatting: story.content?.formattedContent || [],\n            formattingTypes: {},\n            attributesFound: new Set(),\n            formattingSample: []\n        };\n        if (story.content?.formattedContent) {\n            story.content.formattedContent.forEach((item, index)=>{\n                if (item.formatting) {\n                    Object.keys(item.formatting).forEach((key)=>{\n                        formatting.attributesFound.add(key);\n                        if (!formatting.formattingTypes[key]) {\n                            formatting.formattingTypes[key] = [];\n                        }\n                        formatting.formattingTypes[key].push(item.formatting[key]);\n                    });\n                    if (index < 3) {\n                        formatting.formattingSample.push({\n                            text: item.text?.substring(0, 50),\n                            formatting: item.formatting\n                        });\n                    }\n                }\n            });\n        }\n        formatting.attributesFound = Array.from(formatting.attributesFound);\n        return formatting;\n    }\n    extractAllXMLAttributes(story) {\n        console.log(\"Extracting all XML attributes...\");\n        const attributes = {\n            storyLevelAttributes: {},\n            contentLevelAttributes: {},\n            allAttributeNames: new Set()\n        };\n        // Extract attributes from story object recursively\n        const extractAttributes = (obj, path = \"\")=>{\n            if (typeof obj === \"object\" && obj !== null) {\n                Object.keys(obj).forEach((key)=>{\n                    if (key.startsWith(\"@_\")) {\n                        attributes.allAttributeNames.add(key);\n                        const fullPath = path ? `${path}.${key}` : key;\n                        if (!attributes.storyLevelAttributes[fullPath]) {\n                            attributes.storyLevelAttributes[fullPath] = obj[key];\n                        }\n                    } else if (typeof obj[key] === \"object\") {\n                        extractAttributes(obj[key], path ? `${path}.${key}` : key);\n                    }\n                });\n            }\n        };\n        extractAttributes(story);\n        attributes.allAttributeNames = Array.from(attributes.allAttributeNames);\n        console.log(\"XML attributes found:\", attributes.allAttributeNames);\n        return attributes;\n    }\n    findNestedFormattingElements(story) {\n        console.log(\"Finding nested formatting elements...\");\n        const nested = {\n            characterStyleRanges: [],\n            paragraphStyleRanges: [],\n            directFormatting: [],\n            fontReferences: [],\n            colorReferences: []\n        };\n        const findNested = (obj, path = \"\")=>{\n            if (typeof obj === \"object\" && obj !== null) {\n                Object.keys(obj).forEach((key)=>{\n                    const value = obj[key];\n                    const currentPath = path ? `${path}.${key}` : key;\n                    if (key === \"CharacterStyleRange\") {\n                        nested.characterStyleRanges.push({\n                            path: currentPath,\n                            data: value\n                        });\n                    } else if (key === \"ParagraphStyleRange\") {\n                        nested.paragraphStyleRanges.push({\n                            path: currentPath,\n                            data: value\n                        });\n                    } else if (key.includes(\"Font\") || key.includes(\"font\")) {\n                        nested.fontReferences.push({\n                            path: currentPath,\n                            value: value\n                        });\n                    } else if (key.includes(\"Color\") || key.includes(\"color\")) {\n                        nested.colorReferences.push({\n                            path: currentPath,\n                            value: value\n                        });\n                    } else if (key.startsWith(\"@_\") && IDMLUtils.isFormattingAttribute(key)) {\n                        nested.directFormatting.push({\n                            path: currentPath,\n                            attribute: key,\n                            value: value\n                        });\n                    } else if (typeof value === \"object\") {\n                        findNested(value, currentPath);\n                    }\n                });\n            }\n        };\n        findNested(story);\n        console.log(\"Nested formatting elements:\", {\n            characterStyleRanges: nested.characterStyleRanges.length,\n            paragraphStyleRanges: nested.paragraphStyleRanges.length,\n            directFormatting: nested.directFormatting.length,\n            fontReferences: nested.fontReferences.length,\n            colorReferences: nested.colorReferences.length\n        });\n        return nested;\n    }\n    extractCharacterStyleRanges(story) {\n        console.log(\"Extracting character style ranges...\");\n        const ranges = [];\n        const extractRanges = (obj)=>{\n            if (typeof obj === \"object\" && obj !== null) {\n                if (obj.CharacterStyleRange) {\n                    const charRanges = Array.isArray(obj.CharacterStyleRange) ? obj.CharacterStyleRange : [\n                        obj.CharacterStyleRange\n                    ];\n                    charRanges.forEach((range)=>{\n                        ranges.push({\n                            appliedCharacterStyle: range[\"@_AppliedCharacterStyle\"],\n                            pointSize: range[\"@_PointSize\"],\n                            appliedFont: range[\"@_AppliedFont\"],\n                            fontStyle: range[\"@_FontStyle\"],\n                            fillColor: range[\"@_FillColor\"],\n                            strokeColor: range[\"@_StrokeColor\"],\n                            tracking: range[\"@_Tracking\"],\n                            leading: range[\"@_Leading\"],\n                            allAttributes: Object.keys(range).filter((k)=>k.startsWith(\"@_\")),\n                            contentLength: range.Content ? Array.isArray(range.Content) ? range.Content.join(\"\").length : String(range.Content).length : 0,\n                            rawRange: range\n                        });\n                    });\n                }\n                Object.values(obj).forEach((value)=>{\n                    if (typeof value === \"object\") {\n                        extractRanges(value);\n                    }\n                });\n            }\n        };\n        extractRanges(story);\n        console.log(`Found ${ranges.length} character style ranges`);\n        ranges.forEach((range, index)=>{\n            console.log(`  Range ${index + 1}:`, {\n                style: range.appliedCharacterStyle,\n                fontSize: range.pointSize,\n                font: range.appliedFont,\n                color: range.fillColor,\n                contentLength: range.contentLength\n            });\n        });\n        return ranges;\n    }\n    extractParagraphStyleRanges(story) {\n        console.log(\"Extracting paragraph style ranges...\");\n        const ranges = [];\n        const extractRanges = (obj)=>{\n            if (typeof obj === \"object\" && obj !== null) {\n                if (obj.ParagraphStyleRange) {\n                    const paraRanges = Array.isArray(obj.ParagraphStyleRange) ? obj.ParagraphStyleRange : [\n                        obj.ParagraphStyleRange\n                    ];\n                    paraRanges.forEach((range)=>{\n                        ranges.push({\n                            appliedParagraphStyle: range[\"@_AppliedParagraphStyle\"],\n                            justification: range[\"@_Justification\"],\n                            leftIndent: range[\"@_LeftIndent\"],\n                            rightIndent: range[\"@_RightIndent\"],\n                            firstLineIndent: range[\"@_FirstLineIndent\"],\n                            spaceBefore: range[\"@_SpaceBefore\"],\n                            spaceAfter: range[\"@_SpaceAfter\"],\n                            allAttributes: Object.keys(range).filter((k)=>k.startsWith(\"@_\")),\n                            hasCharacterStyleRanges: !!range.CharacterStyleRange,\n                            characterStyleRangeCount: range.CharacterStyleRange ? Array.isArray(range.CharacterStyleRange) ? range.CharacterStyleRange.length : 1 : 0,\n                            rawRange: range\n                        });\n                    });\n                }\n                Object.values(obj).forEach((value)=>{\n                    if (typeof value === \"object\") {\n                        extractRanges(value);\n                    }\n                });\n            }\n        };\n        extractRanges(story);\n        console.log(`Found ${ranges.length} paragraph style ranges`);\n        ranges.forEach((range, index)=>{\n            console.log(`  Range ${index + 1}:`, {\n                style: range.appliedParagraphStyle,\n                justification: range.justification,\n                characterRanges: range.characterStyleRangeCount\n            });\n        });\n        return ranges;\n    }\n    extractDirectFormattingAttributes(story) {\n        console.log(\"Extracting direct formatting attributes...\");\n        const directFormatting = [];\n        const extractDirect = (obj, path = \"\")=>{\n            if (typeof obj === \"object\" && obj !== null) {\n                Object.keys(obj).forEach((key)=>{\n                    if (key.startsWith(\"@_\") && IDMLUtils.isFormattingAttribute(key)) {\n                        directFormatting.push({\n                            path: path,\n                            attribute: key,\n                            value: obj[key]\n                        });\n                    } else if (typeof obj[key] === \"object\") {\n                        extractDirect(obj[key], path ? `${path}.${key}` : key);\n                    }\n                });\n            }\n        };\n        extractDirect(story);\n        console.log(`Found ${directFormatting.length} direct formatting attributes`);\n        return directFormatting;\n    }\n    extractStyleReferences(story) {\n        console.log(\"Extracting style references...\");\n        const references = {\n            paragraphStyleReferences: new Set(),\n            characterStyleReferences: new Set(),\n            fontReferences: new Set(),\n            colorReferences: new Set()\n        };\n        const extractRefs = (obj)=>{\n            if (typeof obj === \"object\" && obj !== null) {\n                Object.keys(obj).forEach((key)=>{\n                    const value = obj[key];\n                    if (key === \"@_AppliedParagraphStyle\" && value) {\n                        references.paragraphStyleReferences.add(value);\n                    } else if (key === \"@_AppliedCharacterStyle\" && value) {\n                        references.characterStyleReferences.add(value);\n                    } else if (key === \"@_AppliedFont\" && value) {\n                        references.fontReferences.add(value);\n                    } else if ((key === \"@_FillColor\" || key === \"@_StrokeColor\") && value) {\n                        references.colorReferences.add(value);\n                    } else if (typeof value === \"object\") {\n                        extractRefs(value);\n                    }\n                });\n            }\n        };\n        extractRefs(story);\n        // Convert sets to arrays\n        Object.keys(references).forEach((key)=>{\n            references[key] = Array.from(references[key]);\n        });\n        console.log(\"Style references found:\", references);\n        return references;\n    }\n    analyzeTextFrameFormatting(pageItems) {\n        console.log(\"Analyzing text frame formatting...\");\n        const textFrames = pageItems.filter((item)=>item.type === \"TextFrame\");\n        const analysis = textFrames.map((frame)=>({\n                id: frame.self,\n                parentStory: frame.parentStory,\n                hasParentStory: !!frame.parentStory,\n                textFramePreferences: frame.textFramePreferences,\n                fillColor: frame.fillColor,\n                strokeColor: frame.strokeColor,\n                rawFrame: frame\n            }));\n        console.log(`Analyzed ${textFrames.length} text frames`);\n        return analysis;\n    }\n    analyzeParagraphStyles(styleParser) {\n        console.log(\"Analyzing paragraph styles...\");\n        const styles = styleParser.getStyles();\n        const analysis = {\n            totalStyles: Object.keys(styles.paragraph).length,\n            styleDetails: {},\n            attributeCoverage: {}\n        };\n        Object.entries(styles.paragraph).forEach(([styleId, style])=>{\n            analysis.styleDetails[styleId] = {\n                name: style.name,\n                pointSize: style.pointSize,\n                appliedFont: style.appliedFont,\n                alignment: style.alignment,\n                fillColor: style.fillColor,\n                allProperties: Object.keys(style)\n            };\n            // Track which attributes are available\n            Object.keys(style).forEach((attr)=>{\n                if (!analysis.attributeCoverage[attr]) {\n                    analysis.attributeCoverage[attr] = 0;\n                }\n                analysis.attributeCoverage[attr]++;\n            });\n        });\n        console.log(\"Paragraph styles analysis:\", analysis);\n        return analysis;\n    }\n    analyzeCharacterStyles(styleParser) {\n        console.log(\"Analyzing character styles...\");\n        const styles = styleParser.getStyles();\n        const analysis = {\n            totalStyles: Object.keys(styles.character).length,\n            styleDetails: {},\n            attributeCoverage: {}\n        };\n        Object.entries(styles.character).forEach(([styleId, style])=>{\n            analysis.styleDetails[styleId] = {\n                name: style.name,\n                pointSize: style.pointSize,\n                appliedFont: style.appliedFont,\n                fontStyle: style.fontStyle,\n                fillColor: style.fillColor,\n                allProperties: Object.keys(style)\n            };\n            // Track which attributes are available\n            Object.keys(style).forEach((attr)=>{\n                if (!analysis.attributeCoverage[attr]) {\n                    analysis.attributeCoverage[attr] = 0;\n                }\n                analysis.attributeCoverage[attr]++;\n            });\n        });\n        console.log(\"Character styles analysis:\", analysis);\n        return analysis;\n    }\n    analyzeStyleHierarchy(styleParser) {\n        console.log(\"Analyzing style hierarchy...\");\n        return {\n            paragraphStyleHierarchy: this.extractStyleHierarchy(styleParser.getStyles().paragraph),\n            characterStyleHierarchy: this.extractStyleHierarchy(styleParser.getStyles().character),\n            styleInheritance: this.analyzeStyleInheritance()\n        };\n    }\n    extractStyleHierarchy(styles) {\n        const hierarchy = {};\n        Object.entries(styles).forEach(([styleId, style])=>{\n            hierarchy[styleId] = {\n                basedOn: style.basedOn || null,\n                children: [],\n                level: 0\n            };\n        });\n        // Build parent-child relationships\n        Object.entries(hierarchy).forEach(([styleId, info])=>{\n            if (info.basedOn && hierarchy[info.basedOn]) {\n                hierarchy[info.basedOn].children.push(styleId);\n                info.level = hierarchy[info.basedOn].level + 1;\n            }\n        });\n        return hierarchy;\n    }\n    analyzeStyleInheritance() {\n        return {\n            inheritanceChains: this.findInheritanceChains(),\n            overrides: this.findStyleOverrides()\n        };\n    }\n    findInheritanceChains() {\n        // Implementation for finding inheritance chains\n        return {};\n    }\n    findStyleOverrides() {\n        // Implementation for finding style overrides\n        return {};\n    }\n    analyzeFontDefinitions(styleParser) {\n        console.log(\"Analyzing font definitions...\");\n        const resources = styleParser.getResources();\n        return {\n            availableFonts: resources.fonts || {},\n            fontUsage: this.analyzeFontUsage(styleParser),\n            missingFonts: this.findMissingFonts(styleParser)\n        };\n    }\n    analyzeFontUsage(styleParser) {\n        const usage = {};\n        const styles = styleParser.getStyles();\n        // Analyze font usage in paragraph styles\n        Object.values(styles.paragraph).forEach((style)=>{\n            if (style.appliedFont) {\n                if (!usage[style.appliedFont]) {\n                    usage[style.appliedFont] = {\n                        paragraphStyles: 0,\n                        characterStyles: 0\n                    };\n                }\n                usage[style.appliedFont].paragraphStyles++;\n            }\n        });\n        // Analyze font usage in character styles\n        Object.values(styles.character).forEach((style)=>{\n            if (style.appliedFont) {\n                if (!usage[style.appliedFont]) {\n                    usage[style.appliedFont] = {\n                        paragraphStyles: 0,\n                        characterStyles: 0\n                    };\n                }\n                usage[style.appliedFont].characterStyles++;\n            }\n        });\n        return usage;\n    }\n    findMissingFonts(styleParser) {\n        const usedFonts = new Set();\n        const resources = styleParser.getResources();\n        const availableFonts = new Set(Object.keys(resources.fonts || {}));\n        const styles = styleParser.getStyles();\n        // Collect used fonts\n        Object.values(styles.paragraph).forEach((style)=>{\n            if (style.appliedFont) usedFonts.add(style.appliedFont);\n        });\n        Object.values(styles.character).forEach((style)=>{\n            if (style.appliedFont) usedFonts.add(style.appliedFont);\n        });\n        // Find missing fonts\n        const missing = Array.from(usedFonts).filter((font)=>!availableFonts.has(font));\n        return {\n            usedFonts: Array.from(usedFonts),\n            availableFonts: Array.from(availableFonts),\n            missingFonts: missing\n        };\n    }\n    performXMLStructureAnalysis(processor) {\n        console.log(\"Performing XML structure analysis...\");\n        const analysis = {\n            storyXMLStructure: {},\n            spreadXMLStructure: {},\n            resourceXMLStructure: {}\n        };\n        if (processor.storyParser) {\n            const stories = processor.storyParser.getStories();\n            Object.entries(stories).forEach(([storyId, story])=>{\n                analysis.storyXMLStructure[storyId] = IDMLUtils.getXMLStructure(story);\n            });\n        }\n        if (processor.spreads) {\n            Object.entries(processor.spreads).forEach(([spreadId, spread])=>{\n                analysis.spreadXMLStructure[spreadId] = IDMLUtils.getXMLStructure(spread);\n            });\n        }\n        if (processor.styleParser) {\n            const styles = processor.styleParser.getStyles();\n            const resources = processor.styleParser.getResources();\n            analysis.resourceXMLStructure = {\n                styles: IDMLUtils.getXMLStructure(styles),\n                fonts: IDMLUtils.getXMLStructure(resources.fonts),\n                colors: IDMLUtils.getXMLStructure(resources.colors)\n            };\n        }\n        return analysis;\n    }\n    createFormattingAttributeMapping() {\n        console.log(\"Creating formatting attribute mapping...\");\n        return {\n            inDesignToCSS: {\n                \"@_PointSize\": \"font-size\",\n                \"@_AppliedFont\": \"font-family\",\n                \"@_FontStyle\": \"font-weight\",\n                \"@_FillColor\": \"color\",\n                \"@_Justification\": \"text-align\",\n                \"@_Leading\": \"line-height\",\n                \"@_Tracking\": \"letter-spacing\",\n                \"@_LeftIndent\": \"margin-left\",\n                \"@_RightIndent\": \"margin-right\",\n                \"@_FirstLineIndent\": \"text-indent\",\n                \"@_SpaceBefore\": \"margin-top\",\n                \"@_SpaceAfter\": \"margin-bottom\"\n            },\n            attributeLocations: {\n                fontSize: [\n                    \"CharacterStyleRange@_PointSize\",\n                    \"ParagraphStyle.pointSize\",\n                    \"CharacterStyle.pointSize\"\n                ],\n                fontFamily: [\n                    \"CharacterStyleRange@_AppliedFont\",\n                    \"ParagraphStyle.appliedFont\",\n                    \"CharacterStyle.appliedFont\"\n                ],\n                alignment: [\n                    \"ParagraphStyleRange@_Justification\",\n                    \"ParagraphStyle.alignment\"\n                ],\n                color: [\n                    \"CharacterStyleRange@_FillColor\",\n                    \"ParagraphStyle.fillColor\",\n                    \"CharacterStyle.fillColor\"\n                ]\n            }\n        };\n    }\n    identifyMissingFormattingReasons(processor) {\n        console.log(\"Identifying missing formatting reasons...\");\n        const reasons = [];\n        // Check if styles are being extracted properly\n        if (processor.styleParser) {\n            const styles = processor.styleParser.getStyles();\n            if (Object.keys(styles.paragraph).length === 0) {\n                reasons.push(\"No paragraph styles extracted - check Resources/Styles.xml parsing\");\n            }\n            if (Object.keys(styles.character).length === 0) {\n                reasons.push(\"No character styles extracted - check Resources/Styles.xml parsing\");\n            }\n        } else {\n            reasons.push(\"StyleParser not available - check initialization\");\n        }\n        // Check if story content has formatting\n        if (processor.storyParser) {\n            const stories = processor.storyParser.getStories();\n            const storiesWithFormatting = Object.values(stories).filter((story)=>story.content?.formattedContent?.some((item)=>item.formatting && Object.keys(item.formatting).length > 1));\n            if (storiesWithFormatting.length === 0) {\n                reasons.push(\"No stories have detailed formatting - check CharacterStyleRange extraction\");\n            }\n        }\n        // Check if text frames are linked to stories\n        if (processor.elements) {\n            const textFrames = processor.elements.filter((el)=>el.type === \"TextFrame\");\n            const linkedFrames = textFrames.filter((frame)=>{\n                if (processor.storyParser) {\n                    const stories = processor.storyParser.getStories();\n                    return frame.parentStory && stories[frame.parentStory];\n                }\n                return false;\n            });\n            if (textFrames.length > 0 && linkedFrames.length === 0) {\n                reasons.push(\"Text frames not properly linked to stories - check parentStory references\");\n            }\n        }\n        return reasons;\n    }\n    getDebugData() {\n        return this.debugData;\n    }\n    clearDebugData() {\n        this.debugData = {};\n    }\n}\nmodule.exports = DebugAnalyzer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/debug/DebugAnalyzer.js\n");

/***/ }),

/***/ "./lib/extractors/FileExtractor.js":
/*!*****************************************!*\
  !*** ./lib/extractors/FileExtractor.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst yauzl = __webpack_require__(/*! yauzl */ \"yauzl\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass FileExtractor {\n    constructor(){\n        this.extractedFiles = new Map();\n    }\n    async extractIDMLContents(filePath) {\n        return new Promise((resolve, reject)=>{\n            const extractedData = {};\n            yauzl.open(filePath, {\n                lazyEntries: true\n            }, (err, zipfile)=>{\n                if (err) return reject(err);\n                const allEntries = [];\n                zipfile.on(\"entry\", (entry)=>{\n                    allEntries.push(entry);\n                    if (entry.fileName.endsWith(\"/\")) {\n                        zipfile.readEntry();\n                        return;\n                    }\n                    zipfile.openReadStream(entry, (err, readStream)=>{\n                        if (err) {\n                            console.error(`Error reading ${entry.fileName}:`, err);\n                            zipfile.readEntry();\n                            return;\n                        }\n                        let content = \"\";\n                        readStream.on(\"data\", (chunk)=>{\n                            content += chunk.toString();\n                        });\n                        readStream.on(\"end\", ()=>{\n                            extractedData[entry.fileName] = content;\n                            console.log(`✅ Extracted: ${entry.fileName} (${content.length} chars)`);\n                            // Always continue reading entries\n                            zipfile.readEntry();\n                        });\n                    });\n                });\n                zipfile.on(\"end\", ()=>{\n                    console.log(`ZIP reading completed. Extracted ${Object.keys(extractedData).length} files`);\n                    // ADD THIS DEBUG:\n                    console.log(\"\\n\\uD83D\\uDD0D === FILES IN IDML ===\");\n                    Object.keys(extractedData).forEach((fileName)=>{\n                        console.log(`  📁 ${fileName}`);\n                    });\n                    // CHECK FOR STORIES SPECIFICALLY:\n                    const storyFiles = Object.keys(extractedData).filter((name)=>name.startsWith(\"Stories/\"));\n                    console.log(`\\n📝 Found ${storyFiles.length} story files:`, storyFiles);\n                    resolve(extractedData);\n                });\n                zipfile.readEntry();\n            });\n        });\n    }\n    async debugIDMLContents(idmlPath) {\n        console.log(\"\\n\\uD83D\\uDD0D === DEBUGGING IDML CONTENTS ===\");\n        return new Promise((resolve, reject)=>{\n            yauzl.open(idmlPath, {\n                lazyEntries: true\n            }, (err, zipfile)=>{\n                if (err) return reject(err);\n                const contents = [];\n                zipfile.on(\"entry\", (entry)=>{\n                    console.log(`📁 Found: ${entry.fileName}`);\n                    if (entry.fileName.startsWith(\"Links/\") && IDMLUtils.isImageFile(entry.fileName)) {\n                        console.log(`📷 EMBEDDED IMAGE FOUND: ${entry.fileName}`);\n                    }\n                    contents.push(entry.fileName);\n                    zipfile.readEntry();\n                });\n                zipfile.on(\"end\", ()=>{\n                    console.log(`\\n📊 Total files in IDML: ${contents.length}`);\n                    console.log(\"\\uD83D\\uDCC1 Folders found:\", [\n                        ...new Set(contents.map((f)=>f.split(\"/\")[0]))\n                    ]);\n                    const imageFiles = contents.filter((f)=>IDMLUtils.isImageFile(f));\n                    console.log(`📷 Image files in IDML: ${imageFiles.length}`);\n                    imageFiles.forEach((img)=>console.log(`  - ${img}`));\n                    resolve(contents);\n                });\n                zipfile.readEntry();\n            });\n        });\n    }\n    async debugIDMLContentsDetailed(idmlPath) {\n        console.log(\"\\n\\uD83D\\uDD0D === DETAILED IDML ANALYSIS ===\");\n        return new Promise((resolve, reject)=>{\n            yauzl.open(idmlPath, {\n                lazyEntries: true\n            }, (err, zipfile)=>{\n                if (err) return reject(err);\n                const detailedAnalysis = {\n                    totalFiles: 0,\n                    filesByType: {},\n                    allFiles: [],\n                    binaryFiles: [],\n                    xmlFiles: [],\n                    imageFiles: [],\n                    unknownFiles: [],\n                    fileDetails: {},\n                    suspiciousFiles: [],\n                    largeBinaryFiles: []\n                };\n                zipfile.on(\"entry\", (entry)=>{\n                    detailedAnalysis.totalFiles++;\n                    detailedAnalysis.allFiles.push(entry.fileName);\n                    // Analyze file type and size\n                    const ext = path.extname(entry.fileName).toLowerCase();\n                    const size = entry.uncompressedSize || 0;\n                    const isDirectory = entry.fileName.endsWith(\"/\");\n                    if (!detailedAnalysis.filesByType[ext]) {\n                        detailedAnalysis.filesByType[ext] = [];\n                    }\n                    detailedAnalysis.filesByType[ext].push(entry.fileName);\n                    // Store detailed file info\n                    detailedAnalysis.fileDetails[entry.fileName] = {\n                        compressedSize: entry.compressedSize,\n                        uncompressedSize: entry.uncompressedSize,\n                        compressionMethod: entry.compressionMethod,\n                        isDirectory: isDirectory,\n                        extension: ext\n                    };\n                    if (!isDirectory) {\n                        // Check for images by extension\n                        if (IDMLUtils.isImageFile(entry.fileName)) {\n                            detailedAnalysis.imageFiles.push({\n                                fileName: entry.fileName,\n                                size: size,\n                                compressed: entry.compressedSize,\n                                ratio: entry.compressedSize / size\n                            });\n                            console.log(`📷 IMAGE FILE FOUND: ${entry.fileName} (${size} bytes)`);\n                        } else if (ext === \".xml\") {\n                            detailedAnalysis.xmlFiles.push(entry.fileName);\n                        } else if (ext === \"\" && size > 1000) {\n                            detailedAnalysis.suspiciousFiles.push({\n                                fileName: entry.fileName,\n                                size: size,\n                                reason: \"No extension but large size\"\n                            });\n                            console.log(`❓ SUSPICIOUS FILE: ${entry.fileName} (${size} bytes, no extension)`);\n                        } else if (size > 10000 && ext !== \".xml\") {\n                            detailedAnalysis.largeBinaryFiles.push({\n                                fileName: entry.fileName,\n                                size: size,\n                                extension: ext\n                            });\n                            console.log(`📦 LARGE BINARY: ${entry.fileName} (${size} bytes, ${ext})`);\n                        } else if (entry.fileName.includes(\"Link\") || entry.fileName.includes(\"Image\") || entry.fileName.includes(\"Graphic\") || size > 50000) {\n                            detailedAnalysis.suspiciousFiles.push({\n                                fileName: entry.fileName,\n                                size: size,\n                                reason: \"Contains image-related keywords or very large\"\n                            });\n                            console.log(`🔍 POTENTIAL IMAGE: ${entry.fileName} (${size} bytes)`);\n                        }\n                    }\n                    zipfile.readEntry();\n                });\n                zipfile.on(\"end\", ()=>{\n                    console.log(`\\n📊 DETAILED ANALYSIS COMPLETE:`);\n                    console.log(`Total files: ${detailedAnalysis.totalFiles}`);\n                    console.log(`Image files found: ${detailedAnalysis.imageFiles.length}`);\n                    console.log(`Suspicious files: ${detailedAnalysis.suspiciousFiles.length}`);\n                    console.log(`Large binary files: ${detailedAnalysis.largeBinaryFiles.length}`);\n                    console.log(`File types: ${Object.keys(detailedAnalysis.filesByType).join(\", \")}`);\n                    resolve(detailedAnalysis);\n                });\n                zipfile.readEntry();\n            });\n        });\n    }\n    async extractSampleContent(idmlPath, fileName, maxBytes = 1000) {\n        console.log(`📖 Extracting sample from: ${fileName}`);\n        return new Promise((resolve, reject)=>{\n            yauzl.open(idmlPath, {\n                lazyEntries: true\n            }, (err, zipfile)=>{\n                if (err) return reject(err);\n                zipfile.on(\"entry\", (entry)=>{\n                    if (entry.fileName === fileName) {\n                        zipfile.openReadStream(entry, (err, readStream)=>{\n                            if (err) return reject(err);\n                            let content = \"\";\n                            let bytesRead = 0;\n                            readStream.on(\"data\", (chunk)=>{\n                                if (bytesRead < maxBytes) {\n                                    const remainingBytes = maxBytes - bytesRead;\n                                    const chunkToAdd = chunk.slice(0, remainingBytes);\n                                    content += chunkToAdd.toString(\"hex\"); // Get hex representation\n                                    bytesRead += chunkToAdd.length;\n                                }\n                            });\n                            readStream.on(\"end\", ()=>{\n                                resolve({\n                                    fileName: fileName,\n                                    sampleHex: content,\n                                    sampleText: Buffer.from(content, \"hex\").toString(\"utf8\", 0, Math.min(500, content.length / 2)),\n                                    bytesRead: bytesRead\n                                });\n                            });\n                            readStream.on(\"error\", reject);\n                        });\n                    } else {\n                        zipfile.readEntry();\n                    }\n                });\n                zipfile.readEntry();\n            });\n        });\n    }\n    async extractFileContent(idmlPath, fileName) {\n        return new Promise((resolve, reject)=>{\n            yauzl.open(idmlPath, {\n                lazyEntries: true\n            }, (err, zipfile)=>{\n                if (err) return reject(err);\n                zipfile.on(\"entry\", (entry)=>{\n                    if (entry.fileName === fileName) {\n                        zipfile.openReadStream(entry, (err, readStream)=>{\n                            if (err) return reject(err);\n                            let content = \"\";\n                            readStream.on(\"data\", (chunk)=>{\n                                content += chunk.toString();\n                            });\n                            readStream.on(\"end\", ()=>{\n                                resolve(content);\n                            });\n                            readStream.on(\"error\", reject);\n                        });\n                    } else {\n                        zipfile.readEntry();\n                    }\n                });\n                zipfile.readEntry();\n            });\n        });\n    }\n    async extractAndSaveEmbeddedImages(idmlPath, uploadDir) {\n        console.log(\"\\uD83D\\uDDBC️ Extracting and saving embedded images...\");\n        const embeddedImages = [];\n        return new Promise((resolve, reject)=>{\n            yauzl.open(idmlPath, {\n                lazyEntries: true\n            }, (err, zipfile)=>{\n                if (err) return reject(err);\n                const imagesToExtract = [];\n                zipfile.on(\"entry\", (entry)=>{\n                    if (entry.fileName.startsWith(\"Links/\") && IDMLUtils.isImageFile(entry.fileName)) {\n                        console.log(`📷 Found embedded image: ${entry.fileName}`);\n                        imagesToExtract.push(entry);\n                    }\n                    zipfile.readEntry();\n                });\n                zipfile.on(\"end\", async ()=>{\n                    console.log(`Found ${imagesToExtract.length} embedded images to extract`);\n                    // Create Links folder in upload directory\n                    const linksDir = path.join(uploadDir, \"ExtractedLinks\");\n                    if (!fs.existsSync(linksDir)) {\n                        fs.mkdirSync(linksDir, {\n                            recursive: true\n                        });\n                    }\n                    // Extract each image\n                    for (const imageEntry of imagesToExtract){\n                        try {\n                            await this.extractSingleImage(idmlPath, imageEntry, linksDir);\n                            const fileName = path.basename(imageEntry.fileName);\n                            const extractedPath = path.join(linksDir, fileName);\n                            embeddedImages.push({\n                                originalPath: imageEntry.fileName,\n                                extractedPath: extractedPath,\n                                fileName: fileName,\n                                size: imageEntry.uncompressedSize,\n                                isExtracted: fs.existsSync(extractedPath)\n                            });\n                        } catch (error) {\n                            console.error(`❌ Failed to extract ${imageEntry.fileName}:`, error);\n                        }\n                    }\n                    console.log(`✅ Extracted ${embeddedImages.length} embedded images`);\n                    resolve(embeddedImages);\n                });\n                zipfile.readEntry();\n            });\n        });\n    }\n    async extractSingleImage(idmlPath, imageEntry, outputDir) {\n        return new Promise((resolve, reject)=>{\n            yauzl.open(idmlPath, {\n                lazyEntries: true\n            }, (err, zipfile)=>{\n                if (err) return reject(err);\n                zipfile.on(\"entry\", (entry)=>{\n                    if (entry.fileName === imageEntry.fileName) {\n                        zipfile.openReadStream(entry, (err, readStream)=>{\n                            if (err) return reject(err);\n                            const fileName = path.basename(entry.fileName);\n                            const outputPath = path.join(outputDir, fileName);\n                            const writeStream = fs.createWriteStream(outputPath);\n                            readStream.pipe(writeStream);\n                            writeStream.on(\"finish\", ()=>{\n                                console.log(`✅ Extracted: ${fileName}`);\n                                resolve(outputPath);\n                            });\n                            writeStream.on(\"error\", reject);\n                        });\n                    } else {\n                        zipfile.readEntry();\n                    }\n                });\n                zipfile.readEntry();\n            });\n        });\n    }\n    async buildImageMap(packageStructure) {\n        const imageMap = new Map();\n        console.log(\"Building image map...\");\n        // Check all files in resourceMap first\n        if (packageStructure.resourceMap) {\n            packageStructure.resourceMap.forEach((filePath, fileName)=>{\n                if (IDMLUtils.isImageFile(fileName)) {\n                    imageMap.set(fileName, filePath);\n                    // Also add without extension for matching\n                    const nameWithoutExt = path.parse(fileName).name;\n                    imageMap.set(nameWithoutExt, filePath);\n                    console.log(\"Added to image map:\", fileName, \"->\", filePath);\n                }\n            });\n        }\n        // Check Links folder if it exists\n        if (fs.existsSync(packageStructure.linksFolder)) {\n            const files = fs.readdirSync(packageStructure.linksFolder);\n            console.log(\"Links folder contents:\", files);\n            for (const fileName of files){\n                if (IDMLUtils.isImageFile(fileName)) {\n                    const fullPath = path.join(packageStructure.linksFolder, fileName);\n                    imageMap.set(fileName, fullPath);\n                    const nameWithoutExt = path.parse(fileName).name;\n                    imageMap.set(nameWithoutExt, fullPath);\n                    console.log(\"Added from Links folder:\", fileName, \"->\", fullPath);\n                }\n            }\n        }\n        console.log(`📸 Image map built with ${imageMap.size / 2} unique images`);\n        Array.from(imageMap.keys()).forEach((key)=>{\n            console.log(\"  - Image key:\", key);\n        });\n        return imageMap;\n    }\n    async extractEmbeddedImages(packageStructure) {\n        const embeddedImages = new Map();\n        console.log(\"\\uD83D\\uDD0D Extracting embedded images from package...\");\n        // FIX: Use extractedPath instead of undefined property\n        const extractedPath = packageStructure.extractedPath || packageStructure.uploadDir;\n        // Check if there's a Links folder in the package\n        const linksPath = path.join(extractedPath, \"Links\");\n        if (fs.existsSync(linksPath)) {\n            const linkFiles = fs.readdirSync(linksPath);\n            console.log(\"Found link files:\", linkFiles);\n            for (const fileName of linkFiles){\n                if (IDMLUtils.isImageFile(fileName)) {\n                    const fullPath = path.join(linksPath, fileName);\n                    const stats = fs.statSync(fullPath);\n                    embeddedImages.set(fileName, {\n                        path: fullPath,\n                        size: stats.size,\n                        isEmbedded: true,\n                        originalName: fileName\n                    });\n                    console.log(`📎 Found embedded image: ${fileName} (${stats.size} bytes)`);\n                }\n            }\n        }\n        // ALSO check the main package resourceMap for embedded images\n        if (packageStructure.resourceMap) {\n            packageStructure.resourceMap.forEach((filePath, fileName)=>{\n                if (IDMLUtils.isImageFile(fileName) && !embeddedImages.has(fileName)) {\n                    const stats = fs.existsSync(filePath) ? fs.statSync(filePath) : null;\n                    embeddedImages.set(fileName, {\n                        path: filePath,\n                        size: stats ? stats.size : 0,\n                        isEmbedded: packageStructure.isPackageUpload || false,\n                        originalName: fileName\n                    });\n                    console.log(`📎 Found package image: ${fileName}`);\n                }\n            });\n        }\n        console.log(`✅ Extracted ${embeddedImages.size} embedded/linked images`);\n        return embeddedImages;\n    }\n    getExtractedFiles() {\n        return this.extractedFiles;\n    }\n    clearExtractedFiles() {\n        this.extractedFiles.clear();\n    }\n}\nmodule.exports = FileExtractor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/extractors/FileExtractor.js\n");

/***/ }),

/***/ "./lib/index.js":
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Main processor\n\nconst IDMLProcessor = __webpack_require__(/*! ./IDMLProcessor */ \"./lib/IDMLProcessor.js\");\n// Individual modules for advanced usage\nconst IDMLXMLParser = __webpack_require__(/*! ./parsers/XMLParser */ \"./lib/parsers/XMLParser.js\");\nconst FileExtractor = __webpack_require__(/*! ./extractors/FileExtractor */ \"./lib/extractors/FileExtractor.js\");\nconst StyleParser = __webpack_require__(/*! ./parsers/StyleParser */ \"./lib/parsers/StyleParser.js\");\nconst StoryParser = __webpack_require__(/*! ./parsers/StoryParser */ \"./lib/parsers/StoryParser.js\");\nconst ElementParser = __webpack_require__(/*! ./parsers/ElementParser */ \"./lib/parsers/ElementParser.js\");\nconst DocumentParser = __webpack_require__(/*! ./parsers/DocumentParser */ \"./lib/parsers/DocumentParser.js\");\nconst ImageProcessor = __webpack_require__(/*! ./processors/ImageProcessor */ \"./lib/processors/ImageProcessor.js\");\nconst DebugAnalyzer = __webpack_require__(/*! ./debug/DebugAnalyzer */ \"./lib/debug/DebugAnalyzer.js\");\nconst IDMLUtils = __webpack_require__(/*! ./utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nconst ColorUtils = __webpack_require__(/*! ./utils/ColorUtils */ \"./lib/utils/ColorUtils.js\");\nconst InDesignTextMetrics = __webpack_require__(/*! ./utils/InDesignTextMetrics */ \"./lib/utils/InDesignTextMetrics.js\");\nmodule.exports = {\n    // Main class (default export)\n    IDMLProcessor,\n    // Individual modules\n    IDMLXMLParser,\n    FileExtractor,\n    StyleParser,\n    StoryParser,\n    ElementParser,\n    DocumentParser,\n    ImageProcessor,\n    DebugAnalyzer,\n    IDMLUtils,\n    ColorUtils,\n    InDesignTextMetrics,\n    // Convenience exports\n    parsers: {\n        XMLParser: IDMLXMLParser,\n        StyleParser,\n        StoryParser,\n        ElementParser,\n        DocumentParser\n    },\n    extractors: {\n        FileExtractor\n    },\n    processors: {\n        ImageProcessor\n    },\n    debug: {\n        DebugAnalyzer\n    },\n    utils: {\n        IDMLUtils,\n        ColorUtils\n    }\n};\n// Default export for backward compatibility\nmodule.exports[\"default\"] = IDMLProcessor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCOztBQUNqQixNQUFNQSxnQkFBZ0JDLG1CQUFPQSxDQUFDO0FBRTlCLHdDQUF3QztBQUN4QyxNQUFNQyxnQkFBZ0JELG1CQUFPQSxDQUFDO0FBQzlCLE1BQU1FLGdCQUFnQkYsbUJBQU9BLENBQUM7QUFDOUIsTUFBTUcsY0FBY0gsbUJBQU9BLENBQUM7QUFDNUIsTUFBTUksY0FBY0osbUJBQU9BLENBQUM7QUFDNUIsTUFBTUssZ0JBQWdCTCxtQkFBT0EsQ0FBQztBQUM5QixNQUFNTSxpQkFBaUJOLG1CQUFPQSxDQUFDO0FBQy9CLE1BQU1PLGlCQUFpQlAsbUJBQU9BLENBQUM7QUFDL0IsTUFBTVEsZ0JBQWdCUixtQkFBT0EsQ0FBQztBQUM5QixNQUFNUyxZQUFZVCxtQkFBT0EsQ0FBQztBQUMxQixNQUFNVSxhQUFhVixtQkFBT0EsQ0FBQztBQUMzQixNQUFNVyxzQkFBc0JYLG1CQUFPQSxDQUFDO0FBRXBDWSxPQUFPQyxPQUFPLEdBQUc7SUFDZiw4QkFBOEI7SUFDOUJkO0lBRUEscUJBQXFCO0lBQ3JCRTtJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUVBLHNCQUFzQjtJQUN0QkcsU0FBUztRQUNQQyxXQUFXZDtRQUNYRTtRQUNBQztRQUNBQztRQUNBQztJQUNGO0lBRUFVLFlBQVk7UUFDVmQ7SUFDRjtJQUVBZSxZQUFZO1FBQ1ZWO0lBQ0Y7SUFFQVcsT0FBTztRQUNMVjtJQUNGO0lBRUFXLE9BQU87UUFDTFY7UUFDQUM7SUFDRjtBQUNGO0FBRUEsNENBQTRDO0FBQzVDRSx5QkFBc0IsR0FBR2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pZG1sLXZpZXdlci8uL2xpYi9pbmRleC5qcz9hOGQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIE1haW4gcHJvY2Vzc29yXHJcbmNvbnN0IElETUxQcm9jZXNzb3IgPSByZXF1aXJlKCcuL0lETUxQcm9jZXNzb3InKTtcclxuXHJcbi8vIEluZGl2aWR1YWwgbW9kdWxlcyBmb3IgYWR2YW5jZWQgdXNhZ2VcclxuY29uc3QgSURNTFhNTFBhcnNlciA9IHJlcXVpcmUoJy4vcGFyc2Vycy9YTUxQYXJzZXInKTtcclxuY29uc3QgRmlsZUV4dHJhY3RvciA9IHJlcXVpcmUoJy4vZXh0cmFjdG9ycy9GaWxlRXh0cmFjdG9yJyk7XHJcbmNvbnN0IFN0eWxlUGFyc2VyID0gcmVxdWlyZSgnLi9wYXJzZXJzL1N0eWxlUGFyc2VyJyk7XHJcbmNvbnN0IFN0b3J5UGFyc2VyID0gcmVxdWlyZSgnLi9wYXJzZXJzL1N0b3J5UGFyc2VyJyk7XHJcbmNvbnN0IEVsZW1lbnRQYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlcnMvRWxlbWVudFBhcnNlcicpO1xyXG5jb25zdCBEb2N1bWVudFBhcnNlciA9IHJlcXVpcmUoJy4vcGFyc2Vycy9Eb2N1bWVudFBhcnNlcicpO1xyXG5jb25zdCBJbWFnZVByb2Nlc3NvciA9IHJlcXVpcmUoJy4vcHJvY2Vzc29ycy9JbWFnZVByb2Nlc3NvcicpO1xyXG5jb25zdCBEZWJ1Z0FuYWx5emVyID0gcmVxdWlyZSgnLi9kZWJ1Zy9EZWJ1Z0FuYWx5emVyJyk7XHJcbmNvbnN0IElETUxVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvSURNTFV0aWxzJyk7XHJcbmNvbnN0IENvbG9yVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL0NvbG9yVXRpbHMnKTtcclxuY29uc3QgSW5EZXNpZ25UZXh0TWV0cmljcyA9IHJlcXVpcmUoJy4vdXRpbHMvSW5EZXNpZ25UZXh0TWV0cmljcycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgLy8gTWFpbiBjbGFzcyAoZGVmYXVsdCBleHBvcnQpXHJcbiAgSURNTFByb2Nlc3NvcixcclxuICBcclxuICAvLyBJbmRpdmlkdWFsIG1vZHVsZXNcclxuICBJRE1MWE1MUGFyc2VyLFxyXG4gIEZpbGVFeHRyYWN0b3IsXHJcbiAgU3R5bGVQYXJzZXIsXHJcbiAgU3RvcnlQYXJzZXIsXHJcbiAgRWxlbWVudFBhcnNlcixcclxuICBEb2N1bWVudFBhcnNlcixcclxuICBJbWFnZVByb2Nlc3NvcixcclxuICBEZWJ1Z0FuYWx5emVyLFxyXG4gIElETUxVdGlscyxcclxuICBDb2xvclV0aWxzLFxyXG4gIEluRGVzaWduVGV4dE1ldHJpY3MsXHJcbiAgXHJcbiAgLy8gQ29udmVuaWVuY2UgZXhwb3J0c1xyXG4gIHBhcnNlcnM6IHtcclxuICAgIFhNTFBhcnNlcjogSURNTFhNTFBhcnNlcixcclxuICAgIFN0eWxlUGFyc2VyLFxyXG4gICAgU3RvcnlQYXJzZXIsXHJcbiAgICBFbGVtZW50UGFyc2VyLFxyXG4gICAgRG9jdW1lbnRQYXJzZXJcclxuICB9LFxyXG4gIFxyXG4gIGV4dHJhY3RvcnM6IHtcclxuICAgIEZpbGVFeHRyYWN0b3JcclxuICB9LFxyXG4gIFxyXG4gIHByb2Nlc3NvcnM6IHtcclxuICAgIEltYWdlUHJvY2Vzc29yXHJcbiAgfSxcclxuICBcclxuICBkZWJ1Zzoge1xyXG4gICAgRGVidWdBbmFseXplclxyXG4gIH0sXHJcbiAgXHJcbiAgdXRpbHM6IHtcclxuICAgIElETUxVdGlscyxcclxuICAgIENvbG9yVXRpbHNcclxuICB9XHJcbn07XHJcblxyXG4vLyBEZWZhdWx0IGV4cG9ydCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxyXG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gSURNTFByb2Nlc3NvcjsgIl0sIm5hbWVzIjpbIklETUxQcm9jZXNzb3IiLCJyZXF1aXJlIiwiSURNTFhNTFBhcnNlciIsIkZpbGVFeHRyYWN0b3IiLCJTdHlsZVBhcnNlciIsIlN0b3J5UGFyc2VyIiwiRWxlbWVudFBhcnNlciIsIkRvY3VtZW50UGFyc2VyIiwiSW1hZ2VQcm9jZXNzb3IiLCJEZWJ1Z0FuYWx5emVyIiwiSURNTFV0aWxzIiwiQ29sb3JVdGlscyIsIkluRGVzaWduVGV4dE1ldHJpY3MiLCJtb2R1bGUiLCJleHBvcnRzIiwicGFyc2VycyIsIlhNTFBhcnNlciIsImV4dHJhY3RvcnMiLCJwcm9jZXNzb3JzIiwiZGVidWciLCJ1dGlscyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./lib/index.js\n");

/***/ }),

/***/ "./lib/parsers/DocumentParser.js":
/*!***************************************!*\
  !*** ./lib/parsers/DocumentParser.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst path = __webpack_require__(/*! path */ \"path\");\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass DocumentParser {\n    constructor(elementParser, styleParser = null){\n        this.elementParser = elementParser;\n        this.styleParser = styleParser; // ADDED: Reference to StyleParser for accessing ViewPreferences\n        this.documentInfo = {};\n        this.spreads = {};\n        this.masterSpreads = {};\n        this.layers = [];\n    }\n    async parseDocumentStructure(extractedData, xmlParser) {\n        console.log(\"Parsing document structure...\");\n        console.log(\"\\uD83D\\uDD0D Total files to process:\", Object.keys(extractedData).length);\n        // Parse designmap.xml first (main document structure)\n        if (extractedData[\"designmap.xml\"]) {\n            console.log(\"Parsing designmap.xml...\");\n            try {\n                const designMapData = xmlParser.parse(extractedData[\"designmap.xml\"]);\n                this.document = designMapData.Document || designMapData;\n                await this.extractDocumentInfo(this.document);\n                console.log(\"✅ DesignMap parsed successfully\");\n            } catch (error) {\n                console.error(\"Error parsing designmap.xml:\", error);\n            }\n        }\n        // Parse Spreads\n        console.log(\"\\n\\uD83D\\uDCC4 === PARSING SPREADS ===\");\n        for (const [fileName, content] of Object.entries(extractedData)){\n            if (fileName.startsWith(\"Spreads/\")) {\n                console.log(\"\\uD83D\\uDD0D Processing spread:\", fileName);\n                await this.parseSpreadFile(fileName, content, xmlParser);\n            }\n        }\n        // Parse Master Spreads\n        console.log(\"\\n\\uD83C\\uDFA8 === PARSING MASTER SPREADS ===\");\n        for (const [fileName, content] of Object.entries(extractedData)){\n            if (fileName.startsWith(\"MasterSpreads/\")) {\n                console.log(\"\\uD83D\\uDD0D Processing master spread:\", fileName);\n                await this.parseMasterSpreadFile(fileName, content, xmlParser);\n            }\n        }\n    }\n    async extractDocumentInfo(document) {\n        console.log(\"Extracting document information...\");\n        if (!document) return;\n        // Extract document preferences and page setup\n        this.documentInfo = {\n            version: document[\"@_DOMVersion\"] || \"Unknown\",\n            self: document[\"@_Self\"] || \"Unknown\",\n            activeLayer: document[\"@_ActiveLayer\"] || null,\n            unusedSwatches: document[\"@_UnusedSwatches\"] || [],\n            // Document preferences\n            documentPreferences: this.extractDocumentPreferences(document),\n            // Page setup\n            pageSetup: this.extractPageSetup(document),\n            // Layers\n            layers: this.extractLayers(document),\n            // Pages\n            pages: this.extractPages(document)\n        };\n        console.log(\"✅ Document info extracted\");\n    }\n    extractDocumentPreferences(document) {\n        console.log(\"\\uD83D\\uDCCB Extracting document preferences...\");\n        console.log(\"Document keys:\", Object.keys(document));\n        const prefs = {};\n        // Try multiple possible locations for document preferences\n        let docPref = null;\n        if (document.DocumentPreference) {\n            docPref = document.DocumentPreference;\n            console.log(\"Found DocumentPreference\");\n        } else if (document.documentPreference) {\n            docPref = document.documentPreference;\n            console.log(\"Found documentPreference (lowercase)\");\n        } else if (document.Properties && document.Properties.DocumentPreference) {\n            docPref = document.Properties.DocumentPreference;\n            console.log(\"Found DocumentPreference in Properties\");\n        }\n        if (docPref) {\n            console.log(\"DocumentPreference keys:\", Object.keys(docPref));\n            prefs.pageWidth = parseFloat(docPref[\"@_PageWidth\"]) || 0;\n            prefs.pageHeight = parseFloat(docPref[\"@_PageHeight\"]) || 0;\n            prefs.left = parseFloat(docPref[\"@_Left\"]) || 0;\n            prefs.top = parseFloat(docPref[\"@_Top\"]) || 0;\n            prefs.right = parseFloat(docPref[\"@_Right\"]) || 0;\n            prefs.bottom = parseFloat(docPref[\"@_Bottom\"]) || 0;\n            prefs.columnCount = parseInt(docPref[\"@_ColumnCount\"]) || 1;\n            prefs.columnGutter = parseFloat(docPref[\"@_ColumnGutter\"]) || 0;\n            prefs.facingPages = docPref[\"@_FacingPages\"] === \"true\" || docPref[\"@_FacingPages\"] === true;\n            console.log(\"\\uD83D\\uDCCB Extracted document preferences:\", prefs);\n        } else {\n            console.log(\"⚠️ No DocumentPreference found in document\");\n        }\n        // Also try to extract margin preferences\n        let marginPref = null;\n        if (document.MarginPreference) {\n            marginPref = document.MarginPreference;\n            console.log(\"Found MarginPreference\");\n        } else if (document.marginPreference) {\n            marginPref = document.marginPreference;\n            console.log(\"Found marginPreference (lowercase)\");\n        } else if (document.Properties && document.Properties.MarginPreference) {\n            marginPref = document.Properties.MarginPreference;\n            console.log(\"Found MarginPreference in Properties\");\n        }\n        if (marginPref) {\n            console.log(\"MarginPreference keys:\", Object.keys(marginPref));\n            prefs.marginTop = parseFloat(marginPref[\"@_Top\"]) || 0;\n            prefs.marginBottom = parseFloat(marginPref[\"@_Bottom\"]) || 0;\n            prefs.marginLeft = parseFloat(marginPref[\"@_Left\"]) || 0;\n            prefs.marginRight = parseFloat(marginPref[\"@_Right\"]) || 0;\n            prefs.marginColumnCount = parseInt(marginPref[\"@_ColumnCount\"]) || 1;\n            prefs.marginColumnGutter = parseFloat(marginPref[\"@_ColumnGutter\"]) || 0;\n            console.log(\"\\uD83D\\uDCCF Extracted margin preferences:\", {\n                top: prefs.marginTop,\n                bottom: prefs.marginBottom,\n                left: prefs.marginLeft,\n                right: prefs.marginRight,\n                columnCount: prefs.marginColumnCount,\n                columnGutter: prefs.marginColumnGutter\n            });\n        }\n        return prefs;\n    }\n    extractPageSetup(document) {\n        const pageSetup = {\n            pages: [],\n            masterPages: [],\n            spreads: []\n        };\n        // Extract page information from document\n        if (document.Page) {\n            const pages = Array.isArray(document.Page) ? document.Page : [\n                document.Page\n            ];\n            pages.forEach((page)=>{\n                pageSetup.pages.push({\n                    self: page[\"@_Self\"],\n                    name: page[\"@_Name\"] || \"\",\n                    appliedMaster: page[\"@_AppliedMaster\"] || \"\",\n                    geometricBounds: IDMLUtils.parseGeometricBounds(page[\"@_GeometricBounds\"]),\n                    itemTransform: IDMLUtils.parseTransform(page[\"@_ItemTransform\"]),\n                    overrideList: page[\"@_OverrideList\"] || []\n                });\n            });\n        }\n        return pageSetup;\n    }\n    extractLayers(document) {\n        const layers = [];\n        if (document.Layer) {\n            const layerData = Array.isArray(document.Layer) ? document.Layer : [\n                document.Layer\n            ];\n            layerData.forEach((layer)=>{\n                layers.push({\n                    self: layer[\"@_Self\"],\n                    name: layer[\"@_Name\"] || \"\",\n                    visible: layer[\"@_Visible\"] !== false,\n                    locked: layer[\"@_Locked\"] === true,\n                    ignoreWrap: layer[\"@_IgnoreWrap\"] === true,\n                    showGuides: layer[\"@_ShowGuides\"] !== false,\n                    lockGuides: layer[\"@_LockGuides\"] === true,\n                    ui: layer[\"@_UI\"] || \"\",\n                    layerColor: layer[\"@_LayerColor\"] || \"LightBlue\"\n                });\n            });\n        }\n        this.layers = layers;\n        return layers;\n    }\n    extractPages(document) {\n        const pages = [];\n        if (document.Spread) {\n            const spreads = Array.isArray(document.Spread) ? document.Spread : [\n                document.Spread\n            ];\n            spreads.forEach((spread)=>{\n                if (spread.Page) {\n                    const spreadPages = Array.isArray(spread.Page) ? spread.Page : [\n                        spread.Page\n                    ];\n                    spreadPages.forEach((page)=>{\n                        pages.push({\n                            self: page[\"@_Self\"],\n                            name: page[\"@_Name\"] || \"\",\n                            appliedMaster: page[\"@_AppliedMaster\"] || \"\",\n                            geometricBounds: IDMLUtils.parseGeometricBounds(page[\"@_GeometricBounds\"]),\n                            itemTransform: IDMLUtils.parseTransform(page[\"@_ItemTransform\"]),\n                            spreadParent: spread[\"@_Self\"]\n                        });\n                    });\n                }\n            });\n        }\n        return pages;\n    }\n    async parseSpreadFile(fileName, content, xmlParser) {\n        console.log(`📄 Parsing spread: ${fileName}`);\n        try {\n            const parsed = xmlParser.parse(content);\n            const spreadId = path.basename(fileName, \".xml\");\n            const spreadData = parsed.Spread?.Spread || parsed.Spread || parsed;\n            if (parsed.Spread) {\n                console.log(\"Spread wrapper keys:\", Object.keys(parsed.Spread));\n                if (parsed.Spread.Spread) {\n                    console.log(\"Actual spread keys:\", Object.keys(parsed.Spread.Spread));\n                }\n            }\n            if (spreadData.Page) {\n                const pages = Array.isArray(spreadData.Page) ? spreadData.Page : [\n                    spreadData.Page\n                ];\n                console.log(`Found ${pages.length} pages in spread`);\n                pages.forEach((page, index)=>{\n                    console.log(`Page ${index} keys:`, Object.keys(page));\n                    // Look for elements in the page\n                    Object.keys(page).forEach((key)=>{\n                        if (key !== \"@_Self\" && key !== \"@_Name\" && key !== \"@_GeometricBounds\" && key !== \"@_ItemTransform\" && key !== \"@_AppliedMaster\") {\n                            const value = page[key];\n                            if (Array.isArray(value)) {\n                                console.log(`  Found array ${key} with ${value.length} items`);\n                            } else if (typeof value === \"object\") {\n                                console.log(`  Found object ${key}:`, Object.keys(value));\n                            }\n                        }\n                    });\n                });\n            } else {\n                console.log(\"No Page property found in spread\");\n            }\n            // Check for direct elements in spread\n            Object.keys(spreadData).forEach((key)=>{\n                if (key.includes(\"Frame\") || key.includes(\"Rectangle\") || key.includes(\"Text\") || key.includes(\"Group\") || key.includes(\"Oval\")) {\n                    console.log(`Found potential elements directly in spread: ${key}`, Array.isArray(spreadData[key]) ? spreadData[key].length : \"single\");\n                }\n            });\n            // Extract detailed spread information\n            const detailedSpread = {\n                self: spreadData[\"@_Self\"],\n                flattenerOverride: spreadData[\"@_FlattenerOverride\"] || \"\",\n                bindingLocation: parseFloat(spreadData[\"@_BindingLocation\"]) || 0,\n                allowPageShuffle: spreadData[\"@_AllowPageShuffle\"] !== false,\n                // Extract page elements\n                pages: this.elementParser.extractSpreadPages(spreadData),\n                // Extract all page items (text frames, rectangles, etc.)\n                pageItems: this.elementParser.extractPageItems(spreadData)\n            };\n            this.spreads[spreadId] = detailedSpread;\n            console.log(`✅ Spread ${spreadId} parsed with ${detailedSpread.pageItems.length} items`);\n        } catch (error) {\n            console.error(`❌ Error parsing spread ${fileName}:`, error.message);\n        }\n    }\n    async parseMasterSpreadFile(fileName, content, xmlParser) {\n        console.log(`🎨 Parsing master spread: ${fileName}`);\n        try {\n            const parsed = xmlParser.parse(content);\n            const masterId = path.basename(fileName, \".xml\");\n            const masterData = parsed.MasterSpread?.MasterSpread || parsed.MasterSpread || parsed;\n            console.log(\"Parsed master spread keys:\", Object.keys(parsed));\n            if (parsed.MasterSpread) {\n                console.log(\"MasterSpread wrapper keys:\", Object.keys(parsed.MasterSpread));\n                if (parsed.MasterSpread.MasterSpread) {\n                    console.log(\"Actual master spread keys:\", Object.keys(parsed.MasterSpread.MasterSpread));\n                }\n            }\n            // Extract detailed master spread information\n            const detailedMaster = {\n                self: masterData[\"@_Self\"],\n                name: masterData[\"@_Name\"] || \"\",\n                namePrefix: masterData[\"@_NamePrefix\"] || \"\",\n                basedOn: masterData[\"@_BasedOn\"] || \"\",\n                itemTransform: IDMLUtils.parseTransform(masterData[\"@_ItemTransform\"]),\n                // Extract master pages\n                pages: this.elementParser.extractMasterPages(masterData),\n                // Extract master page items\n                pageItems: this.elementParser.extractPageItems(masterData)\n            };\n            this.masterSpreads[masterId] = detailedMaster;\n            console.log(`✅ Master spread ${masterId} parsed with ${detailedMaster.pageItems.length} items`);\n        } catch (error) {\n            console.error(`❌ Error parsing master spread ${fileName}:`, error.message);\n        }\n    }\n    async extractDetailedInformation() {\n        console.log(\"Extracting detailed information with enhanced processing...\");\n        this.pageInfo = {\n            dimensions: this.calculatePageDimensions(),\n            margins: this.calculateMargins(),\n            bleeds: this.calculateBleeds(),\n            guides: this.extractGuides(),\n            grids: this.extractGrids()\n        };\n        this.elementParser.createElementPositionMapFixed(); // Use the fixed version\n        console.log(\"✅ Enhanced detailed information extracted\");\n    }\n    calculatePageDimensions() {\n        // Try to get dimensions from spreads first (most reliable)\n        if (this.spreads && Object.keys(this.spreads).length > 0) {\n            const firstSpread = Object.values(this.spreads)[0];\n            if (firstSpread.pages && firstSpread.pages.length > 0) {\n                const firstPage = firstSpread.pages[0];\n                if (firstPage.geometricBounds) {\n                    const bounds = firstPage.geometricBounds;\n                    // FIXED: Get units from ViewPreferences instead of hardcoding 'Points'\n                    let units = \"Points\"; // fallback\n                    // Try to get units from StyleParser's documentInfo first\n                    if (this.styleParser && this.styleParser.getDocumentInfo) {\n                        const styleParserInfo = this.styleParser.getDocumentInfo();\n                        if (styleParserInfo?.preferences?.viewPreferences?.horizontalMeasurementUnits) {\n                            units = styleParserInfo.preferences.viewPreferences.horizontalMeasurementUnits;\n                            console.log(\"\\uD83D\\uDCCF Using measurement units from StyleParser:\", units);\n                        }\n                    }\n                    // Fallback to local documentInfo\n                    if (units === \"Points\" && this.documentInfo?.preferences?.viewPreferences?.horizontalMeasurementUnits) {\n                        units = this.documentInfo.preferences.viewPreferences.horizontalMeasurementUnits;\n                        console.log(\"\\uD83D\\uDCCF Using measurement units from local DocumentInfo:\", units);\n                    }\n                    return {\n                        width: bounds.width || bounds.right - bounds.left || 0,\n                        height: bounds.height || bounds.bottom - bounds.top || 0,\n                        facingPages: Object.values(this.spreads).some((spread)=>spread.pages && spread.pages.length > 1),\n                        units: units\n                    };\n                }\n            }\n        }\n        // Fallback to document preferences\n        const docPrefs = this.documentInfo.preferences?.documentPreferences || {};\n        // FIXED: Better units detection for fallback case\n        let units = \"Points\"; // default fallback\n        // Try StyleParser first\n        if (this.styleParser && this.styleParser.getDocumentInfo) {\n            const styleParserInfo = this.styleParser.getDocumentInfo();\n            if (styleParserInfo?.preferences?.viewPreferences?.horizontalMeasurementUnits) {\n                units = styleParserInfo.preferences.viewPreferences.horizontalMeasurementUnits;\n            }\n        }\n        // Then try local documentInfo\n        if (units === \"Points\" && this.documentInfo?.preferences?.viewPreferences?.horizontalMeasurementUnits) {\n            units = this.documentInfo.preferences.viewPreferences.horizontalMeasurementUnits;\n        }\n        console.log(\"\\uD83D\\uDCCF Final measurement units decision:\", units);\n        return {\n            width: docPrefs.pageWidth || 0,\n            height: docPrefs.pageHeight || 0,\n            facingPages: docPrefs.facingPages || false,\n            units: units\n        };\n    }\n    calculateMargins() {\n        console.log(\"\\uD83D\\uDCCF Calculating margins from multiple sources...\");\n        // Try to get margins from master pages first (most reliable)\n        if (this.masterSpreads && Object.keys(this.masterSpreads).length > 0) {\n            const firstMaster = Object.values(this.masterSpreads)[0];\n            if (firstMaster.pages && firstMaster.pages.length > 0) {\n                const firstMasterPage = firstMaster.pages[0];\n                // Look for margin preferences in master page\n                // This will be populated by the improved master spread parsing\n                if (firstMasterPage.marginPreference) {\n                    const masterMargins = {\n                        top: firstMasterPage.marginPreference.top || 0,\n                        bottom: firstMasterPage.marginPreference.bottom || 0,\n                        left: firstMasterPage.marginPreference.left || 0,\n                        right: firstMasterPage.marginPreference.right || 0,\n                        columnCount: firstMasterPage.marginPreference.columnCount || 1,\n                        columnGutter: firstMasterPage.marginPreference.columnGutter || 0\n                    };\n                    console.log(\"\\uD83D\\uDCCF Found margins from master page:\", masterMargins);\n                    return masterMargins;\n                }\n            }\n        }\n        // Fallback to document preferences\n        const docPrefs = this.documentInfo.documentPreferences || {};\n        const marginPrefs = this.documentInfo.preferences?.marginPreferences || {};\n        // Check for margin data in document preferences (fallback)\n        const margins = {\n            top: marginPrefs.top || docPrefs.marginTop || docPrefs.top || 0,\n            bottom: marginPrefs.bottom || docPrefs.marginBottom || docPrefs.bottom || 0,\n            left: marginPrefs.left || docPrefs.marginLeft || docPrefs.left || 0,\n            right: marginPrefs.right || docPrefs.marginRight || docPrefs.right || 0,\n            columnCount: marginPrefs.columnCount || docPrefs.marginColumnCount || docPrefs.columnCount || 1,\n            columnGutter: marginPrefs.columnGutter || docPrefs.marginColumnGutter || docPrefs.columnGutter || 0\n        };\n        console.log(\"\\uD83D\\uDCCF Calculated margins (fallback):\", margins);\n        return margins;\n    }\n    calculateBleeds() {\n        const docPrefs = this.documentInfo.preferences?.documentPreferences || {};\n        return {\n            top: docPrefs.documentBleedTopOffset || 0,\n            bottom: docPrefs.documentBleedBottomOffset || 0,\n            inside: docPrefs.documentBleedInsideOrLeftOffset || 0,\n            outside: docPrefs.documentBleedOutsideOrRightOffset || 0\n        };\n    }\n    extractGuides() {\n        const guides = [];\n        // Extract guides from spreads\n        Object.values(this.spreads).forEach((spread)=>{\n            if (spread.pageItems) {\n                spread.pageItems.forEach((item)=>{\n                    if (item.type === \"Guide\") {\n                        guides.push({\n                            orientation: item.orientation || \"Horizontal\",\n                            location: item.location || 0,\n                            fitToPage: item.fitToPage || false,\n                            viewThreshold: item.viewThreshold || 0\n                        });\n                    }\n                });\n            }\n        });\n        return guides;\n    }\n    extractGrids() {\n        const gridPrefs = this.documentInfo.preferences?.gridPreferences || {};\n        return {\n            baseline: {\n                start: gridPrefs.baselineStart || 0,\n                division: gridPrefs.baselineDivision || 12,\n                shown: gridPrefs.baselineShown || false,\n                snapTo: gridPrefs.baselineSnapto || false\n            },\n            document: {\n                shown: gridPrefs.documentGridShown || false,\n                snapTo: gridPrefs.documentGridSnapto || false\n            }\n        };\n    }\n    // Utility method to get page content\n    getPageContent(pageId) {\n        return this.elementParser.getPageContent(pageId);\n    }\n    getDocument() {\n        return this.document;\n    }\n    getSpreads() {\n        return this.spreads;\n    }\n    getMasterSpreads() {\n        return this.masterSpreads;\n    }\n    getDocumentInfo() {\n        return this.documentInfo;\n    }\n    getPageInfo() {\n        return this.pageInfo;\n    }\n    getLayers() {\n        return this.layers;\n    }\n    calculateCoordinateOffset() {\n        return IDMLUtils.calculateCoordinateOffset(this.elementParser.getElements());\n    }\n}\nmodule.exports = DocumentParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/parsers/DocumentParser.js\n");

/***/ }),

/***/ "./lib/parsers/ElementParser.js":
/*!**************************************!*\
  !*** ./lib/parsers/ElementParser.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst path = __webpack_require__(/*! path */ \"path\");\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass ElementParser {\n    constructor(){\n        this.elements = [];\n    }\n    extractSpreadPages(spreadData) {\n        const pages = [];\n        if (spreadData.Page) {\n            const pageList = Array.isArray(spreadData.Page) ? spreadData.Page : [\n                spreadData.Page\n            ];\n            pageList.forEach((page, index)=>{\n                pages.push({\n                    self: page[\"@_Self\"],\n                    name: page[\"@_Name\"] || \"\",\n                    appliedMaster: page[\"@_AppliedMaster\"] || \"\",\n                    geometricBounds: IDMLUtils.parseGeometricBounds(page[\"@_GeometricBounds\"]),\n                    itemTransform: IDMLUtils.parseTransform(page[\"@_ItemTransform\"])\n                });\n            });\n        } else {\n            console.log(\"No pages found in spread data\");\n        }\n        console.log(`Extracted ${pages.length} pages`);\n        return pages;\n    }\n    extractPageItems(spreadData) {\n        const pageItems = [];\n        // Extract different types of page items\n        const itemTypes = [\n            \"Rectangle\",\n            \"Oval\",\n            \"Polygon\",\n            \"GraphicLine\",\n            \"TextFrame\",\n            \"Group\",\n            \"Button\",\n            \"Table\",\n            \"Image\",\n            \"EPS\",\n            \"PDF\",\n            \"PlacedItem\",\n            \"ContentFrame\" // Add these\n        ];\n        itemTypes.forEach((itemType)=>{\n            if (spreadData[itemType]) {\n                const items = Array.isArray(spreadData[itemType]) ? spreadData[itemType] : [\n                    spreadData[itemType]\n                ];\n                items.forEach((item)=>{\n                    console.log(`Processing ${itemType}:`, item[\"@_Self\"]);\n                    const pageItem = this.parsePageItem(item, itemType);\n                    if (pageItem) {\n                        pageItems.push(pageItem);\n                        this.elements.push(pageItem);\n                    }\n                });\n            }\n        });\n        this.checkForNestedContent(spreadData, pageItems);\n        // ALSO CHECK FOR NESTED ITEMS IN PAGES\n        if (spreadData.Page) {\n            const pages = Array.isArray(spreadData.Page) ? spreadData.Page : [\n                spreadData.Page\n            ];\n            pages.forEach((page)=>{\n                itemTypes.forEach((itemType)=>{\n                    if (page[itemType]) {\n                        console.log(`Found ${itemType} in page:`, Array.isArray(page[itemType]) ? page[itemType].length : 1);\n                        const items = Array.isArray(page[itemType]) ? page[itemType] : [\n                            page[itemType]\n                        ];\n                        items.forEach((item)=>{\n                            const pageItem = this.parsePageItem(item, itemType);\n                            if (pageItem) {\n                                pageItems.push(pageItem);\n                                this.elements.push(pageItem);\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        console.log(`Total page items extracted: ${pageItems.length}`);\n        return pageItems;\n    }\n    checkForNestedContent(spreadData, pageItems) {\n        console.log(\"\\uD83D\\uDD0D Checking for nested content in elements...\");\n        // Check rectangles for placed images\n        if (spreadData.Rectangle) {\n            const rectangles = Array.isArray(spreadData.Rectangle) ? spreadData.Rectangle : [\n                spreadData.Rectangle\n            ];\n            rectangles.forEach((rect)=>{\n                // Look for ANY content inside rectangle - be more aggressive\n                const possibleContent = rect.Image || rect.PlacedImage || rect.EPS || rect.PDF || rect.Properties?.Image || rect.Properties?.PlacedImage || rect.Link || rect.Properties?.Link;\n                if (possibleContent) {\n                    console.log(`📷 Found placed content in rectangle ${rect[\"@_Self\"]}:`, possibleContent);\n                    // Update the rectangle to indicate it's a content frame\n                    const existingRect = pageItems.find((item)=>item.self === rect[\"@_Self\"]);\n                    if (existingRect) {\n                        existingRect.hasPlacedContent = true;\n                        existingRect.contentType = \"Image\";\n                        // Extract placed content details with better handling\n                        existingRect.placedContent = this.extractPlacedContent(possibleContent);\n                        // IMPORTANT: Calculate the image position within the frame\n                        existingRect.imagePosition = IDMLUtils.calculateImagePositionInFrame(existingRect.geometricBounds, existingRect.itemTransform, existingRect.placedContent);\n                    }\n                }\n            });\n        }\n    }\n    extractPlacedContent(content) {\n        if (!content) return null;\n        console.log(\"\\uD83D\\uDD0D Extracting placed content:\", content);\n        const contentItem = Array.isArray(content) ? content[0] : content;\n        console.log(\"Content item keys:\", Object.keys(contentItem));\n        // ENHANCED: Better href handling for embedded images\n        let href = contentItem[\"@_href\"] || contentItem[\"@_ActualPpi\"] || \"\";\n        let isEmbedded = false;\n        // Check if this is an embedded image reference\n        if (href && !href.startsWith(\"file://\") && !href.includes(\"/\")) {\n            // This looks like an embedded image reference\n            isEmbedded = true;\n            console.log(\"\\uD83D\\uDDBC️ Detected embedded image reference:\", href);\n        }\n        return {\n            type: contentItem[\"@_type\"] || \"Image\",\n            href: href,\n            isEmbedded: isEmbedded,\n            bounds: contentItem[\"@_GeometricBounds\"] ? IDMLUtils.parseGeometricBounds(contentItem[\"@_GeometricBounds\"]) : null,\n            transform: contentItem[\"@_ItemTransform\"] ? IDMLUtils.parseTransform(contentItem[\"@_ItemTransform\"]) : null,\n            actualPpi: contentItem[\"@_ActualPpi\"],\n            effectivePpi: contentItem[\"@_EffectivePpi\"],\n            imageTypeName: contentItem[\"@_ImageTypeName\"],\n            space: contentItem[\"@_Space\"]\n        };\n    }\n    parsePageItem(item, itemType) {\n        // ADD: Validation\n        if (!item || !item[\"@_Self\"]) {\n            console.warn(`Invalid ${itemType} item - missing self ID`);\n            return null;\n        }\n        const baseItem = {\n            type: itemType,\n            self: item[\"@_Self\"],\n            name: item[\"@_Name\"] || \"\",\n            visible: item[\"@_Visible\"] !== false,\n            locked: item[\"@_Locked\"] === true,\n            geometricBounds: IDMLUtils.calculateBoundsFromPath(item),\n            itemTransform: IDMLUtils.parseTransform(item[\"@_ItemTransform\"]),\n            itemLayer: item[\"@_ItemLayer\"] || \"\",\n            fillColor: item[\"@_FillColor\"] || \"Color/None\",\n            strokeColor: item[\"@_StrokeColor\"] || \"Color/None\",\n            strokeWeight: parseFloat(item[\"@_StrokeWeight\"]) || 0,\n            parentStory: item[\"@_ParentStory\"] || null,\n            // ENHANCED: Better content frame detection\n            isContentFrame: false,\n            hasPlacedContent: false,\n            contentType: null\n        };\n        // ADD: Detect content frames more accurately\n        // ENHANCED: Better embedded image detection\n        if (itemType === \"Rectangle\") {\n            // Check for embedded images more thoroughly\n            const embeddedInfo = this.detectEmbeddedImages(item);\n            if (embeddedInfo.hasEmbeddedContent || embeddedInfo.isPlaceholder) {\n                baseItem.isContentFrame = true;\n                baseItem.hasPlacedContent = embeddedInfo.hasEmbeddedContent;\n                baseItem.contentType = embeddedInfo.embeddedType || \"placeholder\";\n                baseItem.isEmbedded = embeddedInfo.hasEmbeddedContent;\n                baseItem.isPlaceholder = embeddedInfo.isPlaceholder;\n                console.log(`📦 Detected ${embeddedInfo.hasEmbeddedContent ? \"embedded\" : \"placeholder\"} content frame: ${baseItem.self}`);\n            }\n            // Existing content frame detection logic...\n            const hasContent = !!(item.Image || item.PlacedImage || item.EPS || item.PDF || item.Properties?.Image || item.Properties?.PlacedImage);\n            if (hasContent && !baseItem.isContentFrame) {\n                baseItem.isContentFrame = true;\n                baseItem.hasPlacedContent = true;\n                baseItem.contentType = \"Image\";\n                // Extract placed content transform for positioning\n                const placedContent = item.Image || item.PlacedImage || item.EPS || item.PDF;\n                if (placedContent) {\n                    baseItem.placedContent = this.extractPlacedContent(placedContent);\n                }\n                console.log(`📦 Detected external content frame: ${baseItem.self}`);\n            }\n        }\n        // Type-specific processing...\n        switch(itemType){\n            case \"TextFrame\":\n                baseItem.textFramePreferences = this.parseTextFramePreferences(item.TextFramePreference);\n                break;\n            case \"Rectangle\":\n                baseItem.cornerEffects = this.parseCornerEffects(item);\n                break;\n            case \"Group\":\n                baseItem.groupItems = this.extractGroupItems(item);\n                break;\n        }\n        return baseItem;\n    }\n    detectEmbeddedImages(element) {\n        const embeddedIndicators = {\n            hasEmbeddedContent: false,\n            embeddedType: null,\n            embeddedData: null,\n            embeddedFileName: null,\n            isPlaceholder: false\n        };\n        // Check if element name indicates placeholder\n        if (element.name && (element.name.includes(\"[YOUR IMAGE HERE]\") || element.name.includes(\"[IMAGE]\") || element.name.toLowerCase().includes(\"placeholder\"))) {\n            embeddedIndicators.isPlaceholder = true;\n            embeddedIndicators.embeddedType = \"placeholder\";\n        }\n        // ENHANCED: Check for actual embedded image data\n        if (element.placedContent) {\n            const content = element.placedContent;\n            // Check if href looks like an embedded reference\n            if (content.href && content.isEmbedded) {\n                embeddedIndicators.hasEmbeddedContent = true;\n                embeddedIndicators.embeddedType = content.imageTypeName || \"unknown\";\n                embeddedIndicators.embeddedData = content.href;\n                embeddedIndicators.embeddedFileName = `${content.href}.${IDMLUtils.getImageExtension(content.imageTypeName)}`;\n            }\n        }\n        return embeddedIndicators;\n    }\n    parseTextFramePreferences(textFramePreference) {\n        if (!textFramePreference) return null;\n        return {\n            textColumnCount: parseInt(textFramePreference[\"@_TextColumnCount\"]) || 1,\n            textColumnGutter: parseFloat(textFramePreference[\"@_TextColumnGutter\"]) || 0,\n            firstBaselineOffset: textFramePreference[\"@_FirstBaselineOffset\"] || \"AscentOffset\",\n            autoSizingReferencePoint: textFramePreference[\"@_AutoSizingReferencePoint\"] || \"CenterPoint\",\n            autoSizingType: textFramePreference[\"@_AutoSizingType\"] || \"Off\",\n            verticalJustification: textFramePreference[\"@_VerticalJustification\"] || \"TopAlign\",\n            // ENHANCED: Extract text frame insets for precise positioning\n            insetSpacing: {\n                top: parseFloat(textFramePreference[\"@_InsetSpacing\"]?.split(\" \")[0]) || parseFloat(textFramePreference[\"@_TextInsetTop\"]) || 0,\n                right: parseFloat(textFramePreference[\"@_InsetSpacing\"]?.split(\" \")[1]) || parseFloat(textFramePreference[\"@_TextInsetRight\"]) || 0,\n                bottom: parseFloat(textFramePreference[\"@_InsetSpacing\"]?.split(\" \")[2]) || parseFloat(textFramePreference[\"@_TextInsetBottom\"]) || 0,\n                left: parseFloat(textFramePreference[\"@_InsetSpacing\"]?.split(\" \")[3]) || parseFloat(textFramePreference[\"@_TextInsetLeft\"]) || 0\n            },\n            // Additional InDesign-specific properties for precise text layout\n            useMinimumHeight: textFramePreference[\"@_UseMinimumHeight\"] === true,\n            minimumFirstBaselineOffset: parseFloat(textFramePreference[\"@_MinimumFirstBaselineOffset\"]) || 0,\n            ignoreWrap: textFramePreference[\"@_IgnoreWrap\"] === true\n        };\n    }\n    parseCornerEffects(item) {\n        // Parse corner effects for rectangles\n        return {\n            topLeftCornerRadius: parseFloat(item[\"@_TopLeftCornerRadius\"]) || 0,\n            topRightCornerRadius: parseFloat(item[\"@_TopRightCornerRadius\"]) || 0,\n            bottomLeftCornerRadius: parseFloat(item[\"@_BottomLeftCornerRadius\"]) || 0,\n            bottomRightCornerRadius: parseFloat(item[\"@_BottomRightCornerRadius\"]) || 0\n        };\n    }\n    extractGroupItems(groupItem) {\n        const groupItems = [];\n        // Groups can contain other page items\n        const itemTypes = [\n            \"Rectangle\",\n            \"Oval\",\n            \"Polygon\",\n            \"TextFrame\"\n        ];\n        itemTypes.forEach((itemType)=>{\n            if (groupItem[itemType]) {\n                const items = Array.isArray(groupItem[itemType]) ? groupItem[itemType] : [\n                    groupItem[itemType]\n                ];\n                items.forEach((item)=>{\n                    const parsedItem = this.parsePageItem(item, itemType);\n                    if (parsedItem) {\n                        groupItems.push(parsedItem);\n                    }\n                });\n            }\n        });\n        return groupItems;\n    }\n    parseTransparency(transparencySettings) {\n        if (!transparencySettings) return null;\n        return {\n            blendingSettings: transparencySettings.BlendingSetting ? {\n                blendMode: transparencySettings.BlendingSetting[\"@_BlendMode\"] || \"Normal\",\n                opacity: parseFloat(transparencySettings.BlendingSetting[\"@_Opacity\"]) || 100\n            } : null\n        };\n    }\n    createElementPositionMapFixed() {\n        console.log(\"Creating FIXED element position map...\");\n        // Calculate coordinate offset to handle negative coordinates\n        const coordinateOffset = IDMLUtils.calculateCoordinateOffset(this.elements);\n        console.log(\"Coordinate offset:\", coordinateOffset);\n        this.elements.forEach((element, index)=>{\n            const bounds = element.geometricBounds || element.originalBounds;\n            const transform = element.itemTransform || {\n                a: 1,\n                b: 0,\n                c: 0,\n                d: 1,\n                tx: 0,\n                ty: 0\n            };\n            // CORRECT: Apply transform to bounds, then add offset\n            let x = (bounds?.left || 0) + (transform.tx || 0) + coordinateOffset.x;\n            let y = (bounds?.top || 0) + (transform.ty || 0) + coordinateOffset.y;\n            // For the textframe with negative Y, apply special handling\n            if (y < 0) {\n                y = Math.abs(y); // Convert negative to positive\n            }\n            let width = Math.abs(bounds?.width || 0);\n            let height = Math.abs(bounds?.height || 0);\n            // DETAILED DEBUGGING: Track the exact coordinate calculation\n            console.log(`🔍 ELEMENT ${index} [${element.type}] COORDINATE CALCULATION:`);\n            console.log(`   📄 Raw bounds:`, bounds);\n            console.log(`   🔄 Raw transform:`, transform);\n            console.log(`   📐 Step 1 - bounds.left: ${bounds?.left}`);\n            console.log(`   📐 Step 2 - bounds.top: ${bounds?.top}`);\n            console.log(`   📐 Step 3 - transform.tx: ${transform.tx}`);\n            console.log(`   📐 Step 4 - transform.ty: ${transform.ty}`);\n            console.log(`   📐 Step 5 - coordinateOffset.x: ${coordinateOffset.x}`);\n            console.log(`   📐 Step 6 - coordinateOffset.y: ${coordinateOffset.y}`);\n            console.log(`   🧮 CALCULATION: x = ${bounds?.left} + ${transform.tx} + ${coordinateOffset.x} = ${x}`);\n            console.log(`   🧮 CALCULATION: y = ${bounds?.top} + ${transform.ty} + ${coordinateOffset.y} = ${y}`);\n            element.position = {\n                x: Math.round(x * 100) / 100,\n                y: Math.round(y * 100) / 100,\n                width: Math.round(width * 100) / 100,\n                height: Math.round(height * 100) / 100,\n                rotation: IDMLUtils.calculateRotation(transform)\n            };\n            console.log(`   ✅ FINAL POSITION:`, element.position);\n        });\n    }\n    extractMasterPages(masterData) {\n        const pages = [];\n        if (masterData.Page) {\n            const pageList = Array.isArray(masterData.Page) ? masterData.Page : [\n                masterData.Page\n            ];\n            pageList.forEach((page)=>{\n                // Extract margin preferences from master page\n                let marginPreference = null;\n                if (page.MarginPreference) {\n                    marginPreference = {\n                        top: parseFloat(page.MarginPreference[\"@_Top\"]) || 0,\n                        bottom: parseFloat(page.MarginPreference[\"@_Bottom\"]) || 0,\n                        left: parseFloat(page.MarginPreference[\"@_Left\"]) || 0,\n                        right: parseFloat(page.MarginPreference[\"@_Right\"]) || 0,\n                        columnCount: parseInt(page.MarginPreference[\"@_ColumnCount\"]) || 1,\n                        columnGutter: parseFloat(page.MarginPreference[\"@_ColumnGutter\"]) || 0,\n                        columnDirection: page.MarginPreference[\"@_ColumnDirection\"] || \"Horizontal\",\n                        columnsPositions: page.MarginPreference[\"@_ColumnsPositions\"] || \"\"\n                    };\n                    console.log(\"\\uD83D\\uDCCF Extracted margin preference from master page:\", marginPreference);\n                }\n                pages.push({\n                    self: page[\"@_Self\"],\n                    name: page[\"@_Name\"] || \"\",\n                    geometricBounds: IDMLUtils.parseGeometricBounds(page[\"@_GeometricBounds\"]),\n                    itemTransform: IDMLUtils.parseTransform(page[\"@_ItemTransform\"]),\n                    appliedMaster: page[\"@_AppliedMaster\"] || \"\",\n                    masterPageTransform: IDMLUtils.parseTransform(page[\"@_MasterPageTransform\"]),\n                    marginPreference: marginPreference\n                });\n            });\n        }\n        return pages;\n    }\n    getElements() {\n        return this.elements;\n    }\n    clearElements() {\n        this.elements = [];\n    }\n    getElementIndex(element) {\n        return this.elements.findIndex((el)=>el.self === element.self);\n    }\n    getPageContent(pageId) {\n        const pageElements = this.elements.filter((element)=>{\n            // Check if element belongs to this page based on its bounds\n            return true; // TODO: Implement proper page boundary checking\n        });\n        return {\n            elements: pageElements\n        };\n    }\n}\nmodule.exports = ElementParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/parsers/ElementParser.js\n");

/***/ }),

/***/ "./lib/parsers/StoryParser.js":
/*!************************************!*\
  !*** ./lib/parsers/StoryParser.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst path = __webpack_require__(/*! path */ \"path\");\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass StoryParser {\n    constructor(styleParser){\n        this.styleParser = styleParser;\n        this.stories = {};\n    }\n    async parseStoryFile(fileName, content, xmlParser) {\n        console.log(`📝 Parsing story: ${fileName}`);\n        try {\n            const parsed = xmlParser.parse(content);\n            const storyId = path.basename(fileName, \".xml\");\n            const storyData = parsed.Story || parsed;\n            // ADD DEBUGGING FOR BR ELEMENTS IN RAW XML\n            console.log(\"=== RAW XML CONTENT DEBUG ===\");\n            console.log(\"Raw XML content sample:\", content.substring(0, 1000));\n            // Count Br elements in raw XML\n            const brMatches = content.match(/<Br[^>]*>/g) || [];\n            console.log(`Found ${brMatches.length} <Br> elements in raw XML:`, brMatches);\n            // Look for consecutive Br elements\n            const consecutiveBrPattern = /(<Br[^>]*>\\s*){2,}/g;\n            const consecutiveBrMatches = content.match(consecutiveBrPattern) || [];\n            console.log(`Found ${consecutiveBrMatches.length} groups of consecutive <Br> elements:`, consecutiveBrMatches);\n            // CRITICAL FIX: Parse raw XML to preserve document order\n            this.parseRawXMLForDocumentOrder(content, fileName);\n            // ADD THESE SIMPLE LOGS FIRST:\n            console.log(\"=== SIMPLE DEBUG TEST ===\");\n            console.log(\"Story file name:\", fileName);\n            console.log(\"Parsed story keys:\", Object.keys(storyData));\n            console.log(\"Raw story data sample:\", JSON.stringify(storyData, null, 2).substring(0, 500));\n            // Extract detailed story information\n            const detailedStory = {\n                self: storyData[\"@_Self\"],\n                appliedTOCStyle: storyData[\"@_AppliedTOCStyle\"] || \"n\",\n                userText: storyData[\"@_UserText\"] !== false,\n                // Extract story content with formatting\n                content: this.extractDetailedStoryContent(storyData, fileName),\n                // Extract text formatting\n                textFormatting: this.extractTextFormatting(storyData)\n            };\n            // ADD DEBUGGING FOR PARSED BR STRUCTURE\n            console.log(\"=== PARSED XML STRUCTURE DEBUG ===\");\n            this.debugBrElementsInParsedStructure(storyData, \"root\");\n            const cleanStoryId = storyId.replace(\"Story_\", \"\");\n            this.stories[cleanStoryId] = detailedStory;\n            // Enhanced logging to show line breaks\n            const { plainText, lineBreakInfo } = detailedStory.content;\n            console.log(`✅ Story ${storyId} parsed:`);\n            console.log(`   - Characters: ${plainText.length}`);\n            console.log(`   - Words: ${detailedStory.content.wordCount}`);\n            console.log(`   - Line breaks: ${lineBreakInfo?.lineBreakCount || 0}`);\n            console.log(`   - Text preview: \"${plainText.substring(0, 50).replace(/\\n/g, \"\\\\n\")}...\"`);\n        } catch (error) {\n            console.error(`❌ Error parsing story ${fileName}:`, error.message);\n        }\n    }\n    // Replace the existing extractDetailedStoryContent method with this corrected version\n    extractDetailedStoryContent(storyData, fileName = \"unknown\") {\n        let content = \"\";\n        let formattedContent = [];\n        let textColor = null;\n        let debugInfo = [];\n        const extractTextRecursively = (element, depth = 0, context = {})=>{\n            if (typeof element === \"string\") {\n                content += element;\n                return;\n            }\n            if (element && typeof element === \"object\") {\n                // ENHANCED: Special handling for CharacterStyleRange with sophisticated Br detection\n                if (element.CharacterStyleRange) {\n                    const ranges = Array.isArray(element.CharacterStyleRange) ? element.CharacterStyleRange : [\n                        element.CharacterStyleRange\n                    ];\n                    ranges.forEach((range, rangeIndex)=>{\n                        // Extract direct font references from the XML range\n                        const directFontRef = range[\"@_AppliedFont\"] || range[\"@_FontFamily\"] || range[\"@_Font\"] || \"\";\n                        const formatting = {\n                            paragraphStyle: element[\"@_AppliedParagraphStyle\"] || context.appliedStyle || null,\n                            characterStyle: range[\"@_AppliedCharacterStyle\"] || null,\n                            fontSize: range[\"@_PointSize\"] ? parseFloat(range[\"@_PointSize\"]) : null,\n                            fontReference: directFontRef,\n                            fillColor: range[\"@_FillColor\"] || null,\n                            fontStyle: range[\"@_FontStyle\"] || null,\n                            // CRITICAL FIX: Inherit paragraph alignment from context if not explicitly set\n                            alignment: range[\"@_Justification\"] || range[\"@_Alignment\"] || context.paragraphAlignment || null\n                        };\n                        const resolvedFormatting = this.styleParser.resolveStyleFormatting(formatting);\n                        // CRITICAL FIX: Process Content and Br elements in document order\n                        // This handles interleaved <Content> and <Br> elements correctly\n                        content = this.processCharacterRangeInOrder(range, resolvedFormatting, rangeIndex, ranges.length, content, formattedContent, debugInfo, context, fileName);\n                        // CRITICAL FIX: Add space between character style ranges if needed\n                        if (rangeIndex < ranges.length - 1) {\n                            const nextRange = ranges[rangeIndex + 1];\n                            // More robust space detection\n                            const currentText = content.slice(-10); // Check last 10 characters\n                            const currentRangeEndsWithSpace = /\\s$/.test(currentText); // Any whitespace at end\n                            const nextContent = nextRange.Content ? String(Array.isArray(nextRange.Content) ? nextRange.Content[0] : nextRange.Content) : \"\";\n                            const nextRangeStartsWithSpace = /^\\s/.test(nextContent); // Any whitespace at start\n                            // AGGRESSIVE FIX: Add space between ALL ranges unless explicitly not needed\n                            const shouldSkipSpace = currentRangeEndsWithSpace || nextRangeStartsWithSpace || this.shouldInsertImplicitLineBreak(range, nextRange, context) || !nextRange.Content || // Skip if next range has no content\n                            nextContent.trim() === \"\";\n                            if (!shouldSkipSpace) {\n                                const currentStyle = range[\"@_AppliedCharacterStyle\"] || \"none\";\n                                const nextStyle = nextRange[\"@_AppliedCharacterStyle\"] || \"none\";\n                                const spaceText = \" \";\n                                content += spaceText;\n                                formattedContent.push({\n                                    text: spaceText,\n                                    formatting: {\n                                        isSpace: true,\n                                        source: \"between character style ranges (aggressive)\",\n                                        currentStyle,\n                                        nextStyle\n                                    }\n                                });\n                                debugInfo.push({\n                                    type: \"Space inserted between character styles (aggressive)\",\n                                    location: `Between ranges ${rangeIndex} and ${rangeIndex + 1}`,\n                                    currentStyle,\n                                    nextStyle,\n                                    reason: \"Default space insertion - words likely split across ranges\",\n                                    currentTextEnd: currentText.slice(-5),\n                                    nextTextStart: nextContent.slice(0, 5)\n                                });\n                            } else {\n                                debugInfo.push({\n                                    type: \"Space insertion skipped\",\n                                    location: `Between ranges ${rangeIndex} and ${rangeIndex + 1}`,\n                                    reason: currentRangeEndsWithSpace ? \"Current range ends with space\" : nextRangeStartsWithSpace ? \"Next range starts with space\" : !nextRange.Content ? \"Next range has no content\" : nextContent.trim() === \"\" ? \"Next content is only whitespace\" : \"Line break would be inserted\",\n                                    currentTextEnd: currentText.slice(-5),\n                                    nextTextStart: nextContent.slice(0, 5)\n                                });\n                            }\n                            // Handle explicit line breaks between ranges (for cases where shouldInsertImplicitLineBreak is true)\n                            if (this.shouldInsertImplicitLineBreak(range, nextRange, context)) {\n                                const implicitBreak = \"\\n\";\n                                content += implicitBreak;\n                                formattedContent.push({\n                                    text: implicitBreak,\n                                    formatting: {\n                                        isBreak: true,\n                                        breakType: \"implicit\",\n                                        source: \"between ranges\"\n                                    }\n                                });\n                                debugInfo.push({\n                                    type: \"Implicit line break\",\n                                    location: `Between ranges ${rangeIndex} and ${rangeIndex + 1}`\n                                });\n                            }\n                        }\n                    });\n                    return; // Don't continue processing to avoid duplication\n                }\n                // ENHANCED: Handle ParagraphStyleRange with context\n                if (element.ParagraphStyleRange) {\n                    const ranges = Array.isArray(element.ParagraphStyleRange) ? element.ParagraphStyleRange : [\n                        element.ParagraphStyleRange\n                    ];\n                    ranges.forEach((range, index)=>{\n                        const paragraphContext = {\n                            ...context,\n                            paragraphIndex: index,\n                            totalParagraphs: ranges.length,\n                            appliedStyle: range[\"@_AppliedParagraphStyle\"],\n                            // CRITICAL FIX: Pass down direct paragraph-level alignment\n                            paragraphAlignment: range[\"@_Justification\"] || range[\"@_Alignment\"]\n                        };\n                        // Track content length before\n                        const beforeLen = content.length;\n                        extractTextRecursively(range, depth + 1, paragraphContext);\n                        // Track content length after\n                        const afterLen = content.length;\n                        // If nothing was added, this is an empty paragraph: add a newline\n                        if (afterLen === beforeLen) {\n                            content += \"\\n\";\n                            formattedContent.push({\n                                text: \"\\n\",\n                                formatting: {\n                                    isBreak: true,\n                                    breakType: \"empty-paragraph\",\n                                    source: \"empty ParagraphStyleRange\"\n                                }\n                            });\n                            debugInfo.push({\n                                type: \"Empty paragraph detected\",\n                                location: `ParagraphStyleRange[${index}]`\n                            });\n                        }\n                        // Add paragraph break between paragraphs (but not after the last one)\n                        if (index < ranges.length - 1) {\n                            const paragraphBreak = \"\\n\\n\"; // Use double newline for paragraph breaks\n                            content += paragraphBreak;\n                            formattedContent.push({\n                                text: paragraphBreak,\n                                formatting: {\n                                    isBreak: true,\n                                    breakType: \"paragraph\",\n                                    source: \"between paragraphs\"\n                                }\n                            });\n                            debugInfo.push({\n                                type: \"Paragraph break\",\n                                location: `between paragraphs ${index} and ${index + 1}`\n                            });\n                        }\n                    });\n                    return;\n                }\n                // Handle direct Content elements (when not inside CharacterStyleRange)\n                if (element.Content && !element.CharacterStyleRange) {\n                    let text = Array.isArray(element.Content) ? element.Content.join(\"\") : String(element.Content);\n                    text = IDMLUtils.decodeXMLEntities(text);\n                    content += text;\n                    const formatting = {\n                        paragraphStyle: element[\"@_AppliedParagraphStyle\"] || context.appliedStyle || null,\n                        characterStyle: element[\"@_AppliedCharacterStyle\"] || null,\n                        fontSize: element[\"@_PointSize\"] || null,\n                        fontFamily: element[\"@_AppliedFont\"] || null,\n                        fillColor: element[\"@_FillColor\"] || null,\n                        // CRITICAL FIX: Inherit paragraph alignment from context if not explicitly set\n                        alignment: element[\"@_Justification\"] || element[\"@_Alignment\"] || context.paragraphAlignment || null\n                    };\n                    const resolvedFormatting = this.styleParser.resolveStyleFormatting(formatting);\n                    formattedContent.push({\n                        text: text,\n                        formatting: resolvedFormatting\n                    });\n                }\n                // ENHANCED: Direct Br element handling (outside of ranges)\n                if (element.Br !== undefined) {\n                    const brElements = Array.isArray(element.Br) ? element.Br : [\n                        element.Br\n                    ];\n                    console.log(`🔧 Processing ${brElements.length} direct Br elements:`, brElements);\n                    brElements.forEach((br, index)=>{\n                        const lineBreakText = \"\\n\";\n                        console.log(`🔧 Direct Br element ${index + 1}/${brElements.length} creates: ${JSON.stringify(lineBreakText)}`);\n                        content += lineBreakText;\n                        formattedContent.push({\n                            text: lineBreakText,\n                            formatting: {\n                                isBreak: true,\n                                breakType: \"explicit\",\n                                source: \"direct Br element\"\n                            }\n                        });\n                        debugInfo.push({\n                            type: \"Direct Br element\",\n                            location: `Direct element, index ${index}`\n                        });\n                    });\n                    console.log(`🔧 After processing ${brElements.length} direct Br elements, content ends with:`, JSON.stringify(content.slice(-10)));\n                }\n                // Continue with other nested elements\n                Object.entries(element).forEach(([key, value])=>{\n                    if (!key.startsWith(\"@_\") && key !== \"Content\" && key !== \"Br\" && key !== \"CharacterStyleRange\" && key !== \"ParagraphStyleRange\") {\n                        if (Array.isArray(value)) {\n                            value.forEach((item)=>extractTextRecursively(item, depth + 1, context));\n                        } else if (typeof value === \"object\" && depth < 10) {\n                            extractTextRecursively(value, depth + 1, context);\n                        }\n                    }\n                });\n            }\n        };\n        extractTextRecursively(storyData);\n        // DEBUG: Print the full raw content string with visible newlines before processing\n        console.log(\"\\uD83D\\uDCDD === COMPLETE CONTENT ANALYSIS ===\");\n        console.log(\"   - Raw content before processing:\", JSON.stringify(content));\n        console.log(\"   - Raw content newline count:\", (content.match(/\\n/g) || []).length);\n        console.log(\"   - Raw content character breakdown:\");\n        const chars = content.split(\"\").map((char, i)=>`${i}: ${JSON.stringify(char)}`);\n        console.log(\"   - First 50 characters:\", chars.slice(0, 50));\n        if (content.length > 50) {\n            console.log(\"   - Last 20 characters:\", chars.slice(-20));\n        }\n        // ENHANCED: Process and clean up the content with sophisticated line break preservation\n        let processedContent = IDMLUtils.sophisticatedLineBreakProcessing(content);\n        // CRITICAL: Explicitly preserve all newlines as-is (no merging or stripping)\n        processedContent = processedContent.replace(/\\r\\n?/g, \"\\n\"); // Normalize CRLF/CR to LF\n        // Do NOT collapse multiple newlines into one; preserve as-is\n        console.log(\"\\uD83D\\uDCDD === PROCESSED CONTENT ANALYSIS ===\");\n        console.log(\"   - Processed content:\", JSON.stringify(processedContent));\n        console.log(\"   - Processed content newline count:\", (processedContent.match(/\\n/g) || []).length);\n        console.log(\"   - Content length change:\", content.length, \"→\", processedContent.length);\n        // Show differences if any\n        if (content !== processedContent) {\n            console.log(\"⚠️  CONTENT WAS MODIFIED DURING PROCESSING!\");\n            console.log(\"   - Original:\", JSON.stringify(content.slice(0, 100)));\n            console.log(\"   - Processed:\", JSON.stringify(processedContent.slice(0, 100)));\n        } else {\n            console.log(\"✅ Content preserved exactly during processing\");\n        }\n        // DEBUG: Log space preservation results\n        console.log(\"\\uD83D\\uDCDD Text extraction results:\");\n        console.log(\"   - Original content length:\", content.length);\n        console.log(\"   - Processed content length:\", processedContent.length);\n        console.log(\"   - Space preservation events:\", debugInfo.filter((info)=>info.type.includes(\"Space inserted\")).length);\n        // DEBUG: Show first 300 chars with visible newlines\n        console.log(\"   - Extracted text preview:\", JSON.stringify(processedContent.slice(0, 300)));\n        // SPECIFIC DEBUG: Check for the problematic \"pavoluptusda\" text (simplified)\n        if (processedContent.includes(\"pavoluptusda\") || processedContent.includes(\"pa\") && processedContent.includes(\"voluptusda\")) {\n            console.log(\"\\uD83D\\uDEA8 FOUND PROBLEMATIC TEXT:\");\n            console.log('   - Contains \"pavoluptusda\":', processedContent.includes(\"pavoluptusda\"));\n            console.log('   - Contains \"pa voluptusda\":', processedContent.includes(\"pa voluptusda\"));\n            console.log(\"   - FormattedContent breakdown:\", formattedContent.map((item)=>item.text).join(\"|\"));\n        }\n        const lineBreakInfo = {\n            hasLineBreaks: processedContent.includes(\"\\n\"),\n            lineBreakCount: (processedContent.match(/\\n/g) || []).length,\n            lineBreakTypes: this.analyzeLineBreakTypes(formattedContent),\n            debugInfo: debugInfo,\n            spacePreservationCount: debugInfo.filter((info)=>info.type.includes(\"Space inserted\")).length\n        };\n        return {\n            plainText: processedContent,\n            formattedContent: formattedContent.filter((item)=>item.text && item.text.length > 0),\n            wordCount: IDMLUtils.countWords(processedContent.replace(/\\n/g, \" \")),\n            characterCount: processedContent.length,\n            textColor: textColor,\n            lineBreakInfo: lineBreakInfo\n        };\n    }\n    // NEW: Process CharacterStyleRange content and breaks in document order - FULLY DYNAMIC\n    processCharacterRangeInOrder(range, resolvedFormatting, rangeIndex, totalRanges, content, formattedContent, debugInfo, context, fileName) {\n        console.log(`🔧 Processing CharacterStyleRange[${rangeIndex}] in document order:`, {\n            hasContent: !!range.Content,\n            hasBr: range.Br !== undefined,\n            contentType: Array.isArray(range.Content) ? \"array\" : typeof range.Content,\n            brType: Array.isArray(range.Br) ? \"array\" : typeof range.Br\n        });\n        // COMPREHENSIVE EDGE CASE HANDLING\n        try {\n            // Case 1: Both Content and Br elements exist - most common case\n            if (range.Content && range.Br !== undefined) {\n                console.log(`🔧 Processing range with both content and breaks`);\n                return this.processInterleavedContentAndBr(range, resolvedFormatting, content, formattedContent, debugInfo, fileName);\n            } else if (range.Content && range.Br === undefined) {\n                console.log(`🔧 Processing range with only content`);\n                return this.processContentElements(range, resolvedFormatting, content, formattedContent, fileName);\n            } else if (!range.Content && range.Br !== undefined) {\n                console.log(`🔧 Processing range with only breaks`);\n                return this.processBrElements(range, content, formattedContent, debugInfo, rangeIndex, fileName);\n            } else {\n                console.log(`⚠️ Empty range encountered - no content or breaks`);\n                return content;\n            }\n        } catch (error) {\n            // ULTIMATE FALLBACK: If anything goes wrong, try to salvage what we can\n            console.log(`❌ Error processing CharacterStyleRange[${rangeIndex}]: ${error.message}`);\n            console.log(`🔄 Attempting emergency content extraction...`);\n            return this.emergencyContentExtraction(range, resolvedFormatting, content, formattedContent, fileName);\n        }\n    }\n    // EMERGENCY FALLBACK: Extract content from malformed or unexpected XML structures\n    emergencyContentExtraction(range, resolvedFormatting, content, formattedContent, fileName) {\n        console.log(`🚨 Emergency content extraction for unusual XML structure`);\n        try {\n            // Try to extract any text content using different approaches\n            const extractedTexts = [];\n            const extractedBreaks = [];\n            // Approach 1: Direct property access\n            if (range.Content) {\n                const contents = Array.isArray(range.Content) ? range.Content : [\n                    range.Content\n                ];\n                contents.forEach((c)=>{\n                    if (typeof c === \"string\" && c.trim()) {\n                        extractedTexts.push(c.trim());\n                    }\n                });\n            }\n            // Approach 2: Search for any text-like properties\n            Object.keys(range).forEach((key)=>{\n                if (typeof range[key] === \"string\" && range[key].trim() && key !== \"@_Self\" && !key.startsWith(\"@_\")) {\n                    extractedTexts.push(range[key].trim());\n                }\n            });\n            // Approach 3: Count any break-like properties\n            if (range.Br !== undefined) {\n                const breaks = Array.isArray(range.Br) ? range.Br : [\n                    range.Br\n                ];\n                extractedBreaks.push(...breaks);\n            }\n            // Add extracted content\n            extractedTexts.forEach((text, index)=>{\n                const cleanText = IDMLUtils.decodeXMLEntities(text);\n                content += cleanText;\n                formattedContent.push({\n                    text: cleanText,\n                    formatting: resolvedFormatting\n                });\n                console.log(`🚨 Emergency extracted content[${index}]: ${JSON.stringify(cleanText)}`);\n                // Add breaks between content items (simple 1:1 ratio)\n                if (index < extractedBreaks.length) {\n                    const lineBreakText = \"\\n\";\n                    content += lineBreakText;\n                    formattedContent.push({\n                        text: lineBreakText,\n                        formatting: {\n                            isBreak: true,\n                            breakType: \"line\",\n                            source: \"emergency extraction\",\n                            emergencyIndex: index\n                        }\n                    });\n                    console.log(`🚨 Emergency extracted break[${index}]: ${JSON.stringify(lineBreakText)}`);\n                }\n            });\n            // Add any remaining breaks at the end\n            for(let i = extractedTexts.length; i < extractedBreaks.length; i++){\n                const lineBreakText = \"\\n\";\n                content += lineBreakText;\n                formattedContent.push({\n                    text: lineBreakText,\n                    formatting: {\n                        isBreak: true,\n                        breakType: \"line\",\n                        source: \"emergency trailing break\",\n                        emergencyIndex: i\n                    }\n                });\n                console.log(`🚨 Emergency extracted trailing break[${i}]: ${JSON.stringify(lineBreakText)}`);\n            }\n            console.log(`✅ Emergency extraction successful: ${extractedTexts.length} texts, ${extractedBreaks.length} breaks`);\n        } catch (emergencyError) {\n            console.log(`💀 Emergency extraction failed: ${emergencyError.message}`);\n            // Last resort: just add a warning comment\n            const warningText = \"<!-- XML parsing error -->\";\n            content += warningText;\n            formattedContent.push({\n                text: warningText,\n                formatting: resolvedFormatting\n            });\n        }\n        return content;\n    }\n    // Process interleaved Content and Br elements - FULLY DYNAMIC\n    processInterleavedContentAndBr(range, resolvedFormatting, content, formattedContent, debugInfo, fileName) {\n        const contents = Array.isArray(range.Content) ? range.Content : [\n            range.Content\n        ];\n        const brElements = Array.isArray(range.Br) ? range.Br : [\n            range.Br\n        ];\n        console.log(`🔧 Processing interleaved content: ${contents.length} content items, ${brElements.length} Br elements`);\n        // EDGE CASE: No content or breaks\n        if (!range.Content && !range.Br) {\n            console.log(`⚠️ No content or breaks to process in range`);\n            return content;\n        }\n        // EDGE CASE: Only content, no breaks\n        if (range.Content && !range.Br) {\n            console.log(`📝 Only content, no breaks - processing content only`);\n            return this.processContentElements(range, resolvedFormatting, content, formattedContent, fileName);\n        }\n        // EDGE CASE: Only breaks, no content\n        if (!range.Content && range.Br) {\n            console.log(`🔗 Only breaks, no content - processing breaks only`);\n            return this.processBrElements(range, content, formattedContent, debugInfo, 0, fileName);\n        }\n        // DYNAMIC: Try to use cached document order if available\n        const cachedOrder = this.documentOrderCache && this.documentOrderCache[fileName];\n        if (cachedOrder && cachedOrder.breakPattern && cachedOrder.breakPattern.length > 0) {\n            console.log(`✅ Using cached document order for precise break distribution`);\n            try {\n                return this.processContentWithCachedPattern(contents, resolvedFormatting, content, formattedContent, cachedOrder.breakPattern, fileName);\n            } catch (error) {\n                console.log(`❌ Error using cached pattern: ${error.message}, falling back to dynamic distribution`);\n            }\n        } else {\n            console.log(`⚠️ No cached document order available, using dynamic fallback distribution`);\n        }\n        // DYNAMIC FALLBACK: Distribute breaks intelligently based on content structure\n        return this.processInterleavedContentDynamicFallback(contents, brElements, resolvedFormatting, content, formattedContent, fileName);\n    }\n    // DYNAMIC FALLBACK: Intelligent break distribution for any content structure\n    processInterleavedContentDynamicFallback(contents, brElements, resolvedFormatting, content, formattedContent, fileName) {\n        console.log(`🔄 Using dynamic fallback for ${contents.length} content items and ${brElements.length} breaks`);\n        let brIndex = 0;\n        const contentLength = contents.length;\n        contents.forEach((contentItem, contentIndex)=>{\n            // Add the content\n            const text = IDMLUtils.decodeXMLEntities(String(contentItem));\n            content += text;\n            formattedContent.push({\n                text: text,\n                formatting: resolvedFormatting\n            });\n            console.log(`🔧 Added content[${contentIndex}]: ${JSON.stringify(text)}`);\n            // DYNAMIC: Calculate how many breaks to add after this content\n            const breaksToAdd = this.calculateBreaksAfterContent(contentIndex, contentLength, brElements.length);\n            // Add the calculated number of breaks\n            for(let i = 0; i < breaksToAdd && brIndex < brElements.length; i++){\n                const lineBreakText = \"\\n\";\n                content += lineBreakText;\n                formattedContent.push({\n                    text: lineBreakText,\n                    formatting: {\n                        isBreak: true,\n                        breakType: \"line\",\n                        source: \"dynamic fallback distribution\",\n                        brIndex: brIndex,\n                        afterContent: contentIndex,\n                        calculatedBreaks: breaksToAdd\n                    }\n                });\n                console.log(`🔧 Added Br[${brIndex}] after content[${contentIndex}]: ${JSON.stringify(lineBreakText)}`);\n                brIndex++;\n            }\n        });\n        // EDGE CASE: Handle any remaining breaks\n        if (brIndex < brElements.length) {\n            const remainingBreaks = brElements.length - brIndex;\n            console.log(`🔧 Adding ${remainingBreaks} remaining breaks at the end`);\n            while(brIndex < brElements.length){\n                const lineBreakText = \"\\n\";\n                content += lineBreakText;\n                formattedContent.push({\n                    text: lineBreakText,\n                    formatting: {\n                        isBreak: true,\n                        breakType: \"line\",\n                        source: \"trailing breaks (dynamic fallback)\",\n                        brIndex: brIndex\n                    }\n                });\n                console.log(`🔧 Added trailing Br[${brIndex}]: ${JSON.stringify(lineBreakText)}`);\n                brIndex++;\n            }\n        }\n        // VALIDATION: Ensure all breaks were processed\n        if (brIndex !== brElements.length) {\n            console.log(`⚠️ Warning: Expected to process ${brElements.length} breaks but processed ${brIndex}`);\n        }\n        return content;\n    }\n    // Process content using cached document order pattern - FULLY DYNAMIC\n    processContentWithCachedPattern(contents, resolvedFormatting, content, formattedContent, breakPattern, fileName) {\n        console.log(`🎯 Processing ${contents.length} content items with cached pattern (${breakPattern.length} pattern entries)`);\n        // DYNAMIC: Handle any number of content items and any break distribution\n        contents.forEach((contentItem, contentIndex)=>{\n            // Add the content\n            const text = IDMLUtils.decodeXMLEntities(String(contentItem));\n            content += text;\n            formattedContent.push({\n                text: text,\n                formatting: resolvedFormatting\n            });\n            console.log(`🔧 Added content[${contentIndex}]: ${JSON.stringify(text)}`);\n            // DYNAMIC: Find the corresponding pattern entry\n            const patternEntry = breakPattern.find((p)=>p.contentIndex === contentIndex);\n            if (patternEntry) {\n                const breaksToAdd = patternEntry.breaksAfter;\n                console.log(`🎯 Pattern says content[${contentIndex}] should have ${breaksToAdd} breaks after it`);\n                // DYNAMIC: Add the exact number of breaks specified in the pattern\n                for(let i = 0; i < breaksToAdd; i++){\n                    const lineBreakText = \"\\n\";\n                    content += lineBreakText;\n                    formattedContent.push({\n                        text: lineBreakText,\n                        formatting: {\n                            isBreak: true,\n                            breakType: \"line\",\n                            source: \"precise document order\",\n                            contentIndex: contentIndex,\n                            breakIndex: i,\n                            totalBreaksAfterContent: breaksToAdd,\n                            patternEntry: patternEntry\n                        }\n                    });\n                    console.log(`🎯 Added precise Br[${i + 1}/${breaksToAdd}] after content[${contentIndex}]: ${JSON.stringify(lineBreakText)}`);\n                }\n            } else {\n                console.log(`⚠️ No pattern entry found for content[${contentIndex}] - this is unusual but not critical`);\n            // DYNAMIC: If no pattern entry, don't add any breaks (the pattern should cover all content)\n            }\n        });\n        // VALIDATION: Check if we processed all expected content\n        const expectedContentCount = breakPattern.length;\n        if (contents.length !== expectedContentCount) {\n            console.log(`⚠️ Warning: Expected ${expectedContentCount} content items but processed ${contents.length}`);\n        }\n        return content;\n    }\n    // DYNAMIC: Calculate breaks distribution as fallback - completely generic\n    calculateBreaksAfterContent(contentIndex, totalContent, totalBreaks) {\n        console.log(`🔧 FALLBACK: Calculating breaks for content[${contentIndex}] of ${totalContent} total, ${totalBreaks} total breaks`);\n        // EDGE CASE: No breaks to distribute\n        if (totalBreaks === 0) {\n            console.log(`🔧 No breaks to distribute`);\n            return 0;\n        }\n        // EDGE CASE: Only one content item\n        if (totalContent === 1) {\n            console.log(`🔧 Single content item gets all ${totalBreaks} breaks`);\n            return contentIndex === 0 ? totalBreaks : 0;\n        }\n        // EDGE CASE: Last content item\n        if (contentIndex === totalContent - 1) {\n            console.log(`🔧 Last content item gets no breaks in standard distribution`);\n            return 0;\n        }\n        // DYNAMIC: Distribute breaks among non-last content items\n        const nonLastContentItems = totalContent - 1;\n        const baseBreaks = Math.floor(totalBreaks / nonLastContentItems);\n        const extraBreaks = totalBreaks % nonLastContentItems;\n        // DYNAMIC: Distribute extra breaks starting from the end to match common IDML patterns\n        // where later content tends to have more breaks\n        const breaksForThisContent = baseBreaks + (contentIndex >= nonLastContentItems - extraBreaks ? 1 : 0);\n        console.log(`🔧 Content[${contentIndex}] gets ${breaksForThisContent} breaks (base: ${baseBreaks}, extra: ${extraBreaks})`);\n        return breaksForThisContent;\n    }\n    // Process only Content elements\n    processContentElements(range, resolvedFormatting, content, formattedContent, fileName) {\n        const contents = Array.isArray(range.Content) ? range.Content : [\n            range.Content\n        ];\n        contents.forEach((contentItem)=>{\n            const text = IDMLUtils.decodeXMLEntities(String(contentItem));\n            content += text;\n            formattedContent.push({\n                text: text,\n                formatting: resolvedFormatting\n            });\n        });\n        return content;\n    }\n    // Process only Br elements\n    processBrElements(range, content, formattedContent, debugInfo, rangeIndex, fileName) {\n        const brElements = Array.isArray(range.Br) ? range.Br : [\n            range.Br\n        ];\n        brElements.forEach((br, brIndex)=>{\n            const lineBreakText = \"\\n\";\n            content += lineBreakText;\n            formattedContent.push({\n                text: lineBreakText,\n                formatting: {\n                    isBreak: true,\n                    breakType: \"line\",\n                    source: \"standalone Br element\",\n                    rangeIndex: rangeIndex,\n                    brIndex: brIndex\n                }\n            });\n            debugInfo.push({\n                type: \"Standalone Br element\",\n                location: `CharacterStyleRange[${rangeIndex}], Br[${brIndex}]`\n            });\n        });\n        return content;\n    }\n    // Add this helper method to better handle mixed content and Br elements\n    analyzeContentStructure(range) {\n        const structure = {\n            hasContent: !!range.Content,\n            hasBr: range.Br !== undefined,\n            contentItems: range.Content ? Array.isArray(range.Content) ? range.Content : [\n                range.Content\n            ] : [],\n            brElements: range.Br ? Array.isArray(range.Br) ? range.Br : [\n                range.Br\n            ] : []\n        };\n        console.log(\"Content structure analysis:\", structure);\n        return structure;\n    }\n    // Enhanced helper for processing interleaved content and breaks\n    processInterleavedContent(range, resolvedFormatting) {\n        const results = [];\n        let content = \"\";\n        // This method would need access to the actual XML structure to determine\n        // the exact order of Content and Br elements. For now, we'll use the\n        // approach above which handles the most common case.\n        return results;\n    }\n    // SOPHISTICATED: Helper method to extract Br elements with context\n    extractBrElements(range) {\n        const brElements = [];\n        if (range.Br !== undefined) {\n            console.log(\"\\uD83D\\uDD27 Processing Br elements:\", {\n                isArray: Array.isArray(range.Br),\n                count: Array.isArray(range.Br) ? range.Br.length : 1,\n                rawBr: range.Br\n            });\n            if (Array.isArray(range.Br)) {\n                range.Br.forEach((br, index)=>{\n                    brElements.push({\n                        type: \"line\",\n                        position: index === 0 ? \"start\" : \"middle\",\n                        element: br\n                    });\n                });\n                console.log(`🔧 Created ${brElements.length} line break elements from array - EACH SHOULD CREATE ONE \\\\n`);\n            } else {\n                brElements.push({\n                    type: \"line\",\n                    position: \"end\",\n                    element: range.Br\n                });\n                console.log(\"\\uD83D\\uDD27 Created 1 line break element from single Br\");\n            }\n        }\n        return brElements;\n    }\n    // SOPHISTICATED: Determine the appropriate line break type\n    determineLineBreakType(brInfo, context) {\n        // Different line break characters based on context\n        switch(brInfo.type){\n            case \"paragraph\":\n                return \"\\n\\n\"; // Double line break for paragraph separation\n            case \"forced\":\n                return \"\\n\"; // Forced line break (Shift+Enter equivalent)\n            case \"line\":\n            default:\n                return \"\\n\"; // Standard line break\n        }\n    }\n    // SOPHISTICATED: Determine if an implicit line break should be inserted\n    shouldInsertImplicitLineBreak(currentRange, nextRange, context) {\n        // Don't insert implicit breaks if explicit Br elements are present\n        if (currentRange.Br !== undefined || nextRange.Br !== undefined) {\n            return false;\n        }\n        // Insert breaks between different character styles in different paragraphs\n        const currentCharStyle = currentRange[\"@_AppliedCharacterStyle\"];\n        const nextCharStyle = nextRange[\"@_AppliedCharacterStyle\"];\n        // If we're in a context where styles change significantly, add a break\n        if (currentCharStyle && nextCharStyle && currentCharStyle !== nextCharStyle) {\n            // Check if this might be a title/heading followed by body text\n            const styleIndicatesBreak = this.styleIndicatesLineBreak(currentCharStyle, nextCharStyle);\n            return styleIndicatesBreak;\n        }\n        return false;\n    }\n    // SOPHISTICATED: Analyze if style change indicates a line break\n    styleIndicatesLineBreak(currentStyle, nextStyle) {\n        const titleIndicators = [\n            \"title\",\n            \"heading\",\n            \"header\"\n        ];\n        const bodyIndicators = [\n            \"body\",\n            \"text\",\n            \"normal\"\n        ];\n        const currentIsTitle = titleIndicators.some((indicator)=>currentStyle.toLowerCase().includes(indicator));\n        const nextIsBody = bodyIndicators.some((indicator)=>nextStyle.toLowerCase().includes(indicator));\n        return currentIsTitle && nextIsBody;\n    }\n    // SOPHISTICATED: Analyze line break types in formatted content\n    analyzeLineBreakTypes(formattedContent) {\n        const types = {\n            explicit: 0,\n            implicit: 0,\n            paragraph: 0,\n            direct: 0\n        };\n        formattedContent.forEach((item)=>{\n            if (item.formatting?.isBreak) {\n                const breakType = item.formatting.breakType || \"unknown\";\n                if (types.hasOwnProperty(breakType)) {\n                    types[breakType]++;\n                }\n            }\n        });\n        return types;\n    }\n    extractDetailedFormattingFromRange(range) {\n        const formatting = {};\n        // Extract all possible font attributes\n        const fontAttributes = [\n            \"@_AppliedFont\",\n            \"@_FontFamily\",\n            \"@_Font\",\n            \"@_PostScriptName\",\n            \"@_FontName\"\n        ];\n        fontAttributes.forEach((attr)=>{\n            if (range[attr]) {\n                formatting.fontReference = range[attr];\n            }\n        });\n        // Extract font and size attributes\n        formatting.fontSize = IDMLUtils.parseNumeric(range[\"@_PointSize\"]);\n        // ENHANCED: Extract leading with proper processing\n        const rawLeading = range[\"@_Leading\"];\n        formatting.leading = this.processLeadingValue(rawLeading, formatting.fontSize);\n        formatting.leadingType = this.determineLeadingType(rawLeading);\n        // Extract color and style attributes\n        formatting.fillColor = range[\"@_FillColor\"];\n        formatting.strokeColor = range[\"@_StrokeColor\"];\n        formatting.fontStyle = range[\"@_FontStyle\"];\n        // Extract advanced typography attributes\n        formatting.tracking = IDMLUtils.parseNumeric(range[\"@_Tracking\"]);\n        formatting.baselineShift = IDMLUtils.parseNumeric(range[\"@_BaselineShift\"]);\n        formatting.kerning = IDMLUtils.parseNumeric(range[\"@_Kerning\"]);\n        formatting.horizontalScale = IDMLUtils.parseNumeric(range[\"@_HorizontalScale\"]) || 100;\n        formatting.verticalScale = IDMLUtils.parseNumeric(range[\"@_VerticalScale\"]) || 100;\n        // ENHANCED: Extract InDesign-specific text layout properties for precise rendering\n        formatting.baselineGridAlign = range[\"@_AlignToBaseline\"] || \"None\";\n        formatting.dropCapLines = IDMLUtils.parseNumeric(range[\"@_DropCapLines\"]) || 0;\n        formatting.dropCapCharacters = IDMLUtils.parseNumeric(range[\"@_DropCapCharacters\"]) || 0;\n        // Extract paragraph-level attributes if present\n        // CRITICAL FIX: Only set alignment if explicitly specified, allowing paragraph inheritance\n        const explicitAlignment = range[\"@_Justification\"] || range[\"@_Alignment\"];\n        if (explicitAlignment) {\n            formatting.alignment = explicitAlignment;\n        }\n        formatting.leftIndent = IDMLUtils.parseNumeric(range[\"@_LeftIndent\"]);\n        formatting.rightIndent = IDMLUtils.parseNumeric(range[\"@_RightIndent\"]);\n        formatting.firstLineIndent = IDMLUtils.parseNumeric(range[\"@_FirstLineIndent\"]);\n        formatting.spaceBefore = IDMLUtils.parseNumeric(range[\"@_SpaceBefore\"]);\n        formatting.spaceAfter = IDMLUtils.parseNumeric(range[\"@_SpaceAfter\"]);\n        // Calculate effective line height for CSS\n        formatting.effectiveLineHeight = this.calculateEffectiveLineHeight(formatting);\n        return formatting;\n    }\n    // NEW: Process leading values with InDesign-specific logic\n    processLeadingValue(rawLeading, fontSize) {\n        if (!rawLeading) return \"auto\";\n        // Handle \"auto\" leading\n        if (rawLeading === \"auto\" || rawLeading === \"Auto\") {\n            return fontSize ? fontSize * 1.2 : \"auto\"; // InDesign default auto leading is 120%\n        }\n        // Handle numeric leading (in points)\n        const numericLeading = IDMLUtils.parseNumeric(rawLeading);\n        if (numericLeading) {\n            return numericLeading;\n        }\n        // Handle percentage-based leading\n        if (rawLeading.includes(\"%\")) {\n            const percentage = parseFloat(rawLeading.replace(\"%\", \"\"));\n            return fontSize ? fontSize * percentage / 100 : \"auto\";\n        }\n        return \"auto\";\n    }\n    // NEW: Determine the type of leading being used\n    determineLeadingType(rawLeading) {\n        if (!rawLeading || rawLeading === \"auto\" || rawLeading === \"Auto\") {\n            return \"auto\";\n        }\n        if (rawLeading.includes(\"%\")) {\n            return \"percentage\";\n        }\n        if (IDMLUtils.parseNumeric(rawLeading)) {\n            return \"absolute\";\n        }\n        return \"unknown\";\n    }\n    // NEW: Calculate effective line height for CSS rendering\n    calculateEffectiveLineHeight(formatting) {\n        const fontSize = formatting.fontSize || 12;\n        const leading = formatting.leading;\n        if (leading === \"auto\") {\n            return 1.2; // CSS line-height ratio for auto\n        }\n        if (typeof leading === \"number\") {\n            // Convert points to CSS line-height ratio\n            return leading / fontSize;\n        }\n        return 1.2; // Fallback\n    }\n    extractTextFormatting(storyData) {\n        const formatting = {\n            paragraphStyles: [],\n            characterStyles: [],\n            appliedStyles: []\n        };\n        // Extract applied paragraph styles\n        if (storyData.ParagraphStyleRange) {\n            const ranges = Array.isArray(storyData.ParagraphStyleRange) ? storyData.ParagraphStyleRange : [\n                storyData.ParagraphStyleRange\n            ];\n            ranges.forEach((range)=>{\n                const appliedStyle = range[\"@_AppliedParagraphStyle\"];\n                if (appliedStyle && !formatting.paragraphStyles.includes(appliedStyle)) {\n                    formatting.paragraphStyles.push(appliedStyle);\n                }\n                // Extract character styles within paragraph ranges\n                if (range.CharacterStyleRange) {\n                    const charRanges = Array.isArray(range.CharacterStyleRange) ? range.CharacterStyleRange : [\n                        range.CharacterStyleRange\n                    ];\n                    charRanges.forEach((charRange)=>{\n                        const charStyle = charRange[\"@_AppliedCharacterStyle\"];\n                        if (charStyle && !formatting.characterStyles.includes(charStyle)) {\n                            formatting.characterStyles.push(charStyle);\n                        }\n                    });\n                }\n            });\n        }\n        return formatting;\n    }\n    // Add this method to debug raw story content\n    debugRawStoryContent(storyData) {\n        console.log(\"\\n\\uD83D\\uDD0D RAW STORY CONTENT DEBUG:\");\n        console.log(\"Story keys:\", Object.keys(storyData));\n        const findCharacterRanges = (obj, path = \"\")=>{\n            if (typeof obj === \"object\" && obj !== null) {\n                Object.keys(obj).forEach((key)=>{\n                    if (key === \"CharacterStyleRange\") {\n                        console.log(`\\n📝 Found CharacterStyleRange at ${path}:`, obj[key]);\n                        const ranges = Array.isArray(obj[key]) ? obj[key] : [\n                            obj[key]\n                        ];\n                        ranges.forEach((range, index)=>{\n                            console.log(`  Range ${index + 1} attributes:`, Object.keys(range).filter((k)=>k.startsWith(\"@_\")));\n                            console.log(`  Range ${index + 1} font info:`, {\n                                AppliedFont: range[\"@_AppliedFont\"],\n                                FontStyle: range[\"@_FontStyle\"],\n                                PointSize: range[\"@_PointSize\"]\n                            });\n                        });\n                    } else if (typeof obj[key] === \"object\") {\n                        findCharacterRanges(obj[key], `${path}.${key}`);\n                    }\n                });\n            }\n        };\n        findCharacterRanges(storyData);\n    }\n    // ADD DEBUGGING FOR PARSED BR STRUCTURE\n    debugBrElementsInParsedStructure(parsedData, path = \"\") {\n        if (typeof parsedData === \"object\" && parsedData !== null) {\n            Object.entries(parsedData).forEach(([key, value])=>{\n                if (key === \"Br\") {\n                    console.log(`${path} has Br element:`, value);\n                } else if (typeof value === \"object\" && value !== null) {\n                    this.debugBrElementsInParsedStructure(value, `${path}.${key}`);\n                }\n            });\n        }\n    }\n    // CRITICAL FIX: Parse raw XML to preserve exact document order - FULLY DYNAMIC\n    parseRawXMLForDocumentOrder(rawXMLContent, fileName) {\n        console.log(`🔍 Parsing raw XML for document order: ${fileName}`);\n        // DYNAMIC: Handle multiple CharacterStyleRange elements\n        const charRangePattern = /<CharacterStyleRange[^>]*>(.*?)<\\/CharacterStyleRange>/gs;\n        const charRangeMatches = [\n            ...rawXMLContent.matchAll(charRangePattern)\n        ];\n        if (charRangeMatches.length === 0) {\n            console.log(\"❌ No CharacterStyleRange found in XML\");\n            return null;\n        }\n        console.log(`📄 Found ${charRangeMatches.length} CharacterStyleRange elements`);\n        // DYNAMIC: Process all CharacterStyleRange elements\n        const allDocumentOrder = [];\n        charRangeMatches.forEach((match, rangeIndex)=>{\n            const charRangeContent = match[1];\n            console.log(`📄 Processing CharacterStyleRange[${rangeIndex}]:`, charRangeContent.substring(0, 200) + \"...\");\n            // ENHANCED: More flexible pattern to handle different XML structures\n            // Matches: <Content>text</Content>, <Content/>, <Br/>, <Br></Br>, <Br />\n            const elementPattern = /<(Content|Br)(?:\\s+[^>]*)?>([^<]*)<\\/\\1>|<(Content|Br)(?:\\s+[^>]*)?\\/?>|<(Content|Br)(?:\\s+[^>]*)?>([^<]*)/g;\n            let elementMatch;\n            const rangeElements = [];\n            while((elementMatch = elementPattern.exec(charRangeContent)) !== null){\n                const elementType = elementMatch[1] || elementMatch[3] || elementMatch[4];\n                const elementContent = elementMatch[2] || elementMatch[5] || \"\";\n                if (elementType === \"Content\") {\n                    const contentText = elementContent.trim();\n                    if (contentText) {\n                        // Only add non-empty content\n                        rangeElements.push({\n                            type: \"Content\",\n                            text: contentText,\n                            rangeIndex: rangeIndex\n                        });\n                        console.log(`📝 Found Content[${rangeIndex}]: \"${contentText}\"`);\n                    }\n                } else if (elementType === \"Br\") {\n                    rangeElements.push({\n                        type: \"Br\",\n                        rangeIndex: rangeIndex\n                    });\n                    console.log(`🔗 Found Br[${rangeIndex}]`);\n                }\n            }\n            // Add range elements to overall document order\n            allDocumentOrder.push(...rangeElements);\n        });\n        if (allDocumentOrder.length === 0) {\n            console.log(\"❌ No Content or Br elements found in any CharacterStyleRange\");\n            return null;\n        }\n        // DYNAMIC: Analyze the break pattern for any structure\n        const breakPattern = this.analyzeBreakPatternDynamic(allDocumentOrder);\n        console.log(\"\\uD83D\\uDCCA Dynamic break pattern analysis:\", breakPattern);\n        // Store this for later use in processing\n        this.documentOrderCache = this.documentOrderCache || {};\n        this.documentOrderCache[fileName] = {\n            documentOrder: allDocumentOrder,\n            breakPattern: breakPattern,\n            totalCharacterRanges: charRangeMatches.length\n        };\n        return {\n            documentOrder: allDocumentOrder,\n            breakPattern: breakPattern,\n            totalCharacterRanges: charRangeMatches.length\n        };\n    }\n    // DYNAMIC: Analyze break pattern for any document structure\n    analyzeBreakPatternDynamic(documentOrder) {\n        const pattern = [];\n        let contentIndex = 0;\n        for(let i = 0; i < documentOrder.length; i++){\n            const element = documentOrder[i];\n            if (element.type === \"Content\") {\n                // DYNAMIC: Count consecutive breaks after this content\n                let breaksAfter = 0;\n                let j = i + 1;\n                // Count all consecutive Br elements following this Content\n                while(j < documentOrder.length && documentOrder[j].type === \"Br\"){\n                    breaksAfter++;\n                    j++;\n                }\n                pattern.push({\n                    contentIndex: contentIndex,\n                    contentText: element.text,\n                    breaksAfter: breaksAfter,\n                    rangeIndex: element.rangeIndex,\n                    documentPosition: i\n                });\n                console.log(`📋 Content[${contentIndex}] \"${element.text}\" has ${breaksAfter} breaks after it (doc pos: ${i})`);\n                contentIndex++;\n            }\n        }\n        // VALIDATION: Ensure pattern makes sense\n        const totalContent = pattern.length;\n        const totalBreaks = pattern.reduce((sum, p)=>sum + p.breaksAfter, 0);\n        console.log(`🔍 Pattern validation: ${totalContent} content items, ${totalBreaks} total breaks`);\n        if (totalContent === 0) {\n            console.log(\"⚠️ Warning: No content items found in pattern\");\n        }\n        return pattern;\n    }\n    getStories() {\n        return this.stories;\n    }\n    getStory(storyId) {\n        return this.stories[storyId];\n    }\n    clearStories() {\n        this.stories = {};\n    }\n}\nmodule.exports = StoryParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/parsers/StoryParser.js\n");

/***/ }),

/***/ "./lib/parsers/StyleParser.js":
/*!************************************!*\
  !*** ./lib/parsers/StyleParser.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst path = __webpack_require__(/*! path */ \"path\");\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass StyleParser {\n    constructor(){\n        this.styles = {\n            paragraph: {},\n            character: {},\n            object: {},\n            table: {},\n            cell: {}\n        };\n        this.resources = {\n            fonts: {},\n            colors: {},\n            gradients: {}\n        };\n        this.fontMap = new Map(); // Global font lookup map\n    }\n    async parseResourceFile(fileName, content, xmlParser) {\n        console.log(`📋 Parsing resource: ${fileName}`);\n        try {\n            const parsed = xmlParser.parse(content);\n            const resourceName = path.basename(fileName, \".xml\");\n            // Handle different resource types\n            if (fileName.includes(\"Styles.xml\")) {\n                await this.extractStyles(parsed);\n            } else if (fileName.includes(\"Fonts.xml\")) {\n                await this.extractFonts(parsed);\n            } else if (fileName.includes(\"Graphic.xml\")) {\n                await this.extractGraphics(parsed);\n            } else if (fileName.includes(\"Preferences.xml\")) {\n                await this.extractPreferences(parsed);\n            }\n            console.log(`✅ Resource ${resourceName} parsed`);\n        } catch (error) {\n            console.error(`❌ Error parsing ${fileName}:`, error.message);\n        }\n    }\n    async extractStyles(stylesData) {\n        console.log(\"Extracting styles...\");\n        const styles = stylesData.Styles || stylesData;\n        // Extract Paragraph Styles\n        if (styles.RootParagraphStyleGroup) {\n            this.extractParagraphStyles(styles.RootParagraphStyleGroup);\n        }\n        // Extract Character Styles\n        if (styles.RootCharacterStyleGroup) {\n            this.extractCharacterStyles(styles.RootCharacterStyleGroup);\n        }\n    }\n    extractParagraphStyles(styleGroup) {\n        const extractStylesRecursively = (group)=>{\n            if (group.ParagraphStyle) {\n                const styles = Array.isArray(group.ParagraphStyle) ? group.ParagraphStyle : [\n                    group.ParagraphStyle\n                ];\n                styles.forEach((style)=>{\n                    // CRITICAL: Extract font reference from multiple possible locations\n                    const fontRef = this.extractFontFromStyle(style);\n                    // ENHANCED: Process leading with proper InDesign logic\n                    const fontSize = parseFloat(style[\"@_PointSize\"]) || 12;\n                    const rawLeading = style[\"@_Leading\"];\n                    const processedLeading = this.processLeadingValue(rawLeading, fontSize);\n                    this.styles.paragraph[style[\"@_Self\"]] = {\n                        self: style[\"@_Self\"],\n                        name: style[\"@_Name\"] || \"\",\n                        fontStyle: style[\"@_FontStyle\"] || \"Regular\",\n                        pointSize: fontSize,\n                        leading: processedLeading,\n                        leadingType: this.determineLeadingType(rawLeading),\n                        effectiveLineHeight: this.calculateEffectiveLineHeight(processedLeading, fontSize),\n                        alignment: style[\"@_Justification\"] || \"LeftAlign\",\n                        leftIndent: parseFloat(style[\"@_LeftIndent\"]) || 0,\n                        rightIndent: parseFloat(style[\"@_RightIndent\"]) || 0,\n                        firstLineIndent: parseFloat(style[\"@_FirstLineIndent\"]) || 0,\n                        spaceBefore: parseFloat(style[\"@_SpaceBefore\"]) || 0,\n                        spaceAfter: parseFloat(style[\"@_SpaceAfter\"]) || 0,\n                        // Typography enhancements\n                        tracking: parseFloat(style[\"@_Tracking\"]) || 0,\n                        kerning: parseFloat(style[\"@_Kerning\"]) || 0,\n                        horizontalScale: parseFloat(style[\"@_HorizontalScale\"]) || 100,\n                        verticalScale: parseFloat(style[\"@_VerticalScale\"]) || 100,\n                        // ENHANCED: Use the new extraction method\n                        appliedFont: fontRef,\n                        originalFontRef: fontRef,\n                        fillColor: style[\"@_FillColor\"] || \"Color/Black\",\n                        rawStyle: style\n                    };\n                    console.log(`✅ Paragraph Style: ${style[\"@_Name\"]} -> Font: \"${fontRef}\"`);\n                });\n            }\n            if (group.ParagraphStyleGroup) {\n                const subGroups = Array.isArray(group.ParagraphStyleGroup) ? group.ParagraphStyleGroup : [\n                    group.ParagraphStyleGroup\n                ];\n                subGroups.forEach(extractStylesRecursively);\n            }\n        };\n        extractStylesRecursively(styleGroup);\n    }\n    extractFontFromStyle(style) {\n        // Try direct attributes first\n        let fontRef = style[\"@_AppliedFont\"] || style[\"@_FontFamily\"] || style[\"@_Font\"] || \"\";\n        // If not found, try Properties nested structure\n        if (!fontRef && style.Properties) {\n            if (style.Properties.AppliedFont) {\n                fontRef = style.Properties.AppliedFont[\"#text\"] || style.Properties.AppliedFont || \"\";\n            }\n            // Also try other property variations\n            if (!fontRef && style.Properties.FontFamily) {\n                fontRef = style.Properties.FontFamily[\"#text\"] || style.Properties.FontFamily || \"\";\n            }\n        }\n        return fontRef || \"\";\n    }\n    extractCharacterStyles(styleGroup) {\n        const extractStylesRecursively = (group)=>{\n            if (group.CharacterStyle) {\n                const styles = Array.isArray(group.CharacterStyle) ? group.CharacterStyle : [\n                    group.CharacterStyle\n                ];\n                styles.forEach((style)=>{\n                    const fontRef = this.extractFontFromStyle(style);\n                    this.styles.character[style[\"@_Self\"]] = {\n                        self: style[\"@_Self\"],\n                        name: style[\"@_Name\"] || \"\",\n                        fontStyle: style[\"@_FontStyle\"] || \"Regular\",\n                        pointSize: parseFloat(style[\"@_PointSize\"]) || null,\n                        appliedFont: fontRef,\n                        originalFontRef: fontRef,\n                        fillColor: style[\"@_FillColor\"] || null,\n                        strokeColor: style[\"@_StrokeColor\"] || null,\n                        rawStyle: style\n                    };\n                    console.log(`✅ Character Style: ${style[\"@_Name\"]} -> Font: \"${fontRef}\"`);\n                });\n            }\n            if (group.CharacterStyleGroup) {\n                const subGroups = Array.isArray(group.CharacterStyleGroup) ? group.CharacterStyleGroup : [\n                    group.CharacterStyleGroup\n                ];\n                subGroups.forEach(extractStylesRecursively);\n            }\n        };\n        extractStylesRecursively(styleGroup);\n    }\n    async extractFonts(fontsData) {\n        console.log(\"Extracting fonts with enhanced mapping...\");\n        const fonts = fontsData.Fonts || fontsData;\n        this.resources.fonts = {};\n        this.fontMap = new Map(); // Global font lookup map\n        if (fonts.FontFamily) {\n            const fontFamilies = Array.isArray(fonts.FontFamily) ? fonts.FontFamily : [\n                fonts.FontFamily\n            ];\n            fontFamilies.forEach((family)=>{\n                const familyInfo = {\n                    self: family[\"@_Self\"],\n                    name: family[\"@_Name\"] || \"\",\n                    fonts: []\n                };\n                if (family.Font) {\n                    const fontList = Array.isArray(family.Font) ? family.Font : [\n                        family.Font\n                    ];\n                    fontList.forEach((font)=>{\n                        const fontInfo = {\n                            self: font[\"@_Self\"],\n                            fontFamily: font[\"@_FontFamily\"] || familyInfo.name,\n                            name: font[\"@_Name\"] || \"\",\n                            postScriptName: font[\"@_PostScriptName\"] || \"\",\n                            status: font[\"@_Status\"] || \"Unknown\",\n                            fontStyleName: font[\"@_FontStyleName\"] || \"Regular\"\n                        };\n                        familyInfo.fonts.push(fontInfo);\n                        // Create multiple lookup entries for this font\n                        this.fontMap.set(font[\"@_Self\"], familyInfo.name);\n                        this.fontMap.set(font[\"@_PostScriptName\"], familyInfo.name);\n                        this.fontMap.set(font[\"@_Name\"], familyInfo.name);\n                        this.fontMap.set(font[\"@_FontFamily\"], familyInfo.name);\n                        console.log(`Font mapping: ${font[\"@_Self\"]} -> ${familyInfo.name}`);\n                    });\n                }\n                this.resources.fonts[family[\"@_Self\"]] = familyInfo;\n            });\n        }\n        console.log(`✅ Fonts extracted: ${Object.keys(this.resources.fonts).length} families`);\n        console.log(`Font map entries: ${this.fontMap.size}`);\n    }\n    async extractGraphics(graphicsData) {\n        console.log(\"Extracting graphics and colors...\");\n        const graphics = graphicsData.Graphic || graphicsData;\n        this.resources.colors = {};\n        this.resources.gradients = {};\n        // Extract Colors\n        if (graphics.Color) {\n            const colors = Array.isArray(graphics.Color) ? graphics.Color : [\n                graphics.Color\n            ];\n            colors.forEach((color)=>{\n                this.resources.colors[color[\"@_Self\"]] = {\n                    self: color[\"@_Self\"],\n                    name: color[\"@_Name\"] || \"\",\n                    model: color[\"@_Model\"] || \"Process\",\n                    space: color[\"@_Space\"] || \"CMYK\",\n                    cyan: parseFloat(color[\"@_Cyan\"]) || 0,\n                    magenta: parseFloat(color[\"@_Magenta\"]) || 0,\n                    yellow: parseFloat(color[\"@_Yellow\"]) || 0,\n                    black: parseFloat(color[\"@_Black\"]) || 0,\n                    red: parseFloat(color[\"@_Red\"]) || 0,\n                    green: parseFloat(color[\"@_Green\"]) || 0,\n                    blue: parseFloat(color[\"@_Blue\"]) || 0\n                };\n            });\n        }\n        // Extract Gradients\n        if (graphics.Gradient) {\n            const gradients = Array.isArray(graphics.Gradient) ? graphics.Gradient : [\n                graphics.Gradient\n            ];\n            gradients.forEach((gradient)=>{\n                this.resources.gradients[gradient[\"@_Self\"]] = {\n                    self: gradient[\"@_Self\"],\n                    name: gradient[\"@_Name\"] || \"\",\n                    type: gradient[\"@_Type\"] || \"Linear\",\n                    gradientStops: this.extractGradientStops(gradient)\n                };\n            });\n        }\n    }\n    extractGradientStops(gradient) {\n        const stops = [];\n        if (gradient.GradientStop) {\n            const stopList = Array.isArray(gradient.GradientStop) ? gradient.GradientStop : [\n                gradient.GradientStop\n            ];\n            stopList.forEach((stop)=>{\n                stops.push({\n                    self: stop[\"@_Self\"],\n                    stopColor: stop[\"@_StopColor\"] || \"\",\n                    location: parseFloat(stop[\"@_Location\"]) || 0,\n                    midpoint: parseFloat(stop[\"@_Midpoint\"]) || 50\n                });\n            });\n        }\n        return stops;\n    }\n    async extractPreferences(preferencesData) {\n        console.log(\"Extracting document preferences...\");\n        const prefs = preferencesData.Preferences || preferencesData;\n        // Extract various document preferences\n        this.documentInfo = {\n            preferences: {\n                documentPreferences: this.extractDocumentPrefs(prefs.DocumentPreference),\n                viewPreferences: this.extractViewPrefs(prefs.ViewPreference),\n                guidePreferences: this.extractGuidePrefs(prefs.GuidePreference),\n                gridPreferences: this.extractGridPrefs(prefs.GridPreference),\n                marginPreferences: this.extractMarginPrefs(prefs.MarginPreference),\n                columnPreferences: this.extractColumnPrefs(prefs.ColumnPreference)\n            }\n        };\n    }\n    extractDocumentPrefs(docPref) {\n        if (!docPref) return {};\n        return {\n            pageWidth: parseFloat(docPref[\"@_PageWidth\"]) || 0,\n            pageHeight: parseFloat(docPref[\"@_PageHeight\"]) || 0,\n            left: parseFloat(docPref[\"@_Left\"]) || 0,\n            top: parseFloat(docPref[\"@_Top\"]) || 0,\n            right: parseFloat(docPref[\"@_Right\"]) || 0,\n            bottom: parseFloat(docPref[\"@_Bottom\"]) || 0,\n            columnCount: parseInt(docPref[\"@_ColumnCount\"]) || 1,\n            columnGutter: parseFloat(docPref[\"@_ColumnGutter\"]) || 0,\n            facingPages: docPref[\"@_FacingPages\"] === true,\n            allowPageShuffle: docPref[\"@_AllowPageShuffle\"] !== false,\n            slugBleedType: docPref[\"@_SlugBleedType\"] || \"None\",\n            documentBleedTopOffset: parseFloat(docPref[\"@_DocumentBleedTopOffset\"]) || 0,\n            documentBleedBottomOffset: parseFloat(docPref[\"@_DocumentBleedBottomOffset\"]) || 0,\n            documentBleedInsideOrLeftOffset: parseFloat(docPref[\"@_DocumentBleedInsideOrLeftOffset\"]) || 0,\n            documentBleedOutsideOrRightOffset: parseFloat(docPref[\"@_DocumentBleedOutsideOrRightOffset\"]) || 0\n        };\n    }\n    extractViewPrefs(viewPref) {\n        if (!viewPref) return {};\n        return {\n            horizontalMeasurementUnits: viewPref[\"@_HorizontalMeasurementUnits\"] || \"Points\",\n            verticalMeasurementUnits: viewPref[\"@_VerticalMeasurementUnits\"] || \"Points\",\n            rulerOrigin: viewPref[\"@_RulerOrigin\"] || \"SpreadOrigin\",\n            showRulers: viewPref[\"@_ShowRulers\"] !== false\n        };\n    }\n    extractGuidePrefs(guidePref) {\n        if (!guidePref) return {};\n        return {\n            rulerGuideColor: guidePref[\"@_RulerGuideColor\"] || \"Green\",\n            guidesInBack: guidePref[\"@_GuidesInBack\"] === true,\n            guidesLocked: guidePref[\"@_GuidesLocked\"] === true,\n            guidesShown: guidePref[\"@_GuidesShown\"] !== false,\n            guidesSnapto: guidePref[\"@_GuidesSnapto\"] !== false\n        };\n    }\n    extractGridPrefs(gridPref) {\n        if (!gridPref) return {};\n        return {\n            baselineStart: parseFloat(gridPref[\"@_BaselineStart\"]) || 0,\n            baselineDivision: parseFloat(gridPref[\"@_BaselineDivision\"]) || 12,\n            baselineShown: gridPref[\"@_BaselineShown\"] === true,\n            baselineSnapto: gridPref[\"@_BaselineSnapto\"] === true,\n            documentGridShown: gridPref[\"@_DocumentGridShown\"] === true,\n            documentGridSnapto: gridPref[\"@_DocumentGridSnapto\"] === true\n        };\n    }\n    extractMarginPrefs(marginPref) {\n        if (!marginPref) return {};\n        return {\n            top: parseFloat(marginPref[\"@_Top\"]) || 0,\n            bottom: parseFloat(marginPref[\"@_Bottom\"]) || 0,\n            left: parseFloat(marginPref[\"@_Left\"]) || 0,\n            right: parseFloat(marginPref[\"@_Right\"]) || 0,\n            columnCount: parseInt(marginPref[\"@_ColumnCount\"]) || 1,\n            columnGutter: parseFloat(marginPref[\"@_ColumnGutter\"]) || 0\n        };\n    }\n    extractColumnPrefs(columnPref) {\n        if (!columnPref) return {};\n        return {\n            textColumnCount: parseInt(columnPref[\"@_TextColumnCount\"]) || 1,\n            textColumnGutter: parseFloat(columnPref[\"@_TextColumnGutter\"]) || 0\n        };\n    }\n    resolveStyleFormatting(formatting) {\n        const resolved = {\n            ...formatting\n        };\n        // DEBUG: Check if formatting is being applied (generic check)\n        const hasAnyFormatting = formatting.paragraphStyle || formatting.characterStyle || formatting.fontStyle || formatting.fontReference || formatting.fontSize;\n        if (hasAnyFormatting) {\n            console.log(\"\\uD83D\\uDD27 StyleParser.resolveStyleFormatting - Input:\", {\n                paragraphStyle: formatting.paragraphStyle,\n                characterStyle: formatting.characterStyle,\n                directFontStyle: formatting.fontStyle,\n                directFontRef: formatting.fontReference,\n                directFontSize: formatting.fontSize\n            });\n        }\n        // Resolve paragraph style (base layer)\n        if (formatting.paragraphStyle && this.styles.paragraph[formatting.paragraphStyle]) {\n            const pStyle = this.styles.paragraph[formatting.paragraphStyle];\n            if (!resolved.fontSize && pStyle.pointSize) resolved.fontSize = pStyle.pointSize;\n            if (!resolved.fillColor && pStyle.fillColor) resolved.fillColor = pStyle.fillColor;\n            // CRITICAL FIX: Always inherit paragraph alignment unless explicitly overridden\n            if (pStyle.alignment) resolved.alignment = pStyle.alignment;\n            if (!resolved.fontStyle && pStyle.fontStyle) {\n                resolved.fontStyle = pStyle.fontStyle;\n                if (hasAnyFormatting) {\n                    console.log(`   FontStyle from paragraph style: \"${pStyle.fontStyle}\"`);\n                }\n            }\n            // CRITICAL: Resolve font from paragraph style\n            if (!resolved.fontFamily && pStyle.appliedFont) {\n                resolved.fontFamily = this.resolveFontReference(pStyle.appliedFont);\n                if (hasAnyFormatting) {\n                    console.log(`   Font from paragraph style: ${pStyle.appliedFont} -> ${resolved.fontFamily}`);\n                }\n            }\n            // Add other paragraph properties with enhanced leading support\n            resolved.leading = pStyle.leading;\n            resolved.leadingType = pStyle.leadingType;\n            resolved.effectiveLineHeight = pStyle.effectiveLineHeight;\n            resolved.leftIndent = pStyle.leftIndent;\n            resolved.rightIndent = pStyle.rightIndent;\n            resolved.firstLineIndent = pStyle.firstLineIndent;\n            resolved.spaceBefore = pStyle.spaceBefore;\n            resolved.spaceAfter = pStyle.spaceAfter;\n            resolved.tracking = pStyle.tracking;\n            resolved.kerning = pStyle.kerning;\n        }\n        // Resolve character style (override layer)\n        if (formatting.characterStyle && this.styles.character[formatting.characterStyle]) {\n            const cStyle = this.styles.character[formatting.characterStyle];\n            if (cStyle.pointSize) resolved.fontSize = cStyle.pointSize;\n            if (cStyle.fillColor) resolved.fillColor = cStyle.fillColor;\n            if (cStyle.fontStyle) {\n                resolved.fontStyle = cStyle.fontStyle;\n                if (hasAnyFormatting) {\n                    console.log(`   FontStyle from character style: \"${cStyle.fontStyle}\"`);\n                }\n            }\n            if (cStyle.strokeColor) resolved.strokeColor = cStyle.strokeColor;\n            // Include leading information from character style\n            if (cStyle.leading) resolved.leading = cStyle.leading;\n            if (cStyle.leadingType) resolved.leadingType = cStyle.leadingType;\n            if (cStyle.effectiveLineHeight) resolved.effectiveLineHeight = cStyle.effectiveLineHeight;\n            // CRITICAL: Character style font overrides paragraph style\n            if (cStyle.appliedFont) {\n                resolved.fontFamily = this.resolveFontReference(cStyle.appliedFont);\n                if (hasAnyFormatting) {\n                    console.log(`   Font from character style: ${cStyle.appliedFont} -> ${resolved.fontFamily}`);\n                }\n            }\n        }\n        // Apply direct formatting (highest priority)\n        if (formatting.fontReference) {\n            resolved.fontFamily = this.resolveFontReference(formatting.fontReference);\n            if (hasAnyFormatting) {\n                console.log(`   Font from direct formatting: ${formatting.fontReference} -> ${resolved.fontFamily}`);\n            }\n        }\n        // CRITICAL: Apply direct fontStyle if provided (this might be the issue)\n        if (formatting.fontStyle) {\n            resolved.fontStyle = formatting.fontStyle;\n            if (hasAnyFormatting) {\n                console.log(`   FontStyle from direct formatting: \"${formatting.fontStyle}\"`);\n            }\n        }\n        // Apply direct leading information (highest priority)\n        if (formatting.leading !== undefined) resolved.leading = formatting.leading;\n        if (formatting.leadingType) resolved.leadingType = formatting.leadingType;\n        if (formatting.effectiveLineHeight) resolved.effectiveLineHeight = formatting.effectiveLineHeight;\n        // Apply other direct formatting attributes\n        if (formatting.fontSize) resolved.fontSize = formatting.fontSize;\n        if (formatting.tracking) resolved.tracking = formatting.tracking;\n        if (formatting.kerning) resolved.kerning = formatting.kerning;\n        // CRITICAL FIX: Apply direct alignment if explicitly specified (overrides paragraph alignment)\n        if (formatting.alignment) {\n            resolved.alignment = formatting.alignment;\n            if (hasAnyFormatting) {\n                console.log(`   Alignment from direct formatting: \"${formatting.alignment}\"`);\n            }\n        }\n        // FIXED: Ensure fontStyle defaults to Regular/normal if not set\n        if (!resolved.fontStyle || resolved.fontStyle === \"\") {\n            resolved.fontStyle = \"Regular\";\n            if (hasAnyFormatting) {\n                console.log(`   FontStyle defaulted to: \"Regular\"`);\n            }\n        }\n        // ADDITIONAL FIX: If no styles were applied from any source, ensure clean defaults\n        if (!formatting.paragraphStyle && !formatting.characterStyle && !formatting.fontStyle && !formatting.fontReference) {\n            resolved.fontStyle = \"Regular\";\n            if (hasAnyFormatting) {\n                console.log(`   No source styles found - ensuring clean defaults`);\n            }\n        }\n        // Final fallback\n        if (!resolved.fontFamily || resolved.fontFamily === \"\") {\n            resolved.fontFamily = this.getDefaultFont();\n            if (hasAnyFormatting) {\n                console.log(`   Using fallback font: ${resolved.fontFamily}`);\n            }\n        }\n        // Ensure line height is calculated if not explicitly set\n        if (!resolved.effectiveLineHeight && resolved.fontSize && resolved.leading) {\n            resolved.effectiveLineHeight = this.calculateEffectiveLineHeight(resolved.leading, resolved.fontSize);\n        }\n        if (hasAnyFormatting) {\n            console.log(\"\\uD83D\\uDD27 StyleParser.resolveStyleFormatting - Final Output:\", {\n                fontSize: resolved.fontSize,\n                fontFamily: resolved.fontFamily,\n                fontStyle: resolved.fontStyle,\n                fillColor: resolved.fillColor,\n                leading: resolved.leading,\n                effectiveLineHeight: resolved.effectiveLineHeight\n            });\n        }\n        return resolved;\n    }\n    resolveFontReference(fontRef) {\n        if (!fontRef || fontRef === \"\") {\n            console.log(\"Empty font reference, using fallback\");\n            return this.getDefaultFont();\n        }\n        // Try direct lookup in font map\n        if (this.fontMap && this.fontMap.has(fontRef)) {\n            const resolvedFont = this.fontMap.get(fontRef);\n            console.log(`Font resolved: \"${fontRef}\" -> \"${resolvedFont}\"`);\n            return resolvedFont;\n        }\n        // Try partial matching for font families\n        if (this.resources.fonts) {\n            for (const [familyId, familyInfo] of Object.entries(this.resources.fonts)){\n                // Check family name match\n                if (familyInfo.name && (familyInfo.name.toLowerCase().includes(fontRef.toLowerCase()) || fontRef.toLowerCase().includes(familyInfo.name.toLowerCase()))) {\n                    console.log(`Font partially matched: \"${fontRef}\" -> \"${familyInfo.name}\"`);\n                    return familyInfo.name;\n                }\n                // Check individual font matches\n                if (familyInfo.fonts) {\n                    for (const font of familyInfo.fonts){\n                        if (font.self === fontRef || font.postScriptName === fontRef || font.name === fontRef) {\n                            console.log(`Font exactly matched: \"${fontRef}\" -> \"${familyInfo.name}\"`);\n                            return familyInfo.name;\n                        }\n                    }\n                }\n            }\n        }\n        console.log(`Font not found: \"${fontRef}\", using fallback`);\n        return this.getDefaultFont() || fontRef;\n    }\n    getDefaultFont() {\n        if (this.resources.fonts && Object.keys(this.resources.fonts).length > 0) {\n            const firstFamily = Object.values(this.resources.fonts)[0];\n            return firstFamily.name || \"Arial\";\n        }\n        return \"Arial\";\n    }\n    inferFontFromContext() {\n        // If we have font definitions but no explicit references,\n        // return the first available font as a fallback\n        if (this.resources.fonts && Object.keys(this.resources.fonts).length > 0) {\n            const firstFontFamily = Object.values(this.resources.fonts)[0];\n            return firstFontFamily.name;\n        }\n        return null;\n    }\n    getStoryStyleSummary(story) {\n        const summary = {\n            fontSize: null,\n            fontFamily: null,\n            alignment: null,\n            fillColor: null,\n            fontStyle: null,\n            leading: null,\n            leadingType: null,\n            effectiveLineHeight: null,\n            tracking: null,\n            kerning: null\n        };\n        // Get the most common or first formatting values\n        if (story.content?.formattedContent?.length > 0) {\n            const firstFormatted = story.content.formattedContent.find((item)=>item.formatting && !item.formatting.isBreak);\n            if (firstFormatted?.formatting) {\n                const fmt = firstFormatted.formatting;\n                summary.fontSize = fmt.fontSize;\n                summary.fontFamily = fmt.fontFamily;\n                summary.alignment = fmt.alignment;\n                summary.fillColor = fmt.fillColor;\n                summary.fontStyle = fmt.fontStyle;\n                summary.leading = fmt.leading;\n                summary.leadingType = fmt.leadingType;\n                summary.effectiveLineHeight = fmt.effectiveLineHeight;\n                summary.tracking = fmt.tracking;\n                summary.kerning = fmt.kerning;\n            }\n        }\n        return summary;\n    }\n    // NEW: Process leading values with InDesign-specific logic (shared with StoryParser)\n    processLeadingValue(rawLeading, fontSize) {\n        if (!rawLeading) return \"auto\";\n        // Handle \"auto\" leading\n        if (rawLeading === \"auto\" || rawLeading === \"Auto\") {\n            return fontSize ? fontSize * 1.2 : \"auto\"; // InDesign default auto leading is 120%\n        }\n        // Handle numeric leading (in points)\n        const numericLeading = parseFloat(rawLeading);\n        if (!isNaN(numericLeading)) {\n            return numericLeading;\n        }\n        // Handle percentage-based leading\n        if (rawLeading.includes(\"%\")) {\n            const percentage = parseFloat(rawLeading.replace(\"%\", \"\"));\n            return fontSize ? fontSize * percentage / 100 : \"auto\";\n        }\n        return \"auto\";\n    }\n    // NEW: Determine the type of leading being used\n    determineLeadingType(rawLeading) {\n        if (!rawLeading || rawLeading === \"auto\" || rawLeading === \"Auto\") {\n            return \"auto\";\n        }\n        if (rawLeading.includes(\"%\")) {\n            return \"percentage\";\n        }\n        if (!isNaN(parseFloat(rawLeading))) {\n            return \"absolute\";\n        }\n        return \"unknown\";\n    }\n    // NEW: Calculate effective line height for CSS rendering\n    calculateEffectiveLineHeight(leading, fontSize) {\n        if (leading === \"auto\") {\n            return 1.2; // CSS line-height ratio for auto\n        }\n        if (typeof leading === \"number\" && fontSize) {\n            // Convert points to CSS line-height ratio\n            return Math.max(0.8, leading / fontSize); // Ensure minimum line height\n        }\n        return 1.2; // Fallback\n    }\n    getStyles() {\n        return this.styles;\n    }\n    getResources() {\n        return this.resources;\n    }\n    getFontMap() {\n        return this.fontMap;\n    }\n    // Add methods to return style and font definitions for debug\n    getParagraphStyles() {\n        return this.styles.paragraph;\n    }\n    getCharacterStyles() {\n        return this.styles.character;\n    }\n    getFontDefinitions() {\n        // Prefer plain object for debug output\n        if (this.resources && this.resources.fonts) {\n            return this.resources.fonts;\n        }\n        // Fallback: convert fontMap to object\n        if (this.fontMap && typeof this.fontMap.entries === \"function\") {\n            return Object.fromEntries(this.fontMap.entries());\n        }\n        return {};\n    }\n    // FIXED: Add method to access document preferences including ViewPreferences\n    getDocumentInfo() {\n        return this.documentInfo;\n    }\n}\nmodule.exports = StyleParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QSxPQUFPLEtBQUssV0FBVztJQUN6QjtJQUVBdUwsWUFBWTtRQUNWLE9BQU8sSUFBSSxDQUFDcE8sTUFBTTtJQUNwQjtJQUVBcU8sZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDL04sU0FBUztJQUN2QjtJQUVBZ08sYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDNU4sT0FBTztJQUNyQjtJQUVBLDZEQUE2RDtJQUM3RDZOLHFCQUFxQjtRQUNuQixPQUFPLElBQUksQ0FBQ3ZPLE1BQU0sQ0FBQ0MsU0FBUztJQUM5QjtJQUNBdU8scUJBQXFCO1FBQ25CLE9BQU8sSUFBSSxDQUFDeE8sTUFBTSxDQUFDRSxTQUFTO0lBQzlCO0lBQ0F1TyxxQkFBcUI7UUFDbkIsdUNBQXVDO1FBQ3ZDLElBQUksSUFBSSxDQUFDbk8sU0FBUyxJQUFJLElBQUksQ0FBQ0EsU0FBUyxDQUFDQyxLQUFLLEVBQUU7WUFDMUMsT0FBTyxJQUFJLENBQUNELFNBQVMsQ0FBQ0MsS0FBSztRQUM3QjtRQUNBLHNDQUFzQztRQUN0QyxJQUFJLElBQUksQ0FBQ0csT0FBTyxJQUFJLE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNxTSxPQUFPLEtBQUssWUFBWTtZQUM5RCxPQUFPL0csT0FBTzBJLFdBQVcsQ0FBQyxJQUFJLENBQUNoTyxPQUFPLENBQUNxTSxPQUFPO1FBQ2hEO1FBQ0EsT0FBTyxDQUFDO0lBQ1Y7SUFFQSw2RUFBNkU7SUFDN0U0QixrQkFBa0I7UUFDaEIsT0FBTyxJQUFJLENBQUMxRyxZQUFZO0lBQzFCO0FBQ0Y7QUFFQTJHLE9BQU9DLE9BQU8sR0FBRy9PIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWRtbC12aWV3ZXIvLi9saWIvcGFyc2Vycy9TdHlsZVBhcnNlci5qcz82OWFjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcclxuY29uc3QgSURNTFV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzL0lETUxVdGlsc1wiKTtcclxuXHJcbmNsYXNzIFN0eWxlUGFyc2VyIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuc3R5bGVzID0ge1xyXG4gICAgICBwYXJhZ3JhcGg6IHt9LFxyXG4gICAgICBjaGFyYWN0ZXI6IHt9LFxyXG4gICAgICBvYmplY3Q6IHt9LFxyXG4gICAgICB0YWJsZToge30sXHJcbiAgICAgIGNlbGw6IHt9LFxyXG4gICAgfTtcclxuICAgIHRoaXMucmVzb3VyY2VzID0ge1xyXG4gICAgICBmb250czoge30sXHJcbiAgICAgIGNvbG9yczoge30sXHJcbiAgICAgIGdyYWRpZW50czoge30sXHJcbiAgICB9O1xyXG4gICAgdGhpcy5mb250TWFwID0gbmV3IE1hcCgpOyAvLyBHbG9iYWwgZm9udCBsb29rdXAgbWFwXHJcbiAgfVxyXG5cclxuICBhc3luYyBwYXJzZVJlc291cmNlRmlsZShmaWxlTmFtZSwgY29udGVudCwgeG1sUGFyc2VyKSB7XHJcbiAgICBjb25zb2xlLmxvZyhg8J+TiyBQYXJzaW5nIHJlc291cmNlOiAke2ZpbGVOYW1lfWApO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHhtbFBhcnNlci5wYXJzZShjb250ZW50KTtcclxuICAgICAgY29uc3QgcmVzb3VyY2VOYW1lID0gcGF0aC5iYXNlbmFtZShmaWxlTmFtZSwgXCIueG1sXCIpO1xyXG5cclxuICAgICAgLy8gSGFuZGxlIGRpZmZlcmVudCByZXNvdXJjZSB0eXBlc1xyXG4gICAgICBpZiAoZmlsZU5hbWUuaW5jbHVkZXMoXCJTdHlsZXMueG1sXCIpKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5leHRyYWN0U3R5bGVzKHBhcnNlZCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZmlsZU5hbWUuaW5jbHVkZXMoXCJGb250cy54bWxcIikpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLmV4dHJhY3RGb250cyhwYXJzZWQpO1xyXG4gICAgICB9IGVsc2UgaWYgKGZpbGVOYW1lLmluY2x1ZGVzKFwiR3JhcGhpYy54bWxcIikpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLmV4dHJhY3RHcmFwaGljcyhwYXJzZWQpO1xyXG4gICAgICB9IGVsc2UgaWYgKGZpbGVOYW1lLmluY2x1ZGVzKFwiUHJlZmVyZW5jZXMueG1sXCIpKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5leHRyYWN0UHJlZmVyZW5jZXMocGFyc2VkKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc29sZS5sb2coYOKchSBSZXNvdXJjZSAke3Jlc291cmNlTmFtZX0gcGFyc2VkYCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGDinYwgRXJyb3IgcGFyc2luZyAke2ZpbGVOYW1lfTpgLCBlcnJvci5tZXNzYWdlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGV4dHJhY3RTdHlsZXMoc3R5bGVzRGF0YSkge1xyXG4gICAgY29uc29sZS5sb2coXCJFeHRyYWN0aW5nIHN0eWxlcy4uLlwiKTtcclxuXHJcbiAgICBjb25zdCBzdHlsZXMgPSBzdHlsZXNEYXRhLlN0eWxlcyB8fCBzdHlsZXNEYXRhO1xyXG5cclxuICAgIC8vIEV4dHJhY3QgUGFyYWdyYXBoIFN0eWxlc1xyXG4gICAgaWYgKHN0eWxlcy5Sb290UGFyYWdyYXBoU3R5bGVHcm91cCkge1xyXG4gICAgICB0aGlzLmV4dHJhY3RQYXJhZ3JhcGhTdHlsZXMoc3R5bGVzLlJvb3RQYXJhZ3JhcGhTdHlsZUdyb3VwKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFeHRyYWN0IENoYXJhY3RlciBTdHlsZXNcclxuICAgIGlmIChzdHlsZXMuUm9vdENoYXJhY3RlclN0eWxlR3JvdXApIHtcclxuICAgICAgdGhpcy5leHRyYWN0Q2hhcmFjdGVyU3R5bGVzKHN0eWxlcy5Sb290Q2hhcmFjdGVyU3R5bGVHcm91cCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBleHRyYWN0UGFyYWdyYXBoU3R5bGVzKHN0eWxlR3JvdXApIHtcclxuICAgIGNvbnN0IGV4dHJhY3RTdHlsZXNSZWN1cnNpdmVseSA9IChncm91cCkgPT4ge1xyXG4gICAgICBpZiAoZ3JvdXAuUGFyYWdyYXBoU3R5bGUpIHtcclxuICAgICAgICBjb25zdCBzdHlsZXMgPSBBcnJheS5pc0FycmF5KGdyb3VwLlBhcmFncmFwaFN0eWxlKVxyXG4gICAgICAgICAgPyBncm91cC5QYXJhZ3JhcGhTdHlsZVxyXG4gICAgICAgICAgOiBbZ3JvdXAuUGFyYWdyYXBoU3R5bGVdO1xyXG5cclxuICAgICAgICBzdHlsZXMuZm9yRWFjaCgoc3R5bGUpID0+IHtcclxuICAgICAgICAgIC8vIENSSVRJQ0FMOiBFeHRyYWN0IGZvbnQgcmVmZXJlbmNlIGZyb20gbXVsdGlwbGUgcG9zc2libGUgbG9jYXRpb25zXHJcbiAgICAgICAgICBjb25zdCBmb250UmVmID0gdGhpcy5leHRyYWN0Rm9udEZyb21TdHlsZShzdHlsZSk7XHJcblxyXG4gICAgICAgICAgLy8gRU5IQU5DRUQ6IFByb2Nlc3MgbGVhZGluZyB3aXRoIHByb3BlciBJbkRlc2lnbiBsb2dpY1xyXG4gICAgICAgICAgY29uc3QgZm9udFNpemUgPSBwYXJzZUZsb2F0KHN0eWxlW1wiQF9Qb2ludFNpemVcIl0pIHx8IDEyO1xyXG4gICAgICAgICAgY29uc3QgcmF3TGVhZGluZyA9IHN0eWxlW1wiQF9MZWFkaW5nXCJdO1xyXG4gICAgICAgICAgY29uc3QgcHJvY2Vzc2VkTGVhZGluZyA9IHRoaXMucHJvY2Vzc0xlYWRpbmdWYWx1ZShcclxuICAgICAgICAgICAgcmF3TGVhZGluZyxcclxuICAgICAgICAgICAgZm9udFNpemVcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgdGhpcy5zdHlsZXMucGFyYWdyYXBoW3N0eWxlW1wiQF9TZWxmXCJdXSA9IHtcclxuICAgICAgICAgICAgc2VsZjogc3R5bGVbXCJAX1NlbGZcIl0sXHJcbiAgICAgICAgICAgIG5hbWU6IHN0eWxlW1wiQF9OYW1lXCJdIHx8IFwiXCIsXHJcbiAgICAgICAgICAgIGZvbnRTdHlsZTogc3R5bGVbXCJAX0ZvbnRTdHlsZVwiXSB8fCBcIlJlZ3VsYXJcIixcclxuICAgICAgICAgICAgcG9pbnRTaXplOiBmb250U2l6ZSxcclxuICAgICAgICAgICAgbGVhZGluZzogcHJvY2Vzc2VkTGVhZGluZyxcclxuICAgICAgICAgICAgbGVhZGluZ1R5cGU6IHRoaXMuZGV0ZXJtaW5lTGVhZGluZ1R5cGUocmF3TGVhZGluZyksXHJcbiAgICAgICAgICAgIGVmZmVjdGl2ZUxpbmVIZWlnaHQ6IHRoaXMuY2FsY3VsYXRlRWZmZWN0aXZlTGluZUhlaWdodChcclxuICAgICAgICAgICAgICBwcm9jZXNzZWRMZWFkaW5nLFxyXG4gICAgICAgICAgICAgIGZvbnRTaXplXHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgIGFsaWdubWVudDogc3R5bGVbXCJAX0p1c3RpZmljYXRpb25cIl0gfHwgXCJMZWZ0QWxpZ25cIixcclxuICAgICAgICAgICAgbGVmdEluZGVudDogcGFyc2VGbG9hdChzdHlsZVtcIkBfTGVmdEluZGVudFwiXSkgfHwgMCxcclxuICAgICAgICAgICAgcmlnaHRJbmRlbnQ6IHBhcnNlRmxvYXQoc3R5bGVbXCJAX1JpZ2h0SW5kZW50XCJdKSB8fCAwLFxyXG4gICAgICAgICAgICBmaXJzdExpbmVJbmRlbnQ6IHBhcnNlRmxvYXQoc3R5bGVbXCJAX0ZpcnN0TGluZUluZGVudFwiXSkgfHwgMCxcclxuICAgICAgICAgICAgc3BhY2VCZWZvcmU6IHBhcnNlRmxvYXQoc3R5bGVbXCJAX1NwYWNlQmVmb3JlXCJdKSB8fCAwLFxyXG4gICAgICAgICAgICBzcGFjZUFmdGVyOiBwYXJzZUZsb2F0KHN0eWxlW1wiQF9TcGFjZUFmdGVyXCJdKSB8fCAwLFxyXG5cclxuICAgICAgICAgICAgLy8gVHlwb2dyYXBoeSBlbmhhbmNlbWVudHNcclxuICAgICAgICAgICAgdHJhY2tpbmc6IHBhcnNlRmxvYXQoc3R5bGVbXCJAX1RyYWNraW5nXCJdKSB8fCAwLFxyXG4gICAgICAgICAgICBrZXJuaW5nOiBwYXJzZUZsb2F0KHN0eWxlW1wiQF9LZXJuaW5nXCJdKSB8fCAwLFxyXG4gICAgICAgICAgICBob3Jpem9udGFsU2NhbGU6IHBhcnNlRmxvYXQoc3R5bGVbXCJAX0hvcml6b250YWxTY2FsZVwiXSkgfHwgMTAwLFxyXG4gICAgICAgICAgICB2ZXJ0aWNhbFNjYWxlOiBwYXJzZUZsb2F0KHN0eWxlW1wiQF9WZXJ0aWNhbFNjYWxlXCJdKSB8fCAxMDAsXHJcblxyXG4gICAgICAgICAgICAvLyBFTkhBTkNFRDogVXNlIHRoZSBuZXcgZXh0cmFjdGlvbiBtZXRob2RcclxuICAgICAgICAgICAgYXBwbGllZEZvbnQ6IGZvbnRSZWYsXHJcbiAgICAgICAgICAgIG9yaWdpbmFsRm9udFJlZjogZm9udFJlZixcclxuXHJcbiAgICAgICAgICAgIGZpbGxDb2xvcjogc3R5bGVbXCJAX0ZpbGxDb2xvclwiXSB8fCBcIkNvbG9yL0JsYWNrXCIsXHJcbiAgICAgICAgICAgIHJhd1N0eWxlOiBzdHlsZSxcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICAgIGDinIUgUGFyYWdyYXBoIFN0eWxlOiAke3N0eWxlW1wiQF9OYW1lXCJdfSAtPiBGb250OiBcIiR7Zm9udFJlZn1cImBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChncm91cC5QYXJhZ3JhcGhTdHlsZUdyb3VwKSB7XHJcbiAgICAgICAgY29uc3Qgc3ViR3JvdXBzID0gQXJyYXkuaXNBcnJheShncm91cC5QYXJhZ3JhcGhTdHlsZUdyb3VwKVxyXG4gICAgICAgICAgPyBncm91cC5QYXJhZ3JhcGhTdHlsZUdyb3VwXHJcbiAgICAgICAgICA6IFtncm91cC5QYXJhZ3JhcGhTdHlsZUdyb3VwXTtcclxuICAgICAgICBzdWJHcm91cHMuZm9yRWFjaChleHRyYWN0U3R5bGVzUmVjdXJzaXZlbHkpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGV4dHJhY3RTdHlsZXNSZWN1cnNpdmVseShzdHlsZUdyb3VwKTtcclxuICB9XHJcblxyXG4gIGV4dHJhY3RGb250RnJvbVN0eWxlKHN0eWxlKSB7XHJcbiAgICAvLyBUcnkgZGlyZWN0IGF0dHJpYnV0ZXMgZmlyc3RcclxuICAgIGxldCBmb250UmVmID1cclxuICAgICAgc3R5bGVbXCJAX0FwcGxpZWRGb250XCJdIHx8IHN0eWxlW1wiQF9Gb250RmFtaWx5XCJdIHx8IHN0eWxlW1wiQF9Gb250XCJdIHx8IFwiXCI7XHJcblxyXG4gICAgLy8gSWYgbm90IGZvdW5kLCB0cnkgUHJvcGVydGllcyBuZXN0ZWQgc3RydWN0dXJlXHJcbiAgICBpZiAoIWZvbnRSZWYgJiYgc3R5bGUuUHJvcGVydGllcykge1xyXG4gICAgICBpZiAoc3R5bGUuUHJvcGVydGllcy5BcHBsaWVkRm9udCkge1xyXG4gICAgICAgIGZvbnRSZWYgPVxyXG4gICAgICAgICAgc3R5bGUuUHJvcGVydGllcy5BcHBsaWVkRm9udFtcIiN0ZXh0XCJdIHx8XHJcbiAgICAgICAgICBzdHlsZS5Qcm9wZXJ0aWVzLkFwcGxpZWRGb250IHx8XHJcbiAgICAgICAgICBcIlwiO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBbHNvIHRyeSBvdGhlciBwcm9wZXJ0eSB2YXJpYXRpb25zXHJcbiAgICAgIGlmICghZm9udFJlZiAmJiBzdHlsZS5Qcm9wZXJ0aWVzLkZvbnRGYW1pbHkpIHtcclxuICAgICAgICBmb250UmVmID1cclxuICAgICAgICAgIHN0eWxlLlByb3BlcnRpZXMuRm9udEZhbWlseVtcIiN0ZXh0XCJdIHx8XHJcbiAgICAgICAgICBzdHlsZS5Qcm9wZXJ0aWVzLkZvbnRGYW1pbHkgfHxcclxuICAgICAgICAgIFwiXCI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZm9udFJlZiB8fCBcIlwiO1xyXG4gIH1cclxuXHJcbiAgZXh0cmFjdENoYXJhY3RlclN0eWxlcyhzdHlsZUdyb3VwKSB7XHJcbiAgICBjb25zdCBleHRyYWN0U3R5bGVzUmVjdXJzaXZlbHkgPSAoZ3JvdXApID0+IHtcclxuICAgICAgaWYgKGdyb3VwLkNoYXJhY3RlclN0eWxlKSB7XHJcbiAgICAgICAgY29uc3Qgc3R5bGVzID0gQXJyYXkuaXNBcnJheShncm91cC5DaGFyYWN0ZXJTdHlsZSlcclxuICAgICAgICAgID8gZ3JvdXAuQ2hhcmFjdGVyU3R5bGVcclxuICAgICAgICAgIDogW2dyb3VwLkNoYXJhY3RlclN0eWxlXTtcclxuXHJcbiAgICAgICAgc3R5bGVzLmZvckVhY2goKHN0eWxlKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBmb250UmVmID0gdGhpcy5leHRyYWN0Rm9udEZyb21TdHlsZShzdHlsZSk7XHJcblxyXG4gICAgICAgICAgdGhpcy5zdHlsZXMuY2hhcmFjdGVyW3N0eWxlW1wiQF9TZWxmXCJdXSA9IHtcclxuICAgICAgICAgICAgc2VsZjogc3R5bGVbXCJAX1NlbGZcIl0sXHJcbiAgICAgICAgICAgIG5hbWU6IHN0eWxlW1wiQF9OYW1lXCJdIHx8IFwiXCIsXHJcbiAgICAgICAgICAgIGZvbnRTdHlsZTogc3R5bGVbXCJAX0ZvbnRTdHlsZVwiXSB8fCBcIlJlZ3VsYXJcIixcclxuICAgICAgICAgICAgcG9pbnRTaXplOiBwYXJzZUZsb2F0KHN0eWxlW1wiQF9Qb2ludFNpemVcIl0pIHx8IG51bGwsXHJcblxyXG4gICAgICAgICAgICBhcHBsaWVkRm9udDogZm9udFJlZixcclxuICAgICAgICAgICAgb3JpZ2luYWxGb250UmVmOiBmb250UmVmLFxyXG5cclxuICAgICAgICAgICAgZmlsbENvbG9yOiBzdHlsZVtcIkBfRmlsbENvbG9yXCJdIHx8IG51bGwsXHJcbiAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBzdHlsZVtcIkBfU3Ryb2tlQ29sb3JcIl0gfHwgbnVsbCxcclxuICAgICAgICAgICAgcmF3U3R5bGU6IHN0eWxlLFxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgYOKchSBDaGFyYWN0ZXIgU3R5bGU6ICR7c3R5bGVbXCJAX05hbWVcIl19IC0+IEZvbnQ6IFwiJHtmb250UmVmfVwiYFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGdyb3VwLkNoYXJhY3RlclN0eWxlR3JvdXApIHtcclxuICAgICAgICBjb25zdCBzdWJHcm91cHMgPSBBcnJheS5pc0FycmF5KGdyb3VwLkNoYXJhY3RlclN0eWxlR3JvdXApXHJcbiAgICAgICAgICA/IGdyb3VwLkNoYXJhY3RlclN0eWxlR3JvdXBcclxuICAgICAgICAgIDogW2dyb3VwLkNoYXJhY3RlclN0eWxlR3JvdXBdO1xyXG4gICAgICAgIHN1Ykdyb3Vwcy5mb3JFYWNoKGV4dHJhY3RTdHlsZXNSZWN1cnNpdmVseSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZXh0cmFjdFN0eWxlc1JlY3Vyc2l2ZWx5KHN0eWxlR3JvdXApO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZXh0cmFjdEZvbnRzKGZvbnRzRGF0YSkge1xyXG4gICAgY29uc29sZS5sb2coXCJFeHRyYWN0aW5nIGZvbnRzIHdpdGggZW5oYW5jZWQgbWFwcGluZy4uLlwiKTtcclxuXHJcbiAgICBjb25zdCBmb250cyA9IGZvbnRzRGF0YS5Gb250cyB8fCBmb250c0RhdGE7XHJcbiAgICB0aGlzLnJlc291cmNlcy5mb250cyA9IHt9O1xyXG4gICAgdGhpcy5mb250TWFwID0gbmV3IE1hcCgpOyAvLyBHbG9iYWwgZm9udCBsb29rdXAgbWFwXHJcblxyXG4gICAgaWYgKGZvbnRzLkZvbnRGYW1pbHkpIHtcclxuICAgICAgY29uc3QgZm9udEZhbWlsaWVzID0gQXJyYXkuaXNBcnJheShmb250cy5Gb250RmFtaWx5KVxyXG4gICAgICAgID8gZm9udHMuRm9udEZhbWlseVxyXG4gICAgICAgIDogW2ZvbnRzLkZvbnRGYW1pbHldO1xyXG5cclxuICAgICAgZm9udEZhbWlsaWVzLmZvckVhY2goKGZhbWlseSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZhbWlseUluZm8gPSB7XHJcbiAgICAgICAgICBzZWxmOiBmYW1pbHlbXCJAX1NlbGZcIl0sXHJcbiAgICAgICAgICBuYW1lOiBmYW1pbHlbXCJAX05hbWVcIl0gfHwgXCJcIixcclxuICAgICAgICAgIGZvbnRzOiBbXSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAoZmFtaWx5LkZvbnQpIHtcclxuICAgICAgICAgIGNvbnN0IGZvbnRMaXN0ID0gQXJyYXkuaXNBcnJheShmYW1pbHkuRm9udClcclxuICAgICAgICAgICAgPyBmYW1pbHkuRm9udFxyXG4gICAgICAgICAgICA6IFtmYW1pbHkuRm9udF07XHJcblxyXG4gICAgICAgICAgZm9udExpc3QuZm9yRWFjaCgoZm9udCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBmb250SW5mbyA9IHtcclxuICAgICAgICAgICAgICBzZWxmOiBmb250W1wiQF9TZWxmXCJdLFxyXG4gICAgICAgICAgICAgIGZvbnRGYW1pbHk6IGZvbnRbXCJAX0ZvbnRGYW1pbHlcIl0gfHwgZmFtaWx5SW5mby5uYW1lLFxyXG4gICAgICAgICAgICAgIG5hbWU6IGZvbnRbXCJAX05hbWVcIl0gfHwgXCJcIixcclxuICAgICAgICAgICAgICBwb3N0U2NyaXB0TmFtZTogZm9udFtcIkBfUG9zdFNjcmlwdE5hbWVcIl0gfHwgXCJcIixcclxuICAgICAgICAgICAgICBzdGF0dXM6IGZvbnRbXCJAX1N0YXR1c1wiXSB8fCBcIlVua25vd25cIixcclxuICAgICAgICAgICAgICBmb250U3R5bGVOYW1lOiBmb250W1wiQF9Gb250U3R5bGVOYW1lXCJdIHx8IFwiUmVndWxhclwiLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZmFtaWx5SW5mby5mb250cy5wdXNoKGZvbnRJbmZvKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBtdWx0aXBsZSBsb29rdXAgZW50cmllcyBmb3IgdGhpcyBmb250XHJcbiAgICAgICAgICAgIHRoaXMuZm9udE1hcC5zZXQoZm9udFtcIkBfU2VsZlwiXSwgZmFtaWx5SW5mby5uYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5mb250TWFwLnNldChmb250W1wiQF9Qb3N0U2NyaXB0TmFtZVwiXSwgZmFtaWx5SW5mby5uYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5mb250TWFwLnNldChmb250W1wiQF9OYW1lXCJdLCBmYW1pbHlJbmZvLm5hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLmZvbnRNYXAuc2V0KGZvbnRbXCJAX0ZvbnRGYW1pbHlcIl0sIGZhbWlseUluZm8ubmFtZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgICBgRm9udCBtYXBwaW5nOiAke2ZvbnRbXCJAX1NlbGZcIl19IC0+ICR7ZmFtaWx5SW5mby5uYW1lfWBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMuZm9udHNbZmFtaWx5W1wiQF9TZWxmXCJdXSA9IGZhbWlseUluZm87XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICBg4pyFIEZvbnRzIGV4dHJhY3RlZDogJHtPYmplY3Qua2V5cyh0aGlzLnJlc291cmNlcy5mb250cykubGVuZ3RofSBmYW1pbGllc2BcclxuICAgICk7XHJcbiAgICBjb25zb2xlLmxvZyhgRm9udCBtYXAgZW50cmllczogJHt0aGlzLmZvbnRNYXAuc2l6ZX1gKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGV4dHJhY3RHcmFwaGljcyhncmFwaGljc0RhdGEpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiRXh0cmFjdGluZyBncmFwaGljcyBhbmQgY29sb3JzLi4uXCIpO1xyXG5cclxuICAgIGNvbnN0IGdyYXBoaWNzID0gZ3JhcGhpY3NEYXRhLkdyYXBoaWMgfHwgZ3JhcGhpY3NEYXRhO1xyXG4gICAgdGhpcy5yZXNvdXJjZXMuY29sb3JzID0ge307XHJcbiAgICB0aGlzLnJlc291cmNlcy5ncmFkaWVudHMgPSB7fTtcclxuXHJcbiAgICAvLyBFeHRyYWN0IENvbG9yc1xyXG4gICAgaWYgKGdyYXBoaWNzLkNvbG9yKSB7XHJcbiAgICAgIGNvbnN0IGNvbG9ycyA9IEFycmF5LmlzQXJyYXkoZ3JhcGhpY3MuQ29sb3IpXHJcbiAgICAgICAgPyBncmFwaGljcy5Db2xvclxyXG4gICAgICAgIDogW2dyYXBoaWNzLkNvbG9yXTtcclxuXHJcbiAgICAgIGNvbG9ycy5mb3JFYWNoKChjb2xvcikgPT4ge1xyXG4gICAgICAgIHRoaXMucmVzb3VyY2VzLmNvbG9yc1tjb2xvcltcIkBfU2VsZlwiXV0gPSB7XHJcbiAgICAgICAgICBzZWxmOiBjb2xvcltcIkBfU2VsZlwiXSxcclxuICAgICAgICAgIG5hbWU6IGNvbG9yW1wiQF9OYW1lXCJdIHx8IFwiXCIsXHJcbiAgICAgICAgICBtb2RlbDogY29sb3JbXCJAX01vZGVsXCJdIHx8IFwiUHJvY2Vzc1wiLFxyXG4gICAgICAgICAgc3BhY2U6IGNvbG9yW1wiQF9TcGFjZVwiXSB8fCBcIkNNWUtcIixcclxuICAgICAgICAgIGN5YW46IHBhcnNlRmxvYXQoY29sb3JbXCJAX0N5YW5cIl0pIHx8IDAsXHJcbiAgICAgICAgICBtYWdlbnRhOiBwYXJzZUZsb2F0KGNvbG9yW1wiQF9NYWdlbnRhXCJdKSB8fCAwLFxyXG4gICAgICAgICAgeWVsbG93OiBwYXJzZUZsb2F0KGNvbG9yW1wiQF9ZZWxsb3dcIl0pIHx8IDAsXHJcbiAgICAgICAgICBibGFjazogcGFyc2VGbG9hdChjb2xvcltcIkBfQmxhY2tcIl0pIHx8IDAsXHJcbiAgICAgICAgICByZWQ6IHBhcnNlRmxvYXQoY29sb3JbXCJAX1JlZFwiXSkgfHwgMCxcclxuICAgICAgICAgIGdyZWVuOiBwYXJzZUZsb2F0KGNvbG9yW1wiQF9HcmVlblwiXSkgfHwgMCxcclxuICAgICAgICAgIGJsdWU6IHBhcnNlRmxvYXQoY29sb3JbXCJAX0JsdWVcIl0pIHx8IDAsXHJcbiAgICAgICAgfTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRXh0cmFjdCBHcmFkaWVudHNcclxuICAgIGlmIChncmFwaGljcy5HcmFkaWVudCkge1xyXG4gICAgICBjb25zdCBncmFkaWVudHMgPSBBcnJheS5pc0FycmF5KGdyYXBoaWNzLkdyYWRpZW50KVxyXG4gICAgICAgID8gZ3JhcGhpY3MuR3JhZGllbnRcclxuICAgICAgICA6IFtncmFwaGljcy5HcmFkaWVudF07XHJcblxyXG4gICAgICBncmFkaWVudHMuZm9yRWFjaCgoZ3JhZGllbnQpID0+IHtcclxuICAgICAgICB0aGlzLnJlc291cmNlcy5ncmFkaWVudHNbZ3JhZGllbnRbXCJAX1NlbGZcIl1dID0ge1xyXG4gICAgICAgICAgc2VsZjogZ3JhZGllbnRbXCJAX1NlbGZcIl0sXHJcbiAgICAgICAgICBuYW1lOiBncmFkaWVudFtcIkBfTmFtZVwiXSB8fCBcIlwiLFxyXG4gICAgICAgICAgdHlwZTogZ3JhZGllbnRbXCJAX1R5cGVcIl0gfHwgXCJMaW5lYXJcIixcclxuICAgICAgICAgIGdyYWRpZW50U3RvcHM6IHRoaXMuZXh0cmFjdEdyYWRpZW50U3RvcHMoZ3JhZGllbnQpLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZXh0cmFjdEdyYWRpZW50U3RvcHMoZ3JhZGllbnQpIHtcclxuICAgIGNvbnN0IHN0b3BzID0gW107XHJcblxyXG4gICAgaWYgKGdyYWRpZW50LkdyYWRpZW50U3RvcCkge1xyXG4gICAgICBjb25zdCBzdG9wTGlzdCA9IEFycmF5LmlzQXJyYXkoZ3JhZGllbnQuR3JhZGllbnRTdG9wKVxyXG4gICAgICAgID8gZ3JhZGllbnQuR3JhZGllbnRTdG9wXHJcbiAgICAgICAgOiBbZ3JhZGllbnQuR3JhZGllbnRTdG9wXTtcclxuXHJcbiAgICAgIHN0b3BMaXN0LmZvckVhY2goKHN0b3ApID0+IHtcclxuICAgICAgICBzdG9wcy5wdXNoKHtcclxuICAgICAgICAgIHNlbGY6IHN0b3BbXCJAX1NlbGZcIl0sXHJcbiAgICAgICAgICBzdG9wQ29sb3I6IHN0b3BbXCJAX1N0b3BDb2xvclwiXSB8fCBcIlwiLFxyXG4gICAgICAgICAgbG9jYXRpb246IHBhcnNlRmxvYXQoc3RvcFtcIkBfTG9jYXRpb25cIl0pIHx8IDAsXHJcbiAgICAgICAgICBtaWRwb2ludDogcGFyc2VGbG9hdChzdG9wW1wiQF9NaWRwb2ludFwiXSkgfHwgNTAsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdG9wcztcclxuICB9XHJcblxyXG4gIGFzeW5jIGV4dHJhY3RQcmVmZXJlbmNlcyhwcmVmZXJlbmNlc0RhdGEpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiRXh0cmFjdGluZyBkb2N1bWVudCBwcmVmZXJlbmNlcy4uLlwiKTtcclxuXHJcbiAgICBjb25zdCBwcmVmcyA9IHByZWZlcmVuY2VzRGF0YS5QcmVmZXJlbmNlcyB8fCBwcmVmZXJlbmNlc0RhdGE7XHJcblxyXG4gICAgLy8gRXh0cmFjdCB2YXJpb3VzIGRvY3VtZW50IHByZWZlcmVuY2VzXHJcbiAgICB0aGlzLmRvY3VtZW50SW5mbyA9IHtcclxuICAgICAgcHJlZmVyZW5jZXM6IHtcclxuICAgICAgICBkb2N1bWVudFByZWZlcmVuY2VzOiB0aGlzLmV4dHJhY3REb2N1bWVudFByZWZzKFxyXG4gICAgICAgICAgcHJlZnMuRG9jdW1lbnRQcmVmZXJlbmNlXHJcbiAgICAgICAgKSxcclxuICAgICAgICB2aWV3UHJlZmVyZW5jZXM6IHRoaXMuZXh0cmFjdFZpZXdQcmVmcyhwcmVmcy5WaWV3UHJlZmVyZW5jZSksXHJcbiAgICAgICAgZ3VpZGVQcmVmZXJlbmNlczogdGhpcy5leHRyYWN0R3VpZGVQcmVmcyhwcmVmcy5HdWlkZVByZWZlcmVuY2UpLFxyXG4gICAgICAgIGdyaWRQcmVmZXJlbmNlczogdGhpcy5leHRyYWN0R3JpZFByZWZzKHByZWZzLkdyaWRQcmVmZXJlbmNlKSxcclxuICAgICAgICBtYXJnaW5QcmVmZXJlbmNlczogdGhpcy5leHRyYWN0TWFyZ2luUHJlZnMocHJlZnMuTWFyZ2luUHJlZmVyZW5jZSksXHJcbiAgICAgICAgY29sdW1uUHJlZmVyZW5jZXM6IHRoaXMuZXh0cmFjdENvbHVtblByZWZzKHByZWZzLkNvbHVtblByZWZlcmVuY2UpLFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGV4dHJhY3REb2N1bWVudFByZWZzKGRvY1ByZWYpIHtcclxuICAgIGlmICghZG9jUHJlZikgcmV0dXJuIHt9O1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHBhZ2VXaWR0aDogcGFyc2VGbG9hdChkb2NQcmVmW1wiQF9QYWdlV2lkdGhcIl0pIHx8IDAsXHJcbiAgICAgIHBhZ2VIZWlnaHQ6IHBhcnNlRmxvYXQoZG9jUHJlZltcIkBfUGFnZUhlaWdodFwiXSkgfHwgMCxcclxuICAgICAgbGVmdDogcGFyc2VGbG9hdChkb2NQcmVmW1wiQF9MZWZ0XCJdKSB8fCAwLFxyXG4gICAgICB0b3A6IHBhcnNlRmxvYXQoZG9jUHJlZltcIkBfVG9wXCJdKSB8fCAwLFxyXG4gICAgICByaWdodDogcGFyc2VGbG9hdChkb2NQcmVmW1wiQF9SaWdodFwiXSkgfHwgMCxcclxuICAgICAgYm90dG9tOiBwYXJzZUZsb2F0KGRvY1ByZWZbXCJAX0JvdHRvbVwiXSkgfHwgMCxcclxuICAgICAgY29sdW1uQ291bnQ6IHBhcnNlSW50KGRvY1ByZWZbXCJAX0NvbHVtbkNvdW50XCJdKSB8fCAxLFxyXG4gICAgICBjb2x1bW5HdXR0ZXI6IHBhcnNlRmxvYXQoZG9jUHJlZltcIkBfQ29sdW1uR3V0dGVyXCJdKSB8fCAwLFxyXG4gICAgICBmYWNpbmdQYWdlczogZG9jUHJlZltcIkBfRmFjaW5nUGFnZXNcIl0gPT09IHRydWUsXHJcbiAgICAgIGFsbG93UGFnZVNodWZmbGU6IGRvY1ByZWZbXCJAX0FsbG93UGFnZVNodWZmbGVcIl0gIT09IGZhbHNlLFxyXG4gICAgICBzbHVnQmxlZWRUeXBlOiBkb2NQcmVmW1wiQF9TbHVnQmxlZWRUeXBlXCJdIHx8IFwiTm9uZVwiLFxyXG4gICAgICBkb2N1bWVudEJsZWVkVG9wT2Zmc2V0OlxyXG4gICAgICAgIHBhcnNlRmxvYXQoZG9jUHJlZltcIkBfRG9jdW1lbnRCbGVlZFRvcE9mZnNldFwiXSkgfHwgMCxcclxuICAgICAgZG9jdW1lbnRCbGVlZEJvdHRvbU9mZnNldDpcclxuICAgICAgICBwYXJzZUZsb2F0KGRvY1ByZWZbXCJAX0RvY3VtZW50QmxlZWRCb3R0b21PZmZzZXRcIl0pIHx8IDAsXHJcbiAgICAgIGRvY3VtZW50QmxlZWRJbnNpZGVPckxlZnRPZmZzZXQ6XHJcbiAgICAgICAgcGFyc2VGbG9hdChkb2NQcmVmW1wiQF9Eb2N1bWVudEJsZWVkSW5zaWRlT3JMZWZ0T2Zmc2V0XCJdKSB8fCAwLFxyXG4gICAgICBkb2N1bWVudEJsZWVkT3V0c2lkZU9yUmlnaHRPZmZzZXQ6XHJcbiAgICAgICAgcGFyc2VGbG9hdChkb2NQcmVmW1wiQF9Eb2N1bWVudEJsZWVkT3V0c2lkZU9yUmlnaHRPZmZzZXRcIl0pIHx8IDAsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZXh0cmFjdFZpZXdQcmVmcyh2aWV3UHJlZikge1xyXG4gICAgaWYgKCF2aWV3UHJlZikgcmV0dXJuIHt9O1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGhvcml6b250YWxNZWFzdXJlbWVudFVuaXRzOlxyXG4gICAgICAgIHZpZXdQcmVmW1wiQF9Ib3Jpem9udGFsTWVhc3VyZW1lbnRVbml0c1wiXSB8fCBcIlBvaW50c1wiLFxyXG4gICAgICB2ZXJ0aWNhbE1lYXN1cmVtZW50VW5pdHM6XHJcbiAgICAgICAgdmlld1ByZWZbXCJAX1ZlcnRpY2FsTWVhc3VyZW1lbnRVbml0c1wiXSB8fCBcIlBvaW50c1wiLFxyXG4gICAgICBydWxlck9yaWdpbjogdmlld1ByZWZbXCJAX1J1bGVyT3JpZ2luXCJdIHx8IFwiU3ByZWFkT3JpZ2luXCIsXHJcbiAgICAgIHNob3dSdWxlcnM6IHZpZXdQcmVmW1wiQF9TaG93UnVsZXJzXCJdICE9PSBmYWxzZSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBleHRyYWN0R3VpZGVQcmVmcyhndWlkZVByZWYpIHtcclxuICAgIGlmICghZ3VpZGVQcmVmKSByZXR1cm4ge307XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcnVsZXJHdWlkZUNvbG9yOiBndWlkZVByZWZbXCJAX1J1bGVyR3VpZGVDb2xvclwiXSB8fCBcIkdyZWVuXCIsXHJcbiAgICAgIGd1aWRlc0luQmFjazogZ3VpZGVQcmVmW1wiQF9HdWlkZXNJbkJhY2tcIl0gPT09IHRydWUsXHJcbiAgICAgIGd1aWRlc0xvY2tlZDogZ3VpZGVQcmVmW1wiQF9HdWlkZXNMb2NrZWRcIl0gPT09IHRydWUsXHJcbiAgICAgIGd1aWRlc1Nob3duOiBndWlkZVByZWZbXCJAX0d1aWRlc1Nob3duXCJdICE9PSBmYWxzZSxcclxuICAgICAgZ3VpZGVzU25hcHRvOiBndWlkZVByZWZbXCJAX0d1aWRlc1NuYXB0b1wiXSAhPT0gZmFsc2UsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZXh0cmFjdEdyaWRQcmVmcyhncmlkUHJlZikge1xyXG4gICAgaWYgKCFncmlkUHJlZikgcmV0dXJuIHt9O1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGJhc2VsaW5lU3RhcnQ6IHBhcnNlRmxvYXQoZ3JpZFByZWZbXCJAX0Jhc2VsaW5lU3RhcnRcIl0pIHx8IDAsXHJcbiAgICAgIGJhc2VsaW5lRGl2aXNpb246IHBhcnNlRmxvYXQoZ3JpZFByZWZbXCJAX0Jhc2VsaW5lRGl2aXNpb25cIl0pIHx8IDEyLFxyXG4gICAgICBiYXNlbGluZVNob3duOiBncmlkUHJlZltcIkBfQmFzZWxpbmVTaG93blwiXSA9PT0gdHJ1ZSxcclxuICAgICAgYmFzZWxpbmVTbmFwdG86IGdyaWRQcmVmW1wiQF9CYXNlbGluZVNuYXB0b1wiXSA9PT0gdHJ1ZSxcclxuICAgICAgZG9jdW1lbnRHcmlkU2hvd246IGdyaWRQcmVmW1wiQF9Eb2N1bWVudEdyaWRTaG93blwiXSA9PT0gdHJ1ZSxcclxuICAgICAgZG9jdW1lbnRHcmlkU25hcHRvOiBncmlkUHJlZltcIkBfRG9jdW1lbnRHcmlkU25hcHRvXCJdID09PSB0cnVlLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGV4dHJhY3RNYXJnaW5QcmVmcyhtYXJnaW5QcmVmKSB7XHJcbiAgICBpZiAoIW1hcmdpblByZWYpIHJldHVybiB7fTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0b3A6IHBhcnNlRmxvYXQobWFyZ2luUHJlZltcIkBfVG9wXCJdKSB8fCAwLFxyXG4gICAgICBib3R0b206IHBhcnNlRmxvYXQobWFyZ2luUHJlZltcIkBfQm90dG9tXCJdKSB8fCAwLFxyXG4gICAgICBsZWZ0OiBwYXJzZUZsb2F0KG1hcmdpblByZWZbXCJAX0xlZnRcIl0pIHx8IDAsXHJcbiAgICAgIHJpZ2h0OiBwYXJzZUZsb2F0KG1hcmdpblByZWZbXCJAX1JpZ2h0XCJdKSB8fCAwLFxyXG4gICAgICBjb2x1bW5Db3VudDogcGFyc2VJbnQobWFyZ2luUHJlZltcIkBfQ29sdW1uQ291bnRcIl0pIHx8IDEsXHJcbiAgICAgIGNvbHVtbkd1dHRlcjogcGFyc2VGbG9hdChtYXJnaW5QcmVmW1wiQF9Db2x1bW5HdXR0ZXJcIl0pIHx8IDAsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZXh0cmFjdENvbHVtblByZWZzKGNvbHVtblByZWYpIHtcclxuICAgIGlmICghY29sdW1uUHJlZikgcmV0dXJuIHt9O1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRleHRDb2x1bW5Db3VudDogcGFyc2VJbnQoY29sdW1uUHJlZltcIkBfVGV4dENvbHVtbkNvdW50XCJdKSB8fCAxLFxyXG4gICAgICB0ZXh0Q29sdW1uR3V0dGVyOiBwYXJzZUZsb2F0KGNvbHVtblByZWZbXCJAX1RleHRDb2x1bW5HdXR0ZXJcIl0pIHx8IDAsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmVzb2x2ZVN0eWxlRm9ybWF0dGluZyhmb3JtYXR0aW5nKSB7XHJcbiAgICBjb25zdCByZXNvbHZlZCA9IHsgLi4uZm9ybWF0dGluZyB9O1xyXG5cclxuICAgIC8vIERFQlVHOiBDaGVjayBpZiBmb3JtYXR0aW5nIGlzIGJlaW5nIGFwcGxpZWQgKGdlbmVyaWMgY2hlY2spXHJcbiAgICBjb25zdCBoYXNBbnlGb3JtYXR0aW5nID1cclxuICAgICAgZm9ybWF0dGluZy5wYXJhZ3JhcGhTdHlsZSB8fFxyXG4gICAgICBmb3JtYXR0aW5nLmNoYXJhY3RlclN0eWxlIHx8XHJcbiAgICAgIGZvcm1hdHRpbmcuZm9udFN0eWxlIHx8XHJcbiAgICAgIGZvcm1hdHRpbmcuZm9udFJlZmVyZW5jZSB8fFxyXG4gICAgICBmb3JtYXR0aW5nLmZvbnRTaXplO1xyXG5cclxuICAgIGlmIChoYXNBbnlGb3JtYXR0aW5nKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwi8J+UpyBTdHlsZVBhcnNlci5yZXNvbHZlU3R5bGVGb3JtYXR0aW5nIC0gSW5wdXQ6XCIsIHtcclxuICAgICAgICBwYXJhZ3JhcGhTdHlsZTogZm9ybWF0dGluZy5wYXJhZ3JhcGhTdHlsZSxcclxuICAgICAgICBjaGFyYWN0ZXJTdHlsZTogZm9ybWF0dGluZy5jaGFyYWN0ZXJTdHlsZSxcclxuICAgICAgICBkaXJlY3RGb250U3R5bGU6IGZvcm1hdHRpbmcuZm9udFN0eWxlLFxyXG4gICAgICAgIGRpcmVjdEZvbnRSZWY6IGZvcm1hdHRpbmcuZm9udFJlZmVyZW5jZSxcclxuICAgICAgICBkaXJlY3RGb250U2l6ZTogZm9ybWF0dGluZy5mb250U2l6ZSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVzb2x2ZSBwYXJhZ3JhcGggc3R5bGUgKGJhc2UgbGF5ZXIpXHJcbiAgICBpZiAoXHJcbiAgICAgIGZvcm1hdHRpbmcucGFyYWdyYXBoU3R5bGUgJiZcclxuICAgICAgdGhpcy5zdHlsZXMucGFyYWdyYXBoW2Zvcm1hdHRpbmcucGFyYWdyYXBoU3R5bGVdXHJcbiAgICApIHtcclxuICAgICAgY29uc3QgcFN0eWxlID0gdGhpcy5zdHlsZXMucGFyYWdyYXBoW2Zvcm1hdHRpbmcucGFyYWdyYXBoU3R5bGVdO1xyXG5cclxuICAgICAgaWYgKCFyZXNvbHZlZC5mb250U2l6ZSAmJiBwU3R5bGUucG9pbnRTaXplKVxyXG4gICAgICAgIHJlc29sdmVkLmZvbnRTaXplID0gcFN0eWxlLnBvaW50U2l6ZTtcclxuICAgICAgaWYgKCFyZXNvbHZlZC5maWxsQ29sb3IgJiYgcFN0eWxlLmZpbGxDb2xvcilcclxuICAgICAgICByZXNvbHZlZC5maWxsQ29sb3IgPSBwU3R5bGUuZmlsbENvbG9yO1xyXG4gICAgICAvLyBDUklUSUNBTCBGSVg6IEFsd2F5cyBpbmhlcml0IHBhcmFncmFwaCBhbGlnbm1lbnQgdW5sZXNzIGV4cGxpY2l0bHkgb3ZlcnJpZGRlblxyXG4gICAgICBpZiAocFN0eWxlLmFsaWdubWVudCkgcmVzb2x2ZWQuYWxpZ25tZW50ID0gcFN0eWxlLmFsaWdubWVudDtcclxuICAgICAgaWYgKCFyZXNvbHZlZC5mb250U3R5bGUgJiYgcFN0eWxlLmZvbnRTdHlsZSkge1xyXG4gICAgICAgIHJlc29sdmVkLmZvbnRTdHlsZSA9IHBTdHlsZS5mb250U3R5bGU7XHJcbiAgICAgICAgaWYgKGhhc0FueUZvcm1hdHRpbmcpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICBgICAgRm9udFN0eWxlIGZyb20gcGFyYWdyYXBoIHN0eWxlOiBcIiR7cFN0eWxlLmZvbnRTdHlsZX1cImBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDUklUSUNBTDogUmVzb2x2ZSBmb250IGZyb20gcGFyYWdyYXBoIHN0eWxlXHJcbiAgICAgIGlmICghcmVzb2x2ZWQuZm9udEZhbWlseSAmJiBwU3R5bGUuYXBwbGllZEZvbnQpIHtcclxuICAgICAgICByZXNvbHZlZC5mb250RmFtaWx5ID0gdGhpcy5yZXNvbHZlRm9udFJlZmVyZW5jZShwU3R5bGUuYXBwbGllZEZvbnQpO1xyXG4gICAgICAgIGlmIChoYXNBbnlGb3JtYXR0aW5nKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgYCAgIEZvbnQgZnJvbSBwYXJhZ3JhcGggc3R5bGU6ICR7cFN0eWxlLmFwcGxpZWRGb250fSAtPiAke3Jlc29sdmVkLmZvbnRGYW1pbHl9YFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEFkZCBvdGhlciBwYXJhZ3JhcGggcHJvcGVydGllcyB3aXRoIGVuaGFuY2VkIGxlYWRpbmcgc3VwcG9ydFxyXG4gICAgICByZXNvbHZlZC5sZWFkaW5nID0gcFN0eWxlLmxlYWRpbmc7XHJcbiAgICAgIHJlc29sdmVkLmxlYWRpbmdUeXBlID0gcFN0eWxlLmxlYWRpbmdUeXBlO1xyXG4gICAgICByZXNvbHZlZC5lZmZlY3RpdmVMaW5lSGVpZ2h0ID0gcFN0eWxlLmVmZmVjdGl2ZUxpbmVIZWlnaHQ7XHJcbiAgICAgIHJlc29sdmVkLmxlZnRJbmRlbnQgPSBwU3R5bGUubGVmdEluZGVudDtcclxuICAgICAgcmVzb2x2ZWQucmlnaHRJbmRlbnQgPSBwU3R5bGUucmlnaHRJbmRlbnQ7XHJcbiAgICAgIHJlc29sdmVkLmZpcnN0TGluZUluZGVudCA9IHBTdHlsZS5maXJzdExpbmVJbmRlbnQ7XHJcbiAgICAgIHJlc29sdmVkLnNwYWNlQmVmb3JlID0gcFN0eWxlLnNwYWNlQmVmb3JlO1xyXG4gICAgICByZXNvbHZlZC5zcGFjZUFmdGVyID0gcFN0eWxlLnNwYWNlQWZ0ZXI7XHJcbiAgICAgIHJlc29sdmVkLnRyYWNraW5nID0gcFN0eWxlLnRyYWNraW5nO1xyXG4gICAgICByZXNvbHZlZC5rZXJuaW5nID0gcFN0eWxlLmtlcm5pbmc7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVzb2x2ZSBjaGFyYWN0ZXIgc3R5bGUgKG92ZXJyaWRlIGxheWVyKVxyXG4gICAgaWYgKFxyXG4gICAgICBmb3JtYXR0aW5nLmNoYXJhY3RlclN0eWxlICYmXHJcbiAgICAgIHRoaXMuc3R5bGVzLmNoYXJhY3Rlcltmb3JtYXR0aW5nLmNoYXJhY3RlclN0eWxlXVxyXG4gICAgKSB7XHJcbiAgICAgIGNvbnN0IGNTdHlsZSA9IHRoaXMuc3R5bGVzLmNoYXJhY3Rlcltmb3JtYXR0aW5nLmNoYXJhY3RlclN0eWxlXTtcclxuXHJcbiAgICAgIGlmIChjU3R5bGUucG9pbnRTaXplKSByZXNvbHZlZC5mb250U2l6ZSA9IGNTdHlsZS5wb2ludFNpemU7XHJcbiAgICAgIGlmIChjU3R5bGUuZmlsbENvbG9yKSByZXNvbHZlZC5maWxsQ29sb3IgPSBjU3R5bGUuZmlsbENvbG9yO1xyXG4gICAgICBpZiAoY1N0eWxlLmZvbnRTdHlsZSkge1xyXG4gICAgICAgIHJlc29sdmVkLmZvbnRTdHlsZSA9IGNTdHlsZS5mb250U3R5bGU7XHJcbiAgICAgICAgaWYgKGhhc0FueUZvcm1hdHRpbmcpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICBgICAgRm9udFN0eWxlIGZyb20gY2hhcmFjdGVyIHN0eWxlOiBcIiR7Y1N0eWxlLmZvbnRTdHlsZX1cImBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChjU3R5bGUuc3Ryb2tlQ29sb3IpIHJlc29sdmVkLnN0cm9rZUNvbG9yID0gY1N0eWxlLnN0cm9rZUNvbG9yO1xyXG5cclxuICAgICAgLy8gSW5jbHVkZSBsZWFkaW5nIGluZm9ybWF0aW9uIGZyb20gY2hhcmFjdGVyIHN0eWxlXHJcbiAgICAgIGlmIChjU3R5bGUubGVhZGluZykgcmVzb2x2ZWQubGVhZGluZyA9IGNTdHlsZS5sZWFkaW5nO1xyXG4gICAgICBpZiAoY1N0eWxlLmxlYWRpbmdUeXBlKSByZXNvbHZlZC5sZWFkaW5nVHlwZSA9IGNTdHlsZS5sZWFkaW5nVHlwZTtcclxuICAgICAgaWYgKGNTdHlsZS5lZmZlY3RpdmVMaW5lSGVpZ2h0KVxyXG4gICAgICAgIHJlc29sdmVkLmVmZmVjdGl2ZUxpbmVIZWlnaHQgPSBjU3R5bGUuZWZmZWN0aXZlTGluZUhlaWdodDtcclxuXHJcbiAgICAgIC8vIENSSVRJQ0FMOiBDaGFyYWN0ZXIgc3R5bGUgZm9udCBvdmVycmlkZXMgcGFyYWdyYXBoIHN0eWxlXHJcbiAgICAgIGlmIChjU3R5bGUuYXBwbGllZEZvbnQpIHtcclxuICAgICAgICByZXNvbHZlZC5mb250RmFtaWx5ID0gdGhpcy5yZXNvbHZlRm9udFJlZmVyZW5jZShjU3R5bGUuYXBwbGllZEZvbnQpO1xyXG4gICAgICAgIGlmIChoYXNBbnlGb3JtYXR0aW5nKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgYCAgIEZvbnQgZnJvbSBjaGFyYWN0ZXIgc3R5bGU6ICR7Y1N0eWxlLmFwcGxpZWRGb250fSAtPiAke3Jlc29sdmVkLmZvbnRGYW1pbHl9YFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBBcHBseSBkaXJlY3QgZm9ybWF0dGluZyAoaGlnaGVzdCBwcmlvcml0eSlcclxuICAgIGlmIChmb3JtYXR0aW5nLmZvbnRSZWZlcmVuY2UpIHtcclxuICAgICAgcmVzb2x2ZWQuZm9udEZhbWlseSA9IHRoaXMucmVzb2x2ZUZvbnRSZWZlcmVuY2UoZm9ybWF0dGluZy5mb250UmVmZXJlbmNlKTtcclxuICAgICAgaWYgKGhhc0FueUZvcm1hdHRpbmcpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgIGAgICBGb250IGZyb20gZGlyZWN0IGZvcm1hdHRpbmc6ICR7Zm9ybWF0dGluZy5mb250UmVmZXJlbmNlfSAtPiAke3Jlc29sdmVkLmZvbnRGYW1pbHl9YFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDUklUSUNBTDogQXBwbHkgZGlyZWN0IGZvbnRTdHlsZSBpZiBwcm92aWRlZCAodGhpcyBtaWdodCBiZSB0aGUgaXNzdWUpXHJcbiAgICBpZiAoZm9ybWF0dGluZy5mb250U3R5bGUpIHtcclxuICAgICAgcmVzb2x2ZWQuZm9udFN0eWxlID0gZm9ybWF0dGluZy5mb250U3R5bGU7XHJcbiAgICAgIGlmIChoYXNBbnlGb3JtYXR0aW5nKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICBgICAgRm9udFN0eWxlIGZyb20gZGlyZWN0IGZvcm1hdHRpbmc6IFwiJHtmb3JtYXR0aW5nLmZvbnRTdHlsZX1cImBcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQXBwbHkgZGlyZWN0IGxlYWRpbmcgaW5mb3JtYXRpb24gKGhpZ2hlc3QgcHJpb3JpdHkpXHJcbiAgICBpZiAoZm9ybWF0dGluZy5sZWFkaW5nICE9PSB1bmRlZmluZWQpIHJlc29sdmVkLmxlYWRpbmcgPSBmb3JtYXR0aW5nLmxlYWRpbmc7XHJcbiAgICBpZiAoZm9ybWF0dGluZy5sZWFkaW5nVHlwZSkgcmVzb2x2ZWQubGVhZGluZ1R5cGUgPSBmb3JtYXR0aW5nLmxlYWRpbmdUeXBlO1xyXG4gICAgaWYgKGZvcm1hdHRpbmcuZWZmZWN0aXZlTGluZUhlaWdodClcclxuICAgICAgcmVzb2x2ZWQuZWZmZWN0aXZlTGluZUhlaWdodCA9IGZvcm1hdHRpbmcuZWZmZWN0aXZlTGluZUhlaWdodDtcclxuXHJcbiAgICAvLyBBcHBseSBvdGhlciBkaXJlY3QgZm9ybWF0dGluZyBhdHRyaWJ1dGVzXHJcbiAgICBpZiAoZm9ybWF0dGluZy5mb250U2l6ZSkgcmVzb2x2ZWQuZm9udFNpemUgPSBmb3JtYXR0aW5nLmZvbnRTaXplO1xyXG4gICAgaWYgKGZvcm1hdHRpbmcudHJhY2tpbmcpIHJlc29sdmVkLnRyYWNraW5nID0gZm9ybWF0dGluZy50cmFja2luZztcclxuICAgIGlmIChmb3JtYXR0aW5nLmtlcm5pbmcpIHJlc29sdmVkLmtlcm5pbmcgPSBmb3JtYXR0aW5nLmtlcm5pbmc7XHJcblxyXG4gICAgLy8gQ1JJVElDQUwgRklYOiBBcHBseSBkaXJlY3QgYWxpZ25tZW50IGlmIGV4cGxpY2l0bHkgc3BlY2lmaWVkIChvdmVycmlkZXMgcGFyYWdyYXBoIGFsaWdubWVudClcclxuICAgIGlmIChmb3JtYXR0aW5nLmFsaWdubWVudCkge1xyXG4gICAgICByZXNvbHZlZC5hbGlnbm1lbnQgPSBmb3JtYXR0aW5nLmFsaWdubWVudDtcclxuICAgICAgaWYgKGhhc0FueUZvcm1hdHRpbmcpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgIGAgICBBbGlnbm1lbnQgZnJvbSBkaXJlY3QgZm9ybWF0dGluZzogXCIke2Zvcm1hdHRpbmcuYWxpZ25tZW50fVwiYFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBGSVhFRDogRW5zdXJlIGZvbnRTdHlsZSBkZWZhdWx0cyB0byBSZWd1bGFyL25vcm1hbCBpZiBub3Qgc2V0XHJcbiAgICBpZiAoIXJlc29sdmVkLmZvbnRTdHlsZSB8fCByZXNvbHZlZC5mb250U3R5bGUgPT09IFwiXCIpIHtcclxuICAgICAgcmVzb2x2ZWQuZm9udFN0eWxlID0gXCJSZWd1bGFyXCI7XHJcbiAgICAgIGlmIChoYXNBbnlGb3JtYXR0aW5nKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYCAgIEZvbnRTdHlsZSBkZWZhdWx0ZWQgdG86IFwiUmVndWxhclwiYCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBBRERJVElPTkFMIEZJWDogSWYgbm8gc3R5bGVzIHdlcmUgYXBwbGllZCBmcm9tIGFueSBzb3VyY2UsIGVuc3VyZSBjbGVhbiBkZWZhdWx0c1xyXG4gICAgaWYgKFxyXG4gICAgICAhZm9ybWF0dGluZy5wYXJhZ3JhcGhTdHlsZSAmJlxyXG4gICAgICAhZm9ybWF0dGluZy5jaGFyYWN0ZXJTdHlsZSAmJlxyXG4gICAgICAhZm9ybWF0dGluZy5mb250U3R5bGUgJiZcclxuICAgICAgIWZvcm1hdHRpbmcuZm9udFJlZmVyZW5jZVxyXG4gICAgKSB7XHJcbiAgICAgIHJlc29sdmVkLmZvbnRTdHlsZSA9IFwiUmVndWxhclwiO1xyXG4gICAgICBpZiAoaGFzQW55Rm9ybWF0dGluZykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGAgICBObyBzb3VyY2Ugc3R5bGVzIGZvdW5kIC0gZW5zdXJpbmcgY2xlYW4gZGVmYXVsdHNgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEZpbmFsIGZhbGxiYWNrXHJcbiAgICBpZiAoIXJlc29sdmVkLmZvbnRGYW1pbHkgfHwgcmVzb2x2ZWQuZm9udEZhbWlseSA9PT0gXCJcIikge1xyXG4gICAgICByZXNvbHZlZC5mb250RmFtaWx5ID0gdGhpcy5nZXREZWZhdWx0Rm9udCgpO1xyXG4gICAgICBpZiAoaGFzQW55Rm9ybWF0dGluZykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGAgICBVc2luZyBmYWxsYmFjayBmb250OiAke3Jlc29sdmVkLmZvbnRGYW1pbHl9YCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBFbnN1cmUgbGluZSBoZWlnaHQgaXMgY2FsY3VsYXRlZCBpZiBub3QgZXhwbGljaXRseSBzZXRcclxuICAgIGlmIChcclxuICAgICAgIXJlc29sdmVkLmVmZmVjdGl2ZUxpbmVIZWlnaHQgJiZcclxuICAgICAgcmVzb2x2ZWQuZm9udFNpemUgJiZcclxuICAgICAgcmVzb2x2ZWQubGVhZGluZ1xyXG4gICAgKSB7XHJcbiAgICAgIHJlc29sdmVkLmVmZmVjdGl2ZUxpbmVIZWlnaHQgPSB0aGlzLmNhbGN1bGF0ZUVmZmVjdGl2ZUxpbmVIZWlnaHQoXHJcbiAgICAgICAgcmVzb2x2ZWQubGVhZGluZyxcclxuICAgICAgICByZXNvbHZlZC5mb250U2l6ZVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChoYXNBbnlGb3JtYXR0aW5nKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwi8J+UpyBTdHlsZVBhcnNlci5yZXNvbHZlU3R5bGVGb3JtYXR0aW5nIC0gRmluYWwgT3V0cHV0OlwiLCB7XHJcbiAgICAgICAgZm9udFNpemU6IHJlc29sdmVkLmZvbnRTaXplLFxyXG4gICAgICAgIGZvbnRGYW1pbHk6IHJlc29sdmVkLmZvbnRGYW1pbHksXHJcbiAgICAgICAgZm9udFN0eWxlOiByZXNvbHZlZC5mb250U3R5bGUsXHJcbiAgICAgICAgZmlsbENvbG9yOiByZXNvbHZlZC5maWxsQ29sb3IsXHJcbiAgICAgICAgbGVhZGluZzogcmVzb2x2ZWQubGVhZGluZyxcclxuICAgICAgICBlZmZlY3RpdmVMaW5lSGVpZ2h0OiByZXNvbHZlZC5lZmZlY3RpdmVMaW5lSGVpZ2h0LFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzb2x2ZWQ7XHJcbiAgfVxyXG5cclxuICByZXNvbHZlRm9udFJlZmVyZW5jZShmb250UmVmKSB7XHJcbiAgICBpZiAoIWZvbnRSZWYgfHwgZm9udFJlZiA9PT0gXCJcIikge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkVtcHR5IGZvbnQgcmVmZXJlbmNlLCB1c2luZyBmYWxsYmFja1wiKTtcclxuICAgICAgcmV0dXJuIHRoaXMuZ2V0RGVmYXVsdEZvbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUcnkgZGlyZWN0IGxvb2t1cCBpbiBmb250IG1hcFxyXG4gICAgaWYgKHRoaXMuZm9udE1hcCAmJiB0aGlzLmZvbnRNYXAuaGFzKGZvbnRSZWYpKSB7XHJcbiAgICAgIGNvbnN0IHJlc29sdmVkRm9udCA9IHRoaXMuZm9udE1hcC5nZXQoZm9udFJlZik7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBGb250IHJlc29sdmVkOiBcIiR7Zm9udFJlZn1cIiAtPiBcIiR7cmVzb2x2ZWRGb250fVwiYCk7XHJcbiAgICAgIHJldHVybiByZXNvbHZlZEZvbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVHJ5IHBhcnRpYWwgbWF0Y2hpbmcgZm9yIGZvbnQgZmFtaWxpZXNcclxuICAgIGlmICh0aGlzLnJlc291cmNlcy5mb250cykge1xyXG4gICAgICBmb3IgKGNvbnN0IFtmYW1pbHlJZCwgZmFtaWx5SW5mb10gb2YgT2JqZWN0LmVudHJpZXMoXHJcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMuZm9udHNcclxuICAgICAgKSkge1xyXG4gICAgICAgIC8vIENoZWNrIGZhbWlseSBuYW1lIG1hdGNoXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgZmFtaWx5SW5mby5uYW1lICYmXHJcbiAgICAgICAgICAoZmFtaWx5SW5mby5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoZm9udFJlZi50b0xvd2VyQ2FzZSgpKSB8fFxyXG4gICAgICAgICAgICBmb250UmVmLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoZmFtaWx5SW5mby5uYW1lLnRvTG93ZXJDYXNlKCkpKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICAgIGBGb250IHBhcnRpYWxseSBtYXRjaGVkOiBcIiR7Zm9udFJlZn1cIiAtPiBcIiR7ZmFtaWx5SW5mby5uYW1lfVwiYFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHJldHVybiBmYW1pbHlJbmZvLm5hbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVjayBpbmRpdmlkdWFsIGZvbnQgbWF0Y2hlc1xyXG4gICAgICAgIGlmIChmYW1pbHlJbmZvLmZvbnRzKSB7XHJcbiAgICAgICAgICBmb3IgKGNvbnN0IGZvbnQgb2YgZmFtaWx5SW5mby5mb250cykge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgZm9udC5zZWxmID09PSBmb250UmVmIHx8XHJcbiAgICAgICAgICAgICAgZm9udC5wb3N0U2NyaXB0TmFtZSA9PT0gZm9udFJlZiB8fFxyXG4gICAgICAgICAgICAgIGZvbnQubmFtZSA9PT0gZm9udFJlZlxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgICAgIGBGb250IGV4YWN0bHkgbWF0Y2hlZDogXCIke2ZvbnRSZWZ9XCIgLT4gXCIke2ZhbWlseUluZm8ubmFtZX1cImBcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIHJldHVybiBmYW1pbHlJbmZvLm5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZyhgRm9udCBub3QgZm91bmQ6IFwiJHtmb250UmVmfVwiLCB1c2luZyBmYWxsYmFja2ApO1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0RGVmYXVsdEZvbnQoKSB8fCBmb250UmVmO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGVmYXVsdEZvbnQoKSB7XHJcbiAgICBpZiAodGhpcy5yZXNvdXJjZXMuZm9udHMgJiYgT2JqZWN0LmtleXModGhpcy5yZXNvdXJjZXMuZm9udHMpLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgZmlyc3RGYW1pbHkgPSBPYmplY3QudmFsdWVzKHRoaXMucmVzb3VyY2VzLmZvbnRzKVswXTtcclxuICAgICAgcmV0dXJuIGZpcnN0RmFtaWx5Lm5hbWUgfHwgXCJBcmlhbFwiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFwiQXJpYWxcIjtcclxuICB9XHJcblxyXG4gIGluZmVyRm9udEZyb21Db250ZXh0KCkge1xyXG4gICAgLy8gSWYgd2UgaGF2ZSBmb250IGRlZmluaXRpb25zIGJ1dCBubyBleHBsaWNpdCByZWZlcmVuY2VzLFxyXG4gICAgLy8gcmV0dXJuIHRoZSBmaXJzdCBhdmFpbGFibGUgZm9udCBhcyBhIGZhbGxiYWNrXHJcbiAgICBpZiAodGhpcy5yZXNvdXJjZXMuZm9udHMgJiYgT2JqZWN0LmtleXModGhpcy5yZXNvdXJjZXMuZm9udHMpLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgZmlyc3RGb250RmFtaWx5ID0gT2JqZWN0LnZhbHVlcyh0aGlzLnJlc291cmNlcy5mb250cylbMF07XHJcbiAgICAgIHJldHVybiBmaXJzdEZvbnRGYW1pbHkubmFtZTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0U3RvcnlTdHlsZVN1bW1hcnkoc3RvcnkpIHtcclxuICAgIGNvbnN0IHN1bW1hcnkgPSB7XHJcbiAgICAgIGZvbnRTaXplOiBudWxsLFxyXG4gICAgICBmb250RmFtaWx5OiBudWxsLFxyXG4gICAgICBhbGlnbm1lbnQ6IG51bGwsXHJcbiAgICAgIGZpbGxDb2xvcjogbnVsbCxcclxuICAgICAgZm9udFN0eWxlOiBudWxsLFxyXG4gICAgICBsZWFkaW5nOiBudWxsLFxyXG4gICAgICBsZWFkaW5nVHlwZTogbnVsbCxcclxuICAgICAgZWZmZWN0aXZlTGluZUhlaWdodDogbnVsbCxcclxuICAgICAgdHJhY2tpbmc6IG51bGwsXHJcbiAgICAgIGtlcm5pbmc6IG51bGwsXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEdldCB0aGUgbW9zdCBjb21tb24gb3IgZmlyc3QgZm9ybWF0dGluZyB2YWx1ZXNcclxuICAgIGlmIChzdG9yeS5jb250ZW50Py5mb3JtYXR0ZWRDb250ZW50Py5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IGZpcnN0Rm9ybWF0dGVkID0gc3RvcnkuY29udGVudC5mb3JtYXR0ZWRDb250ZW50LmZpbmQoXHJcbiAgICAgICAgKGl0ZW0pID0+IGl0ZW0uZm9ybWF0dGluZyAmJiAhaXRlbS5mb3JtYXR0aW5nLmlzQnJlYWtcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChmaXJzdEZvcm1hdHRlZD8uZm9ybWF0dGluZykge1xyXG4gICAgICAgIGNvbnN0IGZtdCA9IGZpcnN0Rm9ybWF0dGVkLmZvcm1hdHRpbmc7XHJcbiAgICAgICAgc3VtbWFyeS5mb250U2l6ZSA9IGZtdC5mb250U2l6ZTtcclxuICAgICAgICBzdW1tYXJ5LmZvbnRGYW1pbHkgPSBmbXQuZm9udEZhbWlseTtcclxuICAgICAgICBzdW1tYXJ5LmFsaWdubWVudCA9IGZtdC5hbGlnbm1lbnQ7XHJcbiAgICAgICAgc3VtbWFyeS5maWxsQ29sb3IgPSBmbXQuZmlsbENvbG9yO1xyXG4gICAgICAgIHN1bW1hcnkuZm9udFN0eWxlID0gZm10LmZvbnRTdHlsZTtcclxuICAgICAgICBzdW1tYXJ5LmxlYWRpbmcgPSBmbXQubGVhZGluZztcclxuICAgICAgICBzdW1tYXJ5LmxlYWRpbmdUeXBlID0gZm10LmxlYWRpbmdUeXBlO1xyXG4gICAgICAgIHN1bW1hcnkuZWZmZWN0aXZlTGluZUhlaWdodCA9IGZtdC5lZmZlY3RpdmVMaW5lSGVpZ2h0O1xyXG4gICAgICAgIHN1bW1hcnkudHJhY2tpbmcgPSBmbXQudHJhY2tpbmc7XHJcbiAgICAgICAgc3VtbWFyeS5rZXJuaW5nID0gZm10Lmtlcm5pbmc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3VtbWFyeTtcclxuICB9XHJcblxyXG4gIC8vIE5FVzogUHJvY2VzcyBsZWFkaW5nIHZhbHVlcyB3aXRoIEluRGVzaWduLXNwZWNpZmljIGxvZ2ljIChzaGFyZWQgd2l0aCBTdG9yeVBhcnNlcilcclxuICBwcm9jZXNzTGVhZGluZ1ZhbHVlKHJhd0xlYWRpbmcsIGZvbnRTaXplKSB7XHJcbiAgICBpZiAoIXJhd0xlYWRpbmcpIHJldHVybiBcImF1dG9cIjtcclxuXHJcbiAgICAvLyBIYW5kbGUgXCJhdXRvXCIgbGVhZGluZ1xyXG4gICAgaWYgKHJhd0xlYWRpbmcgPT09IFwiYXV0b1wiIHx8IHJhd0xlYWRpbmcgPT09IFwiQXV0b1wiKSB7XHJcbiAgICAgIHJldHVybiBmb250U2l6ZSA/IGZvbnRTaXplICogMS4yIDogXCJhdXRvXCI7IC8vIEluRGVzaWduIGRlZmF1bHQgYXV0byBsZWFkaW5nIGlzIDEyMCVcclxuICAgIH1cclxuXHJcbiAgICAvLyBIYW5kbGUgbnVtZXJpYyBsZWFkaW5nIChpbiBwb2ludHMpXHJcbiAgICBjb25zdCBudW1lcmljTGVhZGluZyA9IHBhcnNlRmxvYXQocmF3TGVhZGluZyk7XHJcbiAgICBpZiAoIWlzTmFOKG51bWVyaWNMZWFkaW5nKSkge1xyXG4gICAgICByZXR1cm4gbnVtZXJpY0xlYWRpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFuZGxlIHBlcmNlbnRhZ2UtYmFzZWQgbGVhZGluZ1xyXG4gICAgaWYgKHJhd0xlYWRpbmcuaW5jbHVkZXMoXCIlXCIpKSB7XHJcbiAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBwYXJzZUZsb2F0KHJhd0xlYWRpbmcucmVwbGFjZShcIiVcIiwgXCJcIikpO1xyXG4gICAgICByZXR1cm4gZm9udFNpemUgPyAoZm9udFNpemUgKiBwZXJjZW50YWdlKSAvIDEwMCA6IFwiYXV0b1wiO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBcImF1dG9cIjtcclxuICB9XHJcblxyXG4gIC8vIE5FVzogRGV0ZXJtaW5lIHRoZSB0eXBlIG9mIGxlYWRpbmcgYmVpbmcgdXNlZFxyXG4gIGRldGVybWluZUxlYWRpbmdUeXBlKHJhd0xlYWRpbmcpIHtcclxuICAgIGlmICghcmF3TGVhZGluZyB8fCByYXdMZWFkaW5nID09PSBcImF1dG9cIiB8fCByYXdMZWFkaW5nID09PSBcIkF1dG9cIikge1xyXG4gICAgICByZXR1cm4gXCJhdXRvXCI7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHJhd0xlYWRpbmcuaW5jbHVkZXMoXCIlXCIpKSB7XHJcbiAgICAgIHJldHVybiBcInBlcmNlbnRhZ2VcIjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWlzTmFOKHBhcnNlRmxvYXQocmF3TGVhZGluZykpKSB7XHJcbiAgICAgIHJldHVybiBcImFic29sdXRlXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFwidW5rbm93blwiO1xyXG4gIH1cclxuXHJcbiAgLy8gTkVXOiBDYWxjdWxhdGUgZWZmZWN0aXZlIGxpbmUgaGVpZ2h0IGZvciBDU1MgcmVuZGVyaW5nXHJcbiAgY2FsY3VsYXRlRWZmZWN0aXZlTGluZUhlaWdodChsZWFkaW5nLCBmb250U2l6ZSkge1xyXG4gICAgaWYgKGxlYWRpbmcgPT09IFwiYXV0b1wiKSB7XHJcbiAgICAgIHJldHVybiAxLjI7IC8vIENTUyBsaW5lLWhlaWdodCByYXRpbyBmb3IgYXV0b1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgbGVhZGluZyA9PT0gXCJudW1iZXJcIiAmJiBmb250U2l6ZSkge1xyXG4gICAgICAvLyBDb252ZXJ0IHBvaW50cyB0byBDU1MgbGluZS1oZWlnaHQgcmF0aW9cclxuICAgICAgcmV0dXJuIE1hdGgubWF4KDAuOCwgbGVhZGluZyAvIGZvbnRTaXplKTsgLy8gRW5zdXJlIG1pbmltdW0gbGluZSBoZWlnaHRcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gMS4yOyAvLyBGYWxsYmFja1xyXG4gIH1cclxuXHJcbiAgZ2V0U3R5bGVzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc3R5bGVzO1xyXG4gIH1cclxuXHJcbiAgZ2V0UmVzb3VyY2VzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVzb3VyY2VzO1xyXG4gIH1cclxuXHJcbiAgZ2V0Rm9udE1hcCgpIHtcclxuICAgIHJldHVybiB0aGlzLmZvbnRNYXA7XHJcbiAgfVxyXG5cclxuICAvLyBBZGQgbWV0aG9kcyB0byByZXR1cm4gc3R5bGUgYW5kIGZvbnQgZGVmaW5pdGlvbnMgZm9yIGRlYnVnXHJcbiAgZ2V0UGFyYWdyYXBoU3R5bGVzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc3R5bGVzLnBhcmFncmFwaDtcclxuICB9XHJcbiAgZ2V0Q2hhcmFjdGVyU3R5bGVzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc3R5bGVzLmNoYXJhY3RlcjtcclxuICB9XHJcbiAgZ2V0Rm9udERlZmluaXRpb25zKCkge1xyXG4gICAgLy8gUHJlZmVyIHBsYWluIG9iamVjdCBmb3IgZGVidWcgb3V0cHV0XHJcbiAgICBpZiAodGhpcy5yZXNvdXJjZXMgJiYgdGhpcy5yZXNvdXJjZXMuZm9udHMpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucmVzb3VyY2VzLmZvbnRzO1xyXG4gICAgfVxyXG4gICAgLy8gRmFsbGJhY2s6IGNvbnZlcnQgZm9udE1hcCB0byBvYmplY3RcclxuICAgIGlmICh0aGlzLmZvbnRNYXAgJiYgdHlwZW9mIHRoaXMuZm9udE1hcC5lbnRyaWVzID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyh0aGlzLmZvbnRNYXAuZW50cmllcygpKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7fTtcclxuICB9XHJcblxyXG4gIC8vIEZJWEVEOiBBZGQgbWV0aG9kIHRvIGFjY2VzcyBkb2N1bWVudCBwcmVmZXJlbmNlcyBpbmNsdWRpbmcgVmlld1ByZWZlcmVuY2VzXHJcbiAgZ2V0RG9jdW1lbnRJbmZvKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRJbmZvO1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTdHlsZVBhcnNlcjtcclxuIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiSURNTFV0aWxzIiwiU3R5bGVQYXJzZXIiLCJjb25zdHJ1Y3RvciIsInN0eWxlcyIsInBhcmFncmFwaCIsImNoYXJhY3RlciIsIm9iamVjdCIsInRhYmxlIiwiY2VsbCIsInJlc291cmNlcyIsImZvbnRzIiwiY29sb3JzIiwiZ3JhZGllbnRzIiwiZm9udE1hcCIsIk1hcCIsInBhcnNlUmVzb3VyY2VGaWxlIiwiZmlsZU5hbWUiLCJjb250ZW50IiwieG1sUGFyc2VyIiwiY29uc29sZSIsImxvZyIsInBhcnNlZCIsInBhcnNlIiwicmVzb3VyY2VOYW1lIiwiYmFzZW5hbWUiLCJpbmNsdWRlcyIsImV4dHJhY3RTdHlsZXMiLCJleHRyYWN0Rm9udHMiLCJleHRyYWN0R3JhcGhpY3MiLCJleHRyYWN0UHJlZmVyZW5jZXMiLCJlcnJvciIsIm1lc3NhZ2UiLCJzdHlsZXNEYXRhIiwiU3R5bGVzIiwiUm9vdFBhcmFncmFwaFN0eWxlR3JvdXAiLCJleHRyYWN0UGFyYWdyYXBoU3R5bGVzIiwiUm9vdENoYXJhY3RlclN0eWxlR3JvdXAiLCJleHRyYWN0Q2hhcmFjdGVyU3R5bGVzIiwic3R5bGVHcm91cCIsImV4dHJhY3RTdHlsZXNSZWN1cnNpdmVseSIsImdyb3VwIiwiUGFyYWdyYXBoU3R5bGUiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwic3R5bGUiLCJmb250UmVmIiwiZXh0cmFjdEZvbnRGcm9tU3R5bGUiLCJmb250U2l6ZSIsInBhcnNlRmxvYXQiLCJyYXdMZWFkaW5nIiwicHJvY2Vzc2VkTGVhZGluZyIsInByb2Nlc3NMZWFkaW5nVmFsdWUiLCJzZWxmIiwibmFtZSIsImZvbnRTdHlsZSIsInBvaW50U2l6ZSIsImxlYWRpbmciLCJsZWFkaW5nVHlwZSIsImRldGVybWluZUxlYWRpbmdUeXBlIiwiZWZmZWN0aXZlTGluZUhlaWdodCIsImNhbGN1bGF0ZUVmZmVjdGl2ZUxpbmVIZWlnaHQiLCJhbGlnbm1lbnQiLCJsZWZ0SW5kZW50IiwicmlnaHRJbmRlbnQiLCJmaXJzdExpbmVJbmRlbnQiLCJzcGFjZUJlZm9yZSIsInNwYWNlQWZ0ZXIiLCJ0cmFja2luZyIsImtlcm5pbmciLCJob3Jpem9udGFsU2NhbGUiLCJ2ZXJ0aWNhbFNjYWxlIiwiYXBwbGllZEZvbnQiLCJvcmlnaW5hbEZvbnRSZWYiLCJmaWxsQ29sb3IiLCJyYXdTdHlsZSIsIlBhcmFncmFwaFN0eWxlR3JvdXAiLCJzdWJHcm91cHMiLCJQcm9wZXJ0aWVzIiwiQXBwbGllZEZvbnQiLCJGb250RmFtaWx5IiwiQ2hhcmFjdGVyU3R5bGUiLCJzdHJva2VDb2xvciIsIkNoYXJhY3RlclN0eWxlR3JvdXAiLCJmb250c0RhdGEiLCJGb250cyIsImZvbnRGYW1pbGllcyIsImZhbWlseSIsImZhbWlseUluZm8iLCJGb250IiwiZm9udExpc3QiLCJmb250IiwiZm9udEluZm8iLCJmb250RmFtaWx5IiwicG9zdFNjcmlwdE5hbWUiLCJzdGF0dXMiLCJmb250U3R5bGVOYW1lIiwicHVzaCIsInNldCIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJzaXplIiwiZ3JhcGhpY3NEYXRhIiwiZ3JhcGhpY3MiLCJHcmFwaGljIiwiQ29sb3IiLCJjb2xvciIsIm1vZGVsIiwic3BhY2UiLCJjeWFuIiwibWFnZW50YSIsInllbGxvdyIsImJsYWNrIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwiR3JhZGllbnQiLCJncmFkaWVudCIsInR5cGUiLCJncmFkaWVudFN0b3BzIiwiZXh0cmFjdEdyYWRpZW50U3RvcHMiLCJzdG9wcyIsIkdyYWRpZW50U3RvcCIsInN0b3BMaXN0Iiwic3RvcCIsInN0b3BDb2xvciIsImxvY2F0aW9uIiwibWlkcG9pbnQiLCJwcmVmZXJlbmNlc0RhdGEiLCJwcmVmcyIsIlByZWZlcmVuY2VzIiwiZG9jdW1lbnRJbmZvIiwicHJlZmVyZW5jZXMiLCJkb2N1bWVudFByZWZlcmVuY2VzIiwiZXh0cmFjdERvY3VtZW50UHJlZnMiLCJEb2N1bWVudFByZWZlcmVuY2UiLCJ2aWV3UHJlZmVyZW5jZXMiLCJleHRyYWN0Vmlld1ByZWZzIiwiVmlld1ByZWZlcmVuY2UiLCJndWlkZVByZWZlcmVuY2VzIiwiZXh0cmFjdEd1aWRlUHJlZnMiLCJHdWlkZVByZWZlcmVuY2UiLCJncmlkUHJlZmVyZW5jZXMiLCJleHRyYWN0R3JpZFByZWZzIiwiR3JpZFByZWZlcmVuY2UiLCJtYXJnaW5QcmVmZXJlbmNlcyIsImV4dHJhY3RNYXJnaW5QcmVmcyIsIk1hcmdpblByZWZlcmVuY2UiLCJjb2x1bW5QcmVmZXJlbmNlcyIsImV4dHJhY3RDb2x1bW5QcmVmcyIsIkNvbHVtblByZWZlcmVuY2UiLCJkb2NQcmVmIiwicGFnZVdpZHRoIiwicGFnZUhlaWdodCIsImxlZnQiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImNvbHVtbkNvdW50IiwicGFyc2VJbnQiLCJjb2x1bW5HdXR0ZXIiLCJmYWNpbmdQYWdlcyIsImFsbG93UGFnZVNodWZmbGUiLCJzbHVnQmxlZWRUeXBlIiwiZG9jdW1lbnRCbGVlZFRvcE9mZnNldCIsImRvY3VtZW50QmxlZWRCb3R0b21PZmZzZXQiLCJkb2N1bWVudEJsZWVkSW5zaWRlT3JMZWZ0T2Zmc2V0IiwiZG9jdW1lbnRCbGVlZE91dHNpZGVPclJpZ2h0T2Zmc2V0Iiwidmlld1ByZWYiLCJob3Jpem9udGFsTWVhc3VyZW1lbnRVbml0cyIsInZlcnRpY2FsTWVhc3VyZW1lbnRVbml0cyIsInJ1bGVyT3JpZ2luIiwic2hvd1J1bGVycyIsImd1aWRlUHJlZiIsInJ1bGVyR3VpZGVDb2xvciIsImd1aWRlc0luQmFjayIsImd1aWRlc0xvY2tlZCIsImd1aWRlc1Nob3duIiwiZ3VpZGVzU25hcHRvIiwiZ3JpZFByZWYiLCJiYXNlbGluZVN0YXJ0IiwiYmFzZWxpbmVEaXZpc2lvbiIsImJhc2VsaW5lU2hvd24iLCJiYXNlbGluZVNuYXB0byIsImRvY3VtZW50R3JpZFNob3duIiwiZG9jdW1lbnRHcmlkU25hcHRvIiwibWFyZ2luUHJlZiIsImNvbHVtblByZWYiLCJ0ZXh0Q29sdW1uQ291bnQiLCJ0ZXh0Q29sdW1uR3V0dGVyIiwicmVzb2x2ZVN0eWxlRm9ybWF0dGluZyIsImZvcm1hdHRpbmciLCJyZXNvbHZlZCIsImhhc0FueUZvcm1hdHRpbmciLCJwYXJhZ3JhcGhTdHlsZSIsImNoYXJhY3RlclN0eWxlIiwiZm9udFJlZmVyZW5jZSIsImRpcmVjdEZvbnRTdHlsZSIsImRpcmVjdEZvbnRSZWYiLCJkaXJlY3RGb250U2l6ZSIsInBTdHlsZSIsInJlc29sdmVGb250UmVmZXJlbmNlIiwiY1N0eWxlIiwidW5kZWZpbmVkIiwiZ2V0RGVmYXVsdEZvbnQiLCJoYXMiLCJyZXNvbHZlZEZvbnQiLCJnZXQiLCJmYW1pbHlJZCIsImVudHJpZXMiLCJ0b0xvd2VyQ2FzZSIsImZpcnN0RmFtaWx5IiwidmFsdWVzIiwiaW5mZXJGb250RnJvbUNvbnRleHQiLCJmaXJzdEZvbnRGYW1pbHkiLCJnZXRTdG9yeVN0eWxlU3VtbWFyeSIsInN0b3J5Iiwic3VtbWFyeSIsImZvcm1hdHRlZENvbnRlbnQiLCJmaXJzdEZvcm1hdHRlZCIsImZpbmQiLCJpdGVtIiwiaXNCcmVhayIsImZtdCIsIm51bWVyaWNMZWFkaW5nIiwiaXNOYU4iLCJwZXJjZW50YWdlIiwicmVwbGFjZSIsIk1hdGgiLCJtYXgiLCJnZXRTdHlsZXMiLCJnZXRSZXNvdXJjZXMiLCJnZXRGb250TWFwIiwiZ2V0UGFyYWdyYXBoU3R5bGVzIiwiZ2V0Q2hhcmFjdGVyU3R5bGVzIiwiZ2V0Rm9udERlZmluaXRpb25zIiwiZnJvbUVudHJpZXMiLCJnZXREb2N1bWVudEluZm8iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./lib/parsers/StyleParser.js\n");

/***/ }),

/***/ "./lib/parsers/XMLParser.js":
/*!**********************************!*\
  !*** ./lib/parsers/XMLParser.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { XMLParser } = __webpack_require__(/*! fast-xml-parser */ \"fast-xml-parser\");\nclass IDMLXMLParser {\n    constructor(){\n        // Critical parser configuration for IDML files\n        this.xmlParser = new XMLParser({\n            ignoreAttributes: false,\n            attributeNamePrefix: \"@_\",\n            removeNSPrefix: true,\n            parseAttributeValue: true,\n            trimValues: true,\n            parseTrueNumberOnly: false,\n            textNodeName: \"#text\"\n        });\n    }\n    parse(xmlContent) {\n        try {\n            return this.xmlParser.parse(xmlContent);\n        } catch (error) {\n            console.error(\"Error parsing XML:\", error);\n            throw error;\n        }\n    }\n    parseWithErrorHandling(xmlContent, fileName = \"unknown\") {\n        try {\n            const parsed = this.xmlParser.parse(xmlContent);\n            return {\n                success: true,\n                data: parsed,\n                error: null\n            };\n        } catch (error) {\n            console.error(`Error parsing XML file ${fileName}:`, error.message);\n            return {\n                success: false,\n                data: null,\n                error: error.message\n            };\n        }\n    }\n    validateXMLStructure(xmlContent) {\n        if (!xmlContent || typeof xmlContent !== \"string\") {\n            return {\n                valid: false,\n                error: \"Invalid XML content\"\n            };\n        }\n        if (!xmlContent.trim().startsWith(\"<\")) {\n            return {\n                valid: false,\n                error: \"Content does not appear to be XML\"\n            };\n        }\n        try {\n            this.xmlParser.parse(xmlContent);\n            return {\n                valid: true,\n                error: null\n            };\n        } catch (error) {\n            return {\n                valid: false,\n                error: error.message\n            };\n        }\n    }\n    extractRootElement(parsedXML) {\n        if (!parsedXML || typeof parsedXML !== \"object\") {\n            return null;\n        }\n        const keys = Object.keys(parsedXML);\n        if (keys.length === 1) {\n            return parsedXML[keys[0]];\n        }\n        return parsedXML;\n    }\n    findElementsByAttribute(obj, attributeName, attributeValue = null) {\n        const results = [];\n        const search = (current, path = \"\")=>{\n            if (typeof current === \"object\" && current !== null) {\n                // Check if current object has the attribute\n                if (current[attributeName] !== undefined) {\n                    if (attributeValue === null || current[attributeName] === attributeValue) {\n                        results.push({\n                            element: current,\n                            path: path,\n                            value: current[attributeName]\n                        });\n                    }\n                }\n                // Recursively search nested objects\n                Object.keys(current).forEach((key)=>{\n                    if (typeof current[key] === \"object\") {\n                        search(current[key], path ? `${path}.${key}` : key);\n                    }\n                });\n            }\n        };\n        search(obj);\n        return results;\n    }\n    findElementsByType(obj, elementType) {\n        const results = [];\n        const search = (current, path = \"\")=>{\n            if (typeof current === \"object\" && current !== null) {\n                // Check if we found the element type\n                if (current[elementType]) {\n                    const elements = Array.isArray(current[elementType]) ? current[elementType] : [\n                        current[elementType]\n                    ];\n                    elements.forEach((element, index)=>{\n                        results.push({\n                            element: element,\n                            path: `${path}.${elementType}[${index}]`,\n                            type: elementType\n                        });\n                    });\n                }\n                // Continue searching in nested objects\n                Object.keys(current).forEach((key)=>{\n                    if (typeof current[key] === \"object\" && key !== elementType) {\n                        search(current[key], path ? `${path}.${key}` : key);\n                    }\n                });\n            }\n        };\n        search(obj);\n        return results;\n    }\n    extractAllAttributes(obj, prefix = \"@_\") {\n        const attributes = {};\n        const extract = (current, path = \"\")=>{\n            if (typeof current === \"object\" && current !== null) {\n                Object.keys(current).forEach((key)=>{\n                    if (key.startsWith(prefix)) {\n                        const fullPath = path ? `${path}.${key}` : key;\n                        attributes[fullPath] = current[key];\n                    } else if (typeof current[key] === \"object\") {\n                        extract(current[key], path ? `${path}.${key}` : key);\n                    }\n                });\n            }\n        };\n        extract(obj);\n        return attributes;\n    }\n    getElementHierarchy(obj, maxDepth = 5) {\n        const hierarchy = {};\n        const buildHierarchy = (current, depth = 0, path = \"\")=>{\n            if (depth >= maxDepth || typeof current !== \"object\" || current === null) {\n                return typeof current;\n            }\n            const structure = {};\n            Object.keys(current).forEach((key)=>{\n                if (Array.isArray(current[key])) {\n                    structure[key] = {\n                        type: \"array\",\n                        length: current[key].length,\n                        children: current[key].length > 0 ? buildHierarchy(current[key][0], depth + 1, `${path}.${key}[0]`) : null\n                    };\n                } else if (typeof current[key] === \"object\" && current[key] !== null) {\n                    structure[key] = {\n                        type: \"object\",\n                        children: buildHierarchy(current[key], depth + 1, `${path}.${key}`)\n                    };\n                } else {\n                    structure[key] = {\n                        type: typeof current[key],\n                        value: key.startsWith(\"@_\") ? current[key] : null\n                    };\n                }\n            });\n            return structure;\n        };\n        return buildHierarchy(obj);\n    }\n    normalizeXMLContent(xmlContent) {\n        return xmlContent.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\").trim();\n    }\n    logXMLStructure(parsedXML, maxDepth = 3) {\n        console.log(\"XML Structure Analysis:\");\n        const analyzeStructure = (obj, depth = 0, prefix = \"\")=>{\n            if (depth >= maxDepth || typeof obj !== \"object\" || obj === null) {\n                return;\n            }\n            Object.keys(obj).forEach((key)=>{\n                const value = obj[key];\n                const indent = \"  \".repeat(depth);\n                if (Array.isArray(value)) {\n                    console.log(`${indent}${prefix}${key}: Array[${value.length}]`);\n                    if (value.length > 0 && typeof value[0] === \"object\") {\n                        analyzeStructure(value[0], depth + 1, `${prefix}${key}[0].`);\n                    }\n                } else if (typeof value === \"object\" && value !== null) {\n                    console.log(`${indent}${prefix}${key}: Object`);\n                    analyzeStructure(value, depth + 1, `${prefix}${key}.`);\n                } else if (key.startsWith(\"@_\")) {\n                    console.log(`${indent}${prefix}${key}: ${typeof value} = ${value}`);\n                } else {\n                    console.log(`${indent}${prefix}${key}: ${typeof value}`);\n                }\n            });\n        };\n        analyzeStructure(parsedXML);\n    }\n}\nmodule.exports = IDMLXMLParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvcGFyc2Vycy9YTUxQYXJzZXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sRUFBRUEsU0FBUyxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBRTlCLE1BQU1DO0lBQ0pDLGFBQWM7UUFDWiwrQ0FBK0M7UUFDL0MsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSUosVUFBVTtZQUM3Qkssa0JBQWtCO1lBQ2xCQyxxQkFBcUI7WUFDckJDLGdCQUFnQjtZQUNoQkMscUJBQXFCO1lBQ3JCQyxZQUFZO1lBQ1pDLHFCQUFxQjtZQUNyQkMsY0FBYztRQUNoQjtJQUNGO0lBRUFDLE1BQU1DLFVBQVUsRUFBRTtRQUNoQixJQUFJO1lBQ0YsT0FBTyxJQUFJLENBQUNULFNBQVMsQ0FBQ1EsS0FBSyxDQUFDQztRQUM5QixFQUFFLE9BQU9DLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLHNCQUFzQkE7WUFDcEMsTUFBTUE7UUFDUjtJQUNGO0lBRUFFLHVCQUF1QkgsVUFBVSxFQUFFSSxXQUFXLFNBQVMsRUFBRTtRQUN2RCxJQUFJO1lBQ0YsTUFBTUMsU0FBUyxJQUFJLENBQUNkLFNBQVMsQ0FBQ1EsS0FBSyxDQUFDQztZQUNwQyxPQUFPO2dCQUFFTSxTQUFTO2dCQUFNQyxNQUFNRjtnQkFBUUosT0FBTztZQUFLO1FBQ3BELEVBQUUsT0FBT0EsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsQ0FBQyx1QkFBdUIsRUFBRUcsU0FBUyxDQUFDLENBQUMsRUFBRUgsTUFBTU8sT0FBTztZQUNsRSxPQUFPO2dCQUFFRixTQUFTO2dCQUFPQyxNQUFNO2dCQUFNTixPQUFPQSxNQUFNTyxPQUFPO1lBQUM7UUFDNUQ7SUFDRjtJQUVBQyxxQkFBcUJULFVBQVUsRUFBRTtRQUMvQixJQUFJLENBQUNBLGNBQWMsT0FBT0EsZUFBZSxVQUFVO1lBQ2pELE9BQU87Z0JBQUVVLE9BQU87Z0JBQU9ULE9BQU87WUFBc0I7UUFDdEQ7UUFFQSxJQUFJLENBQUNELFdBQVdXLElBQUksR0FBR0MsVUFBVSxDQUFDLE1BQU07WUFDdEMsT0FBTztnQkFBRUYsT0FBTztnQkFBT1QsT0FBTztZQUFvQztRQUNwRTtRQUVBLElBQUk7WUFDRixJQUFJLENBQUNWLFNBQVMsQ0FBQ1EsS0FBSyxDQUFDQztZQUNyQixPQUFPO2dCQUFFVSxPQUFPO2dCQUFNVCxPQUFPO1lBQUs7UUFDcEMsRUFBRSxPQUFPQSxPQUFPO1lBQ2QsT0FBTztnQkFBRVMsT0FBTztnQkFBT1QsT0FBT0EsTUFBTU8sT0FBTztZQUFDO1FBQzlDO0lBQ0Y7SUFFQUssbUJBQW1CQyxTQUFTLEVBQUU7UUFDNUIsSUFBSSxDQUFDQSxhQUFhLE9BQU9BLGNBQWMsVUFBVTtZQUMvQyxPQUFPO1FBQ1Q7UUFFQSxNQUFNQyxPQUFPQyxPQUFPRCxJQUFJLENBQUNEO1FBQ3pCLElBQUlDLEtBQUtFLE1BQU0sS0FBSyxHQUFHO1lBQ3JCLE9BQU9ILFNBQVMsQ0FBQ0MsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUMzQjtRQUVBLE9BQU9EO0lBQ1Q7SUFFQUksd0JBQXdCQyxHQUFHLEVBQUVDLGFBQWEsRUFBRUMsaUJBQWlCLElBQUksRUFBRTtRQUNqRSxNQUFNQyxVQUFVLEVBQUU7UUFFbEIsTUFBTUMsU0FBUyxDQUFDQyxTQUFTQyxPQUFPLEVBQUU7WUFDaEMsSUFBSSxPQUFPRCxZQUFZLFlBQVlBLFlBQVksTUFBTTtnQkFDbkQsNENBQTRDO2dCQUM1QyxJQUFJQSxPQUFPLENBQUNKLGNBQWMsS0FBS00sV0FBVztvQkFDeEMsSUFBSUwsbUJBQW1CLFFBQVFHLE9BQU8sQ0FBQ0osY0FBYyxLQUFLQyxnQkFBZ0I7d0JBQ3hFQyxRQUFRSyxJQUFJLENBQUM7NEJBQ1hDLFNBQVNKOzRCQUNUQyxNQUFNQTs0QkFDTkksT0FBT0wsT0FBTyxDQUFDSixjQUFjO3dCQUMvQjtvQkFDRjtnQkFDRjtnQkFFQSxvQ0FBb0M7Z0JBQ3BDSixPQUFPRCxJQUFJLENBQUNTLFNBQVNNLE9BQU8sQ0FBQ0MsQ0FBQUE7b0JBQzNCLElBQUksT0FBT1AsT0FBTyxDQUFDTyxJQUFJLEtBQUssVUFBVTt3QkFDcENSLE9BQU9DLE9BQU8sQ0FBQ08sSUFBSSxFQUFFTixPQUFPLENBQUMsRUFBRUEsS0FBSyxDQUFDLEVBQUVNLElBQUksQ0FBQyxHQUFHQTtvQkFDakQ7Z0JBQ0Y7WUFDRjtRQUNGO1FBRUFSLE9BQU9KO1FBQ1AsT0FBT0c7SUFDVDtJQUVBVSxtQkFBbUJiLEdBQUcsRUFBRWMsV0FBVyxFQUFFO1FBQ25DLE1BQU1YLFVBQVUsRUFBRTtRQUVsQixNQUFNQyxTQUFTLENBQUNDLFNBQVNDLE9BQU8sRUFBRTtZQUNoQyxJQUFJLE9BQU9ELFlBQVksWUFBWUEsWUFBWSxNQUFNO2dCQUNuRCxxQ0FBcUM7Z0JBQ3JDLElBQUlBLE9BQU8sQ0FBQ1MsWUFBWSxFQUFFO29CQUN4QixNQUFNQyxXQUFXQyxNQUFNQyxPQUFPLENBQUNaLE9BQU8sQ0FBQ1MsWUFBWSxJQUMvQ1QsT0FBTyxDQUFDUyxZQUFZLEdBQ3BCO3dCQUFDVCxPQUFPLENBQUNTLFlBQVk7cUJBQUM7b0JBRTFCQyxTQUFTSixPQUFPLENBQUMsQ0FBQ0YsU0FBU1M7d0JBQ3pCZixRQUFRSyxJQUFJLENBQUM7NEJBQ1hDLFNBQVNBOzRCQUNUSCxNQUFNLENBQUMsRUFBRUEsS0FBSyxDQUFDLEVBQUVRLFlBQVksQ0FBQyxFQUFFSSxNQUFNLENBQUMsQ0FBQzs0QkFDeENDLE1BQU1MO3dCQUNSO29CQUNGO2dCQUNGO2dCQUVBLHVDQUF1QztnQkFDdkNqQixPQUFPRCxJQUFJLENBQUNTLFNBQVNNLE9BQU8sQ0FBQ0MsQ0FBQUE7b0JBQzNCLElBQUksT0FBT1AsT0FBTyxDQUFDTyxJQUFJLEtBQUssWUFBWUEsUUFBUUUsYUFBYTt3QkFDM0RWLE9BQU9DLE9BQU8sQ0FBQ08sSUFBSSxFQUFFTixPQUFPLENBQUMsRUFBRUEsS0FBSyxDQUFDLEVBQUVNLElBQUksQ0FBQyxHQUFHQTtvQkFDakQ7Z0JBQ0Y7WUFDRjtRQUNGO1FBRUFSLE9BQU9KO1FBQ1AsT0FBT0c7SUFDVDtJQUVBaUIscUJBQXFCcEIsR0FBRyxFQUFFcUIsU0FBUyxJQUFJLEVBQUU7UUFDdkMsTUFBTUMsYUFBYSxDQUFDO1FBRXBCLE1BQU1DLFVBQVUsQ0FBQ2xCLFNBQVNDLE9BQU8sRUFBRTtZQUNqQyxJQUFJLE9BQU9ELFlBQVksWUFBWUEsWUFBWSxNQUFNO2dCQUNuRFIsT0FBT0QsSUFBSSxDQUFDUyxTQUFTTSxPQUFPLENBQUNDLENBQUFBO29CQUMzQixJQUFJQSxJQUFJbkIsVUFBVSxDQUFDNEIsU0FBUzt3QkFDMUIsTUFBTUcsV0FBV2xCLE9BQU8sQ0FBQyxFQUFFQSxLQUFLLENBQUMsRUFBRU0sSUFBSSxDQUFDLEdBQUdBO3dCQUMzQ1UsVUFBVSxDQUFDRSxTQUFTLEdBQUduQixPQUFPLENBQUNPLElBQUk7b0JBQ3JDLE9BQU8sSUFBSSxPQUFPUCxPQUFPLENBQUNPLElBQUksS0FBSyxVQUFVO3dCQUMzQ1csUUFBUWxCLE9BQU8sQ0FBQ08sSUFBSSxFQUFFTixPQUFPLENBQUMsRUFBRUEsS0FBSyxDQUFDLEVBQUVNLElBQUksQ0FBQyxHQUFHQTtvQkFDbEQ7Z0JBQ0Y7WUFDRjtRQUNGO1FBRUFXLFFBQVF2QjtRQUNSLE9BQU9zQjtJQUNUO0lBRUFHLG9CQUFvQnpCLEdBQUcsRUFBRTBCLFdBQVcsQ0FBQyxFQUFFO1FBQ3JDLE1BQU1DLFlBQVksQ0FBQztRQUVuQixNQUFNQyxpQkFBaUIsQ0FBQ3ZCLFNBQVN3QixRQUFRLENBQUMsRUFBRXZCLE9BQU8sRUFBRTtZQUNuRCxJQUFJdUIsU0FBU0gsWUFBWSxPQUFPckIsWUFBWSxZQUFZQSxZQUFZLE1BQU07Z0JBQ3hFLE9BQU8sT0FBT0E7WUFDaEI7WUFFQSxNQUFNeUIsWUFBWSxDQUFDO1lBQ25CakMsT0FBT0QsSUFBSSxDQUFDUyxTQUFTTSxPQUFPLENBQUNDLENBQUFBO2dCQUMzQixJQUFJSSxNQUFNQyxPQUFPLENBQUNaLE9BQU8sQ0FBQ08sSUFBSSxHQUFHO29CQUMvQmtCLFNBQVMsQ0FBQ2xCLElBQUksR0FBRzt3QkFDZk8sTUFBTTt3QkFDTnJCLFFBQVFPLE9BQU8sQ0FBQ08sSUFBSSxDQUFDZCxNQUFNO3dCQUMzQmlDLFVBQVUxQixPQUFPLENBQUNPLElBQUksQ0FBQ2QsTUFBTSxHQUFHLElBQzVCOEIsZUFBZXZCLE9BQU8sQ0FBQ08sSUFBSSxDQUFDLEVBQUUsRUFBRWlCLFFBQVEsR0FBRyxDQUFDLEVBQUV2QixLQUFLLENBQUMsRUFBRU0sSUFBSSxHQUFHLENBQUMsSUFDOUQ7b0JBQ047Z0JBQ0YsT0FBTyxJQUFJLE9BQU9QLE9BQU8sQ0FBQ08sSUFBSSxLQUFLLFlBQVlQLE9BQU8sQ0FBQ08sSUFBSSxLQUFLLE1BQU07b0JBQ3BFa0IsU0FBUyxDQUFDbEIsSUFBSSxHQUFHO3dCQUNmTyxNQUFNO3dCQUNOWSxVQUFVSCxlQUFldkIsT0FBTyxDQUFDTyxJQUFJLEVBQUVpQixRQUFRLEdBQUcsQ0FBQyxFQUFFdkIsS0FBSyxDQUFDLEVBQUVNLElBQUksQ0FBQztvQkFDcEU7Z0JBQ0YsT0FBTztvQkFDTGtCLFNBQVMsQ0FBQ2xCLElBQUksR0FBRzt3QkFDZk8sTUFBTSxPQUFPZCxPQUFPLENBQUNPLElBQUk7d0JBQ3pCRixPQUFPRSxJQUFJbkIsVUFBVSxDQUFDLFFBQVFZLE9BQU8sQ0FBQ08sSUFBSSxHQUFHO29CQUMvQztnQkFDRjtZQUNGO1lBRUEsT0FBT2tCO1FBQ1Q7UUFFQSxPQUFPRixlQUFlNUI7SUFDeEI7SUFFQWdDLG9CQUFvQm5ELFVBQVUsRUFBRTtRQUM5QixPQUFPQSxXQUNKb0QsT0FBTyxDQUFDLFNBQVMsTUFDakJBLE9BQU8sQ0FBQyxPQUFPLE1BQ2Z6QyxJQUFJO0lBQ1Q7SUFFQTBDLGdCQUFnQnZDLFNBQVMsRUFBRStCLFdBQVcsQ0FBQyxFQUFFO1FBQ3ZDM0MsUUFBUW9ELEdBQUcsQ0FBQztRQUVaLE1BQU1DLG1CQUFtQixDQUFDcEMsS0FBSzZCLFFBQVEsQ0FBQyxFQUFFUixTQUFTLEVBQUU7WUFDbkQsSUFBSVEsU0FBU0gsWUFBWSxPQUFPMUIsUUFBUSxZQUFZQSxRQUFRLE1BQU07Z0JBQ2hFO1lBQ0Y7WUFFQUgsT0FBT0QsSUFBSSxDQUFDSSxLQUFLVyxPQUFPLENBQUNDLENBQUFBO2dCQUN2QixNQUFNRixRQUFRVixHQUFHLENBQUNZLElBQUk7Z0JBQ3RCLE1BQU15QixTQUFTLEtBQUtDLE1BQU0sQ0FBQ1Q7Z0JBRTNCLElBQUliLE1BQU1DLE9BQU8sQ0FBQ1AsUUFBUTtvQkFDeEIzQixRQUFRb0QsR0FBRyxDQUFDLENBQUMsRUFBRUUsT0FBTyxFQUFFaEIsT0FBTyxFQUFFVCxJQUFJLFFBQVEsRUFBRUYsTUFBTVosTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDOUQsSUFBSVksTUFBTVosTUFBTSxHQUFHLEtBQUssT0FBT1ksS0FBSyxDQUFDLEVBQUUsS0FBSyxVQUFVO3dCQUNwRDBCLGlCQUFpQjFCLEtBQUssQ0FBQyxFQUFFLEVBQUVtQixRQUFRLEdBQUcsQ0FBQyxFQUFFUixPQUFPLEVBQUVULElBQUksSUFBSSxDQUFDO29CQUM3RDtnQkFDRixPQUFPLElBQUksT0FBT0YsVUFBVSxZQUFZQSxVQUFVLE1BQU07b0JBQ3REM0IsUUFBUW9ELEdBQUcsQ0FBQyxDQUFDLEVBQUVFLE9BQU8sRUFBRWhCLE9BQU8sRUFBRVQsSUFBSSxRQUFRLENBQUM7b0JBQzlDd0IsaUJBQWlCMUIsT0FBT21CLFFBQVEsR0FBRyxDQUFDLEVBQUVSLE9BQU8sRUFBRVQsSUFBSSxDQUFDLENBQUM7Z0JBQ3ZELE9BQU8sSUFBSUEsSUFBSW5CLFVBQVUsQ0FBQyxPQUFPO29CQUMvQlYsUUFBUW9ELEdBQUcsQ0FBQyxDQUFDLEVBQUVFLE9BQU8sRUFBRWhCLE9BQU8sRUFBRVQsSUFBSSxFQUFFLEVBQUUsT0FBT0YsTUFBTSxHQUFHLEVBQUVBLE1BQU0sQ0FBQztnQkFDcEUsT0FBTztvQkFDTDNCLFFBQVFvRCxHQUFHLENBQUMsQ0FBQyxFQUFFRSxPQUFPLEVBQUVoQixPQUFPLEVBQUVULElBQUksRUFBRSxFQUFFLE9BQU9GLE1BQU0sQ0FBQztnQkFDekQ7WUFDRjtRQUNGO1FBRUEwQixpQkFBaUJ6QztJQUNuQjtBQUNGO0FBRUE0QyxPQUFPQyxPQUFPLEdBQUd0RSIsInNvdXJjZXMiOlsid2VicGFjazovL2lkbWwtdmlld2VyLy4vbGliL3BhcnNlcnMvWE1MUGFyc2VyLmpzPzBkMmIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBYTUxQYXJzZXIgfSA9IHJlcXVpcmUoJ2Zhc3QteG1sLXBhcnNlcicpO1xyXG5cclxuY2xhc3MgSURNTFhNTFBhcnNlciB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAvLyBDcml0aWNhbCBwYXJzZXIgY29uZmlndXJhdGlvbiBmb3IgSURNTCBmaWxlc1xyXG4gICAgdGhpcy54bWxQYXJzZXIgPSBuZXcgWE1MUGFyc2VyKHtcclxuICAgICAgaWdub3JlQXR0cmlidXRlczogZmFsc2UsXHJcbiAgICAgIGF0dHJpYnV0ZU5hbWVQcmVmaXg6ICdAXycsXHJcbiAgICAgIHJlbW92ZU5TUHJlZml4OiB0cnVlLCAvLyBDUklUSUNBTDogUmVtb3ZlcyBpZFBrZzogcHJlZml4ZXNcclxuICAgICAgcGFyc2VBdHRyaWJ1dGVWYWx1ZTogdHJ1ZSwgLy8gUGFyc2UgbnVtYmVycyBhbmQgYm9vbGVhbnNcclxuICAgICAgdHJpbVZhbHVlczogdHJ1ZSxcclxuICAgICAgcGFyc2VUcnVlTnVtYmVyT25seTogZmFsc2UsXHJcbiAgICAgIHRleHROb2RlTmFtZTogJyN0ZXh0JyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcGFyc2UoeG1sQ29udGVudCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgcmV0dXJuIHRoaXMueG1sUGFyc2VyLnBhcnNlKHhtbENvbnRlbnQpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcGFyc2luZyBYTUw6JywgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHBhcnNlV2l0aEVycm9ySGFuZGxpbmcoeG1sQ29udGVudCwgZmlsZU5hbWUgPSAndW5rbm93bicpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMueG1sUGFyc2VyLnBhcnNlKHhtbENvbnRlbnQpO1xyXG4gICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBkYXRhOiBwYXJzZWQsIGVycm9yOiBudWxsIH07XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBwYXJzaW5nIFhNTCBmaWxlICR7ZmlsZU5hbWV9OmAsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZGF0YTogbnVsbCwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhbGlkYXRlWE1MU3RydWN0dXJlKHhtbENvbnRlbnQpIHtcclxuICAgIGlmICgheG1sQ29udGVudCB8fCB0eXBlb2YgeG1sQ29udGVudCAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlLCBlcnJvcjogJ0ludmFsaWQgWE1MIGNvbnRlbnQnIH07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF4bWxDb250ZW50LnRyaW0oKS5zdGFydHNXaXRoKCc8JykpIHtcclxuICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlLCBlcnJvcjogJ0NvbnRlbnQgZG9lcyBub3QgYXBwZWFyIHRvIGJlIFhNTCcgfTtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLnhtbFBhcnNlci5wYXJzZSh4bWxDb250ZW50KTtcclxuICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yOiBudWxsIH07XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBleHRyYWN0Um9vdEVsZW1lbnQocGFyc2VkWE1MKSB7XHJcbiAgICBpZiAoIXBhcnNlZFhNTCB8fCB0eXBlb2YgcGFyc2VkWE1MICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocGFyc2VkWE1MKTtcclxuICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICByZXR1cm4gcGFyc2VkWE1MW2tleXNbMF1dO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwYXJzZWRYTUw7XHJcbiAgfVxyXG5cclxuICBmaW5kRWxlbWVudHNCeUF0dHJpYnV0ZShvYmosIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlID0gbnVsbCkge1xyXG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xyXG4gICAgXHJcbiAgICBjb25zdCBzZWFyY2ggPSAoY3VycmVudCwgcGF0aCA9ICcnKSA9PiB7XHJcbiAgICAgIGlmICh0eXBlb2YgY3VycmVudCA9PT0gJ29iamVjdCcgJiYgY3VycmVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIGN1cnJlbnQgb2JqZWN0IGhhcyB0aGUgYXR0cmlidXRlXHJcbiAgICAgICAgaWYgKGN1cnJlbnRbYXR0cmlidXRlTmFtZV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgaWYgKGF0dHJpYnV0ZVZhbHVlID09PSBudWxsIHx8IGN1cnJlbnRbYXR0cmlidXRlTmFtZV0gPT09IGF0dHJpYnV0ZVZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgZWxlbWVudDogY3VycmVudCxcclxuICAgICAgICAgICAgICBwYXRoOiBwYXRoLFxyXG4gICAgICAgICAgICAgIHZhbHVlOiBjdXJyZW50W2F0dHJpYnV0ZU5hbWVdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgc2VhcmNoIG5lc3RlZCBvYmplY3RzXHJcbiAgICAgICAgT2JqZWN0LmtleXMoY3VycmVudCkuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50W2tleV0gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHNlYXJjaChjdXJyZW50W2tleV0sIHBhdGggPyBgJHtwYXRofS4ke2tleX1gIDoga2V5KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBzZWFyY2gob2JqKTtcclxuICAgIHJldHVybiByZXN1bHRzO1xyXG4gIH1cclxuXHJcbiAgZmluZEVsZW1lbnRzQnlUeXBlKG9iaiwgZWxlbWVudFR5cGUpIHtcclxuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcclxuICAgIFxyXG4gICAgY29uc3Qgc2VhcmNoID0gKGN1cnJlbnQsIHBhdGggPSAnJykgPT4ge1xyXG4gICAgICBpZiAodHlwZW9mIGN1cnJlbnQgPT09ICdvYmplY3QnICYmIGN1cnJlbnQgIT09IG51bGwpIHtcclxuICAgICAgICAvLyBDaGVjayBpZiB3ZSBmb3VuZCB0aGUgZWxlbWVudCB0eXBlXHJcbiAgICAgICAgaWYgKGN1cnJlbnRbZWxlbWVudFR5cGVdKSB7XHJcbiAgICAgICAgICBjb25zdCBlbGVtZW50cyA9IEFycmF5LmlzQXJyYXkoY3VycmVudFtlbGVtZW50VHlwZV0pIFxyXG4gICAgICAgICAgICA/IGN1cnJlbnRbZWxlbWVudFR5cGVdIFxyXG4gICAgICAgICAgICA6IFtjdXJyZW50W2VsZW1lbnRUeXBlXV07XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCxcclxuICAgICAgICAgICAgICBwYXRoOiBgJHtwYXRofS4ke2VsZW1lbnRUeXBlfVske2luZGV4fV1gLFxyXG4gICAgICAgICAgICAgIHR5cGU6IGVsZW1lbnRUeXBlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDb250aW51ZSBzZWFyY2hpbmcgaW4gbmVzdGVkIG9iamVjdHNcclxuICAgICAgICBPYmplY3Qua2V5cyhjdXJyZW50KS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnRba2V5XSA9PT0gJ29iamVjdCcgJiYga2V5ICE9PSBlbGVtZW50VHlwZSkge1xyXG4gICAgICAgICAgICBzZWFyY2goY3VycmVudFtrZXldLCBwYXRoID8gYCR7cGF0aH0uJHtrZXl9YCA6IGtleSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgc2VhcmNoKG9iaik7XHJcbiAgICByZXR1cm4gcmVzdWx0cztcclxuICB9XHJcblxyXG4gIGV4dHJhY3RBbGxBdHRyaWJ1dGVzKG9iaiwgcHJlZml4ID0gJ0BfJykge1xyXG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHt9O1xyXG4gICAgXHJcbiAgICBjb25zdCBleHRyYWN0ID0gKGN1cnJlbnQsIHBhdGggPSAnJykgPT4ge1xyXG4gICAgICBpZiAodHlwZW9mIGN1cnJlbnQgPT09ICdvYmplY3QnICYmIGN1cnJlbnQgIT09IG51bGwpIHtcclxuICAgICAgICBPYmplY3Qua2V5cyhjdXJyZW50KS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgocHJlZml4KSkge1xyXG4gICAgICAgICAgICBjb25zdCBmdWxsUGF0aCA9IHBhdGggPyBgJHtwYXRofS4ke2tleX1gIDoga2V5O1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzW2Z1bGxQYXRoXSA9IGN1cnJlbnRba2V5XTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGN1cnJlbnRba2V5XSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgZXh0cmFjdChjdXJyZW50W2tleV0sIHBhdGggPyBgJHtwYXRofS4ke2tleX1gIDoga2V5KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBleHRyYWN0KG9iaik7XHJcbiAgICByZXR1cm4gYXR0cmlidXRlcztcclxuICB9XHJcblxyXG4gIGdldEVsZW1lbnRIaWVyYXJjaHkob2JqLCBtYXhEZXB0aCA9IDUpIHtcclxuICAgIGNvbnN0IGhpZXJhcmNoeSA9IHt9O1xyXG4gICAgXHJcbiAgICBjb25zdCBidWlsZEhpZXJhcmNoeSA9IChjdXJyZW50LCBkZXB0aCA9IDAsIHBhdGggPSAnJykgPT4ge1xyXG4gICAgICBpZiAoZGVwdGggPj0gbWF4RGVwdGggfHwgdHlwZW9mIGN1cnJlbnQgIT09ICdvYmplY3QnIHx8IGN1cnJlbnQgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIGN1cnJlbnQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHN0cnVjdHVyZSA9IHt9O1xyXG4gICAgICBPYmplY3Qua2V5cyhjdXJyZW50KS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY3VycmVudFtrZXldKSkge1xyXG4gICAgICAgICAgc3RydWN0dXJlW2tleV0gPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdhcnJheScsXHJcbiAgICAgICAgICAgIGxlbmd0aDogY3VycmVudFtrZXldLmxlbmd0aCxcclxuICAgICAgICAgICAgY2hpbGRyZW46IGN1cnJlbnRba2V5XS5sZW5ndGggPiAwIFxyXG4gICAgICAgICAgICAgID8gYnVpbGRIaWVyYXJjaHkoY3VycmVudFtrZXldWzBdLCBkZXB0aCArIDEsIGAke3BhdGh9LiR7a2V5fVswXWApXHJcbiAgICAgICAgICAgICAgOiBudWxsXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGN1cnJlbnRba2V5XSA9PT0gJ29iamVjdCcgJiYgY3VycmVudFtrZXldICE9PSBudWxsKSB7XHJcbiAgICAgICAgICBzdHJ1Y3R1cmVba2V5XSA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXHJcbiAgICAgICAgICAgIGNoaWxkcmVuOiBidWlsZEhpZXJhcmNoeShjdXJyZW50W2tleV0sIGRlcHRoICsgMSwgYCR7cGF0aH0uJHtrZXl9YClcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHN0cnVjdHVyZVtrZXldID0ge1xyXG4gICAgICAgICAgICB0eXBlOiB0eXBlb2YgY3VycmVudFtrZXldLFxyXG4gICAgICAgICAgICB2YWx1ZToga2V5LnN0YXJ0c1dpdGgoJ0BfJykgPyBjdXJyZW50W2tleV0gOiBudWxsXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICByZXR1cm4gc3RydWN0dXJlO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gYnVpbGRIaWVyYXJjaHkob2JqKTtcclxuICB9XHJcblxyXG4gIG5vcm1hbGl6ZVhNTENvbnRlbnQoeG1sQ29udGVudCkge1xyXG4gICAgcmV0dXJuIHhtbENvbnRlbnRcclxuICAgICAgLnJlcGxhY2UoL1xcclxcbi9nLCAnXFxuJylcclxuICAgICAgLnJlcGxhY2UoL1xcci9nLCAnXFxuJylcclxuICAgICAgLnRyaW0oKTtcclxuICB9XHJcblxyXG4gIGxvZ1hNTFN0cnVjdHVyZShwYXJzZWRYTUwsIG1heERlcHRoID0gMykge1xyXG4gICAgY29uc29sZS5sb2coJ1hNTCBTdHJ1Y3R1cmUgQW5hbHlzaXM6Jyk7XHJcbiAgICBcclxuICAgIGNvbnN0IGFuYWx5emVTdHJ1Y3R1cmUgPSAob2JqLCBkZXB0aCA9IDAsIHByZWZpeCA9ICcnKSA9PiB7XHJcbiAgICAgIGlmIChkZXB0aCA+PSBtYXhEZXB0aCB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gb2JqW2tleV07XHJcbiAgICAgICAgY29uc3QgaW5kZW50ID0gJyAgJy5yZXBlYXQoZGVwdGgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYCR7aW5kZW50fSR7cHJlZml4fSR7a2V5fTogQXJyYXlbJHt2YWx1ZS5sZW5ndGh9XWApO1xyXG4gICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDAgJiYgdHlwZW9mIHZhbHVlWzBdID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBhbmFseXplU3RydWN0dXJlKHZhbHVlWzBdLCBkZXB0aCArIDEsIGAke3ByZWZpeH0ke2tleX1bMF0uYCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgJHtpbmRlbnR9JHtwcmVmaXh9JHtrZXl9OiBPYmplY3RgKTtcclxuICAgICAgICAgIGFuYWx5emVTdHJ1Y3R1cmUodmFsdWUsIGRlcHRoICsgMSwgYCR7cHJlZml4fSR7a2V5fS5gKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGtleS5zdGFydHNXaXRoKCdAXycpKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgJHtpbmRlbnR9JHtwcmVmaXh9JHtrZXl9OiAke3R5cGVvZiB2YWx1ZX0gPSAke3ZhbHVlfWApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgJHtpbmRlbnR9JHtwcmVmaXh9JHtrZXl9OiAke3R5cGVvZiB2YWx1ZX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBhbmFseXplU3RydWN0dXJlKHBhcnNlZFhNTCk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IElETUxYTUxQYXJzZXI7ICJdLCJuYW1lcyI6WyJYTUxQYXJzZXIiLCJyZXF1aXJlIiwiSURNTFhNTFBhcnNlciIsImNvbnN0cnVjdG9yIiwieG1sUGFyc2VyIiwiaWdub3JlQXR0cmlidXRlcyIsImF0dHJpYnV0ZU5hbWVQcmVmaXgiLCJyZW1vdmVOU1ByZWZpeCIsInBhcnNlQXR0cmlidXRlVmFsdWUiLCJ0cmltVmFsdWVzIiwicGFyc2VUcnVlTnVtYmVyT25seSIsInRleHROb2RlTmFtZSIsInBhcnNlIiwieG1sQ29udGVudCIsImVycm9yIiwiY29uc29sZSIsInBhcnNlV2l0aEVycm9ySGFuZGxpbmciLCJmaWxlTmFtZSIsInBhcnNlZCIsInN1Y2Nlc3MiLCJkYXRhIiwibWVzc2FnZSIsInZhbGlkYXRlWE1MU3RydWN0dXJlIiwidmFsaWQiLCJ0cmltIiwic3RhcnRzV2l0aCIsImV4dHJhY3RSb290RWxlbWVudCIsInBhcnNlZFhNTCIsImtleXMiLCJPYmplY3QiLCJsZW5ndGgiLCJmaW5kRWxlbWVudHNCeUF0dHJpYnV0ZSIsIm9iaiIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVWYWx1ZSIsInJlc3VsdHMiLCJzZWFyY2giLCJjdXJyZW50IiwicGF0aCIsInVuZGVmaW5lZCIsInB1c2giLCJlbGVtZW50IiwidmFsdWUiLCJmb3JFYWNoIiwia2V5IiwiZmluZEVsZW1lbnRzQnlUeXBlIiwiZWxlbWVudFR5cGUiLCJlbGVtZW50cyIsIkFycmF5IiwiaXNBcnJheSIsImluZGV4IiwidHlwZSIsImV4dHJhY3RBbGxBdHRyaWJ1dGVzIiwicHJlZml4IiwiYXR0cmlidXRlcyIsImV4dHJhY3QiLCJmdWxsUGF0aCIsImdldEVsZW1lbnRIaWVyYXJjaHkiLCJtYXhEZXB0aCIsImhpZXJhcmNoeSIsImJ1aWxkSGllcmFyY2h5IiwiZGVwdGgiLCJzdHJ1Y3R1cmUiLCJjaGlsZHJlbiIsIm5vcm1hbGl6ZVhNTENvbnRlbnQiLCJyZXBsYWNlIiwibG9nWE1MU3RydWN0dXJlIiwibG9nIiwiYW5hbHl6ZVN0cnVjdHVyZSIsImluZGVudCIsInJlcGVhdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./lib/parsers/XMLParser.js\n");

/***/ }),

/***/ "./lib/processors/ImageProcessor.js":
/*!******************************************!*\
  !*** ./lib/processors/ImageProcessor.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst IDMLUtils = __webpack_require__(/*! ../utils/IDMLUtils */ \"./lib/utils/IDMLUtils.js\");\nclass ImageProcessor {\n    constructor(fileExtractor){\n        this.fileExtractor = fileExtractor;\n    }\n    async processIDMLPackage(idmlFilePath, packageStructure, extractedImages = []) {\n        console.log(\"Processing IDML package:\", idmlFilePath);\n        try {\n            // Process linked images and update elements\n            const imageMap = await this.buildImageMap(packageStructure);\n            // Add extracted images to the map\n            extractedImages.forEach((embeddedInfo)=>{\n                imageMap.set(embeddedInfo.fileName, embeddedInfo.extractedPath);\n                console.log(`📎 Added extracted image to map: ${embeddedInfo.fileName}`);\n            });\n            return imageMap;\n        } catch (error) {\n            console.error(\"Error processing IDML package:\", error);\n            throw error;\n        }\n    }\n    async buildImageMap(packageStructure) {\n        const imageMap = new Map();\n        console.log(\"Building image map...\");\n        // Check all files in resourceMap first\n        if (packageStructure.resourceMap) {\n            packageStructure.resourceMap.forEach((filePath, fileName)=>{\n                if (IDMLUtils.isImageFile(fileName)) {\n                    imageMap.set(fileName, filePath);\n                    // Also add without extension for matching\n                    const nameWithoutExt = path.parse(fileName).name;\n                    imageMap.set(nameWithoutExt, filePath);\n                    console.log(\"Added to image map:\", fileName, \"->\", filePath);\n                }\n            });\n        }\n        // Check Links folder if it exists\n        if (packageStructure.linksFolder && fs.existsSync(packageStructure.linksFolder)) {\n            const files = fs.readdirSync(packageStructure.linksFolder);\n            console.log(\"Links folder contents:\", files);\n            for (const fileName of files){\n                if (IDMLUtils.isImageFile(fileName)) {\n                    const fullPath = path.join(packageStructure.linksFolder, fileName);\n                    imageMap.set(fileName, fullPath);\n                    const nameWithoutExt = path.parse(fileName).name;\n                    imageMap.set(nameWithoutExt, fullPath);\n                    console.log(\"Added from Links folder:\", fileName, \"->\", fullPath);\n                }\n            }\n        }\n        console.log(`📸 Image map built with ${imageMap.size / 2} unique images`);\n        Array.from(imageMap.keys()).forEach((key)=>{\n            console.log(\"  - Image key:\", key);\n        });\n        return imageMap;\n    }\n    async processLinkedResources(documentData, packageStructure, extractedImages = []) {\n        console.log(\"Processing linked resources...\");\n        const imageMap = await this.buildImageMap(packageStructure);\n        // Add extracted images to the map\n        extractedImages.forEach((embeddedInfo)=>{\n            imageMap.set(embeddedInfo.fileName, embeddedInfo.extractedPath);\n            console.log(`📎 Added extracted image to map: ${embeddedInfo.fileName}`);\n        });\n        // Process elements and link them to package resources\n        for (const element of documentData.elements || []){\n            if (this.hasImageReference(element)) {\n                await this.linkElementToImage(element, packageStructure, imageMap, extractedImages);\n            }\n            // Also check for nested elements (groups, etc.)\n            if (element.groupItems && element.groupItems.length > 0) {\n                for (const groupItem of element.groupItems){\n                    if (this.hasImageReference(groupItem)) {\n                        await this.linkElementToImage(groupItem, packageStructure, imageMap, extractedImages);\n                    }\n                }\n            }\n        }\n        await this.processTextImages(documentData, packageStructure, imageMap);\n        console.log(\"✅ Linked resources processed\");\n        console.log(`📊 Summary: ${imageMap.size - extractedImages.length} external images, ${extractedImages.length} extracted embedded images`);\n    }\n    hasImageReference(element) {\n        // ENHANCED: Check for embedded images first\n        if (element.isContentFrame && element.hasPlacedContent) {\n            return true;\n        }\n        // Check for embedded image data in element properties\n        if (element.placedContent && (element.placedContent.href || element.placedContent.imageTypeName || element.placedContent.actualPpi)) {\n            return true;\n        }\n        // For rectangles, check if they could be content frames\n        if (element.type === \"Rectangle\") {\n            return true; // Most rectangles are potential image containers\n        }\n        // ENHANCED: Check for embedded image indicators\n        const hasEmbeddedImage = element.name && element.name.includes(\"[\") && element.name.includes(\"]\") || // [YOUR IMAGE HERE]\n        element.fillColor && element.fillColor.includes(\"Image/\") || element.Properties && (element.Properties.Image || element.Properties.PlacedImage || element.Properties.EPS || element.Properties.PDF);\n        return hasEmbeddedImage || element.Image || element.Link || element.PlacedImage || element.imageReference || element.linkedImage;\n    }\n    findImageByName(searchName, imageMap) {\n        if (!searchName) return null;\n        // Clean the search name\n        const cleanName = searchName.replace(/^file:\\/\\//, \"\").replace(/^\\//, \"\");\n        const baseName = path.basename(cleanName);\n        const nameWithoutExt = path.parse(baseName).name;\n        // Try exact match first\n        if (imageMap.has(baseName)) {\n            return baseName;\n        }\n        // Try without extension\n        if (imageMap.has(nameWithoutExt)) {\n            const possibleFile = Array.from(imageMap.keys()).find((key)=>path.parse(key).name === nameWithoutExt && IDMLUtils.isImageFile(key));\n            if (possibleFile) return possibleFile;\n        }\n        // Try partial matching\n        const possibleMatches = Array.from(imageMap.keys()).filter((key)=>key.toLowerCase().includes(cleanName.toLowerCase()) || cleanName.toLowerCase().includes(key.toLowerCase()));\n        if (possibleMatches.length > 0) {\n            return possibleMatches[0];\n        }\n        return null;\n    }\n    async linkElementToImage(element, packageStructure, imageMap, extractedImages) {\n        console.log(\"\\uD83D\\uDD0D Linking images for element:\", element.id || element.self, element.type);\n        try {\n            let imageFileName = null;\n            const uploadId = packageStructure.uploadId;\n            // ENHANCED: Check for embedded images first\n            const embeddedInfo = this.detectEmbeddedImages(element);\n            if (embeddedInfo.hasEmbeddedContent || embeddedInfo.isPlaceholder) {\n                console.log(`📎 Found embedded content in ${element.id || element.self}`);\n                // Check if we have an extracted image for this element\n                const matchingExtractedImage = extractedImages?.find((img)=>img.originalPath.includes(element.id || element.self) || img.fileName.toLowerCase().includes(\"tesla\") // Based on your debug data\n                );\n                if (matchingExtractedImage) {\n                    // Use the extracted image\n                    element.linkedImage = {\n                        fileName: matchingExtractedImage.fileName,\n                        url: `/api/image/${uploadId}/ExtractedImages/${matchingExtractedImage.fileName}`,\n                        originalPath: matchingExtractedImage.extractedPath,\n                        isEmbedded: true,\n                        isExtracted: true,\n                        embeddedType: embeddedInfo.embeddedType,\n                        embeddedData: embeddedInfo.embeddedData,\n                        framePosition: element.position,\n                        imagePosition: element.imagePosition\n                    };\n                    console.log(`✅ Linked extracted embedded image: ${matchingExtractedImage.fileName}`);\n                    return true;\n                } else {\n                    // Fallback to placeholder if no extracted image found\n                    element.linkedImage = {\n                        fileName: `embedded_${element.id || element.self}.${IDMLUtils.getImageExtension(embeddedInfo.embeddedType)}`,\n                        url: null,\n                        isEmbedded: true,\n                        embeddedType: embeddedInfo.embeddedType,\n                        embeddedData: embeddedInfo.embeddedData,\n                        framePosition: element.position,\n                        imagePosition: element.imagePosition\n                    };\n                    console.log(`📋 Created placeholder for embedded image: ${element.id || element.self}`);\n                    return true;\n                }\n            }\n            // Existing external image linking logic...\n            if (element.isContentFrame && element.hasPlacedContent) {\n                if (element.placedContent?.href) {\n                    const referencedImage = path.basename(element.placedContent.href);\n                    imageFileName = this.findImageByName(referencedImage, imageMap);\n                }\n                if (!imageFileName) {\n                    const availableImages = Array.from(imageMap.keys()).filter((key)=>IDMLUtils.isImageFile(key));\n                    if (availableImages.length > 0) {\n                        imageFileName = availableImages[0];\n                        console.log(`📎 Auto-linking ${imageFileName} to content frame ${element.id || element.self}`);\n                    }\n                }\n            }\n            if (imageFileName && imageMap.has(imageFileName)) {\n                element.linkedImage = {\n                    fileName: imageFileName,\n                    url: `/api/image/${uploadId}/${imageFileName}`,\n                    originalPath: imageMap.get(imageFileName),\n                    isEmbedded: false,\n                    framePosition: element.position,\n                    imagePosition: element.imagePosition\n                };\n                console.log(`✅ External image linked: ${imageFileName}`);\n                return true;\n            }\n            console.log(`❌ No image linked for ${element.id || element.self}`);\n            return false;\n        } catch (error) {\n            console.error(`❌ Error linking image:`, error);\n            return false;\n        }\n    }\n    detectEmbeddedImages(element) {\n        const embeddedIndicators = {\n            hasEmbeddedContent: false,\n            embeddedType: null,\n            embeddedData: null,\n            embeddedFileName: null,\n            isPlaceholder: false\n        };\n        // Check if element name indicates placeholder\n        if (element.name && (element.name.includes(\"[YOUR IMAGE HERE]\") || element.name.includes(\"[IMAGE]\") || element.name.toLowerCase().includes(\"placeholder\"))) {\n            embeddedIndicators.isPlaceholder = true;\n            embeddedIndicators.embeddedType = \"placeholder\";\n        }\n        // ENHANCED: Check for actual embedded image data\n        if (element.placedContent) {\n            const content = element.placedContent;\n            // Check if href looks like an embedded reference\n            if (content.href && content.isEmbedded) {\n                embeddedIndicators.hasEmbeddedContent = true;\n                embeddedIndicators.embeddedType = content.imageTypeName || \"unknown\";\n                embeddedIndicators.embeddedData = content.href;\n                embeddedIndicators.embeddedFileName = `${content.href}.${IDMLUtils.getImageExtension(content.imageTypeName)}`;\n            }\n        }\n        return embeddedIndicators;\n    }\n    findElementImageReference(element, imageMap) {\n        // Check for placed content references\n        if (element.placedContent?.href) {\n            const imageName = path.basename(element.placedContent.href);\n            return this.findImageByName(imageName, imageMap);\n        }\n        // Check element name for image hints\n        if (element.name && element.name !== \"$ID/\") {\n            return this.findImageByName(element.name, imageMap);\n        }\n        return null;\n    }\n    matchImageBySize(element, imageMap) {\n        // TODO: Implement image size matching if metadata available\n        return null;\n    }\n    async processTextImages(documentData, packageStructure, imageMap) {\n        // Process images that might be embedded in text stories\n        Object.values(documentData.stories || {}).forEach((story)=>{\n            if (story.content && story.content.formattedContent) {\n                story.content.formattedContent.forEach((content)=>{\n                    // Look for image references in text content\n                    if (content.text && content.text.includes(\"Image/\")) {\n                        // Extract and process image references\n                        const imageRefs = content.text.match(/Image\\/[^\\s\\]]+/g);\n                        if (imageRefs) {\n                            imageRefs.forEach((ref)=>{\n                                const imageName = ref.replace(\"Image/\", \"\");\n                                const fileName = this.findImageByName(imageName, imageMap);\n                                if (fileName) {\n                                    content.linkedImage = fileName;\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        });\n    }\n    async analyzeSpreadForImageReferences(idmlPath, xmlParser) {\n        console.log(\"\\n\\uD83D\\uDD0D === ANALYZING SPREADS FOR IMAGE REFERENCES ===\");\n        const spreadAnalysis = {\n            spreadsAnalyzed: 0,\n            imageReferences: [],\n            linkReferences: [],\n            placedContentDetails: []\n        };\n        try {\n            const extractedData = await this.fileExtractor.extractIDMLContents(idmlPath);\n            // Find spread files\n            const spreadFiles = Object.keys(extractedData).filter((name)=>name.startsWith(\"Spreads/\") && name.endsWith(\".xml\"));\n            // Analyze each spread\n            for (const spreadFile of spreadFiles){\n                try {\n                    const spreadContent = extractedData[spreadFile];\n                    const analysis = this.analyzeSpreadXMLForImages(spreadContent, spreadFile, xmlParser);\n                    spreadAnalysis.spreadsAnalyzed++;\n                    spreadAnalysis.imageReferences.push(...analysis.imageReferences);\n                    spreadAnalysis.linkReferences.push(...analysis.linkReferences);\n                    spreadAnalysis.placedContentDetails.push(...analysis.placedContentDetails);\n                } catch (error) {\n                    console.error(`Error analyzing ${spreadFile}:`, error);\n                }\n            }\n            return spreadAnalysis;\n        } catch (error) {\n            console.error(\"Error analyzing spreads for image references:\", error);\n            return spreadAnalysis;\n        }\n    }\n    analyzeSpreadXMLForImages(xmlContent, fileName, xmlParser) {\n        console.log(`🔍 Analyzing ${fileName} for image references...`);\n        const analysis = {\n            imageReferences: [],\n            linkReferences: [],\n            placedContentDetails: []\n        };\n        try {\n            const parsed = xmlParser.parse(xmlContent);\n            // Look for any image-related attributes\n            const findImageRefs = (obj, path = \"\")=>{\n                if (typeof obj === \"object\" && obj !== null) {\n                    Object.keys(obj).forEach((key)=>{\n                        const value = obj[key];\n                        // Look for href attributes\n                        if (key.includes(\"href\") || key.includes(\"Href\")) {\n                            analysis.linkReferences.push({\n                                file: fileName,\n                                path: `${path}.${key}`,\n                                value: value\n                            });\n                            console.log(`🔗 Found href: ${path}.${key} = ${value}`);\n                        }\n                        // Look for image type names\n                        if (key.includes(\"ImageType\") || key.includes(\"imageType\")) {\n                            analysis.imageReferences.push({\n                                file: fileName,\n                                path: `${path}.${key}`,\n                                value: value\n                            });\n                            console.log(`🖼️ Found image type: ${path}.${key} = ${value}`);\n                        }\n                        // Look for Links or Link references\n                        if (key === \"Link\" || key === \"Links\") {\n                            analysis.linkReferences.push({\n                                file: fileName,\n                                path: `${path}.${key}`,\n                                value: JSON.stringify(value).substring(0, 200)\n                            });\n                            console.log(`🔗 Found Link object at: ${path}.${key}`);\n                        }\n                        // Look for placed content\n                        if (key.includes(\"Image\") || key.includes(\"EPS\") || key.includes(\"PDF\")) {\n                            analysis.placedContentDetails.push({\n                                file: fileName,\n                                elementType: key,\n                                path: `${path}.${key}`,\n                                details: value\n                            });\n                            console.log(`📎 Found placed content: ${key} at ${path}`);\n                        }\n                        if (typeof value === \"object\") {\n                            findImageRefs(value, path ? `${path}.${key}` : key);\n                        }\n                    });\n                }\n            };\n            findImageRefs(parsed);\n        } catch (error) {\n            console.error(`Error parsing XML in ${fileName}:`, error);\n        }\n        return analysis;\n    }\n    async extractEmbeddedImageFromSpread(idmlPath, uploadDir, xmlParser) {\n        console.log(\"\\uD83D\\uDDBC️ Extracting embedded images from spread XML...\");\n        const embeddedImages = [];\n        try {\n            const spreadAnalysis = await this.analyzeSpreadForImageReferences(idmlPath, xmlParser);\n            for (const placedContent of spreadAnalysis.placedContentDetails){\n                if (placedContent.elementType === \"Image\" && placedContent.details && placedContent.details.Properties && placedContent.details.Properties.Contents) {\n                    const base64Data = placedContent.details.Properties.Contents;\n                    console.log(`📷 Found Base64 image data: ${base64Data.length} characters`);\n                    const linkInfo = placedContent.details.Link || {};\n                    const imageName = IDMLUtils.extractImageNameFromLink(linkInfo[\"@_LinkResourceURI\"]) || \"embedded_image\";\n                    const imageType = linkInfo[\"@_LinkResourceFormat\"] || \"$ID/JPEG\";\n                    const extension = IDMLUtils.getImageExtensionFromFormat(imageType);\n                    // Create filename with timestamp to avoid conflicts\n                    const fileName = `${imageName}.${extension}`;\n                    const outputPath = path.join(uploadDir, \"ExtractedImages\", fileName);\n                    // Create directory\n                    const outputDir = path.dirname(outputPath);\n                    if (!fs.existsSync(outputDir)) {\n                        fs.mkdirSync(outputDir, {\n                            recursive: true\n                        });\n                    }\n                    try {\n                        const imageBuffer = Buffer.from(base64Data, \"base64\");\n                        fs.writeFileSync(outputPath, imageBuffer);\n                        embeddedImages.push({\n                            originalPath: placedContent.path,\n                            extractedPath: outputPath,\n                            fileName: fileName,\n                            size: imageBuffer.length,\n                            base64Length: base64Data.length,\n                            linkInfo: linkInfo,\n                            isExtracted: true\n                        });\n                        console.log(`✅ Extracted image: ${fileName} (${imageBuffer.length} bytes)`);\n                    } catch (error) {\n                        console.error(`❌ Failed to convert Base64 to image:`, error);\n                    }\n                }\n            }\n        } catch (error) {\n            console.error(\"❌ Error extracting embedded images from spread:\", error);\n        }\n        console.log(`✅ Extracted ${embeddedImages.length} embedded images from spread`);\n        return embeddedImages;\n    }\n}\nmodule.exports = ImageProcessor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/processors/ImageProcessor.js\n");

/***/ }),

/***/ "./lib/utils/ColorUtils.js":
/*!*********************************!*\
  !*** ./lib/utils/ColorUtils.js ***!
  \*********************************/
/***/ ((module) => {

eval("/**\r\n * ColorUtils.js - Comprehensive color conversion and manipulation utilities\r\n * Handles CMYK, RGB, HEX, and other color format conversions for IDML processing\r\n */ \nclass ColorUtils {\n    /**\r\n   * Convert CMYK color values to RGB\r\n   * @param {number} c - Cyan (0-100)\r\n   * @param {number} m - Magenta (0-100) \r\n   * @param {number} y - Yellow (0-100)\r\n   * @param {number} k - Black/Key (0-100)\r\n   * @returns {object} RGB object with r, g, b values (0-255)\r\n   */ static cmykToRgb(c, m, y, k) {\n        // Normalize CMYK values to 0-1 range\n        const cNorm = c / 100;\n        const mNorm = m / 100;\n        const yNorm = y / 100;\n        const kNorm = k / 100;\n        // Convert to RGB using standard formula\n        const r = Math.round(255 * (1 - cNorm) * (1 - kNorm));\n        const g = Math.round(255 * (1 - mNorm) * (1 - kNorm));\n        const b = Math.round(255 * (1 - yNorm) * (1 - kNorm));\n        return {\n            r,\n            g,\n            b\n        };\n    }\n    /**\r\n   * Convert CMYK to RGB CSS string\r\n   * @param {number} c - Cyan (0-100)\r\n   * @param {number} m - Magenta (0-100)\r\n   * @param {number} y - Yellow (0-100) \r\n   * @param {number} k - Black/Key (0-100)\r\n   * @returns {string} CSS rgb() string\r\n   */ static cmykToRgbString(c, m, y, k) {\n        const { r, g, b } = this.cmykToRgb(c, m, y, k);\n        return `rgb(${r}, ${g}, ${b})`;\n    }\n    /**\r\n   * Convert RGB to HEX\r\n   * @param {number} r - Red (0-255)\r\n   * @param {number} g - Green (0-255)\r\n   * @param {number} b - Blue (0-255)\r\n   * @returns {string} HEX color string\r\n   */ static rgbToHex(r, g, b) {\n        const toHex = (component)=>{\n            const hex = component.toString(16);\n            return hex.length === 1 ? \"0\" + hex : hex;\n        };\n        return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n    }\n    /**\r\n   * Convert CMYK to HEX\r\n   * @param {number} c - Cyan (0-100)\r\n   * @param {number} m - Magenta (0-100)\r\n   * @param {number} y - Yellow (0-100)\r\n   * @param {number} k - Black/Key (0-100)\r\n   * @returns {string} HEX color string\r\n   */ static cmykToHex(c, m, y, k) {\n        const { r, g, b } = this.cmykToRgb(c, m, y, k);\n        return this.rgbToHex(r, g, b);\n    }\n    /**\r\n   * Parse CMYK values from IDML color reference string\r\n   * @param {string} colorRef - IDML color reference (e.g., \"Color/C=1 M=18 Y=16 K=0\")\r\n   * @returns {object|null} Object with c, m, y, k values or null if not parseable\r\n   */ static parseCmykFromColorRef(colorRef) {\n        if (!colorRef || typeof colorRef !== \"string\") {\n            return null;\n        }\n        // Match CMYK pattern in IDML color references\n        const cmykMatch = colorRef.match(/Color\\/C=([\\d.]+)\\s*M=([\\d.]+)\\s*Y=([\\d.]+)\\s*K=([\\d.]+)/);\n        if (cmykMatch) {\n            const [, c, m, y, k] = cmykMatch.map((val)=>parseFloat(val));\n            return {\n                c,\n                m,\n                y,\n                k\n            };\n        }\n        return null;\n    }\n    /**\r\n   * Convert IDML color reference to RGB CSS string\r\n   * @param {string} colorRef - IDML color reference\r\n   * @returns {string} CSS color string (rgb, hex, or named color)\r\n   */ static convertIdmlColorToRgb(colorRef) {\n        if (!colorRef || colorRef === \"Color/None\") {\n            return \"transparent\";\n        }\n        // Try to parse CMYK first\n        const cmyk = this.parseCmykFromColorRef(colorRef);\n        if (cmyk) {\n            console.log(`🎨 Converting CMYK color: C=${cmyk.c} M=${cmyk.m} Y=${cmyk.y} K=${cmyk.k}`);\n            const rgbString = this.cmykToRgbString(cmyk.c, cmyk.m, cmyk.y, cmyk.k);\n            console.log(`🎨 CMYK to RGB result: ${rgbString}`);\n            return rgbString;\n        }\n        // Fallback to predefined named colors\n        const namedColors = {\n            \"Color/Black\": \"rgb(0, 0, 0)\",\n            \"Color/White\": \"rgb(255, 255, 255)\",\n            \"Color/Red\": \"rgb(255, 0, 0)\",\n            \"Color/Green\": \"rgb(0, 255, 0)\",\n            \"Color/Blue\": \"rgb(0, 0, 255)\",\n            \"Color/Cyan\": \"rgb(0, 255, 255)\",\n            \"Color/Magenta\": \"rgb(255, 0, 255)\",\n            \"Color/Yellow\": \"rgb(255, 255, 0)\",\n            \"Color/Paper\": \"rgb(255, 255, 255)\"\n        };\n        return namedColors[colorRef] || \"rgb(200, 200, 200)\";\n    }\n    /**\r\n   * Determine if a CMYK color is suitable for use as a background\r\n   * @param {number} c - Cyan (0-100)\r\n   * @param {number} m - Magenta (0-100)\r\n   * @param {number} y - Yellow (0-100)\r\n   * @param {number} k - Black/Key (0-100)\r\n   * @returns {object} Analysis result with isLightBackground boolean and reasoning\r\n   */ static analyzeCmykForBackground(c, m, y, k) {\n        const maxCMY = Math.max(c, m, y);\n        const avgCMY = (c + m + y) / 3;\n        const analysis = {\n            c,\n            m,\n            y,\n            k,\n            maxCMY,\n            avgCMY,\n            isLightBackground: false,\n            category: \"unknown\",\n            reasoning: \"\"\n        };\n        // Very light colors: low K and low CMY values\n        if (k <= 20 && maxCMY <= 30 && avgCMY <= 20) {\n            analysis.isLightBackground = true;\n            analysis.category = \"very_light\";\n            analysis.reasoning = \"Very light color suitable for background\";\n            return analysis;\n        }\n        // Light tinted colors: very low K, slightly higher CMY (like light pink, light blue, etc.)\n        if (k <= 10 && maxCMY <= 50 && avgCMY <= 25) {\n            analysis.isLightBackground = true;\n            analysis.category = \"light_tinted\";\n            analysis.reasoning = \"Light tinted color suitable for background\";\n            return analysis;\n        }\n        // Light gray: balanced CMY, moderate K\n        if (k >= 5 && k <= 60 && maxCMY <= 15 && Math.abs(c - m) <= 5 && Math.abs(m - y) <= 5) {\n            analysis.isLightBackground = true;\n            analysis.category = \"light_gray\";\n            analysis.reasoning = \"Light gray color suitable for background\";\n            return analysis;\n        }\n        // Not suitable for background\n        analysis.reasoning = \"Too dark or saturated for background use\";\n        return analysis;\n    }\n    /**\r\n   * Analyze IDML color reference for background suitability\r\n   * @param {string} colorRef - IDML color reference\r\n   * @returns {object|null} Analysis result or null if not CMYK\r\n   */ static analyzeIdmlColorForBackground(colorRef) {\n        // Handle Paper color specially\n        if (colorRef === \"Color/Paper\" || colorRef.includes(\"Paper\")) {\n            return {\n                isLightBackground: true,\n                category: \"paper\",\n                reasoning: \"InDesign Paper color - ideal for background\",\n                colorRef\n            };\n        }\n        const cmyk = this.parseCmykFromColorRef(colorRef);\n        if (!cmyk) {\n            return null;\n        }\n        const analysis = this.analyzeCmykForBackground(cmyk.c, cmyk.m, cmyk.y, cmyk.k);\n        analysis.colorRef = colorRef;\n        return analysis;\n    }\n    /**\r\n   * Get RGB brightness value (0-255, higher = brighter)\r\n   * @param {number} r - Red (0-255)\r\n   * @param {number} g - Green (0-255) \r\n   * @param {number} b - Blue (0-255)\r\n   * @returns {number} Brightness value\r\n   */ static getRgbBrightness(r, g, b) {\n        // Use relative luminance formula\n        return 0.299 * r + 0.587 * g + 0.114 * b;\n    }\n    /**\r\n   * Get brightness from CMYK values\r\n   * @param {number} c - Cyan (0-100)\r\n   * @param {number} m - Magenta (0-100)\r\n   * @param {number} y - Yellow (0-100)\r\n   * @param {number} k - Black/Key (0-100)\r\n   * @returns {number} Brightness value (0-255)\r\n   */ static getCmykBrightness(c, m, y, k) {\n        const { r, g, b } = this.cmykToRgb(c, m, y, k);\n        return this.getRgbBrightness(r, g, b);\n    }\n    /**\r\n   * Sort colors by lightness (lightest first)\r\n   * @param {Array} colorRefs - Array of IDML color references\r\n   * @returns {Array} Sorted array with lightest colors first\r\n   */ static sortColorsByLightness(colorRefs) {\n        return colorRefs.sort((a, b)=>{\n            // Analyze both colors for background suitability\n            const analysisA = this.analyzeIdmlColorForBackground(a);\n            const analysisB = this.analyzeIdmlColorForBackground(b);\n            // Prioritize actual CMYK colors over Paper color for visual interest\n            const aIsPaper = a.includes(\"Paper\");\n            const bIsPaper = b.includes(\"Paper\");\n            const aIsCmyk = !aIsPaper && analysisA && analysisA.c !== undefined;\n            const bIsCmyk = !bIsPaper && analysisB && analysisB.c !== undefined;\n            // If one is CMYK and other is Paper, prefer CMYK for visual interest\n            if (aIsCmyk && bIsPaper) return -1;\n            if (bIsCmyk && aIsPaper) return 1;\n            // If both are CMYK, sort by lightness (lower K value = lighter)\n            if (aIsCmyk && bIsCmyk) {\n                const cmykA = this.parseCmykFromColorRef(a);\n                const cmykB = this.parseCmykFromColorRef(b);\n                if (cmykA && cmykB) {\n                    // First compare by category priority (very_light > light_gray, etc.)\n                    const categoryPriority = {\n                        \"very_light\": 1,\n                        \"light_gray\": 2,\n                        \"paper\": 3,\n                        \"unknown\": 4\n                    };\n                    const priorityA = categoryPriority[analysisA.category] || 4;\n                    const priorityB = categoryPriority[analysisB.category] || 4;\n                    if (priorityA !== priorityB) {\n                        return priorityA - priorityB;\n                    }\n                    // If same category, sort by K value (lower K = lighter)\n                    return cmykA.k - cmykB.k;\n                }\n            }\n            // If both are Paper or both are unknown, maintain original order\n            return 0;\n        });\n    }\n}\n// Restore CommonJS exports\nmodule.exports = ColorUtils;\nmodule.exports.cmykToRgb = ColorUtils.cmykToRgb;\nmodule.exports.cmykToRgbString = ColorUtils.cmykToRgbString;\nmodule.exports.cmykToHex = ColorUtils.cmykToHex;\nmodule.exports.rgbToHex = ColorUtils.rgbToHex;\nmodule.exports.parseCmykFromColorRef = ColorUtils.parseCmykFromColorRef;\nmodule.exports.convertIdmlColorToRgb = ColorUtils.convertIdmlColorToRgb;\nmodule.exports.analyzeCmykForBackground = ColorUtils.analyzeCmykForBackground;\nmodule.exports.analyzeIdmlColorForBackground = ColorUtils.analyzeIdmlColorForBackground;\nmodule.exports.getRgbBrightness = ColorUtils.getRgbBrightness;\nmodule.exports.getCmykBrightness = ColorUtils.getCmykBrightness;\nmodule.exports.sortColorsByLightness = ColorUtils.sortColorsByLightness;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/utils/ColorUtils.js\n");

/***/ }),

/***/ "./lib/utils/IDMLUtils.js":
/*!********************************!*\
  !*** ./lib/utils/IDMLUtils.js ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nclass IDMLUtils {\n    static parseGeometricBounds(boundsString) {\n        console.log(\"DEBUG: boundsString =\", boundsString);\n        if (!boundsString || boundsString === \"undefined\") {\n            console.log(\"Warning: Missing geometric bounds, using defaults\");\n            return {\n                top: 0,\n                left: 0,\n                bottom: 100,\n                right: 100,\n                width: 100,\n                height: 100\n            };\n        }\n        const bounds = boundsString.split(\" \").map(parseFloat);\n        const result = {\n            top: bounds[0] || 0,\n            left: bounds[1] || 0,\n            bottom: bounds[2] || 0,\n            right: bounds[3] || 0,\n            width: (bounds[3] || 0) - (bounds[1] || 0),\n            height: (bounds[2] || 0) - (bounds[0] || 0)\n        };\n        console.log(\"Parsed bounds:\", result);\n        return result;\n    }\n    static parseTransform(transformString) {\n        if (!transformString) return {\n            a: 1,\n            b: 0,\n            c: 0,\n            d: 1,\n            tx: 0,\n            ty: 0\n        };\n        const values = transformString.split(\" \").map(parseFloat);\n        return {\n            a: values[0] || 1,\n            b: values[1] || 0,\n            c: values[2] || 0,\n            d: values[3] || 1,\n            tx: values[4] || 0,\n            ty: values[5] || 0\n        };\n    }\n    static calculateRotation(transform) {\n        // Calculate rotation angle from transform matrix\n        return Math.atan2(transform.b, transform.a) * (180 / Math.PI);\n    }\n    static calculateCorners(bounds, transform) {\n        const corners = {\n            topLeft: {\n                x: bounds.left,\n                y: bounds.top\n            },\n            topRight: {\n                x: bounds.right,\n                y: bounds.top\n            },\n            bottomLeft: {\n                x: bounds.left,\n                y: bounds.bottom\n            },\n            bottomRight: {\n                x: bounds.right,\n                y: bounds.bottom\n            }\n        };\n        // Apply transformation to corners\n        Object.keys(corners).forEach((corner)=>{\n            const point = corners[corner];\n            corners[corner] = {\n                x: transform.a * point.x + transform.c * point.y + transform.tx,\n                y: transform.b * point.x + transform.d * point.y + transform.ty\n            };\n        });\n        return corners;\n    }\n    static cmykToRgb(c, m, y, k) {\n        // Convert CMYK percentages (0-100) to RGB (0-255)\n        c = c / 100;\n        m = m / 100;\n        y = y / 100;\n        k = k / 100;\n        const r = Math.round(255 * (1 - c) * (1 - k));\n        const g = Math.round(255 * (1 - m) * (1 - k));\n        const b = Math.round(255 * (1 - y) * (1 - k));\n        return {\n            r,\n            g,\n            b\n        };\n    }\n    static parseInDesignColor(colorRef) {\n        if (!colorRef || colorRef === \"Color/None\") return null;\n        // Handle CMYK colors\n        const cmykMatch = colorRef.match(/Color\\/C=(\\d+)\\s*M=(\\d+)\\s*Y=(\\d+)\\s*K=(\\d+)/);\n        if (cmykMatch) {\n            const [, c, m, y, k] = cmykMatch.map(Number);\n            const rgb = this.cmykToRgb(c, m, y, k);\n            return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;\n        }\n        // Handle RGB colors\n        const rgbMatch = colorRef.match(/Color\\/R=(\\d+)\\s*G=(\\d+)\\s*B=(\\d+)/);\n        if (rgbMatch) {\n            const [, r, g, b] = rgbMatch.map(Number);\n            return `rgb(${r}, ${g}, ${b})`;\n        }\n        // Standard colors\n        const standardColors = {\n            \"Color/Black\": \"rgb(0, 0, 0)\",\n            \"Color/White\": \"rgb(255, 255, 255)\",\n            \"Color/Red\": \"rgb(255, 0, 0)\",\n            \"Color/Green\": \"rgb(0, 255, 0)\",\n            \"Color/Blue\": \"rgb(0, 0, 255)\",\n            \"Color/Cyan\": \"rgb(0, 255, 255)\",\n            \"Color/Magenta\": \"rgb(255, 0, 255)\",\n            \"Color/Yellow\": \"rgb(255, 255, 0)\",\n            \"Color/Paper\": \"rgb(255, 255, 255)\",\n            \"Color/Registration\": \"rgb(0, 0, 0)\"\n        };\n        return standardColors[colorRef] || null;\n    }\n    static decodeXMLEntities(text) {\n        if (!text) return \"\";\n        return text.replace(/&#x000A;/g, \"\\n\") // Line feed\n        .replace(/&#x000D;/g, \"\\r\") // Carriage return\n        .replace(/&#x0009;/g, \"\t\") // Tab\n        .replace(/&#x00A0;/g, \"\\xa0\") // Non-breaking space\n        .replace(/&#x2028;/g, \"\\u2028\") // Line separator\n        .replace(/&#x2029;/g, \"\\u2029\") // Paragraph separator\n        .replace(/&#10;/g, \"\\n\") // Decimal line feed\n        .replace(/&#13;/g, \"\\r\") // Decimal carriage return\n        .replace(/&#9;/g, \"\t\") // Decimal tab\n        .replace(/&#160;/g, \"\\xa0\") // Decimal non-breaking space\n        .replace(/&lt;/g, \"<\") // Less than\n        .replace(/&gt;/g, \">\") // Greater than\n        .replace(/&amp;/g, \"&\") // Ampersand (must be last)\n        .replace(/&quot;/g, '\"') // Quote\n        .replace(/&apos;/g, \"'\"); // Apostrophe\n    }\n    static cleanTextContent(content) {\n        return content.replace(/\\r\\n/g, \"\\n\") // Normalize Windows line breaks\n        .replace(/\\r/g, \"\\n\") // Normalize old Mac line breaks\n        .replace(/\\t/g, \"    \") // Convert tabs to spaces\n        .replace(/\\u00A0/g, \" \") // Convert non-breaking spaces\n        .replace(/ +/g, \" \") // Collapse multiple spaces\n        // REMOVED: .replace(/\\n{3,}/g, '\\n\\n')  // Allow unlimited consecutive line breaks\n        .trim();\n    }\n    static preserveLineBreaks(content) {\n        return content.replace(/\\r\\n/g, \"\\n\") // Normalize Windows line breaks\n        .replace(/\\r/g, \"\\n\") // Normalize old Mac line breaks\n        .replace(/\\u2028/g, \"\\n\") // Convert line separators\n        .replace(/\\u2029/g, \"\\n\\n\"); // Convert paragraph separators\n    // REMOVED: .replace(/\\n{3,}/g, '\\n\\n'); // Allow unlimited consecutive line breaks\n    }\n    // NEW: Clean up excessive line breaks to prevent text overflow\n    static cleanTextForRendering(text) {\n        if (!text) return \"\";\n        return text// Normalize line endings\n        .replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\")// Remove trailing whitespace on each line only\n        .replace(/[ \\t]+\\n/g, \"\\n\");\n    // DO NOT collapse multiple spaces, tabs, or newlines\n    // DO NOT trim the whole string\n    }\n    // ENHANCED: Better line break processing that preserves word spaces\n    static sophisticatedLineBreakProcessing(content) {\n        if (!content) return \"\";\n        // DEBUG: Track if problematic text is being processed\n        const hasProblematicText = content.includes(\"pavoluptusda\") || content.includes(\"pa\") && content.includes(\"voluptusda\");\n        if (hasProblematicText) {\n            console.log(\"\\uD83D\\uDD27 IDMLUtils.sophisticatedLineBreakProcessing:\");\n            console.log(\"   - Input:\", JSON.stringify(content));\n        }\n        // First clean up the content but preserve word spaces\n        let processed = this.cleanTextForRendering(content);\n        if (hasProblematicText) {\n            console.log(\"   - After cleanTextForRendering:\", JSON.stringify(processed));\n        }\n        // Normalize line breaks but don't touch word spaces\n        // processed = processed\n        //   .replace(/\\r\\n/g, '\\n')      // Normalize Windows line breaks\n        //   .replace(/\\r/g, '\\n')        // Normalize old Mac line breaks\n        //   .replace(/\\u2029/g, '\\n')    // Convert line separators\n        //   .replace(/\\u2028/g, '\\n\\n')  // Convert paragraph separators to double breaks\n        //   .replace(/\\u000A/g, '\\n');   // Convert explicit line feed characters\n        // Ensure paragraph breaks are properly spaced\n        // processed = processed.replace(/\\n\\n+/g, '\\n\\n'); // REMOVE THIS LINE to preserve all consecutive newlines\n        return processed;\n    }\n    static countWords(text) {\n        return text.split(/\\s+/).filter((word)=>word.length > 0).length;\n    }\n    static parseNumeric(value) {\n        if (value === null || value === undefined || value === \"\") return null;\n        const num = parseFloat(value);\n        return isNaN(num) ? null : num;\n    }\n    static isImageFile(fileName) {\n        const imageExtensions = [\n            \".jpg\",\n            \".jpeg\",\n            \".png\",\n            \".gif\",\n            \".tiff\",\n            \".tif\",\n            \".bmp\",\n            \".svg\",\n            \".eps\",\n            \".ai\",\n            \".psd\",\n            \".webp\",\n            \".ico\",\n            \".jfif\",\n            \".jp2\",\n            \".jpx\"\n        ];\n        return imageExtensions.some((ext)=>fileName.toLowerCase().endsWith(ext));\n    }\n    static getImageExtension(imageTypeName) {\n        const typeMap = {\n            \"$ID/JPEG\": \"jpg\",\n            \"$ID/PNG\": \"png\",\n            \"$ID/TIFF\": \"tif\",\n            \"$ID/GIF\": \"gif\",\n            \"$ID/BMP\": \"bmp\"\n        };\n        return typeMap[imageTypeName] || \"jpg\";\n    }\n    static getImageExtensionFromFormat(format) {\n        const formatMap = {\n            \"$ID/JPEG\": \"jpg\",\n            \"$ID/PNG\": \"png\",\n            \"$ID/TIFF\": \"tif\",\n            \"$ID/GIF\": \"gif\",\n            \"$ID/BMP\": \"bmp\"\n        };\n        return formatMap[format] || \"jpg\";\n    }\n    static extractImageNameFromLink(linkUri) {\n        if (!linkUri) return null;\n        // Extract filename from path like \"file:C:/Users/lalo/Downloads/Tesla-Model-3.jpg 13325 \"\n        const match = linkUri.match(/([^\\/\\\\]+)\\.[^.]+$/);\n        return match ? match[1] : null;\n    }\n    static calculateCoordinateOffset(elements) {\n        if (!elements || elements.length === 0) {\n            console.log(\"\\uD83D\\uDEAB No elements provided for coordinate offset calculation\");\n            return {\n                x: 0,\n                y: 0\n            };\n        }\n        let minX = Infinity, minY = Infinity;\n        let maxStrokeWidth = 0;\n        let validElements = 0;\n        console.log(`🔍 ANALYZING ${elements.length} elements for coordinate offset...`);\n        // First pass: find TRUE minimum coordinates across all elements\n        elements.forEach((element, index)=>{\n            const bounds = element.geometricBounds || element.originalBounds;\n            const transform = element.itemTransform || {\n                tx: 0,\n                ty: 0\n            };\n            if (bounds && (bounds.left !== undefined || bounds.top !== undefined)) {\n                // Calculate final position after transform\n                const finalX = (bounds.left || 0) + (transform.tx || 0);\n                const finalY = (bounds.top || 0) + (transform.ty || 0);\n                console.log(`   Element ${index}: bounds(${bounds.left}, ${bounds.top}) + transform(${transform.tx}, ${transform.ty}) = final(${finalX}, ${finalY})`);\n                minX = Math.min(minX, finalX);\n                minY = Math.min(minY, finalY);\n                validElements++;\n                // Track maximum stroke width for intelligent padding\n                const strokeWidth = element.strokeWeight || 0;\n                maxStrokeWidth = Math.max(maxStrokeWidth, strokeWidth);\n            } else {\n                console.log(`   Element ${index}: No valid bounds - skipping`);\n            }\n        });\n        // Handle case where no valid elements found\n        if (validElements === 0) {\n            console.log(\"⚠️  No valid elements with bounds found - using zero offset\");\n            return {\n                x: 0,\n                y: 0\n            };\n        }\n        // Reset infinite values to 0 if no valid coordinates found\n        if (minX === Infinity) minX = 0;\n        if (minY === Infinity) minY = 0;\n        console.log(`📊 ANALYSIS COMPLETE: minX=${minX}, minY=${minY}, maxStroke=${maxStrokeWidth}px, validElements=${validElements}`);\n        // ZERO-BASED OFFSET CALCULATION:\n        // The goal is to have NO OFFSET unless absolutely necessary for negative coordinates\n        let offsetX = 0;\n        let offsetY = 0;\n        // Only add offset if coordinates are actually negative\n        if (minX < 0) {\n            offsetX = Math.abs(minX);\n            console.log(`❌ Negative X detected: ${minX} → adding offset: ${offsetX}`);\n        }\n        if (minY < 0) {\n            offsetY = Math.abs(minY);\n            console.log(`❌ Negative Y detected: ${minY} → adding offset: ${offsetY}`);\n        }\n        // Add minimal stroke padding only if we already have an offset\n        if ((offsetX > 0 || offsetY > 0) && maxStrokeWidth > 0) {\n            const strokePadding = Math.ceil(maxStrokeWidth / 2);\n            if (offsetX > 0) offsetX += strokePadding;\n            if (offsetY > 0) offsetY += strokePadding;\n            console.log(`🖌️ Added stroke padding: ${strokePadding}px`);\n        }\n        console.log(`🎯 FINAL OFFSET: X=${offsetX}, Y=${offsetY}`);\n        console.log(`   ${offsetX === 0 ? \"✅ Perfect! No X offset needed\" : `⚠️ X offset: ${offsetX}px (${minX} was negative)`}`);\n        console.log(`   ${offsetY === 0 ? \"✅ Perfect! No Y offset needed\" : `⚠️ Y offset: ${offsetY}px (${minY} was negative)`}`);\n        return {\n            x: offsetX,\n            y: offsetY\n        };\n    }\n    static calculateBoundsFromPath(item) {\n        try {\n            // First try to get bounds from GeometricBounds attribute\n            if (item[\"@_GeometricBounds\"]) {\n                return this.parseGeometricBounds(item[\"@_GeometricBounds\"]);\n            }\n            // Then try path geometry\n            const pathGeometry = item?.Properties?.PathGeometry?.GeometryPathType?.PathPointArray?.PathPointType;\n            if (!pathGeometry || !Array.isArray(pathGeometry)) {\n                console.log(`Warning: No geometry found for ${item[\"@_Self\"]}, using item transform`);\n                // Fallback to item transform if available\n                const transform = this.parseTransform(item[\"@_ItemTransform\"]);\n                return {\n                    top: transform.ty || 0,\n                    left: transform.tx || 0,\n                    bottom: (transform.ty || 0) + 100,\n                    right: (transform.tx || 0) + 100,\n                    width: 100,\n                    height: 100\n                };\n            }\n            let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\n            pathGeometry.forEach((point)=>{\n                const anchor = point[\"@_Anchor\"];\n                if (anchor) {\n                    const [x, y] = anchor.split(\" \").map(parseFloat);\n                    if (!isNaN(x) && !isNaN(y)) {\n                        minX = Math.min(minX, x);\n                        maxX = Math.max(maxX, x);\n                        minY = Math.min(minY, y);\n                        maxY = Math.max(maxY, y);\n                    }\n                }\n            });\n            if (minX === Infinity || minY === Infinity) {\n                console.log(`Warning: Could not calculate bounds for ${item[\"@_Self\"]}`);\n                return {\n                    top: 0,\n                    left: 0,\n                    bottom: 100,\n                    right: 100,\n                    width: 100,\n                    height: 100\n                };\n            }\n            return {\n                top: minY,\n                left: minX,\n                bottom: maxY,\n                right: maxX,\n                width: maxX - minX,\n                height: maxY - minY\n            };\n        } catch (error) {\n            console.error(`Error calculating bounds for ${item[\"@_Self\"]}:`, error);\n            return {\n                top: 0,\n                left: 0,\n                bottom: 100,\n                right: 100,\n                width: 100,\n                height: 100\n            };\n        }\n    }\n    static calculateRelativePosition(frameBounds, contentBounds, frameTransform, contentTransform) {\n        if (!frameBounds || !contentBounds) return null;\n        return {\n            offsetX: (contentBounds.left || 0) - (frameBounds.left || 0),\n            offsetY: (contentBounds.top || 0) - (frameBounds.top || 0),\n            scaleX: contentTransform?.a || 1,\n            scaleY: contentTransform?.d || 1,\n            transformDifference: {\n                frame: frameTransform,\n                content: contentTransform\n            }\n        };\n    }\n    static calculateGap(frameBounds, contentBounds) {\n        if (!frameBounds || !contentBounds) return null;\n        return {\n            top: (contentBounds.top || 0) - (frameBounds.top || 0),\n            left: (contentBounds.left || 0) - (frameBounds.left || 0),\n            bottom: (frameBounds.bottom || 0) - (contentBounds.bottom || 0),\n            right: (frameBounds.right || 0) - (contentBounds.right || 0)\n        };\n    }\n    static calculateImagePositionInFrame(frameBounds, frameTransform, placedContent) {\n        if (!frameBounds || !placedContent?.transform) {\n            return null;\n        }\n        const imageTransform = placedContent.transform;\n        // Calculate image position relative to frame\n        const imageX = (frameBounds.left || 0) + (imageTransform.tx || 0);\n        const imageY = (frameBounds.top || 0) + (imageTransform.ty || 0);\n        // Calculate image size with scaling\n        const imageWidth = (frameBounds.width || 0) * (imageTransform.a || 1);\n        const imageHeight = (frameBounds.height || 0) * (imageTransform.d || 1);\n        return {\n            x: imageX,\n            y: imageY,\n            width: imageWidth,\n            height: imageHeight,\n            scaleX: imageTransform.a || 1,\n            scaleY: imageTransform.d || 1\n        };\n    }\n    static getXMLStructure(obj, maxDepth = 3, currentDepth = 0) {\n        if (currentDepth >= maxDepth || typeof obj !== \"object\" || obj === null) {\n            return typeof obj;\n        }\n        const structure = {};\n        Object.keys(obj).forEach((key)=>{\n            if (Array.isArray(obj[key])) {\n                structure[key] = `Array[${obj[key].length}]`;\n            } else if (typeof obj[key] === \"object\" && obj[key] !== null) {\n                structure[key] = this.getXMLStructure(obj[key], maxDepth, currentDepth + 1);\n            } else {\n                structure[key] = typeof obj[key];\n            }\n        });\n        return structure;\n    }\n    static isFormattingAttribute(attributeName) {\n        const formattingAttributes = [\n            \"@_PointSize\",\n            \"@_Leading\",\n            \"@_Tracking\",\n            \"@_FontStyle\",\n            \"@_AppliedFont\",\n            \"@_FillColor\",\n            \"@_StrokeColor\",\n            \"@_Justification\",\n            \"@_LeftIndent\",\n            \"@_RightIndent\",\n            \"@_FirstLineIndent\",\n            \"@_SpaceBefore\",\n            \"@_SpaceAfter\",\n            \"@_Alignment\"\n        ];\n        return formattingAttributes.includes(attributeName);\n    }\n    static saveDebugInfo(debugInfo, fileName) {\n        try {\n            fs.writeFileSync(fileName, JSON.stringify(debugInfo, null, 2));\n            console.log(`✅ Debug info saved to ${fileName}`);\n        } catch (error) {\n            console.error(\"❌ Error saving debug info:\", error);\n            console.log(\"Debug info (first 2000 chars):\", JSON.stringify(debugInfo, null, 2).substring(0, 2000));\n        }\n    }\n}\nmodule.exports = IDMLUtils;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/utils/IDMLUtils.js\n");

/***/ }),

/***/ "./lib/utils/InDesignTextMetrics.js":
/*!******************************************!*\
  !*** ./lib/utils/InDesignTextMetrics.js ***!
  \******************************************/
/***/ ((module) => {

eval("/**\r\n * InDesignTextMetrics.js - Precise text measurement utility for 1:1 InDesign compatibility\r\n * Handles font metrics, leading calculations, and text frame insets exactly like InDesign\r\n */ \nclass InDesignTextMetrics {\n    /**\r\n   * Calculate precise text frame dimensions including InDesign-specific insets\r\n   * @param {object} textFrame - The text frame element\r\n   * @param {object} textFramePrefs - Text frame preferences from InDesign\r\n   * @returns {object} Adjusted frame dimensions\r\n   */ static calculateTextFrameInsets(textFrame, textFramePrefs) {\n        // InDesign default text frame insets (in points)\n        const DEFAULT_INSETS = {\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0\n        };\n        // Extract insets from preferences if available\n        const insets = {\n            top: textFramePrefs?.insetSpacing?.top || textFramePrefs?.textInsets?.top || DEFAULT_INSETS.top,\n            bottom: textFramePrefs?.insetSpacing?.bottom || textFramePrefs?.textInsets?.bottom || DEFAULT_INSETS.bottom,\n            left: textFramePrefs?.insetSpacing?.left || textFramePrefs?.textInsets?.left || DEFAULT_INSETS.left,\n            right: textFramePrefs?.insetSpacing?.right || textFramePrefs?.textInsets?.right || DEFAULT_INSETS.right\n        };\n        // Calculate content area (available for text)\n        const contentArea = {\n            width: Math.max(0, textFrame.position.width - insets.left - insets.right),\n            height: Math.max(0, textFrame.position.height - insets.top - insets.bottom),\n            offsetX: insets.left,\n            offsetY: insets.top\n        };\n        return {\n            originalFrame: textFrame.position,\n            insets,\n            contentArea,\n            hasInsets: insets.top > 0 || insets.bottom > 0 || insets.left > 0 || insets.right > 0\n        };\n    }\n    /**\r\n   * Convert InDesign leading to precise CSS line-height\r\n   * @param {number|string} leading - InDesign leading value\r\n   * @param {number} fontSize - Font size in points\r\n   * @param {string} leadingType - Type of leading (auto, absolute, percentage)\r\n   * @returns {object} CSS-compatible line height info\r\n   */ static convertLeadingToCSS(leading, fontSize, leadingType = \"auto\") {\n        let cssLineHeight;\n        let lineHeightPx;\n        switch(leadingType){\n            case \"auto\":\n                // InDesign auto leading is typically 120% of font size\n                cssLineHeight = 1.2;\n                lineHeightPx = fontSize * 1.2;\n                break;\n            case \"absolute\":\n                // Leading is in points, convert to line-height ratio\n                if (typeof leading === \"number\" && leading > 0) {\n                    cssLineHeight = Math.max(0.8, leading / fontSize);\n                    lineHeightPx = leading;\n                } else {\n                    cssLineHeight = 1.2;\n                    lineHeightPx = fontSize * 1.2;\n                }\n                break;\n            case \"percentage\":\n                // Leading is percentage-based\n                const percentage = parseFloat(leading) / 100;\n                cssLineHeight = Math.max(0.8, percentage);\n                lineHeightPx = fontSize * percentage;\n                break;\n            default:\n                cssLineHeight = 1.2;\n                lineHeightPx = fontSize * 1.2;\n        }\n        return {\n            cssLineHeight: Math.round(cssLineHeight * 1000) / 1000,\n            lineHeightPx: Math.round(lineHeightPx * 100) / 100,\n            leadingType,\n            originalLeading: leading\n        };\n    }\n    /**\r\n   * Calculate first baseline offset according to InDesign rules\r\n   * @param {string} firstBaselineOffset - InDesign first baseline offset setting\r\n   * @param {number} fontSize - Font size in points\r\n   * @param {number} lineHeight - Line height in points\r\n   * @returns {number} First baseline offset in points\r\n   */ static calculateFirstBaselineOffset(firstBaselineOffset, fontSize, lineHeight) {\n        switch(firstBaselineOffset){\n            case \"AscentOffset\":\n                // Text sits at natural ascent line (default)\n                return fontSize * 0.8; // Approximate ascent for most fonts\n            case \"CapHeightOffset\":\n                // Text sits at cap height\n                return fontSize * 0.7; // Approximate cap height for most fonts\n            case \"FixedHeight\":\n                // Custom fixed height - use line height\n                return lineHeight;\n            case \"XHeightOffset\":\n                // Text sits at x-height\n                return fontSize * 0.5; // Approximate x-height for most fonts\n            default:\n                return fontSize * 0.8; // Default to ascent offset\n        }\n    }\n    /**\r\n   * Measure text accurately using canvas with InDesign-specific adjustments\r\n   * @param {string} text - Text to measure\r\n   * @param {object} textStyles - Complete text styling object\r\n   * @param {object} frameMetrics - Text frame metrics\r\n   * @returns {object} Precise text measurement data\r\n   */ static measureTextPrecisely(text, textStyles, frameMetrics) {\n        if (!text || text.trim() === \"\") {\n            return {\n                textWidth: 0,\n                textHeight: 0,\n                lineCount: 0,\n                lines: [],\n                willOverflow: false,\n                fits: true\n            };\n        }\n        // Create canvas for measurement\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        // Set font with proper fallbacks\n        const fontSize = parseFloat(textStyles.fontSize) || 12;\n        const fontFamily = textStyles.fontFamily || \"Arial, sans-serif\";\n        const fontWeight = textStyles.fontWeight || \"normal\";\n        const fontStyle = textStyles.fontStyle || \"normal\";\n        ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n        // Calculate effective content width accounting for tracking\n        const tracking = textStyles.tracking || 0;\n        const trackingAdjustment = tracking * fontSize / 1000; // Convert em to px\n        const effectiveWidth = Math.max(10, frameMetrics.contentArea.width - Math.abs(trackingAdjustment) - 2); // Leave 2px margin\n        // Split text into words for accurate wrapping, preserving line breaks\n        const words = text.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\").split(/(\\s+|\\n)/).filter((word)=>word.length > 0);\n        const lines = [];\n        let currentLine = \"\";\n        let currentLineWidth = 0;\n        // Measure space width once\n        const spaceWidth = ctx.measureText(\" \").width + trackingAdjustment;\n        for(let i = 0; i < words.length; i++){\n            const word = words[i];\n            // Handle explicit line breaks\n            if (word === \"\\n\") {\n                if (currentLine) {\n                    lines.push({\n                        text: currentLine,\n                        width: currentLineWidth\n                    });\n                    currentLine = \"\";\n                    currentLineWidth = 0;\n                }\n                continue;\n            }\n            // Skip pure whitespace (except spaces)\n            if (/^\\s+$/.test(word) && word !== \" \") {\n                continue;\n            }\n            const wordWidth = ctx.measureText(word).width + Math.max(0, word.length - 1) * trackingAdjustment;\n            // Check if word fits on current line\n            const wordWithSpaceWidth = currentLine && word !== \" \" ? wordWidth + spaceWidth : wordWidth;\n            if (currentLine && word !== \" \" && currentLineWidth + wordWithSpaceWidth > effectiveWidth) {\n                // Word doesn't fit, start new line\n                lines.push({\n                    text: currentLine,\n                    width: currentLineWidth\n                });\n                currentLine = word;\n                currentLineWidth = wordWidth;\n            } else {\n                // Word fits, add to current line\n                if (currentLine && word !== \" \") {\n                    currentLine += \" \" + word;\n                    currentLineWidth += wordWithSpaceWidth;\n                } else if (word !== \" \") {\n                    currentLine = word;\n                    currentLineWidth = wordWidth;\n                }\n            }\n        }\n        // Add the last line\n        if (currentLine) {\n            lines.push({\n                text: currentLine,\n                width: currentLineWidth\n            });\n        }\n        // Calculate text height using InDesign-accurate leading\n        const lineHeightInfo = this.convertLeadingToCSS(textStyles.leading, fontSize, textStyles.leadingType);\n        const lineCount = Math.max(1, lines.length);\n        const firstBaselineOffset = this.calculateFirstBaselineOffset(textStyles.firstBaselineOffset || \"AscentOffset\", fontSize, lineHeightInfo.lineHeightPx);\n        // Calculate total text height including first baseline offset\n        const textHeight = firstBaselineOffset + (lineCount - 1) * lineHeightInfo.lineHeightPx;\n        // Check if text overflows the available height\n        const willOverflow = textHeight > frameMetrics.contentArea.height;\n        return {\n            textWidth: Math.max(...lines.map((line)=>line.width)),\n            textHeight: Math.round(textHeight * 100) / 100,\n            lineCount,\n            lines,\n            lineHeightPx: lineHeightInfo.lineHeightPx,\n            firstBaselineOffset,\n            willOverflow,\n            fits: !willOverflow,\n            availableHeight: frameMetrics.contentArea.height,\n            overflowAmount: willOverflow ? textHeight - frameMetrics.contentArea.height : 0,\n            // Detailed metrics for debugging\n            metrics: {\n                fontSize,\n                leading: textStyles.leading,\n                leadingType: textStyles.leadingType,\n                effectiveWidth,\n                tracking: trackingAdjustment,\n                spaceWidth\n            }\n        };\n    }\n    /**\r\n   * Calculate optimal font size to prevent overflow while maintaining design integrity\r\n   * @param {object} textMeasurement - Result from measureTextPrecisely\r\n   * @param {object} originalStyles - Original text styles\r\n   * @param {number} maxReduction - Maximum font size reduction allowed (0.0-1.0)\r\n   * @returns {object} Adjusted text styles or null if no adjustment needed\r\n   */ static calculateOptimalFontSize(textMeasurement, originalStyles, maxReduction = 0.25) {\n        if (!textMeasurement.willOverflow) {\n            return null; // No adjustment needed\n        }\n        const originalFontSize = parseFloat(originalStyles.fontSize) || 12;\n        const overflowRatio = textMeasurement.textHeight / textMeasurement.availableHeight;\n        console.log(\"\\uD83D\\uDD27 calculateOptimalFontSize:\", {\n            originalFontSize,\n            textHeight: textMeasurement.textHeight,\n            availableHeight: textMeasurement.availableHeight,\n            overflowRatio,\n            overflowAmount: textMeasurement.overflowAmount\n        });\n        // Calculate required scale factor to fit exactly\n        let scaleFactor = 1 / overflowRatio;\n        // Apply maximum reduction limit to preserve design integrity\n        const minAllowedScale = 1 - maxReduction;\n        const finalScaleFactor = Math.max(minAllowedScale, scaleFactor);\n        const newFontSize = originalFontSize * finalScaleFactor;\n        console.log(\"\\uD83D\\uDD27 Scale calculation:\", {\n            requiredScale: scaleFactor,\n            maxReduction,\n            minAllowedScale,\n            finalScaleFactor,\n            newFontSize\n        });\n        // Calculate if text will still overflow after adjustment\n        const willStillOverflow = finalScaleFactor > scaleFactor;\n        return {\n            adjustedStyles: {\n                ...originalStyles,\n                fontSize: `${Math.round(newFontSize * 100) / 100}px`,\n                // Also adjust line-height proportionally if needed\n                lineHeight: overflowRatio > 1.3 ? Math.max(0.9, parseFloat(originalStyles.lineHeight || \"1.2\") * finalScaleFactor) : originalStyles.lineHeight\n            },\n            adjustmentType: willStillOverflow ? \"partial_font_reduction\" : \"font_size_optimized\",\n            scaleFactor: finalScaleFactor,\n            originalFontSize,\n            newFontSize: Math.round(newFontSize * 100) / 100,\n            stillOverflows: willStillOverflow,\n            reductionApplied: ((1 - finalScaleFactor) * 100).toFixed(1) + \"%\"\n        };\n    }\n    /**\r\n   * Generate CSS styles with InDesign-accurate typography\r\n   * @param {object} inDesignFormatting - Formatting object from InDesign\r\n   * @param {object} frameMetrics - Text frame metrics\r\n   * @returns {object} CSS styles optimized for InDesign compatibility\r\n   */ static generateInDesignCSS(inDesignFormatting, frameMetrics) {\n        const fontSize = inDesignFormatting.fontSize || 12;\n        // Convert leading to CSS\n        const lineHeightInfo = this.convertLeadingToCSS(inDesignFormatting.leading, fontSize, inDesignFormatting.leadingType);\n        // Calculate first baseline offset for positioning\n        const firstBaselineOffset = this.calculateFirstBaselineOffset(inDesignFormatting.firstBaselineOffset || \"AscentOffset\", fontSize, lineHeightInfo.lineHeightPx);\n        return {\n            // Typography\n            fontSize: `${fontSize}px`,\n            lineHeight: lineHeightInfo.cssLineHeight,\n            fontFamily: inDesignFormatting.fontFamily || \"Arial, sans-serif\",\n            fontWeight: inDesignFormatting.fontWeight || \"normal\",\n            fontStyle: inDesignFormatting.fontStyle || \"normal\",\n            // Advanced typography\n            letterSpacing: inDesignFormatting.tracking ? `${inDesignFormatting.tracking / 1000}em` : \"normal\",\n            textAlign: inDesignFormatting.textAlign || \"left\",\n            color: inDesignFormatting.color || \"black\",\n            // Layout and positioning - minimal padding to avoid excessive top spacing\n            padding: `${Math.min(2, firstBaselineOffset * 0.3)}px ${frameMetrics.insets.right}px ${frameMetrics.insets.bottom}px ${frameMetrics.insets.left}px`,\n            margin: 0,\n            // Overflow control\n            width: `${frameMetrics.contentArea.width}px`,\n            height: `${frameMetrics.contentArea.height}px`,\n            overflow: \"hidden\",\n            boxSizing: \"border-box\",\n            // Text layout optimization\n            whiteSpace: \"normal\",\n            wordWrap: \"break-word\",\n            overflowWrap: \"break-word\",\n            wordBreak: \"normal\",\n            // InDesign-specific adjustments\n            position: \"relative\",\n            top: frameMetrics.hasInsets ? `${frameMetrics.offsetY}px` : \"0\",\n            left: frameMetrics.hasInsets ? `${frameMetrics.offsetX}px` : \"0\",\n            // Debug info (can be removed in production)\n            \"--indesign-leading\": inDesignFormatting.leading,\n            \"--indesign-leading-type\": inDesignFormatting.leadingType,\n            \"--css-line-height\": lineHeightInfo.cssLineHeight,\n            \"--first-baseline-offset\": `${firstBaselineOffset}px`\n        };\n    }\n}\n// Export for use in other modules\nif ( true && module.exports) {\n    module.exports = InDesignTextMetrics;\n} else if (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/utils/InDesignTextMetrics.js\n");

/***/ }),

/***/ "./pages/view/[uploadId].js":
/*!**********************************!*\
  !*** ./pages/view/[uploadId].js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Viewer)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/index.js */ \"./lib/index.js\");\n/* harmony import */ var _lib_index_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_lib_index_js__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n // Added missing import for React.Fragment\n\nfunction Viewer() {\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    const { uploadId } = router.query;\n    const [documentData, setDocumentData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [selectedElement, setSelectedElement] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // CONFIGURATION OPTIONS - Make background detection flexible\n    const [backgroundConfig, setBackgroundConfig] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        mode: \"auto\",\n        customColor: \"#ffffff\",\n        allowColorAnalysis: true,\n        preferPaperColor: true,\n        fallbackToWhite: true\n    });\n    // Background color override controls\n    const backgroundModes = [\n        {\n            value: \"auto\",\n            label: \"Auto Detect\"\n        },\n        {\n            value: \"white\",\n            label: \"Force White\"\n        },\n        {\n            value: \"transparent\",\n            label: \"Transparent\"\n        },\n        {\n            value: \"custom\",\n            label: \"Custom Color\"\n        }\n    ];\n    const mmToPx = (mm)=>{\n        if (typeof mm !== \"number\") return 0;\n        return mm * 96 / 25.4;\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (uploadId) {\n            loadDocument();\n        }\n    }, [\n        uploadId\n    ]);\n    const loadDocument = async ()=>{\n        try {\n            const response = await fetch(`/api/document/${uploadId}`);\n            const data = await response.json();\n            console.log(\"\\uD83D\\uDCC4 Document data:\", data);\n            setDocumentData(data);\n            setLoading(false);\n        } catch (error) {\n            console.error(\"Error loading document:\", error);\n            setLoading(false);\n        }\n    };\n    // Use ColorUtils for color conversion\n    const convertColor = (colorRef)=>{\n        return _lib_index_js__WEBPACK_IMPORTED_MODULE_3__.ColorUtils.convertIdmlColorToRgb(colorRef);\n    };\n    const getDocumentBackgroundColor = (documentData)=>{\n        console.log(\"\\uD83D\\uDD0D Starting improved background color detection...\", {\n            config: backgroundConfig\n        });\n        // Handle configured background modes\n        if (backgroundConfig.mode === \"white\") {\n            console.log(\"\\uD83D\\uDCC4 ✅ Force white mode - returning white\");\n            return \"white\";\n        }\n        if (backgroundConfig.mode === \"transparent\") {\n            console.log(\"\\uD83D\\uDCC4 ✅ Transparent mode - returning transparent\");\n            return \"transparent\";\n        }\n        if (backgroundConfig.mode === \"custom\") {\n            console.log(\"\\uD83D\\uDCC4 ✅ Custom color mode - returning:\", backgroundConfig.customColor);\n            return backgroundConfig.customColor;\n        }\n        // Auto mode - continue with detection logic\n        // Strategy 1: Look for page background color in pageInfo\n        if (documentData.pageInfo?.backgroundColor && documentData.pageInfo.backgroundColor !== \"Color/None\") {\n            console.log(\"\\uD83D\\uDCC4 Found page background in pageInfo:\", documentData.pageInfo.backgroundColor);\n            return convertColor(documentData.pageInfo.backgroundColor);\n        }\n        // Strategy 2: Look for document background in document properties\n        if (documentData.document?.backgroundColor && documentData.document.backgroundColor !== \"Color/None\") {\n            console.log(\"\\uD83D\\uDCC4 Found document background in document:\", documentData.document.backgroundColor);\n            return convertColor(documentData.document.backgroundColor);\n        }\n        // Strategy 3: Look for spreads background color\n        if (documentData.spreads) {\n            for (const [spreadId, spread] of Object.entries(documentData.spreads)){\n                if (spread.backgroundColor && spread.backgroundColor !== \"Color/None\") {\n                    console.log(\"\\uD83D\\uDCC4 Found spread background color:\", spread.backgroundColor);\n                    return convertColor(spread.backgroundColor);\n                }\n            }\n        }\n        // STRATEGY 3.5: Analyze document colors for suitable background colors using ColorUtils\n        if (documentData.resources?.colors) {\n            console.log(\"\\uD83D\\uDCC4 Analyzing document colors for background candidates...\");\n            // Use ColorUtils to analyze and filter background colors\n            const colorKeys = Object.keys(documentData.resources.colors);\n            const backgroundCandidates = [];\n            for (const colorKey of colorKeys){\n                const analysis = _lib_index_js__WEBPACK_IMPORTED_MODULE_3__.ColorUtils.analyzeIdmlColorForBackground(colorKey);\n                if (analysis && analysis.isLightBackground) {\n                    console.log(`   ✅ Background candidate: ${colorKey} - ${analysis.reasoning} (${analysis.category})`);\n                    backgroundCandidates.push(colorKey);\n                } else if (analysis) {\n                    console.log(`   ❌ Not suitable: ${colorKey} - ${analysis.reasoning}`);\n                }\n            }\n            if (backgroundCandidates.length > 0) {\n                // Sort candidates using ColorUtils sorting function\n                const sortedCandidates = _lib_index_js__WEBPACK_IMPORTED_MODULE_3__.ColorUtils.sortColorsByLightness(backgroundCandidates);\n                const bestCandidate = sortedCandidates[0];\n                console.log(`📄 Found ${backgroundCandidates.length} background color candidates:`, sortedCandidates);\n                console.log(\"\\uD83D\\uDCC4 Using best background color candidate:\", bestCandidate);\n                return convertColor(bestCandidate);\n            }\n        }\n        // Strategy 4: Look for a large background rectangle element with actual fill\n        if (documentData.elements) {\n            const pageWidth = documentData.pageInfo?.dimensions?.width || 612;\n            const pageHeight = documentData.pageInfo?.dimensions?.height || 792;\n            console.log(\"\\uD83D\\uDCC4 Searching for background in\", documentData.elements.length, \"elements\");\n            console.log(\"\\uD83D\\uDCC4 Page dimensions:\", pageWidth, \"x\", pageHeight);\n            // Log all rectangles with their positions and fills for debugging\n            const rectangles = documentData.elements.filter((element)=>element.type === \"Rectangle\");\n            console.log(\"\\uD83D\\uDCC4 Found\", rectangles.length, \"rectangles:\");\n            let hasAnyActualFill = false;\n            rectangles.forEach((rect)=>{\n                console.log(`   - ${rect.id}: pos(${rect.position.x}, ${rect.position.y}) size(${rect.position.width} x ${rect.position.height}) fill: ${rect.fill}`);\n                if (rect.fill && rect.fill !== \"Color/None\") {\n                    hasAnyActualFill = true;\n                }\n            });\n            // CRITICAL FIX: If ALL rectangles have Color/None, check if we already found a background color above\n            if (!hasAnyActualFill) {\n                console.log(\"\\uD83D\\uDCC4 ✅ ALL rectangles have Color/None - but checking for document-level background first\");\n            // Don't immediately default to white - continue checking other strategies\n            }\n            // Strategy 4a: Look for rectangles that cover the entire page area with actual color\n            const fullPageElements = documentData.elements.filter((element)=>{\n                return element.type === \"Rectangle\" && element.position.x <= 50 && // More tolerance for left edge\n                element.position.y <= 50 && // More tolerance for top edge\n                element.position.width >= pageWidth * 0.8 && // Covers most width\n                element.position.height >= pageHeight * 0.8 && // Covers most height\n                element.fill && element.fill !== \"Color/None\";\n            });\n            if (fullPageElements.length > 0) {\n                // Get the largest background element (likely the page background)\n                const backgroundElement = fullPageElements.reduce((largest, current)=>{\n                    const largestArea = largest.position.width * largest.position.height;\n                    const currentArea = current.position.width * current.position.height;\n                    return currentArea > largestArea ? current : largest;\n                });\n                console.log(\"\\uD83D\\uDCC4 Found full-page background element:\", backgroundElement.id, \"with color:\", backgroundElement.fill);\n                return convertColor(backgroundElement.fill);\n            }\n            // Strategy 4b: Look for any large rectangle with actual color (even if not full page)\n            const largeColoredElements = documentData.elements.filter((element)=>{\n                const area = element.position.width * element.position.height;\n                const pageArea = pageWidth * pageHeight;\n                return element.type === \"Rectangle\" && area >= pageArea * 0.3 && // At least 30% of page area\n                element.fill && element.fill !== \"Color/None\";\n            });\n            if (largeColoredElements.length > 0) {\n                // Sort by area, largest first\n                largeColoredElements.sort((a, b)=>{\n                    const areaA = a.position.width * a.position.height;\n                    const areaB = b.position.width * b.position.height;\n                    return areaB - areaA;\n                });\n                const backgroundElement = largeColoredElements[0];\n                console.log(\"\\uD83D\\uDCC4 Found large colored background element:\", backgroundElement.id, \"with color:\", backgroundElement.fill);\n                return convertColor(backgroundElement.fill);\n            }\n        }\n        // Strategy 5: Look for Paper color specifically (InDesign's default) - if enabled\n        if (backgroundConfig.preferPaperColor && documentData.resources?.colors) {\n            const paperColor = Object.entries(documentData.resources.colors).find(([key, color])=>color.name === \"Paper\" || key === \"Color/Paper\");\n            if (paperColor) {\n                console.log(\"\\uD83D\\uDCC4 Found Paper color in resources - using as background\");\n                return convertColor(paperColor[0]);\n            }\n        }\n        // Strategy 6: Check for explicitly named background colors\n        if (documentData.resources?.colors) {\n            // Look for specific background color names\n            const backgroundColorNames = [\n                \"Page\",\n                \"Background\",\n                \"Document\",\n                \"Page Color\",\n                \"Background Color\"\n            ];\n            for (const colorName of backgroundColorNames){\n                const foundColor = Object.entries(documentData.resources.colors).find(([key, color])=>color.name && backgroundColorNames.some((name)=>color.name.toLowerCase().includes(name.toLowerCase())));\n                if (foundColor) {\n                    console.log(\"\\uD83D\\uDCC4 Found named background color:\", foundColor[1].name);\n                    return convertColor(foundColor[0]);\n                }\n            }\n        }\n        // Strategy 7: Check spreads data for background colors\n        if (documentData.spreads) {\n            console.log(\"\\uD83D\\uDCC4 Checking spreads for background colors...\");\n            for (const [spreadId, spread] of Object.entries(documentData.spreads)){\n                console.log(`   - Spread ${spreadId} keys:`, Object.keys(spread));\n                // Check for page background in spread\n                if (spread.pages) {\n                    for (const [index, page] of spread.pages.entries()){\n                        console.log(`     - Page ${index} keys:`, Object.keys(page));\n                        if (page.backgroundColor && page.backgroundColor !== \"Color/None\") {\n                            console.log(\"\\uD83D\\uDCC4 Found page background in spread page:\", page.backgroundColor);\n                            return convertColor(page.backgroundColor);\n                        }\n                    }\n                }\n            }\n        }\n        // Strategy 8: Check master spreads for background\n        if (documentData.masterSpreads) {\n            console.log(\"\\uD83D\\uDCC4 Checking master spreads for background colors...\");\n            for (const [masterId, master] of Object.entries(documentData.masterSpreads)){\n                console.log(`   - Master ${masterId} keys:`, Object.keys(master));\n                if (master.backgroundColor && master.backgroundColor !== \"Color/None\") {\n                    console.log(\"\\uD83D\\uDCC4 Found master spread background:\", master.backgroundColor);\n                    return convertColor(master.backgroundColor);\n                }\n            }\n        }\n        // Strategy 9: IMPROVED color analysis - only as last resort and only for colors actually used as fills - if enabled\n        if (backgroundConfig.allowColorAnalysis && documentData.resources?.colors && documentData.elements) {\n            console.log(\"\\uD83D\\uDCC4 Performing last-resort color analysis...\");\n            // First, get all colors actually used as fills in the document\n            const usedFillColors = new Set();\n            documentData.elements.forEach((element)=>{\n                if (element.fill && element.fill !== \"Color/None\") {\n                    usedFillColors.add(element.fill);\n                }\n            });\n            console.log(\"\\uD83D\\uDCC4 Colors actually used as fills:\", Array.from(usedFillColors));\n            if (usedFillColors.size === 0) {\n                console.log(\"\\uD83D\\uDCC4 ✅ No colors used as fills - confirming white background\");\n                return \"white\";\n            }\n            // Analyze only colors that are actually used as fills\n            const fillColorAnalysis = Array.from(usedFillColors).map((colorKey)=>{\n                const color = documentData.resources.colors[colorKey];\n                if (!color) return null;\n                // Extract CMYK values from the key if available\n                const cmykMatch = colorKey.match(/Color\\/C=([\\d.]+)\\s*M=([\\d.]+)\\s*Y=([\\d.]+)\\s*K=([\\d.]+)/);\n                if (!cmykMatch) return null;\n                const [, c, m, y, k] = cmykMatch.map((val)=>parseFloat(val));\n                console.log(`   → Analyzing used fill color ${colorKey}: C=${c} M=${m} Y=${y} K=${k}`);\n                // Calculate how \"background-like\" this color is\n                const colorfulness = c + m + y;\n                const darkness = k;\n                const lightness = 100 - darkness; // Higher is lighter\n                // Background colors should typically be:\n                // - Low colorfulness (neutral)\n                // - High lightness (bright)\n                // - Large coverage area\n                let backgroundScore = 0;\n                // Prefer lighter colors (white/paper-like)\n                backgroundScore += lightness * 2;\n                // Slightly penalize very colorful colors (unless they cover large areas)\n                if (colorfulness > 50) {\n                    backgroundScore -= colorfulness * 0.5;\n                }\n                // Calculate total area covered by this color\n                let totalArea = 0;\n                documentData.elements.forEach((element)=>{\n                    if (element.fill === colorKey) {\n                        totalArea += (element.position.width || 0) * (element.position.height || 0);\n                    }\n                });\n                const pageArea = (documentData.pageInfo?.dimensions?.width || 612) * (documentData.pageInfo?.dimensions?.height || 792);\n                const coverageRatio = totalArea / pageArea;\n                // Heavily boost colors that cover large areas\n                backgroundScore += coverageRatio * 1000;\n                console.log(`   📊 Background score for ${colorKey}: ${backgroundScore} (lightness: ${lightness}, colorfulness: ${colorfulness}, coverage: ${coverageRatio.toFixed(3)})`);\n                return {\n                    key: colorKey,\n                    color,\n                    cmyk: {\n                        c,\n                        m,\n                        y,\n                        k\n                    },\n                    backgroundScore,\n                    lightness,\n                    colorfulness,\n                    coverageRatio\n                };\n            }).filter(Boolean);\n            if (fillColorAnalysis.length > 0) {\n                // Sort by background score (highest first)\n                fillColorAnalysis.sort((a, b)=>b.backgroundScore - a.backgroundScore);\n                const bestBackgroundColor = fillColorAnalysis[0];\n                console.log(`🎨 Selected background color from fills: ${bestBackgroundColor.key} (score: ${bestBackgroundColor.backgroundScore})`);\n                console.log(`   Color details: C=${bestBackgroundColor.cmyk.c} M=${bestBackgroundColor.cmyk.m} Y=${bestBackgroundColor.cmyk.y} K=${bestBackgroundColor.cmyk.k}`);\n                return convertColor(bestBackgroundColor.key);\n            }\n        }\n        // Final Fallback: Use configured fallback\n        if (backgroundConfig.fallbackToWhite) {\n            console.log(\"\\uD83D\\uDCC4 ✅ No background color detected - using white fallback\");\n            return \"white\";\n        } else {\n            console.log(\"\\uD83D\\uDCC4 ✅ No background color detected - using transparent fallback\");\n            return \"transparent\";\n        }\n    };\n    const getFontWeight = (fontStyle)=>{\n        if (!fontStyle) return \"normal\";\n        const style = fontStyle.toLowerCase();\n        if (style.includes(\"bold\")) return \"bold\";\n        if (style.includes(\"light\")) return \"300\";\n        if (style.includes(\"medium\")) return \"500\";\n        if (style.includes(\"black\")) return \"900\";\n        return \"normal\";\n    };\n    const getFontStyle = (fontStyle)=>{\n        if (!fontStyle || fontStyle === \"\" || fontStyle === \"Regular\" || fontStyle === \"normal\") {\n            return \"normal\";\n        }\n        const style = fontStyle.toLowerCase().trim();\n        // FIXED: More precise italic detection - only exact matches or explicit italic styles\n        const willBeItalic = style === \"italic\" || style === \"oblique\" || style.endsWith(\" italic\") || style.startsWith(\"italic \") || style === \"it\" || style.includes(\" italic \") || style.endsWith(\"-italic\") || style.startsWith(\"italic-\");\n        // DEBUG: Log when italic is being applied\n        if (willBeItalic) {\n            console.log(\"\\uD83C\\uDFA8 Font style applying ITALIC:\", {\n                input: fontStyle,\n                inputType: typeof fontStyle,\n                normalizedInput: style,\n                reason: \"Matched italic pattern\"\n            });\n        }\n        if (willBeItalic) {\n            return \"italic\";\n        }\n        // Default to normal for everything else (including Regular, Medium, Bold, etc.)\n        return \"normal\";\n    };\n    const getTextAlign = (alignment)=>{\n        const alignments = {\n            LeftAlign: \"left\",\n            RightAlign: \"right\",\n            CenterAlign: \"center\",\n            LeftJustified: \"justify\",\n            RightJustified: \"justify\",\n            CenterJustified: \"center\",\n            FullyJustified: \"justify\"\n        };\n        return alignments[alignment] || \"left\";\n    };\n    // ENHANCED: Pixel-perfect text measurement using canvas for accuracy\n    const measureTextAccurately = (text, fontSize, fontFamily, fontWeight, fontStyle)=>{\n        // Create a canvas for precise text measurement\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        // Set font properties to match the text\n        ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n        const metrics = ctx.measureText(text);\n        const width = metrics.width;\n        const height = fontSize * 1.2; // Approximate height based on font size\n        return {\n            width,\n            height,\n            actualBounds: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n        };\n    };\n    // IMPROVED: Calculate text metrics with more generous spacing\n    const calculateTextMetrics = (text, fontSize, lineHeight, containerWidth, containerHeight, fontFamily = \"Arial\", fontWeight = \"normal\", fontStyle = \"normal\")=>{\n        if (!text) return {\n            willOverflow: false,\n            estimatedLines: 0,\n            estimatedTextHeight: 0\n        };\n        // Method 1: Canvas-based measurement (most accurate)\n        const canvasMetrics = measureTextAccurately(text, fontSize, fontFamily, fontWeight, fontStyle);\n        // IMPROVED: More generous line height calculation\n        let lineHeightPx;\n        if (typeof lineHeight === \"string\" && lineHeight.includes(\"px\")) {\n            lineHeightPx = parseFloat(lineHeight);\n        } else if (typeof lineHeight === \"number\") {\n            lineHeightPx = lineHeight * fontSize;\n        } else {\n            // Parse CSS line-height values like \"1.2\", \"1.5\", etc.\n            const numericLineHeight = parseFloat(lineHeight) || 1.2;\n            lineHeightPx = numericLineHeight * fontSize;\n        }\n        // FIXED: More accurate word-based wrapping like InDesign\n        const effectiveWidth = containerWidth - 4; // Account for padding\n        // Split text into words and measure actual width\n        const words = text.split(/\\s+/).filter((word)=>word.length > 0);\n        const lines = [];\n        let currentLine = \"\";\n        let currentLineWidth = 0;\n        // Create canvas context for accurate word measurement\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n        for(let i = 0; i < words.length; i++){\n            const word = words[i];\n            const wordWidth = ctx.measureText(word).width;\n            const spaceWidth = ctx.measureText(\" \").width;\n            // Check if adding this word would exceed the line width\n            const wordWithSpaceWidth = currentLine ? wordWidth + spaceWidth : wordWidth;\n            if (currentLine && currentLineWidth + wordWithSpaceWidth > effectiveWidth) {\n                // Start a new line\n                lines.push(currentLine);\n                currentLine = word;\n                currentLineWidth = wordWidth;\n            } else {\n                // Add word to current line\n                if (currentLine) {\n                    currentLine += \" \" + word;\n                    currentLineWidth += wordWithSpaceWidth;\n                } else {\n                    currentLine = word;\n                    currentLineWidth = wordWidth;\n                }\n            }\n        }\n        // Add the last line if it has content\n        if (currentLine) {\n            lines.push(currentLine);\n        }\n        const estimatedLines = Math.max(1, lines.length);\n        const estimatedTextHeight = estimatedLines * lineHeightPx;\n        // Account for padding in available height\n        const availableHeight = containerHeight - 4;\n        return {\n            estimatedLines,\n            estimatedTextHeight,\n            lineHeightPx,\n            availableHeight,\n            actualLines: lines,\n            willOverflow: estimatedTextHeight > availableHeight,\n            overfillRatio: estimatedTextHeight / availableHeight,\n            overflowSeverity: estimatedTextHeight > availableHeight * 1.5 ? \"severe\" : estimatedTextHeight > availableHeight * 1.2 ? \"moderate\" : \"minor\"\n        };\n    };\n    // ENHANCED: Multiple text fitting strategies for pixel-perfect display\n    const TEXT_FITTING_STRATEGIES = {\n        AUTO_SCALE: \"auto_scale\",\n        TRUNCATE: \"truncate\",\n        ALLOW_OVERFLOW: \"allow_overflow\",\n        PRECISE_FIT: \"precise_fit\",\n        COMPRESS_LINES: \"compress_lines\"\n    };\n    // Configuration - you can change this based on your preference\n    const [textFittingStrategy, setTextFittingStrategy] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(TEXT_FITTING_STRATEGIES.PRECISE_FIT);\n    const getOptimalTextStyles = (baseStyles, textMetrics, containerWidth, containerHeight, strategy = textFittingStrategy)=>{\n        if (!textMetrics.willOverflow) {\n            return {\n                styles: baseStyles,\n                wasAdjusted: false,\n                adjustmentDetails: null\n            };\n        }\n        const fontSize = parseFloat(baseStyles.fontSize);\n        const lineHeight = parseFloat(baseStyles.lineHeight);\n        switch(strategy){\n            case TEXT_FITTING_STRATEGIES.AUTO_SCALE:\n                {\n                    // Progressive font size reduction\n                    const maxReduction = textMetrics.overflowSeverity === \"severe\" ? 0.7 : textMetrics.overflowSeverity === \"moderate\" ? 0.8 : 0.9;\n                    const scaleFactor = Math.max(maxReduction, 1 / textMetrics.overfillRatio);\n                    return {\n                        styles: {\n                            ...baseStyles,\n                            fontSize: `${Math.max(8, fontSize * scaleFactor)}px`,\n                            lineHeight: Math.max(0.9, lineHeight * scaleFactor),\n                            overflow: \"hidden\"\n                        },\n                        wasAdjusted: true,\n                        adjustmentDetails: {\n                            type: \"font_scaled\",\n                            scaleFactor: scaleFactor,\n                            originalSize: fontSize,\n                            newSize: fontSize * scaleFactor\n                        }\n                    };\n                }\n            case TEXT_FITTING_STRATEGIES.TRUNCATE:\n                {\n                    // Calculate how many lines can fit\n                    const availableLines = Math.floor(textMetrics.availableHeight / textMetrics.lineHeightPx);\n                    const truncateAtLine = Math.max(1, availableLines);\n                    return {\n                        styles: {\n                            ...baseStyles,\n                            overflow: \"hidden\",\n                            textOverflow: \"ellipsis\",\n                            display: \"-webkit-box\",\n                            WebkitLineClamp: truncateAtLine,\n                            WebkitBoxOrient: \"vertical\",\n                            lineHeight: baseStyles.lineHeight\n                        },\n                        wasAdjusted: true,\n                        adjustmentDetails: {\n                            type: \"text_truncated\",\n                            visibleLines: truncateAtLine,\n                            totalLines: textMetrics.estimatedLines\n                        }\n                    };\n                }\n            case TEXT_FITTING_STRATEGIES.COMPRESS_LINES:\n                {\n                    // First try reducing line height, then font size if needed\n                    const targetHeight = textMetrics.availableHeight;\n                    const currentHeight = textMetrics.estimatedTextHeight;\n                    const compressionRatio = targetHeight / currentHeight;\n                    if (compressionRatio > 0.8) {\n                        // Just compress line height\n                        return {\n                            styles: {\n                                ...baseStyles,\n                                lineHeight: Math.max(0.8, lineHeight * compressionRatio),\n                                overflow: \"hidden\"\n                            },\n                            wasAdjusted: true,\n                            adjustmentDetails: {\n                                type: \"line_height_compressed\",\n                                originalLineHeight: lineHeight,\n                                newLineHeight: lineHeight * compressionRatio\n                            }\n                        };\n                    } else {\n                        // Compress both line height and font size\n                        const fontReduction = Math.max(0.8, compressionRatio);\n                        return {\n                            styles: {\n                                ...baseStyles,\n                                fontSize: `${fontSize * fontReduction}px`,\n                                lineHeight: Math.max(0.8, lineHeight * compressionRatio),\n                                overflow: \"hidden\"\n                            },\n                            wasAdjusted: true,\n                            adjustmentDetails: {\n                                type: \"full_compression\",\n                                fontReduction: fontReduction,\n                                lineHeightReduction: compressionRatio\n                            }\n                        };\n                    }\n                }\n            case TEXT_FITTING_STRATEGIES.PRECISE_FIT:\n                {\n                    // ENHANCED: More nuanced fitting approach\n                    const compressionNeeded = textMetrics.availableHeight / textMetrics.estimatedTextHeight;\n                    if (compressionNeeded >= 0.95) {\n                        // Text fits well, just ensure no overflow\n                        return {\n                            styles: {\n                                ...baseStyles,\n                                overflow: \"hidden\"\n                            },\n                            wasAdjusted: false,\n                            adjustmentDetails: {\n                                type: \"no_adjustment_needed\"\n                            }\n                        };\n                    } else if (compressionNeeded > 0.85) {\n                        // Minor adjustment - just reduce line height slightly\n                        const lineHeightReduction = Math.max(0.9, compressionNeeded * 1.05);\n                        return {\n                            styles: {\n                                ...baseStyles,\n                                lineHeight: Math.max(0.9, parseFloat(baseStyles.lineHeight) * lineHeightReduction),\n                                overflow: \"hidden\"\n                            },\n                            wasAdjusted: true,\n                            adjustmentDetails: {\n                                type: \"minor_line_height_adjustment\",\n                                lineHeightReduction,\n                                originalLineHeight: baseStyles.lineHeight\n                            }\n                        };\n                    } else if (compressionNeeded > 0.7) {\n                        // Moderate adjustment - compress both font and line height proportionally\n                        const fontScale = Math.max(0.9, Math.sqrt(compressionNeeded)); // Less aggressive font scaling\n                        const lineScale = Math.max(0.85, compressionNeeded / fontScale);\n                        return {\n                            styles: {\n                                ...baseStyles,\n                                fontSize: `${fontSize * fontScale}px`,\n                                lineHeight: Math.max(0.85, parseFloat(baseStyles.lineHeight) * lineScale),\n                                overflow: \"hidden\"\n                            },\n                            wasAdjusted: true,\n                            adjustmentDetails: {\n                                type: \"moderate_dual_adjustment\",\n                                fontScale,\n                                lineScale,\n                                compressionNeeded\n                            }\n                        };\n                    } else {\n                        // Major adjustment - apply reasonable compression then allow slight overflow\n                        const maxFontScale = 0.85; // Less aggressive than before\n                        const maxLineScale = 0.8; // Less aggressive than before\n                        return {\n                            styles: {\n                                ...baseStyles,\n                                fontSize: `${fontSize * maxFontScale}px`,\n                                lineHeight: Math.max(0.8, parseFloat(baseStyles.lineHeight) * maxLineScale),\n                                overflow: \"hidden\",\n                                // Allow some overflow rather than harsh truncation\n                                maxHeight: `${textMetrics.availableHeight}px`\n                            },\n                            wasAdjusted: true,\n                            adjustmentDetails: {\n                                type: \"major_adjustment_with_overflow\",\n                                fontScale: maxFontScale,\n                                lineScale: maxLineScale,\n                                allowedOverflow: true\n                            }\n                        };\n                    }\n                }\n            case TEXT_FITTING_STRATEGIES.ALLOW_OVERFLOW:\n            default:\n                {\n                    return {\n                        styles: {\n                            ...baseStyles,\n                            overflow: \"visible\"\n                        },\n                        wasAdjusted: false,\n                        adjustmentDetails: {\n                            type: \"overflow_allowed\"\n                        }\n                    };\n                }\n        }\n    };\n    const renderFormattedText = (story, containerHeight = null, adjustedFontSize = null)=>{\n        if (!story.formattedContent || !Array.isArray(story.formattedContent)) {\n            // Use CSS to preserve all whitespace and newlines\n            if (typeof story.text === \"string\") {\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    style: {\n                        whiteSpace: \"pre-line\"\n                    },\n                    children: story.text\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                    lineNumber: 901,\n                    columnNumber: 16\n                }, this);\n            }\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                children: story.text\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                lineNumber: 903,\n                columnNumber: 14\n            }, this);\n        }\n        // DEBUG: Count line breaks in formatted content\n        const lineBreakCount = story.formattedContent.filter((item)=>item.formatting?.isBreak).length;\n        const consecutiveBreaks = [];\n        let currentBreakGroup = [];\n        story.formattedContent.forEach((item, index)=>{\n            if (item.formatting?.isBreak) {\n                currentBreakGroup.push({\n                    index,\n                    source: item.formatting.source,\n                    breakType: item.formatting.breakType\n                });\n            } else if (currentBreakGroup.length > 0) {\n                if (currentBreakGroup.length > 1) {\n                    consecutiveBreaks.push(currentBreakGroup);\n                }\n                currentBreakGroup = [];\n            }\n        });\n        if (currentBreakGroup.length > 1) {\n            consecutiveBreaks.push(currentBreakGroup);\n        }\n        console.log(`🎨 Rendering formatted text with ${lineBreakCount} total line breaks`);\n        if (consecutiveBreaks.length > 0) {\n            console.log(`🎨 Found ${consecutiveBreaks.length} groups of consecutive line breaks:`, consecutiveBreaks);\n        }\n        return story.formattedContent.map((content, index)=>{\n            // FIXED: Render ALL line breaks to preserve user's intended spacing\n            if (content.formatting?.isBreak) {\n                // Render any type of line break - don't filter based on source\n                console.log(`🎨 Rendering line break ${index}: source=${content.formatting.source}, type=${content.formatting.breakType}`);\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, index, false, {\n                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                    lineNumber: 950,\n                    columnNumber: 18\n                }, this);\n            }\n            const formatting = content.formatting || {};\n            // CRITICAL FIX: Use adjusted font size if overflow prevention was applied\n            const originalFontSize = formatting.fontSize || story.styling?.fontSize || 12;\n            const fontSize = adjustedFontSize || originalFontSize;\n            // DEBUG: Log style resolution for any text with formatting applied (generic check)\n            const hasFormatting = formatting.fontStyle || formatting.characterStyle || formatting.paragraphStyle;\n            const finalFontStyle = getFontStyle(formatting.fontStyle);\n            if (hasFormatting || finalFontStyle === \"italic\") {\n                console.log(\"\\uD83C\\uDFA8 Style resolution for text:\", JSON.stringify(content.text?.substring(0, 20) + \"...\"), {\n                    rawFormatting: formatting,\n                    resolvedFontStyle: formatting.fontStyle,\n                    storyDefaultStyle: story.styling?.fontStyle,\n                    finalFontStyle: finalFontStyle,\n                    characterStyle: formatting.characterStyle,\n                    paragraphStyle: formatting.paragraphStyle\n                });\n                // WARN: Alert if italic is being applied when it shouldn't be\n                if (finalFontStyle === \"italic\" && (!formatting.fontStyle || formatting.fontStyle === \"Regular\")) {\n                    console.warn(\"⚠️  UNEXPECTED ITALIC: Text is being styled as italic but fontStyle is:\", formatting.fontStyle);\n                }\n            }\n            // IMPROVED: More generous line height calculation for individual spans\n            let lineHeight = \"inherit\"; // Inherit from parent container\n            if (formatting.effectiveLineHeight) {\n                lineHeight = formatting.effectiveLineHeight;\n            } else if (formatting.leading !== undefined) {\n                if (formatting.leading === \"auto\") {\n                    lineHeight = \"inherit\";\n                } else if (typeof formatting.leading === \"number\") {\n                    // IMPROVED: More generous line height range to prevent text chopping\n                    const ratio = formatting.leading / fontSize;\n                    lineHeight = Math.max(1.1, Math.min(2.5, ratio)); // More generous range\n                }\n            }\n            const style = {\n                fontSize: `${fontSize}px`,\n                fontFamily: formatting.fontFamily || story.styling?.fontFamily || \"Arial, sans-serif\",\n                fontWeight: getFontWeight(formatting.fontStyle),\n                fontStyle: getFontStyle(formatting.fontStyle),\n                color: convertColor(formatting.fillColor) || \"black\",\n                textAlign: getTextAlign(formatting.alignment),\n                lineHeight: lineHeight,\n                letterSpacing: formatting.tracking ? `${formatting.tracking / 1000}em` : \"normal\",\n                // FIXED: Remove margins that could cause spacing issues\n                margin: 0,\n                padding: 0,\n                // Only apply indentation if explicitly specified\n                ...formatting.leftIndent && {\n                    marginLeft: `${formatting.leftIndent}px`\n                },\n                ...formatting.rightIndent && {\n                    marginRight: `${formatting.rightIndent}px`\n                },\n                ...formatting.firstLineIndent && {\n                    textIndent: `${formatting.firstLineIndent}px`\n                },\n                ...formatting.spaceBefore && {\n                    marginTop: `${formatting.spaceBefore}px`\n                },\n                ...formatting.spaceAfter && {\n                    marginBottom: `${formatting.spaceAfter}px`\n                },\n                textDecoration: \"none\"\n            };\n            // CRITICAL FIX: Add space after span if needed to prevent word joining\n            const currentText = content.text || \"\";\n            const nextContent = story.formattedContent[index + 1];\n            const needsSpaceAfter = nextContent && !nextContent.formatting?.isBreak && !currentText.endsWith(\" \") && !currentText.endsWith(\"\\n\") && nextContent.text && !nextContent.text.startsWith(\" \") && !nextContent.text.startsWith(\"\\n\");\n            // DEBUG: Log space insertion for problematic text\n            if (currentText.includes(\"pa\") && nextContent?.text?.includes(\"voluptusda\") || currentText.includes(\"voluptusda\") && index > 0) {\n                console.log(`🔧 Space insertion check [${index}]:`, {\n                    currentText: JSON.stringify(currentText),\n                    nextText: nextContent ? JSON.stringify(nextContent.text) : \"none\",\n                    needsSpaceAfter,\n                    currentEndsWithSpace: currentText.endsWith(\" \"),\n                    nextStartsWithSpace: nextContent?.text?.startsWith(\" \")\n                });\n            }\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        style: style,\n                        children: content.text\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1078,\n                        columnNumber: 13\n                    }, this),\n                    needsSpaceAfter && \" \"\n                ]\n            }, index, true, {\n                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                lineNumber: 1077,\n                columnNumber: 11\n            }, this);\n        }).filter(Boolean); // Remove null entries from skipped line breaks\n    };\n    const getStoryStyles = (story, containerHeight = null, containerWidth = null)=>{\n        const styling = story.styling || {};\n        const fontSize = styling.fontSize || 12;\n        // IMPROVED: More generous line height calculation to prevent text chopping\n        let lineHeight = \"1.3\"; // More generous default CSS line-height\n        if (styling.effectiveLineHeight) {\n            lineHeight = styling.effectiveLineHeight;\n        } else if (styling.leading !== undefined) {\n            if (styling.leading === \"auto\") {\n                lineHeight = \"1.3\"; // More generous auto line height\n            } else if (typeof styling.leading === \"number\") {\n                // Convert InDesign points to CSS line-height ratio, more generous range\n                const ratio = styling.leading / fontSize;\n                lineHeight = Math.max(1.1, Math.min(2.5, ratio)).toString(); // More generous range\n            }\n        }\n        return {\n            fontSize: `${fontSize}px`,\n            fontFamily: styling.fontFamily || \"Arial, sans-serif\",\n            fontWeight: getFontWeight(styling.fontStyle),\n            fontStyle: getFontStyle(styling.fontStyle),\n            color: convertColor(styling.fillColor) || \"black\",\n            textAlign: getTextAlign(styling.alignment),\n            lineHeight: lineHeight,\n            letterSpacing: styling.tracking ? `${styling.tracking / 1000}em` : \"normal\",\n            // IMPROVED: Minimal padding to prevent container size conflicts\n            padding: \"1px 2px\",\n            margin: 0,\n            // FIXED: Use full container size, let CSS handle overflow properly\n            height: \"100%\",\n            width: \"100%\",\n            minHeight: `${fontSize * 1.4}px`,\n            wordWrap: \"break-word\",\n            overflow: \"visible\",\n            boxSizing: \"border-box\",\n            // IMPROVED: Better text layout handling\n            display: \"block\",\n            whiteSpace: \"pre-wrap\",\n            wordBreak: \"break-word\",\n            overflowWrap: \"break-word\",\n            // IMPROVED: Allow text to flow naturally\n            textOverflow: \"visible\",\n            lineClamp: \"none\"\n        };\n    };\n    // ENHANCED: Extract InDesign-accurate formatting for precise text measurement\n    const getInDesignAccurateFormatting = (story)=>{\n        const styling = story.styling || {};\n        const firstFormatted = story.formattedContent?.find((item)=>item.formatting && !item.formatting.isBreak);\n        const formatting = firstFormatted?.formatting || styling;\n        return {\n            fontSize: formatting.fontSize || styling.fontSize || 12,\n            fontFamily: formatting.fontFamily || styling.fontFamily || \"Arial, sans-serif\",\n            fontWeight: getFontWeight(formatting.fontStyle || styling.fontStyle),\n            fontStyle: getFontStyle(formatting.fontStyle || styling.fontStyle),\n            color: convertColor(formatting.fillColor || styling.fillColor) || \"black\",\n            textAlign: getTextAlign(formatting.alignment || styling.alignment),\n            // InDesign-specific properties for precise measurement\n            leading: formatting.leading || styling.leading || \"auto\",\n            leadingType: formatting.leadingType || styling.leadingType || \"auto\",\n            tracking: formatting.tracking || styling.tracking || 0,\n            baselineShift: formatting.baselineShift || 0,\n            // Text frame properties\n            firstBaselineOffset: formatting.firstBaselineOffset || \"AscentOffset\",\n            verticalJustification: formatting.verticalJustification || \"TopAlign\"\n        };\n    };\n    if (loading) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            style: {\n                padding: \"20px\"\n            },\n            children: \"Loading document...\"\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n            lineNumber: 1179,\n            columnNumber: 12\n        }, this);\n    }\n    if (!documentData) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            style: {\n                padding: \"20px\"\n            },\n            children: \"Error loading document\"\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n            lineNumber: 1183,\n            columnNumber: 12\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            display: \"flex\",\n            height: \"100vh\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    width: \"400px\",\n                    backgroundColor: \"#f5f5f5\",\n                    padding: \"20px\",\n                    overflowY: \"auto\"\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            backgroundColor: \"#e3f2fd\",\n                            padding: \"12px\",\n                            borderRadius: \"6px\",\n                            marginBottom: \"16px\",\n                            border: \"1px solid #2196f3\"\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                style: {\n                                    margin: \"0 0 8px 0\",\n                                    color: \"#1976d2\",\n                                    fontSize: \"14px\"\n                                },\n                                children: \"\\uD83C\\uDFAF Text Fitting Strategy\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1207,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                value: textFittingStrategy,\n                                onChange: (e)=>setTextFittingStrategy(e.target.value),\n                                style: {\n                                    width: \"100%\",\n                                    padding: \"6px\",\n                                    borderRadius: \"4px\",\n                                    border: \"1px solid #ccc\",\n                                    fontSize: \"12px\"\n                                },\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: TEXT_FITTING_STRATEGIES.PRECISE_FIT,\n                                        children: \"\\uD83C\\uDFAF Precise Fit (InDesign-style)\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1223,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: TEXT_FITTING_STRATEGIES.AUTO_SCALE,\n                                        children: \"\\uD83D\\uDCCF Auto Scale Font\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1226,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: TEXT_FITTING_STRATEGIES.TRUNCATE,\n                                        children: \"✂️ Truncate with Ellipsis\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1229,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: TEXT_FITTING_STRATEGIES.COMPRESS_LINES,\n                                        children: \"\\uD83D\\uDCCA Compress Line Height\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1232,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: TEXT_FITTING_STRATEGIES.ALLOW_OVERFLOW,\n                                        children: \"\\uD83C\\uDF0A Allow Overflow\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1235,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1212,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    fontSize: \"10px\",\n                                    color: \"#666\",\n                                    marginTop: \"4px\"\n                                },\n                                children: [\n                                    textFittingStrategy === TEXT_FITTING_STRATEGIES.PRECISE_FIT && \"Smart font & line height adjustment with truncation fallback\",\n                                    textFittingStrategy === TEXT_FITTING_STRATEGIES.AUTO_SCALE && \"Reduce font size proportionally to fit container\",\n                                    textFittingStrategy === TEXT_FITTING_STRATEGIES.TRUNCATE && \"Cut off text with ellipsis when it overflows\",\n                                    textFittingStrategy === TEXT_FITTING_STRATEGIES.COMPRESS_LINES && \"Reduce line height first, then font size\",\n                                    textFittingStrategy === TEXT_FITTING_STRATEGIES.ALLOW_OVERFLOW && \"Let text overflow naturally (original behavior)\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1239,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1198,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            backgroundColor: \"#fff3e0\",\n                            padding: \"12px\",\n                            borderRadius: \"6px\",\n                            marginBottom: \"16px\",\n                            border: \"1px solid #ff9800\"\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                style: {\n                                    margin: \"0 0 8px 0\",\n                                    color: \"#f57700\",\n                                    fontSize: \"14px\"\n                                },\n                                children: \"\\uD83C\\uDFA8 Background Color\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1263,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                value: backgroundConfig.mode,\n                                onChange: (e)=>setBackgroundConfig({\n                                        ...backgroundConfig,\n                                        mode: e.target.value\n                                    }),\n                                style: {\n                                    width: \"100%\",\n                                    padding: \"6px\",\n                                    borderRadius: \"4px\",\n                                    border: \"1px solid #ccc\",\n                                    fontSize: \"12px\",\n                                    marginBottom: \"8px\"\n                                },\n                                children: backgroundModes.map((mode)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: mode.value,\n                                        children: mode.label\n                                    }, mode.value, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1285,\n                                        columnNumber: 15\n                                    }, this))\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1270,\n                                columnNumber: 11\n                            }, this),\n                            backgroundConfig.mode === \"custom\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    marginBottom: \"8px\"\n                                },\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        style: {\n                                            fontSize: \"11px\",\n                                            color: \"#666\",\n                                            display: \"block\",\n                                            marginBottom: \"4px\"\n                                        },\n                                        children: \"Custom Color:\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1294,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                        type: \"color\",\n                                        value: backgroundConfig.customColor,\n                                        onChange: (e)=>setBackgroundConfig({\n                                                ...backgroundConfig,\n                                                customColor: e.target.value\n                                            }),\n                                        style: {\n                                            width: \"100%\",\n                                            height: \"30px\",\n                                            border: \"1px solid #ccc\",\n                                            borderRadius: \"4px\"\n                                        }\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1304,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1293,\n                                columnNumber: 13\n                            }, this),\n                            backgroundConfig.mode === \"auto\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    fontSize: \"11px\",\n                                    marginTop: \"8px\"\n                                },\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            marginBottom: \"4px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                                type: \"checkbox\",\n                                                checked: backgroundConfig.preferPaperColor,\n                                                onChange: (e)=>setBackgroundConfig({\n                                                        ...backgroundConfig,\n                                                        preferPaperColor: e.target.checked\n                                                    }),\n                                                style: {\n                                                    marginRight: \"6px\"\n                                                }\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1333,\n                                                columnNumber: 17\n                                            }, this),\n                                            \"Prefer Paper color\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1326,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            marginBottom: \"4px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                                type: \"checkbox\",\n                                                checked: backgroundConfig.allowColorAnalysis,\n                                                onChange: (e)=>setBackgroundConfig({\n                                                        ...backgroundConfig,\n                                                        allowColorAnalysis: e.target.checked\n                                                    }),\n                                                style: {\n                                                    marginRight: \"6px\"\n                                                }\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1353,\n                                                columnNumber: 17\n                                            }, this),\n                                            \"Allow color analysis\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1346,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                                type: \"checkbox\",\n                                                checked: backgroundConfig.fallbackToWhite,\n                                                onChange: (e)=>setBackgroundConfig({\n                                                        ...backgroundConfig,\n                                                        fallbackToWhite: e.target.checked\n                                                    }),\n                                                style: {\n                                                    marginRight: \"6px\"\n                                                }\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1367,\n                                                columnNumber: 17\n                                            }, this),\n                                            \"Fallback to white\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1366,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1325,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    marginTop: \"8px\",\n                                    padding: \"6px\",\n                                    backgroundColor: \"#f5f5f5\",\n                                    borderRadius: \"3px\",\n                                    fontSize: \"11px\"\n                                },\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                        children: \"Current:\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1393,\n                                        columnNumber: 13\n                                    }, this),\n                                    \" \",\n                                    documentData ? getDocumentBackgroundColor(documentData) : \"Loading...\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1384,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1254,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            backgroundColor: \"#f9f9f9\",\n                            padding: \"8px\",\n                            borderRadius: \"4px\",\n                            marginBottom: \"16px\",\n                            fontSize: \"11px\"\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    fontWeight: \"bold\",\n                                    marginBottom: \"6px\"\n                                },\n                                children: \"\\uD83D\\uDCCA Status Indicators:\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1410,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    display: \"flex\",\n                                    flexWrap: \"wrap\",\n                                    gap: \"8px\"\n                                },\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            gap: \"2px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                style: {\n                                                    backgroundColor: \"#4caf50\",\n                                                    color: \"white\",\n                                                    padding: \"1px 3px\",\n                                                    borderRadius: \"2px\"\n                                                },\n                                                children: \"\\uD83C\\uDFAF\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1415,\n                                                columnNumber: 15\n                                            }, this),\n                                            \"Precise Fit\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1414,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            gap: \"2px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                style: {\n                                                    backgroundColor: \"#2196f3\",\n                                                    color: \"white\",\n                                                    padding: \"1px 3px\",\n                                                    borderRadius: \"2px\"\n                                                },\n                                                children: \"\\uD83D\\uDCCF\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1428,\n                                                columnNumber: 15\n                                            }, this),\n                                            \"Font Scaled\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1427,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            gap: \"2px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                style: {\n                                                    backgroundColor: \"#ff9800\",\n                                                    color: \"white\",\n                                                    padding: \"1px 3px\",\n                                                    borderRadius: \"2px\"\n                                                },\n                                                children: \"✂️\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1441,\n                                                columnNumber: 15\n                                            }, this),\n                                            \"Truncated\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1440,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1413,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    display: \"flex\",\n                                    flexWrap: \"wrap\",\n                                    gap: \"8px\",\n                                    marginTop: \"4px\"\n                                },\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            gap: \"2px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                style: {\n                                                    backgroundColor: \"#f44336\",\n                                                    color: \"white\",\n                                                    padding: \"1px 2px\",\n                                                    borderRadius: \"1px\",\n                                                    fontSize: \"9px\"\n                                                },\n                                                children: \"S\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1463,\n                                                columnNumber: 15\n                                            }, this),\n                                            \"Severe overflow\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1462,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            gap: \"2px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                style: {\n                                                    backgroundColor: \"#ff9800\",\n                                                    color: \"white\",\n                                                    padding: \"1px 2px\",\n                                                    borderRadius: \"1px\",\n                                                    fontSize: \"9px\"\n                                                },\n                                                children: \"M\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1477,\n                                                columnNumber: 15\n                                            }, this),\n                                            \"Moderate\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1476,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            gap: \"2px\"\n                                        },\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                style: {\n                                                    backgroundColor: \"#ffeb3b\",\n                                                    color: \"black\",\n                                                    padding: \"1px 2px\",\n                                                    borderRadius: \"1px\",\n                                                    fontSize: \"9px\"\n                                                },\n                                                children: \"L\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1491,\n                                                columnNumber: 15\n                                            }, this),\n                                            \"Light\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1490,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1454,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1401,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        children: \"Document Info\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1507,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        children: [\n                            \"Version: \",\n                            documentData.document?.version\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1508,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        children: [\n                            \"Pages: \",\n                            documentData.document?.pageCount\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1509,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        children: [\n                            \"Size: \",\n                            Math.round(documentData.pageInfo?.dimensions?.width || 0),\n                            \" \\xd7\",\n                            \" \",\n                            Math.round(documentData.pageInfo?.dimensions?.height || 0),\n                            \" \",\n                            documentData.pageInfo?.dimensions?.units\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1510,\n                        columnNumber: 9\n                    }, this),\n                    documentData.packageInfo && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            marginTop: \"10px\",\n                            padding: \"8px\",\n                            backgroundColor: \"#e9ecef\",\n                            borderRadius: \"4px\"\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                children: \"Package Info:\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1526,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1527,\n                                columnNumber: 13\n                            }, this),\n                            \"Links: \",\n                            documentData.packageInfo.linksCount,\n                            \" \",\n                            documentData.packageInfo.hasLinks ? \"✅\" : \"❌\",\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1530,\n                                columnNumber: 13\n                            }, this),\n                            \"Fonts: \",\n                            documentData.packageInfo.fontsCount,\n                            \" \",\n                            documentData.packageInfo.hasFonts ? \"✅\" : \"❌\"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1518,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        style: {\n                            marginTop: \"20px\"\n                        },\n                        children: [\n                            \"Elements (\",\n                            documentData.elements?.length || 0,\n                            \")\"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1536,\n                        columnNumber: 9\n                    }, this),\n                    (documentData.elements || []).map((element, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            onClick: ()=>setSelectedElement(element),\n                            style: {\n                                padding: \"8px\",\n                                margin: \"4px 0\",\n                                backgroundColor: selectedElement?.id === element.id ? \"#007bff\" : \"white\",\n                                color: selectedElement?.id === element.id ? \"white\" : \"black\",\n                                border: \"1px solid #ddd\",\n                                cursor: \"pointer\",\n                                fontSize: \"12px\"\n                            },\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: element.type\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1554,\n                                    columnNumber: 13\n                                }, this),\n                                \" (\",\n                                element.id,\n                                \")\",\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1555,\n                                    columnNumber: 13\n                                }, this),\n                                element.name !== \"$ID/\" ? element.name : `${element.type}_${element.id}`,\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1559,\n                                    columnNumber: 13\n                                }, this),\n                                \"Pos: (\",\n                                Math.round(element.position.x),\n                                \",\",\n                                \" \",\n                                Math.round(element.position.y),\n                                \")\",\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1562,\n                                    columnNumber: 13\n                                }, this),\n                                \"Size: \",\n                                Math.round(element.position.width),\n                                \" \\xd7\",\n                                \" \",\n                                Math.round(element.position.height),\n                                element.isContentFrame && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1567,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            style: {\n                                                color: \"#ffc107\"\n                                            },\n                                            children: \"\\uD83D\\uDDBC️ Content Frame\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1568,\n                                            columnNumber: 17\n                                        }, this),\n                                        element.placedContent && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 1571,\n                                                    columnNumber: 21\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                    style: {\n                                                        fontSize: \"10px\",\n                                                        color: \"#6c757d\"\n                                                    },\n                                                    children: [\n                                                        \"Type: \",\n                                                        element.placedContent.imageTypeName,\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                            lineNumber: 1574,\n                                                            columnNumber: 23\n                                                        }, this),\n                                                        \"PPI: \",\n                                                        element.placedContent.actualPpi,\n                                                        \" →\",\n                                                        \" \",\n                                                        element.placedContent.effectivePpi,\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                            lineNumber: 1577,\n                                                            columnNumber: 23\n                                                        }, this),\n                                                        \"Scale:\",\n                                                        \" \",\n                                                        Math.round((element.placedContent.transform?.a || 1) * 100),\n                                                        \"%\"\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 1572,\n                                                    columnNumber: 21\n                                                }, this)\n                                            ]\n                                        }, void 0, true)\n                                    ]\n                                }, void 0, true),\n                                element.parentStory && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1590,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            style: {\n                                                color: \"#17a2b8\"\n                                            },\n                                            children: [\n                                                \"\\uD83D\\uDCDD Story: \",\n                                                element.parentStory\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1591,\n                                            columnNumber: 17\n                                        }, this)\n                                    ]\n                                }, void 0, true)\n                            ]\n                        }, element.id, true, {\n                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                            lineNumber: 1540,\n                            columnNumber: 11\n                        }, this)),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        style: {\n                            marginTop: \"20px\"\n                        },\n                        children: \"Stories & Formatting\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                        lineNumber: 1599,\n                        columnNumber: 9\n                    }, this),\n                    Object.keys(documentData.stories || {}).map((storyId)=>{\n                        const story = documentData.stories[storyId];\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                padding: \"8px\",\n                                margin: \"4px 0\",\n                                backgroundColor: \"red\",\n                                border: \"1px solid #ddd\",\n                                fontSize: \"12px\"\n                            },\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: storyId\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1613,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1614,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: \"Text:\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1615,\n                                    columnNumber: 15\n                                }, this),\n                                ' \"',\n                                story.text?.substring(0, 50) || \"\",\n                                '...\"',\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1616,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: \"Words:\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1617,\n                                    columnNumber: 15\n                                }, this),\n                                \" \",\n                                story.wordCount,\n                                \" |\",\n                                \" \",\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: \"Chars:\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1618,\n                                    columnNumber: 15\n                                }, this),\n                                \" \",\n                                story.characterCount,\n                                story.styling && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    style: {\n                                        marginTop: \"8px\",\n                                        padding: \"4px\",\n                                        backgroundColor: \"#f8f9fa\",\n                                        borderRadius: \"2px\"\n                                    },\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"Styling:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1629,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1630,\n                                            columnNumber: 19\n                                        }, this),\n                                        \"Font: \",\n                                        story.styling.fontFamily,\n                                        \" \",\n                                        story.styling.fontStyle,\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1632,\n                                            columnNumber: 19\n                                        }, this),\n                                        \"Size: \",\n                                        story.styling.fontSize,\n                                        \"px\",\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1634,\n                                            columnNumber: 19\n                                        }, this),\n                                        \"Align: \",\n                                        story.styling.alignment,\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1636,\n                                            columnNumber: 19\n                                        }, this),\n                                        \"Color:\",\n                                        \" \",\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            style: {\n                                                backgroundColor: convertColor(story.styling.fillColor),\n                                                padding: \"2px 4px\",\n                                                color: \"white\",\n                                                fontSize: \"10px\",\n                                                borderRadius: \"2px\"\n                                            },\n                                            children: story.styling.fillColor\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1638,\n                                            columnNumber: 19\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1621,\n                                    columnNumber: 17\n                                }, this),\n                                story.formattedContent && story.formattedContent.length > 1 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    style: {\n                                        marginTop: \"8px\",\n                                        padding: \"4px\",\n                                        backgroundColor: \"#fff3cd\",\n                                        borderRadius: \"2px\"\n                                    },\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"Rich Formatting:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1661,\n                                            columnNumber: 19\n                                        }, this),\n                                        \" \",\n                                        story.formattedContent.length,\n                                        \" segments\",\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 1663,\n                                            columnNumber: 19\n                                        }, this),\n                                        \"Line Breaks: \",\n                                        story.lineBreakCount\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 1653,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, storyId, true, {\n                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                            lineNumber: 1603,\n                            columnNumber: 13\n                        }, this);\n                    })\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                lineNumber: 1189,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    display: \"flex\",\n                    flex: 1,\n                    justifyContent: \"center\",\n                    alignItems: \"flex-start\",\n                    padding: \"20px\",\n                    overflow: \"auto\",\n                    backgroundColor: \"#e9ecef\"\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    style: {\n                        position: \"relative\",\n                        width: (documentData.pageInfo?.dimensions?.width || 612) + \"px\",\n                        height: (documentData.pageInfo?.dimensions?.height || 792) + \"px\",\n                        backgroundColor: (()=>{\n                            const bgColor = getDocumentBackgroundColor(documentData);\n                            console.log(\"\\uD83C\\uDFA8 Final background color being applied to DOCUMENT CANVAS only:\", bgColor);\n                            return bgColor;\n                        })(),\n                        margin: \"0 auto\",\n                        border: \"1px solid #ccc\",\n                        boxShadow: \"0 4px 8px rgba(0,0,0,0.1)\",\n                        overflow: \"hidden\",\n                        // FIXED: Ensure this container is clearly distinct from the outer background\n                        borderRadius: \"2px\"\n                    },\n                    children: [\n                        (()=>{\n                            // DEBUG: Log page dimensions and margins\n                            const pageWidth = documentData.pageInfo?.dimensions?.width || 612;\n                            const pageHeight = documentData.pageInfo?.dimensions?.height || 792;\n                            const marginLeft = documentData.pageInfo?.margins?.left || 0;\n                            const marginTop = documentData.pageInfo?.margins?.top || 0;\n                            const marginRight = documentData.pageInfo?.margins?.right || 0;\n                            const marginBottom = documentData.pageInfo?.margins?.bottom || 0;\n                            console.log(\"\\uD83D\\uDCD0 PAGE DIMENSIONS DEBUG:\");\n                            console.log(`   📏 Page size: ${pageWidth} × ${pageHeight}px`);\n                            console.log(`   📏 Margins: top=${marginTop}, right=${marginRight}, bottom=${marginBottom}, left=${marginLeft}`);\n                            console.log(`   📏 Content area: ${pageWidth - marginLeft - marginRight} × ${pageHeight - marginTop - marginBottom}px`);\n                            console.log(`   📏 Dotted border position: top=${marginTop}, left=${marginLeft}, right=${marginRight}, bottom=${marginBottom}`);\n                            return null; // This is just for debugging, return nothing\n                        })(),\n                        documentData.pageInfo?.margins && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                position: \"absolute\",\n                                top: documentData.pageInfo.margins.top + \"px\",\n                                left: documentData.pageInfo.margins.left + \"px\",\n                                right: documentData.pageInfo.margins.right + \"px\",\n                                bottom: documentData.pageInfo.margins.bottom + \"px\",\n                                border: \"3px dashed rgba(10, 0, 0, 0.3)\",\n                                pointerEvents: \"none\",\n                                zIndex: 100\n                            }\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                            lineNumber: 1733,\n                            columnNumber: 13\n                        }, this),\n                        (documentData.elements || []).map((element, index)=>{\n                            const isContentFrame = element.isContentFrame || element.hasPlacedContent;\n                            const hasPlacedContent = element.placedContent;\n                            console.log(\"\\uD83E\\uDDF1\", element.id, element.position.x - 478.031496063, element.position.y);\n                            const marginLeft = documentData.pageInfo?.margins?.left || 0;\n                            const marginTop = documentData.pageInfo?.margins?.top || 0;\n                            console.log(\"Margin : \", marginLeft, marginTop);\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                onClick: ()=>setSelectedElement(element),\n                                style: {\n                                    position: \"absolute\",\n                                    left: element.position.x + \"px\",\n                                    // left: marginLeft + element.position.x    + \"px\",\n                                    top: marginTop + element.position.y + \"px\",\n                                    width: element.position.width + \"px\",\n                                    height: element.position.height + \"px\",\n                                    backgroundColor: element.fill ? convertColor(element.fill) : \"transparent\",\n                                    border: selectedElement?.id === element.id ? \"2px solid #007bff\" : isContentFrame ? \"2px solid #00aaff\" : element.type === \"TextFrame\" ? \"1px solid #ff6b6b\" : \"1px dashed rgba(0,0,0,0.3)\",\n                                    cursor: \"pointer\",\n                                    overflow: \"visible\",\n                                    transform: element.position.rotation ? `rotate(${element.position.rotation}deg)` : undefined,\n                                    transformOrigin: \"center center\",\n                                    zIndex: index,\n                                    boxSizing: \"border-box\",\n                                    boxShadow: isContentFrame ? \"0 0 0 1px rgba(0, 170, 255, 0.3)\" : \"none\"\n                                },\n                                title: `${element.type} (${element.id})${isContentFrame ? \" - Content Frame\" : \"\"}`,\n                                children: [\n                                    (hasPlacedContent && element.placedContent?.type === \"Image\" || element.linkedImage) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        style: {\n                                            position: \"absolute\",\n                                            width: \"100%\",\n                                            height: \"100%\",\n                                            overflow: \"hidden\"\n                                        },\n                                        children: [\n                                            element.linkedImage?.isEmbedded && element.linkedImage?.isExtracted ? // Handle extracted embedded images\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                                src: element.linkedImage.url,\n                                                alt: \"Extracted embedded content\",\n                                                style: {\n                                                    position: \"absolute\",\n                                                    left: \"0px\",\n                                                    top: \"0px\",\n                                                    width: \"100%\",\n                                                    height: \"100%\",\n                                                    objectFit: \"cover\",\n                                                    transformOrigin: \"center center\"\n                                                },\n                                                onError: (e)=>{\n                                                    console.error(\"Error loading extracted image:\", e);\n                                                    e.target.style.display = \"none\";\n                                                    e.target.nextSibling.style.display = \"flex\";\n                                                }\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1814,\n                                                columnNumber: 23\n                                            }, this) : element.linkedImage?.isEmbedded ? // Handle embedded placeholder when no extracted image\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                style: {\n                                                    position: \"absolute\",\n                                                    left: element.placedContent?.transform?.tx + \"px\" || 0,\n                                                    top: element.placedContent?.transform?.ty + \"px\" || 0,\n                                                    transform: `scale(${element.placedContent?.transform?.a || 1}, ${element.placedContent?.transform?.d || 1})`,\n                                                    transformOrigin: \"top left\",\n                                                    width: \"200px\",\n                                                    height: \"200px\",\n                                                    backgroundColor: \"#f0f0f0\",\n                                                    border: \"2px solid #007bff\",\n                                                    display: \"flex\",\n                                                    alignItems: \"center\",\n                                                    justifyContent: \"center\",\n                                                    fontSize: \"12px\",\n                                                    color: \"#007bff\",\n                                                    flexDirection: \"column\"\n                                                },\n                                                children: [\n                                                    \"\\uD83D\\uDDBC️ Embedded Image\",\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                        lineNumber: 1860,\n                                                        columnNumber: 25\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                        style: {\n                                                            fontSize: \"10px\"\n                                                        },\n                                                        children: element.linkedImage?.embeddedType\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                        lineNumber: 1861,\n                                                        columnNumber: 25\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                        lineNumber: 1864,\n                                                        columnNumber: 25\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                        style: {\n                                                            fontSize: \"10px\"\n                                                        },\n                                                        children: [\n                                                            \"PPI: \",\n                                                            element.placedContent?.actualPpi\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                        lineNumber: 1865,\n                                                        columnNumber: 25\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1834,\n                                                columnNumber: 23\n                                            }, this) : element.linkedImage?.url ? // Handle external images\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                                src: element.linkedImage.url,\n                                                alt: \"External linked content\",\n                                                style: {\n                                                    position: \"absolute\",\n                                                    left: element.placedContent?.transform?.tx + \"px\" || 0,\n                                                    top: element.placedContent?.transform?.ty + \"px\" || 0,\n                                                    transform: `scale(${element.placedContent?.transform?.a || 1}, ${element.placedContent?.transform?.d || 1})`,\n                                                    transformOrigin: \"top left\",\n                                                    width: \"100%\",\n                                                    height: \"100%\",\n                                                    objectFit: \"cover\"\n                                                }\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1871,\n                                                columnNumber: 23\n                                            }, this) : // Fallback placeholder\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                style: {\n                                                    position: \"absolute\",\n                                                    left: element.placedContent?.transform?.tx + \"px\",\n                                                    top: element.placedContent?.transform?.ty + \"px\",\n                                                    transform: `scale(${element.placedContent?.transform?.a || 1}, ${element.placedContent?.transform?.d || 1})`,\n                                                    transformOrigin: \"top left\",\n                                                    width: \"200px\",\n                                                    height: \"200px\",\n                                                    backgroundColor: \"#f0f0f0\",\n                                                    border: \"1px solid #ccc\",\n                                                    display: \"flex\",\n                                                    alignItems: \"center\",\n                                                    justifyContent: \"center\",\n                                                    fontSize: \"10px\",\n                                                    color: \"#666\"\n                                                },\n                                                children: [\n                                                    \"\\uD83D\\uDCF7 \",\n                                                    element.placedContent?.imageTypeName,\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                        lineNumber: 1914,\n                                                        columnNumber: 25\n                                                    }, this),\n                                                    element.placedContent?.actualPpi\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1893,\n                                                columnNumber: 23\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                style: {\n                                                    position: \"absolute\",\n                                                    left: element.placedContent?.transform?.tx + \"px\" || 0,\n                                                    top: element.placedContent?.transform?.ty + \"px\" || 0,\n                                                    transform: `scale(${element.placedContent?.transform?.a || 1}, ${element.placedContent?.transform?.d || 1})`,\n                                                    transformOrigin: \"top left\",\n                                                    width: \"200px\",\n                                                    height: \"200px\",\n                                                    backgroundColor: \"#ffeeee\",\n                                                    border: \"2px solid #ff6b6b\",\n                                                    display: \"none\",\n                                                    alignItems: \"center\",\n                                                    justifyContent: \"center\",\n                                                    fontSize: \"12px\",\n                                                    color: \"#ff6b6b\",\n                                                    flexDirection: \"column\"\n                                                },\n                                                children: \"❌ Image Load Error\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 1920,\n                                                columnNumber: 21\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 1803,\n                                        columnNumber: 19\n                                    }, this),\n                                    element.type === \"TextFrame\" && element.parentStory && documentData.stories[element.parentStory] && (()=>{\n                                        const story = documentData.stories[element.parentStory];\n                                        // ENHANCED: Calculate precise text frame metrics using InDesign-compatible system\n                                        const frameMetrics = _lib_index_js__WEBPACK_IMPORTED_MODULE_3__.InDesignTextMetrics.calculateTextFrameInsets(element, element.textFramePreferences);\n                                        // Get story formatting with InDesign-accurate properties\n                                        const storyFormatting = getInDesignAccurateFormatting(story);\n                                        // Clean text to remove excessive line breaks that could cause overflow\n                                        const cleanText = (story.text || \"\").replace(/\\n\\s*\\n/g, \"\\n\").trim();\n                                        // ENHANCED: Use InDesign-accurate text measurement\n                                        const textMeasurement = _lib_index_js__WEBPACK_IMPORTED_MODULE_3__.InDesignTextMetrics.measureTextPrecisely(cleanText, storyFormatting, frameMetrics);\n                                        // IMPROVED: Generate CSS styles with full container dimensions\n                                        let finalStyles = getStoryStyles(story, element.position.height, element.position.width);\n                                        let wasAdjusted = false;\n                                        let adjustmentDetails = null;\n                                        // IMPROVED: Use full container dimensions for overflow detection\n                                        const containerWidth = element.position.width; // Use full width\n                                        const containerHeight = element.position.height; // Use full height\n                                        // TEMPORARILY DISABLED: Apply overflow prevention if needed (may be causing text chopping)\n                                        if (false) {}\n                                        // Extract adjusted font size for text spans\n                                        const adjustedFontSize = wasAdjusted && adjustmentDetails ? adjustmentDetails.newFontSize : null;\n                                        const createTooltip = ()=>{\n                                            const baseInfo = `Story: ${element.parentStory}\\nFrame: ${element.position.width}×${element.position.height}px\\nContent: ${frameMetrics.contentArea.width}×${frameMetrics.contentArea.height}px`;\n                                            if (!wasAdjusted) {\n                                                return `${baseInfo}\\nText fits perfectly! ✅`;\n                                            }\n                                            return `${baseInfo}\\nAdjusted: ${adjustmentDetails.adjustmentType}\\nFont: ${adjustmentDetails.originalFontSize}px → ${adjustmentDetails.newFontSize}px\\nScale: ${(adjustmentDetails.scaleFactor * 100).toFixed(1)}%`;\n                                        };\n                                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            style: {\n                                                // HYBRID APPROACH: Use full frame size but apply insets as padding\n                                                position: \"absolute\",\n                                                top: \"0px\",\n                                                left: \"0px\",\n                                                width: `${element.position.width}px`,\n                                                height: `${element.position.height}px`,\n                                                // HYBRID: Apply insets as padding to create visual spacing without reducing text area too much\n                                                padding: `${frameMetrics.insets.top}px ${frameMetrics.insets.right}px ${frameMetrics.insets.bottom}px ${frameMetrics.insets.left}px`,\n                                                // Text styling from story\n                                                fontSize: `${finalStyles.fontSize}`,\n                                                fontFamily: finalStyles.fontFamily,\n                                                fontWeight: finalStyles.fontWeight,\n                                                fontStyle: finalStyles.fontStyle,\n                                                color: finalStyles.color,\n                                                textAlign: finalStyles.textAlign,\n                                                lineHeight: finalStyles.lineHeight,\n                                                letterSpacing: finalStyles.letterSpacing,\n                                                margin: 0,\n                                                // Text layout - allow overflow to prevent chopping\n                                                display: \"block\",\n                                                whiteSpace: \"pre-wrap\",\n                                                wordBreak: \"break-word\",\n                                                overflowWrap: \"break-word\",\n                                                overflow: \"visible\",\n                                                boxSizing: \"border-box\"\n                                            },\n                                            title: createTooltip(),\n                                            children: [\n                                                renderFormattedText(story, element.position.height, adjustedFontSize),\n                                                wasAdjusted && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    style: {\n                                                        position: \"absolute\",\n                                                        top: \"-2px\",\n                                                        left: \"-2px\",\n                                                        backgroundColor: adjustmentDetails?.stillOverflows ? \"#ff5722\" : \"#4caf50\",\n                                                        color: \"white\",\n                                                        fontSize: \"8px\",\n                                                        padding: \"1px 3px\",\n                                                        borderRadius: \"2px\",\n                                                        zIndex: 1000,\n                                                        pointerEvents: \"none\",\n                                                        fontFamily: \"monospace\"\n                                                    },\n                                                    children: adjustmentDetails?.stillOverflows ? \"⚠️\" : \"\\uD83C\\uDFAF\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2086,\n                                                    columnNumber: 27\n                                                }, this),\n                                                !wasAdjusted && !textMeasurement.willOverflow && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    style: {\n                                                        position: \"absolute\",\n                                                        top: \"-2px\",\n                                                        right: \"-2px\",\n                                                        backgroundColor: \"#2e7d32\",\n                                                        color: \"white\",\n                                                        fontSize: \"8px\",\n                                                        padding: \"1px 3px\",\n                                                        borderRadius: \"2px\",\n                                                        zIndex: 1000,\n                                                        pointerEvents: \"none\",\n                                                        fontFamily: \"monospace\"\n                                                    },\n                                                    children: \"✅\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2109,\n                                                    columnNumber: 27\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2044,\n                                            columnNumber: 23\n                                        }, this);\n                                    })(),\n                                    isContentFrame && !hasPlacedContent && !element.linkedImage?.isEmbedded && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        style: {\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            justifyContent: \"center\",\n                                            height: \"100%\",\n                                            fontSize: \"12px\",\n                                            color: \"#666\",\n                                            backgroundColor: \"rgba(0, 170, 255, 0.1)\",\n                                            flexDirection: \"column\"\n                                        },\n                                        children: [\n                                            \"\\uD83D\\uDDBC️ Content Frame\",\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 2149,\n                                                columnNumber: 23\n                                            }, this),\n                                            Math.round(element.position.width),\n                                            \"\\xd7\",\n                                            Math.round(element.position.height),\n                                            element.name && element.name !== \"$ID/\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                        lineNumber: 2154,\n                                                        columnNumber: 27\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                        style: {\n                                                            fontSize: \"10px\",\n                                                            fontStyle: \"italic\"\n                                                        },\n                                                        children: element.name\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                        lineNumber: 2155,\n                                                        columnNumber: 27\n                                                    }, this)\n                                                ]\n                                            }, void 0, true)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 2136,\n                                        columnNumber: 21\n                                    }, this),\n                                    !hasPlacedContent && element.type !== \"TextFrame\" && !isContentFrame && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        style: {\n                                            padding: \"4px\",\n                                            fontSize: \"10px\",\n                                            color: \"#999\",\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            justifyContent: \"center\",\n                                            height: \"100%\",\n                                            textAlign: \"center\"\n                                        },\n                                        children: [\n                                            element.type,\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                lineNumber: 2182,\n                                                columnNumber: 23\n                                            }, this),\n                                            Math.round(element.position.width),\n                                            \"\\xd7\",\n                                            Math.round(element.position.height)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                        lineNumber: 2169,\n                                        columnNumber: 21\n                                    }, this)\n                                ]\n                            }, element.id, true, {\n                                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                lineNumber: 1762,\n                                columnNumber: 15\n                            }, this);\n                        }),\n                        selectedElement && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                position: \"absolute\",\n                                top: \"10px\",\n                                right: \"10px\",\n                                backgroundColor: \"rgba(0, 123, 255, 0.95)\",\n                                color: \"white\",\n                                padding: \"12px\",\n                                borderRadius: \"6px\",\n                                fontSize: \"12px\",\n                                maxWidth: \"300px\",\n                                lineHeight: \"1.4\"\n                            },\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: selectedElement.type\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 2206,\n                                    columnNumber: 15\n                                }, this),\n                                \" (\",\n                                selectedElement.id,\n                                \")\",\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 2207,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: \"Position:\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 2208,\n                                    columnNumber: 15\n                                }, this),\n                                \" (\",\n                                Math.round(selectedElement.position.x),\n                                \",\",\n                                \" \",\n                                Math.round(selectedElement.position.y),\n                                \")\",\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 2211,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: \"Size:\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                    lineNumber: 2212,\n                                    columnNumber: 15\n                                }, this),\n                                \" \",\n                                Math.round(selectedElement.position.width),\n                                \" \\xd7\",\n                                \" \",\n                                Math.round(selectedElement.position.height),\n                                selectedElement.isContentFrame && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2217,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"\\uD83D\\uDDBC️ Content Frame\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2218,\n                                            columnNumber: 19\n                                        }, this),\n                                        selectedElement.placedContent && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2221,\n                                                    columnNumber: 23\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                                    children: \"Content:\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2222,\n                                                    columnNumber: 23\n                                                }, this),\n                                                \" \",\n                                                selectedElement.placedContent.imageTypeName,\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2224,\n                                                    columnNumber: 23\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                                    children: \"PPI:\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2225,\n                                                    columnNumber: 23\n                                                }, this),\n                                                \" \",\n                                                selectedElement.placedContent.actualPpi,\n                                                \" →\",\n                                                \" \",\n                                                selectedElement.placedContent.effectivePpi,\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2228,\n                                                    columnNumber: 23\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                                    children: \"Scale:\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                                    lineNumber: 2229,\n                                                    columnNumber: 23\n                                                }, this),\n                                                \" \",\n                                                Math.round((selectedElement.placedContent.transform?.a || 1) * 100),\n                                                \"% \\xd7\",\n                                                \" \",\n                                                Math.round((selectedElement.placedContent.transform?.d || 1) * 100),\n                                                \"%\"\n                                            ]\n                                        }, void 0, true)\n                                    ]\n                                }, void 0, true),\n                                selectedElement.parentStory && documentData.stories[selectedElement.parentStory] && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2245,\n                                            columnNumber: 21\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"\\uD83D\\uDCDD Text Story:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2246,\n                                            columnNumber: 21\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2247,\n                                            columnNumber: 21\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"Font:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2248,\n                                            columnNumber: 21\n                                        }, this),\n                                        \" \",\n                                        documentData.stories[selectedElement.parentStory].styling?.fontFamily,\n                                        \" \",\n                                        documentData.stories[selectedElement.parentStory].styling?.fontStyle,\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2257,\n                                            columnNumber: 21\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"Size:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2258,\n                                            columnNumber: 21\n                                        }, this),\n                                        \" \",\n                                        documentData.stories[selectedElement.parentStory].styling?.fontSize,\n                                        \"px\",\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2264,\n                                            columnNumber: 21\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"Words:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2265,\n                                            columnNumber: 21\n                                        }, this),\n                                        \" \",\n                                        documentData.stories[selectedElement.parentStory].wordCount\n                                    ]\n                                }, void 0, true),\n                                selectedElement.linkedImage?.isEmbedded && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2274,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"\\uD83D\\uDCCE Embedded Image:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2275,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2276,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"Type:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2277,\n                                            columnNumber: 19\n                                        }, this),\n                                        \" \",\n                                        selectedElement.linkedImage.embeddedType,\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2279,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"Data:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2280,\n                                            columnNumber: 19\n                                        }, this),\n                                        \" \",\n                                        selectedElement.linkedImage.embeddedData\n                                    ]\n                                }, void 0, true),\n                                selectedElement.linkedImage?.isPlaceholder && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2286,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"\\uD83D\\uDCCB Image Placeholder\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                                            lineNumber: 2287,\n                                            columnNumber: 19\n                                        }, this)\n                                    ]\n                                }, void 0, true)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                            lineNumber: 2192,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                    lineNumber: 1685,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n                lineNumber: 1673,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\Muhammad Umer Farooq\\\\Desktop\\\\IDML\\\\idml-parser\\\\pages\\\\view\\\\[uploadId].js\",\n        lineNumber: 1187,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/view/[uploadId].js\n");

/***/ }),

/***/ "fast-xml-parser":
/*!**********************************!*\
  !*** external "fast-xml-parser" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("fast-xml-parser");

/***/ }),

/***/ "next/dist/compiled/next-server/pages.runtime.dev.js":
/*!**********************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages.runtime.dev.js" ***!
  \**********************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages.runtime.dev.js");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

module.exports = require("react");

/***/ }),

/***/ "react-dom":
/*!****************************!*\
  !*** external "react-dom" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("react-dom");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "yauzl":
/*!************************!*\
  !*** external "yauzl" ***!
  \************************/
/***/ ((module) => {

module.exports = require("yauzl");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@swc"], () => (__webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2Fview%2F%5BuploadId%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Cview%5C%5BuploadId%5D.js&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();